{"ast":null,"code":"/* Tabulator v4.8.0 (c) Oliver Folkerd */\n'use strict'; // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nif (!Array.prototype.findIndex) {\n  Object.defineProperty(Array.prototype, 'findIndex', {\n    value: function value(predicate) {\n      // 1. Let O be ? ToObject(this value).\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n\n      var o = Object(this); // 2. Let len be ? ToLength(? Get(O, \"length\")).\n\n      var len = o.length >>> 0; // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n\n      if (typeof predicate !== 'function') {\n        throw new TypeError('predicate must be a function');\n      } // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n      var thisArg = arguments[1]; // 5. Let k be 0.\n\n      var k = 0; // 6. Repeat, while k < len\n\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kValue be ? Get(O, Pk).\n        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n        // d. If testResult is true, return k.\n        var kValue = o[k];\n\n        if (predicate.call(thisArg, kValue, k, o)) {\n          return k;\n        } // e. Increase k by 1.\n\n\n        k++;\n      } // 7. Return -1.\n\n\n      return -1;\n    }\n  });\n} // https://tc39.github.io/ecma262/#sec-array.prototype.find\n\n\nif (!Array.prototype.find) {\n  Object.defineProperty(Array.prototype, 'find', {\n    value: function value(predicate) {\n      // 1. Let O be ? ToObject(this value).\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n\n      var o = Object(this); // 2. Let len be ? ToLength(? Get(O, \"length\")).\n\n      var len = o.length >>> 0; // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n\n      if (typeof predicate !== 'function') {\n        throw new TypeError('predicate must be a function');\n      } // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n      var thisArg = arguments[1]; // 5. Let k be 0.\n\n      var k = 0; // 6. Repeat, while k < len\n\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kValue be ? Get(O, Pk).\n        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n        // d. If testResult is true, return kValue.\n        var kValue = o[k];\n\n        if (predicate.call(thisArg, kValue, k, o)) {\n          return kValue;\n        } // e. Increase k by 1.\n\n\n        k++;\n      } // 7. Return undefined.\n\n\n      return undefined;\n    }\n  });\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes#Polyfill\n\n\nif (!String.prototype.includes) {\n  String.prototype.includes = function (search, start) {\n    'use strict';\n\n    if (search instanceof RegExp) {\n      throw TypeError('first argument must not be a RegExp');\n    }\n\n    if (start === undefined) {\n      start = 0;\n    }\n\n    return this.indexOf(search, start) !== -1;\n  };\n} // https://tc39.github.io/ecma262/#sec-array.prototype.includes\n\n\nif (!Array.prototype.includes) {\n  Object.defineProperty(Array.prototype, 'includes', {\n    value: function value(searchElement, fromIndex) {\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      } // 1. Let O be ? ToObject(this value).\n\n\n      var o = Object(this); // 2. Let len be ? ToLength(? Get(O, \"length\")).\n\n      var len = o.length >>> 0; // 3. If len is 0, return false.\n\n      if (len === 0) {\n        return false;\n      } // 4. Let n be ? ToInteger(fromIndex).\n      //    (If fromIndex is undefined, this step produces the value 0.)\n\n\n      var n = fromIndex | 0; // 5. If n ≥ 0, then\n      //  a. Let k be n.\n      // 6. Else n < 0,\n      //  a. Let k be len + n.\n      //  b. If k < 0, let k be 0.\n\n      var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n      function sameValueZero(x, y) {\n        return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n      } // 7. Repeat, while k < len\n\n\n      while (k < len) {\n        // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n        // b. If SameValueZero(searchElement, elementK) is true, return true.\n        if (sameValueZero(o[k], searchElement)) {\n          return true;\n        } // c. Increase k by 1.\n\n\n        k++;\n      } // 8. Return false\n\n\n      return false;\n    }\n  });\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill\n\n\nif (typeof Object.assign !== 'function') {\n  // Must be writable: true, enumerable: false, configurable: true\n  Object.defineProperty(Object, \"assign\", {\n    value: function assign(target, varArgs) {\n      // .length of function is 2\n      'use strict';\n\n      if (target === null || target === undefined) {\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var to = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n\n        if (nextSource !== null && nextSource !== undefined) {\n          for (var nextKey in nextSource) {\n            // Avoid bugs when hasOwnProperty is shadowed\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n\n      return to;\n    },\n    writable: true,\n    configurable: true\n  });\n}\n\nvar ColumnManager = function ColumnManager(table) {\n  this.table = table; //hold parent table\n\n  this.blockHozScrollEvent = false;\n  this.headersElement = this.createHeadersElement();\n  this.element = this.createHeaderElement(); //containing element\n\n  this.rowManager = null; //hold row manager object\n\n  this.columns = []; // column definition object\n\n  this.columnsByIndex = []; //columns by index\n\n  this.columnsByField = {}; //columns by field\n\n  this.scrollLeft = 0;\n  this.element.insertBefore(this.headersElement, this.element.firstChild);\n}; ////////////// Setup Functions /////////////////\n\n\nColumnManager.prototype.createHeadersElement = function () {\n  var el = document.createElement(\"div\");\n  el.classList.add(\"tabulator-headers\");\n  return el;\n};\n\nColumnManager.prototype.createHeaderElement = function () {\n  var el = document.createElement(\"div\");\n  el.classList.add(\"tabulator-header\");\n\n  if (!this.table.options.headerVisible) {\n    el.classList.add(\"tabulator-header-hidden\");\n  }\n\n  return el;\n};\n\nColumnManager.prototype.initialize = function () {\n  var self = this; //scroll body along with header\n  // self.element.addEventListener(\"scroll\", function(e){\n  // \tif(!self.blockHozScrollEvent){\n  // \t\tself.table.rowManager.scrollHorizontal(self.element.scrollLeft);\n  // \t}\n  // });\n}; //link to row manager\n\n\nColumnManager.prototype.setRowManager = function (manager) {\n  this.rowManager = manager;\n}; //return containing element\n\n\nColumnManager.prototype.getElement = function () {\n  return this.element;\n}; //return header containing element\n\n\nColumnManager.prototype.getHeadersElement = function () {\n  return this.headersElement;\n}; // ColumnManager.prototype.tempScrollBlock = function(){\n// \tclearTimeout(this.blockHozScrollEvent);\n// \tthis.blockHozScrollEvent = setTimeout(() => {this.blockHozScrollEvent = false;}, 50);\n// }\n//scroll horizontally to match table body\n\n\nColumnManager.prototype.scrollHorizontal = function (left) {\n  var hozAdjust = 0,\n      scrollWidth = this.element.scrollWidth - this.table.element.clientWidth; // this.tempScrollBlock();\n\n  this.element.scrollLeft = left; //adjust for vertical scrollbar moving table when present\n\n  if (left > scrollWidth) {\n    hozAdjust = left - scrollWidth;\n    this.element.style.marginLeft = -hozAdjust + \"px\";\n  } else {\n    this.element.style.marginLeft = 0;\n  } //keep frozen columns fixed in position\n  //this._calcFrozenColumnsPos(hozAdjust + 3);\n\n\n  this.scrollLeft = left;\n\n  if (this.table.modExists(\"frozenColumns\")) {\n    this.table.modules.frozenColumns.scrollHorizontal();\n  }\n}; ///////////// Column Setup Functions /////////////\n\n\nColumnManager.prototype.generateColumnsFromRowData = function (data) {\n  var cols = [],\n      definitions = this.table.options.autoColumnsDefinitions,\n      row,\n      sorter;\n\n  if (data && data.length) {\n    row = data[0];\n\n    for (var key in row) {\n      var col = {\n        field: key,\n        title: key\n      };\n      var value = row[key];\n\n      switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n        case \"undefined\":\n          sorter = \"string\";\n          break;\n\n        case \"boolean\":\n          sorter = \"boolean\";\n          break;\n\n        case \"object\":\n          if (Array.isArray(value)) {\n            sorter = \"array\";\n          } else {\n            sorter = \"string\";\n          }\n\n          break;\n\n        default:\n          if (!isNaN(value) && value !== \"\") {\n            sorter = \"number\";\n          } else {\n            if (value.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)) {\n              sorter = \"alphanum\";\n            } else {\n              sorter = \"string\";\n            }\n          }\n\n          break;\n      }\n\n      col.sorter = sorter;\n      cols.push(col);\n    }\n\n    if (definitions) {\n      switch (typeof definitions === 'undefined' ? 'undefined' : _typeof(definitions)) {\n        case \"function\":\n          this.table.options.columns = definitions.call(this.table, cols);\n          break;\n\n        case \"object\":\n          if (Array.isArray(definitions)) {\n            cols.forEach(function (col) {\n              var match = definitions.find(function (def) {\n                return def.field === col.field;\n              });\n\n              if (match) {\n                Object.assign(col, match);\n              }\n            });\n          } else {\n            cols.forEach(function (col) {\n              if (definitions[col.field]) {\n                Object.assign(col, definitions[col.field]);\n              }\n            });\n          }\n\n          this.table.options.columns = cols;\n          break;\n      }\n    } else {\n      this.table.options.columns = cols;\n    }\n\n    this.setColumns(this.table.options.columns);\n  }\n};\n\nColumnManager.prototype.setColumns = function (cols, row) {\n  var self = this;\n\n  while (self.headersElement.firstChild) {\n    self.headersElement.removeChild(self.headersElement.firstChild);\n  }\n\n  self.columns = [];\n  self.columnsByIndex = [];\n  self.columnsByField = {}; //reset frozen columns\n\n  if (self.table.modExists(\"frozenColumns\")) {\n    self.table.modules.frozenColumns.reset();\n  }\n\n  cols.forEach(function (def, i) {\n    self._addColumn(def);\n  });\n\n  self._reIndexColumns();\n\n  if (self.table.options.responsiveLayout && self.table.modExists(\"responsiveLayout\", true)) {\n    self.table.modules.responsiveLayout.initialize();\n  }\n\n  if (this.table.options.virtualDomHoz) {\n    this.table.vdomHoz.reinitialize(false, true);\n  }\n\n  self.redraw(true);\n};\n\nColumnManager.prototype._addColumn = function (definition, before, nextToColumn) {\n  var column = new Column(definition, this),\n      colEl = column.getElement(),\n      index = nextToColumn ? this.findColumnIndex(nextToColumn) : nextToColumn;\n\n  if (nextToColumn && index > -1) {\n    var parentIndex = this.columns.indexOf(nextToColumn.getTopColumn());\n    var nextEl = nextToColumn.getElement();\n\n    if (before) {\n      this.columns.splice(parentIndex, 0, column);\n      nextEl.parentNode.insertBefore(colEl, nextEl);\n    } else {\n      this.columns.splice(parentIndex + 1, 0, column);\n      nextEl.parentNode.insertBefore(colEl, nextEl.nextSibling);\n    }\n  } else {\n    if (before) {\n      this.columns.unshift(column);\n      this.headersElement.insertBefore(column.getElement(), this.headersElement.firstChild);\n    } else {\n      this.columns.push(column);\n      this.headersElement.appendChild(column.getElement());\n    }\n\n    column.columnRendered();\n  }\n\n  return column;\n};\n\nColumnManager.prototype.registerColumnField = function (col) {\n  if (col.definition.field) {\n    this.columnsByField[col.definition.field] = col;\n  }\n};\n\nColumnManager.prototype.registerColumnPosition = function (col) {\n  this.columnsByIndex.push(col);\n};\n\nColumnManager.prototype._reIndexColumns = function () {\n  this.columnsByIndex = [];\n  this.columns.forEach(function (column) {\n    column.reRegisterPosition();\n  });\n}; //ensure column headers take up the correct amount of space in column groups\n\n\nColumnManager.prototype._verticalAlignHeaders = function () {\n  var self = this,\n      minHeight = 0;\n  self.columns.forEach(function (column) {\n    var height;\n    column.clearVerticalAlign();\n    height = column.getHeight();\n\n    if (height > minHeight) {\n      minHeight = height;\n    }\n  });\n  self.columns.forEach(function (column) {\n    column.verticalAlign(self.table.options.columnHeaderVertAlign, minHeight);\n  });\n  self.rowManager.adjustTableSize();\n}; //////////////// Column Details /////////////////\n\n\nColumnManager.prototype.findColumn = function (subject) {\n  var self = this;\n\n  if ((typeof subject === 'undefined' ? 'undefined' : _typeof(subject)) == \"object\") {\n    if (subject instanceof Column) {\n      //subject is column element\n      return subject;\n    } else if (subject instanceof ColumnComponent) {\n      //subject is public column component\n      return subject._getSelf() || false;\n    } else if (typeof HTMLElement !== \"undefined\" && subject instanceof HTMLElement) {\n      //subject is a HTML element of the column header\n      var match = self.columns.find(function (column) {\n        return column.element === subject;\n      });\n      return match || false;\n    }\n  } else {\n    //subject should be treated as the field name of the column\n    return this.columnsByField[subject] || false;\n  } //catch all for any other type of input\n\n\n  return false;\n};\n\nColumnManager.prototype.getColumnByField = function (field) {\n  return this.columnsByField[field];\n};\n\nColumnManager.prototype.getColumnsByFieldRoot = function (root) {\n  var _this = this;\n\n  var matches = [];\n  Object.keys(this.columnsByField).forEach(function (field) {\n    var fieldRoot = field.split(\".\")[0];\n\n    if (fieldRoot === root) {\n      matches.push(_this.columnsByField[field]);\n    }\n  });\n  return matches;\n};\n\nColumnManager.prototype.getColumnByIndex = function (index) {\n  return this.columnsByIndex[index];\n};\n\nColumnManager.prototype.getFirstVisibileColumn = function (index) {\n  var index = this.columnsByIndex.findIndex(function (col) {\n    return col.visible;\n  });\n  return index > -1 ? this.columnsByIndex[index] : false;\n};\n\nColumnManager.prototype.getColumns = function () {\n  return this.columns;\n};\n\nColumnManager.prototype.findColumnIndex = function (column) {\n  return this.columnsByIndex.findIndex(function (col) {\n    return column === col;\n  });\n}; //return all columns that are not groups\n\n\nColumnManager.prototype.getRealColumns = function () {\n  return this.columnsByIndex;\n}; //travers across columns and call action\n\n\nColumnManager.prototype.traverse = function (callback) {\n  var self = this;\n  self.columnsByIndex.forEach(function (column, i) {\n    callback(column, i);\n  });\n}; //get defintions of actual columns\n\n\nColumnManager.prototype.getDefinitions = function (active) {\n  var self = this,\n      output = [];\n  self.columnsByIndex.forEach(function (column) {\n    if (!active || active && column.visible) {\n      output.push(column.getDefinition());\n    }\n  });\n  return output;\n}; //get full nested definition tree\n\n\nColumnManager.prototype.getDefinitionTree = function () {\n  var self = this,\n      output = [];\n  self.columns.forEach(function (column) {\n    output.push(column.getDefinition(true));\n  });\n  return output;\n};\n\nColumnManager.prototype.getComponents = function (structured) {\n  var self = this,\n      output = [],\n      columns = structured ? self.columns : self.columnsByIndex;\n  columns.forEach(function (column) {\n    output.push(column.getComponent());\n  });\n  return output;\n};\n\nColumnManager.prototype.getWidth = function () {\n  var width = 0;\n  this.columnsByIndex.forEach(function (column) {\n    if (column.visible) {\n      width += column.getWidth();\n    }\n  });\n  return width;\n};\n\nColumnManager.prototype.moveColumn = function (from, to, after) {\n  this.moveColumnActual(from, to, after);\n\n  if (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n    this.table.modules.responsiveLayout.initialize();\n  }\n\n  if (this.table.modExists(\"columnCalcs\")) {\n    this.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows);\n  }\n\n  to.element.parentNode.insertBefore(from.element, to.element);\n\n  if (after) {\n    to.element.parentNode.insertBefore(to.element, from.element);\n  }\n\n  this._verticalAlignHeaders();\n\n  this.table.rowManager.reinitialize();\n};\n\nColumnManager.prototype.moveColumnActual = function (from, to, after) {\n  if (from.parent.isGroup) {\n    this._moveColumnInArray(from.parent.columns, from, to, after);\n  } else {\n    this._moveColumnInArray(this.columns, from, to, after);\n  }\n\n  this._moveColumnInArray(this.columnsByIndex, from, to, after, true);\n\n  if (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n    this.table.modules.responsiveLayout.initialize();\n  }\n\n  if (this.table.options.virtualDomHoz) {\n    this.table.vdomHoz.reinitialize(true);\n  }\n\n  if (this.table.options.columnMoved) {\n    this.table.options.columnMoved.call(this.table, from.getComponent(), this.table.columnManager.getComponents());\n  }\n\n  if (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.columns) {\n    this.table.modules.persistence.save(\"columns\");\n  }\n};\n\nColumnManager.prototype._moveColumnInArray = function (columns, from, to, after, updateRows) {\n  var fromIndex = columns.indexOf(from),\n      toIndex;\n\n  if (fromIndex > -1) {\n    columns.splice(fromIndex, 1);\n    toIndex = columns.indexOf(to);\n\n    if (toIndex > -1) {\n      if (after) {\n        toIndex = toIndex + 1;\n      }\n    } else {\n      toIndex = fromIndex;\n    }\n\n    columns.splice(toIndex, 0, from);\n\n    if (updateRows) {\n      this.table.rowManager.rows.forEach(function (row) {\n        if (row.cells.length) {\n          var cell = row.cells.splice(fromIndex, 1)[0];\n          row.cells.splice(toIndex, 0, cell);\n        }\n      });\n    }\n  }\n};\n\nColumnManager.prototype.scrollToColumn = function (column, position, ifVisible) {\n  var _this2 = this;\n\n  var left = 0,\n      offset = 0,\n      adjust = 0,\n      colEl = column.getElement();\n  return new Promise(function (resolve, reject) {\n    if (typeof position === \"undefined\") {\n      position = _this2.table.options.scrollToColumnPosition;\n    }\n\n    if (typeof ifVisible === \"undefined\") {\n      ifVisible = _this2.table.options.scrollToColumnIfVisible;\n    }\n\n    if (column.visible) {\n      //align to correct position\n      switch (position) {\n        case \"middle\":\n        case \"center\":\n          adjust = -_this2.element.clientWidth / 2;\n          break;\n\n        case \"right\":\n          adjust = colEl.clientWidth - _this2.headersElement.clientWidth;\n          break;\n      } //check column visibility\n\n\n      if (!ifVisible) {\n        offset = colEl.offsetLeft;\n\n        if (offset > 0 && offset + colEl.offsetWidth < _this2.element.clientWidth) {\n          return false;\n        }\n      } //calculate scroll position\n\n\n      left = colEl.offsetLeft + _this2.element.scrollLeft + adjust;\n      left = Math.max(Math.min(left, _this2.table.rowManager.element.scrollWidth - _this2.table.rowManager.element.clientWidth), 0);\n\n      _this2.table.rowManager.scrollHorizontal(left);\n\n      _this2.scrollHorizontal(left);\n\n      resolve();\n    } else {\n      console.warn(\"Scroll Error - Column not visible\");\n      reject(\"Scroll Error - Column not visible\");\n    }\n  });\n}; //////////////// Cell Management /////////////////\n\n\nColumnManager.prototype.generateCells = function (row) {\n  var self = this;\n  var cells = [];\n  self.columnsByIndex.forEach(function (column) {\n    cells.push(column.generateCell(row));\n  });\n  return cells;\n}; //////////////// Column Management /////////////////\n\n\nColumnManager.prototype.getFlexBaseWidth = function () {\n  var self = this,\n      totalWidth = self.table.element.clientWidth,\n      //table element width\n  fixedWidth = 0; //adjust for vertical scrollbar if present\n\n  if (self.rowManager.element.scrollHeight > self.rowManager.element.clientHeight) {\n    totalWidth -= self.rowManager.element.offsetWidth - self.rowManager.element.clientWidth;\n  }\n\n  this.columnsByIndex.forEach(function (column) {\n    var width, minWidth, colWidth;\n\n    if (column.visible) {\n      width = column.definition.width || 0;\n      minWidth = typeof column.minWidth == \"undefined\" ? self.table.options.columnMinWidth : parseInt(column.minWidth);\n\n      if (typeof width == \"string\") {\n        if (width.indexOf(\"%\") > -1) {\n          colWidth = totalWidth / 100 * parseInt(width);\n        } else {\n          colWidth = parseInt(width);\n        }\n      } else {\n        colWidth = width;\n      }\n\n      fixedWidth += colWidth > minWidth ? colWidth : minWidth;\n    }\n  });\n  return fixedWidth;\n};\n\nColumnManager.prototype.addColumn = function (definition, before, nextToColumn) {\n  var _this3 = this;\n\n  return new Promise(function (resolve, reject) {\n    var column = _this3._addColumn(definition, before, nextToColumn);\n\n    _this3._reIndexColumns();\n\n    if (_this3.table.options.responsiveLayout && _this3.table.modExists(\"responsiveLayout\", true)) {\n      _this3.table.modules.responsiveLayout.initialize();\n    }\n\n    if (_this3.table.modExists(\"columnCalcs\")) {\n      _this3.table.modules.columnCalcs.recalc(_this3.table.rowManager.activeRows);\n    }\n\n    _this3.redraw();\n\n    if (_this3.table.modules.layout.getMode() != \"fitColumns\") {\n      column.reinitializeWidth();\n    }\n\n    _this3._verticalAlignHeaders();\n\n    _this3.table.rowManager.reinitialize();\n\n    if (_this3.table.options.virtualDomHoz) {\n      _this3.table.vdomHoz.reinitialize();\n    }\n\n    resolve(column);\n  });\n}; //remove column from system\n\n\nColumnManager.prototype.deregisterColumn = function (column) {\n  var field = column.getField(),\n      index; //remove from field list\n\n  if (field) {\n    delete this.columnsByField[field];\n  } //remove from index list\n\n\n  index = this.columnsByIndex.indexOf(column);\n\n  if (index > -1) {\n    this.columnsByIndex.splice(index, 1);\n  } //remove from column list\n\n\n  index = this.columns.indexOf(column);\n\n  if (index > -1) {\n    this.columns.splice(index, 1);\n  }\n\n  if (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n    this.table.modules.responsiveLayout.initialize();\n  }\n\n  this._verticalAlignHeaders();\n\n  this.redraw();\n}; //redraw columns\n\n\nColumnManager.prototype.redraw = function (force) {\n  if (force) {\n    if (Tabulator.prototype.helpers.elVisible(this.element)) {\n      this._verticalAlignHeaders();\n    }\n\n    this.table.rowManager.resetScroll();\n    this.table.rowManager.reinitialize();\n  }\n\n  if ([\"fitColumns\", \"fitDataStretch\"].indexOf(this.table.modules.layout.getMode()) > -1) {\n    this.table.modules.layout.layout();\n  } else {\n    if (force) {\n      this.table.modules.layout.layout();\n    } else {\n      if (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n        this.table.modules.responsiveLayout.update();\n      }\n    }\n  }\n\n  if (this.table.modExists(\"frozenColumns\")) {\n    this.table.modules.frozenColumns.layout();\n  }\n\n  if (this.table.modExists(\"columnCalcs\")) {\n    this.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows);\n  }\n\n  if (force) {\n    if (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.columns) {\n      this.table.modules.persistence.save(\"columns\");\n    }\n\n    if (this.table.modExists(\"columnCalcs\")) {\n      this.table.modules.columnCalcs.redraw();\n    }\n  }\n\n  this.table.footerManager.redraw();\n}; //public column object\n\n\nvar ColumnComponent = function ColumnComponent(column) {\n  this._column = column;\n  this.type = \"ColumnComponent\";\n};\n\nColumnComponent.prototype.getElement = function () {\n  return this._column.getElement();\n};\n\nColumnComponent.prototype.getDefinition = function () {\n  return this._column.getDefinition();\n};\n\nColumnComponent.prototype.getField = function () {\n  return this._column.getField();\n};\n\nColumnComponent.prototype.getCells = function () {\n  var cells = [];\n\n  this._column.cells.forEach(function (cell) {\n    cells.push(cell.getComponent());\n  });\n\n  return cells;\n};\n\nColumnComponent.prototype.getVisibility = function () {\n  console.warn(\"getVisibility function is deprecated, you should now use the isVisible function\");\n  return this._column.visible;\n};\n\nColumnComponent.prototype.isVisible = function () {\n  return this._column.visible;\n};\n\nColumnComponent.prototype.show = function () {\n  if (this._column.isGroup) {\n    this._column.columns.forEach(function (column) {\n      column.show();\n    });\n  } else {\n    this._column.show();\n  }\n};\n\nColumnComponent.prototype.hide = function () {\n  if (this._column.isGroup) {\n    this._column.columns.forEach(function (column) {\n      column.hide();\n    });\n  } else {\n    this._column.hide();\n  }\n};\n\nColumnComponent.prototype.toggle = function () {\n  if (this._column.visible) {\n    this.hide();\n  } else {\n    this.show();\n  }\n};\n\nColumnComponent.prototype.delete = function () {\n  return this._column.delete();\n};\n\nColumnComponent.prototype.getSubColumns = function () {\n  var output = [];\n\n  if (this._column.columns.length) {\n    this._column.columns.forEach(function (column) {\n      output.push(column.getComponent());\n    });\n  }\n\n  return output;\n};\n\nColumnComponent.prototype.getParentColumn = function () {\n  return this._column.parent instanceof Column ? this._column.parent.getComponent() : false;\n};\n\nColumnComponent.prototype._getSelf = function () {\n  return this._column;\n};\n\nColumnComponent.prototype.scrollTo = function () {\n  return this._column.table.columnManager.scrollToColumn(this._column);\n};\n\nColumnComponent.prototype.getTable = function () {\n  return this._column.table;\n};\n\nColumnComponent.prototype.headerFilterFocus = function () {\n  if (this._column.table.modExists(\"filter\", true)) {\n    this._column.table.modules.filter.setHeaderFilterFocus(this._column);\n  }\n};\n\nColumnComponent.prototype.reloadHeaderFilter = function () {\n  if (this._column.table.modExists(\"filter\", true)) {\n    this._column.table.modules.filter.reloadHeaderFilter(this._column);\n  }\n};\n\nColumnComponent.prototype.getHeaderFilterValue = function () {\n  if (this._column.table.modExists(\"filter\", true)) {\n    return this._column.table.modules.filter.getHeaderFilterValue(this._column);\n  }\n};\n\nColumnComponent.prototype.setHeaderFilterValue = function (value) {\n  if (this._column.table.modExists(\"filter\", true)) {\n    this._column.table.modules.filter.setHeaderFilterValue(this._column, value);\n  }\n};\n\nColumnComponent.prototype.move = function (to, after) {\n  var toColumn = this._column.table.columnManager.findColumn(to);\n\n  if (toColumn) {\n    this._column.table.columnManager.moveColumn(this._column, toColumn, after);\n  } else {\n    console.warn(\"Move Error - No matching column found:\", toColumn);\n  }\n};\n\nColumnComponent.prototype.getNextColumn = function () {\n  var nextCol = this._column.nextColumn();\n\n  return nextCol ? nextCol.getComponent() : false;\n};\n\nColumnComponent.prototype.getPrevColumn = function () {\n  var prevCol = this._column.prevColumn();\n\n  return prevCol ? prevCol.getComponent() : false;\n};\n\nColumnComponent.prototype.updateDefinition = function (updates) {\n  return this._column.updateDefinition(updates);\n};\n\nColumnComponent.prototype.getWidth = function () {\n  return this._column.getWidth();\n};\n\nColumnComponent.prototype.setWidth = function (width) {\n  var result;\n\n  if (width === true) {\n    result = this._column.reinitializeWidth(true);\n  } else {\n    result = this._column.setWidth(width);\n  }\n\n  if (this._column.table.options.virtualDomHoz) {\n    this._column.table.vdomHoz.reinitialize(true);\n  }\n\n  return result;\n};\n\nColumnComponent.prototype.validate = function () {\n  return this._column.validate();\n};\n\nvar Column = function Column(def, parent) {\n  var self = this;\n  this.table = parent.table;\n  this.definition = def; //column definition\n\n  this.parent = parent; //hold parent object\n\n  this.type = \"column\"; //type of element\n\n  this.columns = []; //child columns\n\n  this.cells = []; //cells bound to this column\n\n  this.element = this.createElement(); //column header element\n\n  this.contentElement = false;\n  this.titleHolderElement = false;\n  this.titleElement = false;\n  this.groupElement = this.createGroupElement(); //column group holder element\n\n  this.isGroup = false;\n  this.tooltip = false; //hold column tooltip\n\n  this.hozAlign = \"\"; //horizontal text alignment\n\n  this.vertAlign = \"\"; //vert text alignment\n  //multi dimensional filed handling\n\n  this.field = \"\";\n  this.fieldStructure = \"\";\n  this.getFieldValue = \"\";\n  this.setFieldValue = \"\";\n  this.titleFormatterRendered = false;\n  this.setField(this.definition.field);\n\n  if (this.table.options.invalidOptionWarnings) {\n    this.checkDefinition();\n  }\n\n  this.modules = {}; //hold module variables;\n\n  this.cellEvents = {\n    cellClick: false,\n    cellDblClick: false,\n    cellContext: false,\n    cellTap: false,\n    cellDblTap: false,\n    cellTapHold: false,\n    cellMouseEnter: false,\n    cellMouseLeave: false,\n    cellMouseOver: false,\n    cellMouseOut: false,\n    cellMouseMove: false\n  };\n  this.width = null; //column width\n\n  this.widthStyled = \"\"; //column width prestyled to improve render efficiency\n\n  this.minWidth = null; //column minimum width\n\n  this.minWidthStyled = \"\"; //column minimum prestyled to improve render efficiency\n\n  this.widthFixed = false; //user has specified a width for this column\n\n  this.visible = true; //default visible state\n\n  this.component = null;\n\n  this._mapDepricatedFunctionality(); //initialize column\n\n\n  if (def.columns) {\n    this.isGroup = true;\n    def.columns.forEach(function (def, i) {\n      var newCol = new Column(def, self);\n      self.attachColumn(newCol);\n    });\n    self.checkColumnVisibility();\n  } else {\n    parent.registerColumnField(this);\n  }\n\n  if (def.rowHandle && this.table.options.movableRows !== false && this.table.modExists(\"moveRow\")) {\n    this.table.modules.moveRow.setHandle(true);\n  }\n\n  this._buildHeader();\n\n  this.bindModuleColumns();\n};\n\nColumn.prototype.createElement = function () {\n  var el = document.createElement(\"div\");\n  el.classList.add(\"tabulator-col\");\n  el.setAttribute(\"role\", \"columnheader\");\n  el.setAttribute(\"aria-sort\", \"none\");\n  return el;\n};\n\nColumn.prototype.createGroupElement = function () {\n  var el = document.createElement(\"div\");\n  el.classList.add(\"tabulator-col-group-cols\");\n  return el;\n};\n\nColumn.prototype.checkDefinition = function () {\n  var _this4 = this;\n\n  Object.keys(this.definition).forEach(function (key) {\n    if (_this4.defaultOptionList.indexOf(key) === -1) {\n      console.warn(\"Invalid column definition option in '\" + (_this4.field || _this4.definition.title) + \"' column:\", key);\n    }\n  });\n};\n\nColumn.prototype.setField = function (field) {\n  this.field = field;\n  this.fieldStructure = field ? this.table.options.nestedFieldSeparator ? field.split(this.table.options.nestedFieldSeparator) : [field] : [];\n  this.getFieldValue = this.fieldStructure.length > 1 ? this._getNestedData : this._getFlatData;\n  this.setFieldValue = this.fieldStructure.length > 1 ? this._setNestedData : this._setFlatData;\n}; //register column position with column manager\n\n\nColumn.prototype.registerColumnPosition = function (column) {\n  this.parent.registerColumnPosition(column);\n}; //register column position with column manager\n\n\nColumn.prototype.registerColumnField = function (column) {\n  this.parent.registerColumnField(column);\n}; //trigger position registration\n\n\nColumn.prototype.reRegisterPosition = function () {\n  if (this.isGroup) {\n    this.columns.forEach(function (column) {\n      column.reRegisterPosition();\n    });\n  } else {\n    this.registerColumnPosition(this);\n  }\n};\n\nColumn.prototype._mapDepricatedFunctionality = function () {\n  if (typeof this.definition.hideInHtml !== \"undefined\") {\n    this.definition.htmlOutput = !this.definition.hideInHtml;\n    console.warn(\"hideInHtml column definition property is deprecated, you should now use htmlOutput\");\n  }\n\n  if (typeof this.definition.align !== \"undefined\") {\n    this.definition.hozAlign = this.definition.align;\n    console.warn(\"align column definition property is deprecated, you should now use hozAlign\");\n  }\n\n  if (typeof this.definition.downloadTitle !== \"undefined\") {\n    this.definition.titleDownload = this.definition.downloadTitle;\n    console.warn(\"downloadTitle definition property is deprecated, you should now use titleDownload\");\n  }\n};\n\nColumn.prototype.setTooltip = function () {\n  var self = this,\n      def = self.definition; //set header tooltips\n\n  var tooltip = def.headerTooltip || def.tooltip === false ? def.headerTooltip : self.table.options.tooltipsHeader;\n\n  if (tooltip) {\n    if (tooltip === true) {\n      if (def.field) {\n        self.table.modules.localize.bind(\"columns|\" + def.field, function (value) {\n          self.element.setAttribute(\"title\", value || def.title);\n        });\n      } else {\n        self.element.setAttribute(\"title\", def.title);\n      }\n    } else {\n      if (typeof tooltip == \"function\") {\n        tooltip = tooltip(self.getComponent());\n\n        if (tooltip === false) {\n          tooltip = \"\";\n        }\n      }\n\n      self.element.setAttribute(\"title\", tooltip);\n    }\n  } else {\n    self.element.setAttribute(\"title\", \"\");\n  }\n}; //build header element\n\n\nColumn.prototype._buildHeader = function () {\n  var self = this,\n      def = self.definition;\n\n  while (self.element.firstChild) {\n    self.element.removeChild(self.element.firstChild);\n  }\n\n  if (def.headerVertical) {\n    self.element.classList.add(\"tabulator-col-vertical\");\n\n    if (def.headerVertical === \"flip\") {\n      self.element.classList.add(\"tabulator-col-vertical-flip\");\n    }\n  }\n\n  self.contentElement = self._bindEvents();\n  self.contentElement = self._buildColumnHeaderContent();\n  self.element.appendChild(self.contentElement);\n\n  if (self.isGroup) {\n    self._buildGroupHeader();\n  } else {\n    self._buildColumnHeader();\n  }\n\n  self.setTooltip(); //set resizable handles\n\n  if (self.table.options.resizableColumns && self.table.modExists(\"resizeColumns\")) {\n    self.table.modules.resizeColumns.initializeColumn(\"header\", self, self.element);\n  } //set resizable handles\n\n\n  if (def.headerFilter && self.table.modExists(\"filter\") && self.table.modExists(\"edit\")) {\n    if (typeof def.headerFilterPlaceholder !== \"undefined\" && def.field) {\n      self.table.modules.localize.setHeaderFilterColumnPlaceholder(def.field, def.headerFilterPlaceholder);\n    }\n\n    self.table.modules.filter.initializeColumn(self);\n  } //set resizable handles\n\n\n  if (self.table.modExists(\"frozenColumns\")) {\n    self.table.modules.frozenColumns.initializeColumn(self);\n  } //set movable column\n\n\n  if (self.table.options.movableColumns && !self.isGroup && self.table.modExists(\"moveColumn\")) {\n    self.table.modules.moveColumn.initializeColumn(self);\n  } //set calcs column\n\n\n  if ((def.topCalc || def.bottomCalc) && self.table.modExists(\"columnCalcs\")) {\n    self.table.modules.columnCalcs.initializeColumn(self);\n  } //handle persistence\n\n\n  if (self.table.modExists(\"persistence\") && self.table.modules.persistence.config.columns) {\n    self.table.modules.persistence.initializeColumn(self);\n  } //update header tooltip on mouse enter\n\n\n  self.element.addEventListener(\"mouseenter\", function (e) {\n    self.setTooltip();\n  });\n};\n\nColumn.prototype._bindEvents = function () {\n  var self = this,\n      def = self.definition,\n      dblTap,\n      tapHold,\n      tap; //setup header click event bindings\n\n  if (typeof def.headerClick == \"function\") {\n    self.element.addEventListener(\"click\", function (e) {\n      def.headerClick(e, self.getComponent());\n    });\n  }\n\n  if (typeof def.headerDblClick == \"function\") {\n    self.element.addEventListener(\"dblclick\", function (e) {\n      def.headerDblClick(e, self.getComponent());\n    });\n  }\n\n  if (typeof def.headerContext == \"function\") {\n    self.element.addEventListener(\"contextmenu\", function (e) {\n      def.headerContext(e, self.getComponent());\n    });\n  } //setup header tap event bindings\n\n\n  if (typeof def.headerTap == \"function\") {\n    tap = false;\n    self.element.addEventListener(\"touchstart\", function (e) {\n      tap = true;\n    }, {\n      passive: true\n    });\n    self.element.addEventListener(\"touchend\", function (e) {\n      if (tap) {\n        def.headerTap(e, self.getComponent());\n      }\n\n      tap = false;\n    });\n  }\n\n  if (typeof def.headerDblTap == \"function\") {\n    dblTap = null;\n    self.element.addEventListener(\"touchend\", function (e) {\n      if (dblTap) {\n        clearTimeout(dblTap);\n        dblTap = null;\n        def.headerDblTap(e, self.getComponent());\n      } else {\n        dblTap = setTimeout(function () {\n          clearTimeout(dblTap);\n          dblTap = null;\n        }, 300);\n      }\n    });\n  }\n\n  if (typeof def.headerTapHold == \"function\") {\n    tapHold = null;\n    self.element.addEventListener(\"touchstart\", function (e) {\n      clearTimeout(tapHold);\n      tapHold = setTimeout(function () {\n        clearTimeout(tapHold);\n        tapHold = null;\n        tap = false;\n        def.headerTapHold(e, self.getComponent());\n      }, 1000);\n    }, {\n      passive: true\n    });\n    self.element.addEventListener(\"touchend\", function (e) {\n      clearTimeout(tapHold);\n      tapHold = null;\n    });\n  } //store column cell click event bindings\n\n\n  if (typeof def.cellClick == \"function\") {\n    self.cellEvents.cellClick = def.cellClick;\n  }\n\n  if (typeof def.cellDblClick == \"function\") {\n    self.cellEvents.cellDblClick = def.cellDblClick;\n  }\n\n  if (typeof def.cellContext == \"function\") {\n    self.cellEvents.cellContext = def.cellContext;\n  } //store column mouse event bindings\n\n\n  if (typeof def.cellMouseEnter == \"function\") {\n    self.cellEvents.cellMouseEnter = def.cellMouseEnter;\n  }\n\n  if (typeof def.cellMouseLeave == \"function\") {\n    self.cellEvents.cellMouseLeave = def.cellMouseLeave;\n  }\n\n  if (typeof def.cellMouseOver == \"function\") {\n    self.cellEvents.cellMouseOver = def.cellMouseOver;\n  }\n\n  if (typeof def.cellMouseOut == \"function\") {\n    self.cellEvents.cellMouseOut = def.cellMouseOut;\n  }\n\n  if (typeof def.cellMouseMove == \"function\") {\n    self.cellEvents.cellMouseMove = def.cellMouseMove;\n  } //setup column cell tap event bindings\n\n\n  if (typeof def.cellTap == \"function\") {\n    self.cellEvents.cellTap = def.cellTap;\n  }\n\n  if (typeof def.cellDblTap == \"function\") {\n    self.cellEvents.cellDblTap = def.cellDblTap;\n  }\n\n  if (typeof def.cellTapHold == \"function\") {\n    self.cellEvents.cellTapHold = def.cellTapHold;\n  } //setup column cell edit callbacks\n\n\n  if (typeof def.cellEdited == \"function\") {\n    self.cellEvents.cellEdited = def.cellEdited;\n  }\n\n  if (typeof def.cellEditing == \"function\") {\n    self.cellEvents.cellEditing = def.cellEditing;\n  }\n\n  if (typeof def.cellEditCancelled == \"function\") {\n    self.cellEvents.cellEditCancelled = def.cellEditCancelled;\n  }\n}; //build header element for header\n\n\nColumn.prototype._buildColumnHeader = function () {\n  var _this5 = this;\n\n  var def = this.definition,\n      table = this.table,\n      sortable; //set column sorter\n\n  if (table.modExists(\"sort\")) {\n    table.modules.sort.initializeColumn(this, this.titleHolderElement);\n  } //set column header context menu\n\n\n  if ((def.headerContextMenu || def.headerClickMenu || def.headerMenu) && table.modExists(\"menu\")) {\n    table.modules.menu.initializeColumnHeader(this);\n  } //set column formatter\n\n\n  if (table.modExists(\"format\")) {\n    table.modules.format.initializeColumn(this);\n  } //set column editor\n\n\n  if (typeof def.editor != \"undefined\" && table.modExists(\"edit\")) {\n    table.modules.edit.initializeColumn(this);\n  } //set colum validator\n\n\n  if (typeof def.validator != \"undefined\" && table.modExists(\"validate\")) {\n    table.modules.validate.initializeColumn(this);\n  } //set column mutator\n\n\n  if (table.modExists(\"mutator\")) {\n    table.modules.mutator.initializeColumn(this);\n  } //set column accessor\n\n\n  if (table.modExists(\"accessor\")) {\n    table.modules.accessor.initializeColumn(this);\n  } //set respoviveLayout\n\n\n  if (_typeof(table.options.responsiveLayout) && table.modExists(\"responsiveLayout\")) {\n    table.modules.responsiveLayout.initializeColumn(this);\n  } //set column visibility\n\n\n  if (typeof def.visible != \"undefined\") {\n    if (def.visible) {\n      this.show(true);\n    } else {\n      this.hide(true);\n    }\n  } //asign additional css classes to column header\n\n\n  if (def.cssClass) {\n    var classeNames = def.cssClass.split(\" \");\n    classeNames.forEach(function (className) {\n      _this5.element.classList.add(className);\n    });\n  }\n\n  if (def.field) {\n    this.element.setAttribute(\"tabulator-field\", def.field);\n  } //set min width if present\n\n\n  this.setMinWidth(typeof def.minWidth == \"undefined\" ? this.table.options.columnMinWidth : parseInt(def.minWidth));\n  this.reinitializeWidth(); //set tooltip if present\n\n  this.tooltip = this.definition.tooltip || this.definition.tooltip === false ? this.definition.tooltip : this.table.options.tooltips; //set orizontal text alignment\n\n  this.hozAlign = typeof this.definition.hozAlign == \"undefined\" ? this.table.options.cellHozAlign : this.definition.hozAlign;\n  this.vertAlign = typeof this.definition.vertAlign == \"undefined\" ? this.table.options.cellVertAlign : this.definition.vertAlign;\n  this.titleElement.style.textAlign = this.definition.headerHozAlign || this.table.options.headerHozAlign;\n};\n\nColumn.prototype._buildColumnHeaderContent = function () {\n  var def = this.definition,\n      table = this.table;\n  var contentElement = document.createElement(\"div\");\n  contentElement.classList.add(\"tabulator-col-content\");\n  this.titleHolderElement = document.createElement(\"div\");\n  this.titleHolderElement.classList.add(\"tabulator-col-title-holder\");\n  contentElement.appendChild(this.titleHolderElement);\n  this.titleElement = this._buildColumnHeaderTitle();\n  this.titleHolderElement.appendChild(this.titleElement);\n  return contentElement;\n}; //build title element of column\n\n\nColumn.prototype._buildColumnHeaderTitle = function () {\n  var self = this,\n      def = self.definition,\n      table = self.table,\n      title;\n  var titleHolderElement = document.createElement(\"div\");\n  titleHolderElement.classList.add(\"tabulator-col-title\");\n\n  if (def.editableTitle) {\n    var titleElement = document.createElement(\"input\");\n    titleElement.classList.add(\"tabulator-title-editor\");\n    titleElement.addEventListener(\"click\", function (e) {\n      e.stopPropagation();\n      titleElement.focus();\n    });\n    titleElement.addEventListener(\"change\", function () {\n      def.title = titleElement.value;\n      table.options.columnTitleChanged.call(self.table, self.getComponent());\n    });\n    titleHolderElement.appendChild(titleElement);\n\n    if (def.field) {\n      table.modules.localize.bind(\"columns|\" + def.field, function (text) {\n        titleElement.value = text || def.title || \"&nbsp;\";\n      });\n    } else {\n      titleElement.value = def.title || \"&nbsp;\";\n    }\n  } else {\n    if (def.field) {\n      table.modules.localize.bind(\"columns|\" + def.field, function (text) {\n        self._formatColumnHeaderTitle(titleHolderElement, text || def.title || \"&nbsp;\");\n      });\n    } else {\n      self._formatColumnHeaderTitle(titleHolderElement, def.title || \"&nbsp;\");\n    }\n  }\n\n  return titleHolderElement;\n};\n\nColumn.prototype._formatColumnHeaderTitle = function (el, title) {\n  var _this6 = this;\n\n  var formatter, contents, params, mockCell, onRendered;\n\n  if (this.definition.titleFormatter && this.table.modExists(\"format\")) {\n    formatter = this.table.modules.format.getFormatter(this.definition.titleFormatter);\n\n    onRendered = function onRendered(callback) {\n      _this6.titleFormatterRendered = callback;\n    };\n\n    mockCell = {\n      getValue: function getValue() {\n        return title;\n      },\n      getElement: function getElement() {\n        return el;\n      }\n    };\n    params = this.definition.titleFormatterParams || {};\n    params = typeof params === \"function\" ? params() : params;\n    contents = formatter.call(this.table.modules.format, mockCell, params, onRendered);\n\n    switch (typeof contents === 'undefined' ? 'undefined' : _typeof(contents)) {\n      case \"object\":\n        if (contents instanceof Node) {\n          el.appendChild(contents);\n        } else {\n          el.innerHTML = \"\";\n          console.warn(\"Format Error - Title formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:\", contents);\n        }\n\n        break;\n\n      case \"undefined\":\n      case \"null\":\n        el.innerHTML = \"\";\n        break;\n\n      default:\n        el.innerHTML = contents;\n    }\n  } else {\n    el.innerHTML = title;\n  }\n}; //build header element for column group\n\n\nColumn.prototype._buildGroupHeader = function () {\n  var _this7 = this;\n\n  this.element.classList.add(\"tabulator-col-group\");\n  this.element.setAttribute(\"role\", \"columngroup\");\n  this.element.setAttribute(\"aria-title\", this.definition.title); //asign additional css classes to column header\n\n  if (this.definition.cssClass) {\n    var classeNames = this.definition.cssClass.split(\" \");\n    classeNames.forEach(function (className) {\n      _this7.element.classList.add(className);\n    });\n  } //set column header context menu\n\n\n  if ((this.definition.headerContextMenu || this.definition.headerMenu) && this.table.modExists(\"menu\")) {\n    this.table.modules.menu.initializeColumnHeader(this);\n  }\n\n  this.element.appendChild(this.groupElement);\n}; //flat field lookup\n\n\nColumn.prototype._getFlatData = function (data) {\n  return data[this.field];\n}; //nested field lookup\n\n\nColumn.prototype._getNestedData = function (data) {\n  var dataObj = data,\n      structure = this.fieldStructure,\n      length = structure.length,\n      output;\n\n  for (var _i = 0; _i < length; _i++) {\n    dataObj = dataObj[structure[_i]];\n    output = dataObj;\n\n    if (!dataObj) {\n      break;\n    }\n  }\n\n  return output;\n}; //flat field set\n\n\nColumn.prototype._setFlatData = function (data, value) {\n  if (this.field) {\n    data[this.field] = value;\n  }\n}; //nested field set\n\n\nColumn.prototype._setNestedData = function (data, value) {\n  var dataObj = data,\n      structure = this.fieldStructure,\n      length = structure.length;\n\n  for (var _i2 = 0; _i2 < length; _i2++) {\n    if (_i2 == length - 1) {\n      dataObj[structure[_i2]] = value;\n    } else {\n      if (!dataObj[structure[_i2]]) {\n        if (typeof value !== \"undefined\") {\n          dataObj[structure[_i2]] = {};\n        } else {\n          break;\n        }\n      }\n\n      dataObj = dataObj[structure[_i2]];\n    }\n  }\n}; //attach column to this group\n\n\nColumn.prototype.attachColumn = function (column) {\n  var self = this;\n\n  if (self.groupElement) {\n    self.columns.push(column);\n    self.groupElement.appendChild(column.getElement());\n  } else {\n    console.warn(\"Column Warning - Column being attached to another column instead of column group\");\n  }\n}; //vertically align header in column\n\n\nColumn.prototype.verticalAlign = function (alignment, height) {\n  //calculate height of column header and group holder element\n  var parentHeight = this.parent.isGroup ? this.parent.getGroupElement().clientHeight : height || this.parent.getHeadersElement().clientHeight; // var parentHeight = this.parent.isGroup ? this.parent.getGroupElement().clientHeight : this.parent.getHeadersElement().clientHeight;\n\n  this.element.style.height = parentHeight + \"px\";\n\n  if (this.isGroup) {\n    this.groupElement.style.minHeight = parentHeight - this.contentElement.offsetHeight + \"px\";\n  } //vertically align cell contents\n\n\n  if (!this.isGroup && alignment !== \"top\") {\n    if (alignment === \"bottom\") {\n      this.element.style.paddingTop = this.element.clientHeight - this.contentElement.offsetHeight + \"px\";\n    } else {\n      this.element.style.paddingTop = (this.element.clientHeight - this.contentElement.offsetHeight) / 2 + \"px\";\n    }\n  }\n\n  this.columns.forEach(function (column) {\n    column.verticalAlign(alignment);\n  });\n}; //clear vertical alignmenet\n\n\nColumn.prototype.clearVerticalAlign = function () {\n  this.element.style.paddingTop = \"\";\n  this.element.style.height = \"\";\n  this.element.style.minHeight = \"\";\n  this.groupElement.style.minHeight = \"\";\n  this.columns.forEach(function (column) {\n    column.clearVerticalAlign();\n  });\n};\n\nColumn.prototype.bindModuleColumns = function () {\n  //check if rownum formatter is being used on a column\n  if (this.definition.formatter == \"rownum\") {\n    this.table.rowManager.rowNumColumn = this;\n  }\n}; //// Retreive Column Information ////\n//return column header element\n\n\nColumn.prototype.getElement = function () {\n  return this.element;\n}; //return colunm group element\n\n\nColumn.prototype.getGroupElement = function () {\n  return this.groupElement;\n}; //return field name\n\n\nColumn.prototype.getField = function () {\n  return this.field;\n}; //return the first column in a group\n\n\nColumn.prototype.getFirstColumn = function () {\n  if (!this.isGroup) {\n    return this;\n  } else {\n    if (this.columns.length) {\n      return this.columns[0].getFirstColumn();\n    } else {\n      return false;\n    }\n  }\n}; //return the last column in a group\n\n\nColumn.prototype.getLastColumn = function () {\n  if (!this.isGroup) {\n    return this;\n  } else {\n    if (this.columns.length) {\n      return this.columns[this.columns.length - 1].getLastColumn();\n    } else {\n      return false;\n    }\n  }\n}; //return all columns in a group\n\n\nColumn.prototype.getColumns = function () {\n  return this.columns;\n}; //return all columns in a group\n\n\nColumn.prototype.getCells = function () {\n  return this.cells;\n}; //retreive the top column in a group of columns\n\n\nColumn.prototype.getTopColumn = function () {\n  if (this.parent.isGroup) {\n    return this.parent.getTopColumn();\n  } else {\n    return this;\n  }\n}; //return column definition object\n\n\nColumn.prototype.getDefinition = function (updateBranches) {\n  var colDefs = [];\n\n  if (this.isGroup && updateBranches) {\n    this.columns.forEach(function (column) {\n      colDefs.push(column.getDefinition(true));\n    });\n    this.definition.columns = colDefs;\n  }\n\n  return this.definition;\n}; //////////////////// Actions ////////////////////\n\n\nColumn.prototype.checkColumnVisibility = function () {\n  var visible = false;\n  this.columns.forEach(function (column) {\n    if (column.visible) {\n      visible = true;\n    }\n  });\n\n  if (visible) {\n    this.show();\n    this.parent.table.options.columnVisibilityChanged.call(this.table, this.getComponent(), false);\n  } else {\n    this.hide();\n  }\n}; //show column\n\n\nColumn.prototype.show = function (silent, responsiveToggle) {\n  if (!this.visible) {\n    this.visible = true;\n    this.element.style.display = \"\";\n\n    if (this.parent.isGroup) {\n      this.parent.checkColumnVisibility();\n    }\n\n    this.cells.forEach(function (cell) {\n      cell.show();\n    });\n\n    if (!this.isGroup && this.width === null) {\n      this.reinitializeWidth();\n    }\n\n    this.table.columnManager._verticalAlignHeaders();\n\n    if (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.columns) {\n      this.table.modules.persistence.save(\"columns\");\n    }\n\n    if (!responsiveToggle && this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n      this.table.modules.responsiveLayout.updateColumnVisibility(this, this.visible);\n    }\n\n    if (!silent) {\n      this.table.options.columnVisibilityChanged.call(this.table, this.getComponent(), true);\n    }\n\n    if (this.parent.isGroup) {\n      this.parent.matchChildWidths();\n    }\n  }\n}; //hide column\n\n\nColumn.prototype.hide = function (silent, responsiveToggle) {\n  if (this.visible) {\n    this.visible = false;\n    this.element.style.display = \"none\";\n\n    this.table.columnManager._verticalAlignHeaders();\n\n    if (this.parent.isGroup) {\n      this.parent.checkColumnVisibility();\n    }\n\n    this.cells.forEach(function (cell) {\n      cell.hide();\n    });\n\n    if (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.columns) {\n      this.table.modules.persistence.save(\"columns\");\n    }\n\n    if (!responsiveToggle && this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n      this.table.modules.responsiveLayout.updateColumnVisibility(this, this.visible);\n    }\n\n    if (!silent) {\n      this.table.options.columnVisibilityChanged.call(this.table, this.getComponent(), false);\n    }\n\n    if (this.parent.isGroup) {\n      this.parent.matchChildWidths();\n    }\n  }\n};\n\nColumn.prototype.matchChildWidths = function () {\n  var childWidth = 0;\n\n  if (this.contentElement && this.columns.length) {\n    this.columns.forEach(function (column) {\n      if (column.visible) {\n        childWidth += column.getWidth();\n      }\n    });\n    this.contentElement.style.maxWidth = childWidth - 1 + \"px\";\n\n    if (this.parent.isGroup) {\n      this.parent.matchChildWidths();\n    }\n  }\n};\n\nColumn.prototype.setWidth = function (width) {\n  this.widthFixed = true;\n  this.setWidthActual(width);\n};\n\nColumn.prototype.setWidthActual = function (width) {\n  if (isNaN(width)) {\n    width = Math.floor(this.table.element.clientWidth / 100 * parseInt(width));\n  }\n\n  width = Math.max(this.minWidth, width);\n  this.width = width;\n  this.widthStyled = width ? width + \"px\" : \"\";\n  this.element.style.width = this.widthStyled;\n\n  if (!this.isGroup) {\n    this.cells.forEach(function (cell) {\n      cell.setWidth();\n    });\n  }\n\n  if (this.parent.isGroup) {\n    this.parent.matchChildWidths();\n  } //set resizable handles\n\n\n  if (this.table.modExists(\"frozenColumns\")) {\n    this.table.modules.frozenColumns.layout();\n  }\n};\n\nColumn.prototype.checkCellHeights = function () {\n  var rows = [];\n  this.cells.forEach(function (cell) {\n    if (cell.row.heightInitialized) {\n      if (cell.row.getElement().offsetParent !== null) {\n        rows.push(cell.row);\n        cell.row.clearCellHeight();\n      } else {\n        cell.row.heightInitialized = false;\n      }\n    }\n  });\n  rows.forEach(function (row) {\n    row.calcHeight();\n  });\n  rows.forEach(function (row) {\n    row.setCellHeight();\n  });\n};\n\nColumn.prototype.getWidth = function () {\n  var width = 0;\n\n  if (this.isGroup) {\n    this.columns.forEach(function (column) {\n      if (column.visible) {\n        width += column.getWidth();\n      }\n    });\n  } else {\n    width = this.width;\n  }\n\n  return width;\n};\n\nColumn.prototype.getHeight = function () {\n  return this.element.offsetHeight;\n};\n\nColumn.prototype.setMinWidth = function (minWidth) {\n  this.minWidth = minWidth;\n  this.minWidthStyled = minWidth ? minWidth + \"px\" : \"\";\n  this.element.style.minWidth = this.minWidthStyled;\n  this.cells.forEach(function (cell) {\n    cell.setMinWidth();\n  });\n};\n\nColumn.prototype.delete = function () {\n  var _this8 = this;\n\n  return new Promise(function (resolve, reject) {\n    if (_this8.isGroup) {\n      _this8.columns.forEach(function (column) {\n        column.delete();\n      });\n    } //cancel edit if column is currently being edited\n\n\n    if (_this8.table.modExists(\"edit\")) {\n      if (_this8.table.modules.edit.currentCell.column === _this8) {\n        _this8.table.modules.edit.cancelEdit();\n      }\n    }\n\n    var cellCount = _this8.cells.length;\n\n    for (var _i3 = 0; _i3 < cellCount; _i3++) {\n      _this8.cells[0].delete();\n    }\n\n    if (_this8.element.parentNode) {\n      _this8.element.parentNode.removeChild(_this8.element);\n    }\n\n    _this8.element = false;\n    _this8.contentElement = false;\n    _this8.titleElement = false;\n    _this8.groupElement = false;\n\n    _this8.table.columnManager.deregisterColumn(_this8);\n\n    if (_this8.table.options.virtualDomHoz) {\n      _this8.table.vdomHoz.reinitialize(true);\n    }\n\n    resolve();\n  });\n};\n\nColumn.prototype.columnRendered = function () {\n  if (this.titleFormatterRendered) {\n    this.titleFormatterRendered();\n  }\n};\n\nColumn.prototype.validate = function () {\n  var invalid = [];\n  this.cells.forEach(function (cell) {\n    if (!cell.validate()) {\n      invalid.push(cell.getComponent());\n    }\n  });\n  return invalid.length ? invalid : true;\n}; //////////////// Cell Management /////////////////\n//generate cell for this column\n\n\nColumn.prototype.generateCell = function (row) {\n  var self = this;\n  var cell = new Cell(self, row);\n  this.cells.push(cell);\n  return cell;\n};\n\nColumn.prototype.nextColumn = function () {\n  var index = this.table.columnManager.findColumnIndex(this);\n  return index > -1 ? this._nextVisibleColumn(index + 1) : false;\n};\n\nColumn.prototype._nextVisibleColumn = function (index) {\n  var column = this.table.columnManager.getColumnByIndex(index);\n  return !column || column.visible ? column : this._nextVisibleColumn(index + 1);\n};\n\nColumn.prototype.prevColumn = function () {\n  var index = this.table.columnManager.findColumnIndex(this);\n  return index > -1 ? this._prevVisibleColumn(index - 1) : false;\n};\n\nColumn.prototype._prevVisibleColumn = function (index) {\n  var column = this.table.columnManager.getColumnByIndex(index);\n  return !column || column.visible ? column : this._prevVisibleColumn(index - 1);\n};\n\nColumn.prototype.reinitializeWidth = function (force) {\n  this.widthFixed = false; //set width if present\n\n  if (typeof this.definition.width !== \"undefined\" && !force) {\n    this.setWidth(this.definition.width);\n  } //hide header filters to prevent them altering column width\n\n\n  if (this.table.modExists(\"filter\")) {\n    this.table.modules.filter.hideHeaderFilterElements();\n  }\n\n  this.fitToData(); //show header filters again after layout is complete\n\n  if (this.table.modExists(\"filter\")) {\n    this.table.modules.filter.showHeaderFilterElements();\n  }\n}; //set column width to maximum cell width\n\n\nColumn.prototype.fitToData = function () {\n  var self = this;\n\n  if (!this.widthFixed) {\n    this.element.style.width = \"\";\n    self.cells.forEach(function (cell) {\n      cell.clearWidth();\n    });\n  }\n\n  var maxWidth = this.element.offsetWidth;\n\n  if (!self.width || !this.widthFixed) {\n    self.cells.forEach(function (cell) {\n      var width = cell.getWidth();\n\n      if (width > maxWidth) {\n        maxWidth = width;\n      }\n    });\n\n    if (maxWidth) {\n      self.setWidthActual(maxWidth + 1);\n    }\n  }\n};\n\nColumn.prototype.updateDefinition = function (updates) {\n  var _this9 = this;\n\n  return new Promise(function (resolve, reject) {\n    var definition;\n\n    if (!_this9.isGroup) {\n      definition = Object.assign({}, _this9.getDefinition());\n      definition = Object.assign(definition, updates);\n\n      _this9.table.columnManager.addColumn(definition, false, _this9).then(function (column) {\n        if (definition.field == _this9.field) {\n          _this9.field = false; //cleair field name to prevent deletion of duplicate column from arrays\n        }\n\n        _this9.delete().then(function () {\n          resolve(column.getComponent());\n        }).catch(function (err) {\n          reject(err);\n        });\n      }).catch(function (err) {\n        reject(err);\n      });\n    } else {\n      console.warn(\"Column Update Error - The updateDefinition function is only available on columns, not column groups\");\n      reject(\"Column Update Error - The updateDefinition function is only available on columns, not column groups\");\n    }\n  });\n};\n\nColumn.prototype.deleteCell = function (cell) {\n  var index = this.cells.indexOf(cell);\n\n  if (index > -1) {\n    this.cells.splice(index, 1);\n  }\n};\n\nColumn.prototype.defaultOptionList = [\"title\", \"field\", \"columns\", \"visible\", \"align\", \"hozAlign\", \"vertAlign\", \"width\", \"minWidth\", \"widthGrow\", \"widthShrink\", \"resizable\", \"frozen\", \"responsive\", \"tooltip\", \"cssClass\", \"rowHandle\", \"hideInHtml\", \"print\", \"htmlOutput\", \"sorter\", \"sorterParams\", \"formatter\", \"formatterParams\", \"variableHeight\", \"editable\", \"editor\", \"editorParams\", \"validator\", \"mutator\", \"mutatorParams\", \"mutatorData\", \"mutatorDataParams\", \"mutatorEdit\", \"mutatorEditParams\", \"mutatorClipboard\", \"mutatorClipboardParams\", \"accessor\", \"accessorParams\", \"accessorData\", \"accessorDataParams\", \"accessorDownload\", \"accessorDownloadParams\", \"accessorClipboard\", \"accessorClipboardParams\", \"accessorPrint\", \"accessorPrintParams\", \"accessorHtmlOutput\", \"accessorHtmlOutputParams\", \"clipboard\", \"download\", \"downloadTitle\", \"topCalc\", \"topCalcParams\", \"topCalcFormatter\", \"topCalcFormatterParams\", \"bottomCalc\", \"bottomCalcParams\", \"bottomCalcFormatter\", \"bottomCalcFormatterParams\", \"cellClick\", \"cellDblClick\", \"cellContext\", \"cellTap\", \"cellDblTap\", \"cellTapHold\", \"cellMouseEnter\", \"cellMouseLeave\", \"cellMouseOver\", \"cellMouseOut\", \"cellMouseMove\", \"cellEditing\", \"cellEdited\", \"cellEditCancelled\", \"headerSort\", \"headerSortStartingDir\", \"headerSortTristate\", \"headerClick\", \"headerDblClick\", \"headerContext\", \"headerTap\", \"headerDblTap\", \"headerTapHold\", \"headerTooltip\", \"headerVertical\", \"headerHozAlign\", \"editableTitle\", \"titleFormatter\", \"titleFormatterParams\", \"headerFilter\", \"headerFilterPlaceholder\", \"headerFilterParams\", \"headerFilterEmptyCheck\", \"headerFilterFunc\", \"headerFilterFuncParams\", \"headerFilterLiveFilter\", \"print\", \"headerContextMenu\", \"headerMenu\", \"contextMenu\", // \"headerClickMenu\",\n\"clickMenu\", \"formatterPrint\", \"formatterPrintParams\", \"formatterClipboard\", \"formatterClipboardParams\", \"formatterHtmlOutput\", \"formatterHtmlOutputParams\", \"titlePrint\", \"titleClipboard\", \"titleHtmlOutput\", \"titleDownload\"]; //////////////// Event Bindings /////////////////\n//////////////// Object Generation /////////////////\n\nColumn.prototype.getComponent = function () {\n  if (!this.component) {\n    this.component = new ColumnComponent(this);\n  }\n\n  return this.component;\n};\n\nvar RowManager = function RowManager(table) {\n  this.table = table;\n  this.element = this.createHolderElement(); //containing element\n\n  this.tableElement = this.createTableElement(); //table element\n\n  this.heightFixer = this.createTableElement(); //table element\n\n  this.columnManager = null; //hold column manager object\n\n  this.height = 0; //hold height of table element\n\n  this.firstRender = false; //handle first render\n\n  this.renderMode = \"virtual\"; //current rendering mode\n\n  this.fixedHeight = false; //current rendering mode\n\n  this.rows = []; //hold row data objects\n\n  this.activeRows = []; //rows currently available to on display in the table\n\n  this.activeRowsCount = 0; //count of active rows\n\n  this.displayRows = []; //rows currently on display in the table\n\n  this.displayRowsCount = 0; //count of display rows\n\n  this.scrollTop = 0;\n  this.scrollLeft = 0;\n  this.vDomRowHeight = 20; //approximation of row heights for padding\n\n  this.vDomTop = 0; //hold position for first rendered row in the virtual DOM\n\n  this.vDomBottom = 0; //hold possition for last rendered row in the virtual DOM\n\n  this.vDomScrollPosTop = 0; //last scroll position of the vDom top;\n\n  this.vDomScrollPosBottom = 0; //last scroll position of the vDom bottom;\n\n  this.vDomTopPad = 0; //hold value of padding for top of virtual DOM\n\n  this.vDomBottomPad = 0; //hold value of padding for bottom of virtual DOM\n\n  this.vDomMaxRenderChain = 90; //the maximum number of dom elements that can be rendered in 1 go\n\n  this.vDomWindowBuffer = 0; //window row buffer before removing elements, to smooth scrolling\n\n  this.vDomWindowMinTotalRows = 20; //minimum number of rows to be generated in virtual dom (prevent buffering issues on tables with tall rows)\n\n  this.vDomWindowMinMarginRows = 5; //minimum number of rows to be generated in virtual dom margin\n\n  this.vDomTopNewRows = []; //rows to normalize after appending to optimize render speed\n\n  this.vDomBottomNewRows = []; //rows to normalize after appending to optimize render speed\n\n  this.rowNumColumn = false; //hold column component for row number column\n\n  this.redrawBlock = false; //prevent redraws to allow multiple data manipulations becore continuing\n\n  this.redrawBlockRestoreConfig = false; //store latest redraw function calls for when redraw is needed\n\n  this.redrawBlockRederInPosition = false; //store latest redraw function calls for when redraw is needed\n}; //////////////// Setup Functions /////////////////\n\n\nRowManager.prototype.createHolderElement = function () {\n  var el = document.createElement(\"div\");\n  el.classList.add(\"tabulator-tableHolder\");\n  el.setAttribute(\"tabindex\", 0);\n  return el;\n};\n\nRowManager.prototype.createTableElement = function () {\n  var el = document.createElement(\"div\");\n  el.classList.add(\"tabulator-table\");\n  return el;\n}; //return containing element\n\n\nRowManager.prototype.getElement = function () {\n  return this.element;\n}; //return table element\n\n\nRowManager.prototype.getTableElement = function () {\n  return this.tableElement;\n}; //return position of row in table\n\n\nRowManager.prototype.getRowPosition = function (row, active) {\n  if (active) {\n    return this.activeRows.indexOf(row);\n  } else {\n    return this.rows.indexOf(row);\n  }\n}; //link to column manager\n\n\nRowManager.prototype.setColumnManager = function (manager) {\n  this.columnManager = manager;\n};\n\nRowManager.prototype.initialize = function () {\n  var self = this;\n  self.setRenderMode(); //initialize manager\n\n  self.element.appendChild(self.tableElement);\n  self.firstRender = true; //scroll header along with table body\n\n  self.element.addEventListener(\"scroll\", function () {\n    var left = self.element.scrollLeft; //handle horizontal scrolling\n\n    if (self.scrollLeft != left) {\n      self.columnManager.scrollHorizontal(left);\n\n      if (self.table.options.groupBy) {\n        self.table.modules.groupRows.scrollHeaders(left);\n      }\n\n      if (self.table.modExists(\"columnCalcs\")) {\n        self.table.modules.columnCalcs.scrollHorizontal(left);\n      }\n\n      self.table.options.scrollHorizontal(left);\n    }\n\n    self.scrollLeft = left;\n  }); //handle virtual dom scrolling\n\n  if (this.renderMode === \"virtual\") {\n    self.element.addEventListener(\"scroll\", function () {\n      var top = self.element.scrollTop;\n      var dir = self.scrollTop > top; //handle verical scrolling\n\n      if (self.scrollTop != top) {\n        self.scrollTop = top;\n        self.scrollVertical(dir);\n\n        if (self.table.options.ajaxProgressiveLoad == \"scroll\") {\n          self.table.modules.ajax.nextPage(self.element.scrollHeight - self.element.clientHeight - top);\n        }\n\n        self.table.options.scrollVertical(top);\n      } else {\n        self.scrollTop = top;\n      }\n    });\n  }\n}; ////////////////// Row Manipulation //////////////////\n\n\nRowManager.prototype.findRow = function (subject) {\n  var self = this;\n\n  if ((typeof subject === 'undefined' ? 'undefined' : _typeof(subject)) == \"object\") {\n    if (subject instanceof Row) {\n      //subject is row element\n      return subject;\n    } else if (subject instanceof RowComponent) {\n      //subject is public row component\n      return subject._getSelf() || false;\n    } else if (typeof HTMLElement !== \"undefined\" && subject instanceof HTMLElement) {\n      //subject is a HTML element of the row\n      var match = self.rows.find(function (row) {\n        return row.element === subject;\n      });\n      return match || false;\n    }\n  } else if (typeof subject == \"undefined\" || subject === null) {\n    return false;\n  } else {\n    //subject should be treated as the index of the row\n    var _match = self.rows.find(function (row) {\n      return row.data[self.table.options.index] == subject;\n    });\n\n    return _match || false;\n  } //catch all for any other type of input\n\n\n  return false;\n};\n\nRowManager.prototype.getRowFromDataObject = function (data) {\n  var match = this.rows.find(function (row) {\n    return row.data === data;\n  });\n  return match || false;\n};\n\nRowManager.prototype.getRowFromPosition = function (position, active) {\n  if (active) {\n    return this.activeRows[position];\n  } else {\n    return this.rows[position];\n  }\n};\n\nRowManager.prototype.scrollToRow = function (row, position, ifVisible) {\n  var _this10 = this;\n\n  var rowIndex = this.getDisplayRows().indexOf(row),\n      rowEl = row.getElement(),\n      rowTop,\n      offset = 0;\n  return new Promise(function (resolve, reject) {\n    if (rowIndex > -1) {\n      if (typeof position === \"undefined\") {\n        position = _this10.table.options.scrollToRowPosition;\n      }\n\n      if (typeof ifVisible === \"undefined\") {\n        ifVisible = _this10.table.options.scrollToRowIfVisible;\n      }\n\n      if (position === \"nearest\") {\n        switch (_this10.renderMode) {\n          case \"classic\":\n            rowTop = Tabulator.prototype.helpers.elOffset(rowEl).top;\n            position = Math.abs(_this10.element.scrollTop - rowTop) > Math.abs(_this10.element.scrollTop + _this10.element.clientHeight - rowTop) ? \"bottom\" : \"top\";\n            break;\n\n          case \"virtual\":\n            position = Math.abs(_this10.vDomTop - rowIndex) > Math.abs(_this10.vDomBottom - rowIndex) ? \"bottom\" : \"top\";\n            break;\n        }\n      } //check row visibility\n\n\n      if (!ifVisible) {\n        if (Tabulator.prototype.helpers.elVisible(rowEl)) {\n          offset = Tabulator.prototype.helpers.elOffset(rowEl).top - Tabulator.prototype.helpers.elOffset(_this10.element).top;\n\n          if (offset > 0 && offset < _this10.element.clientHeight - rowEl.offsetHeight) {\n            return false;\n          }\n        }\n      } //scroll to row\n\n\n      switch (_this10.renderMode) {\n        case \"classic\":\n          _this10.element.scrollTop = Tabulator.prototype.helpers.elOffset(rowEl).top - Tabulator.prototype.helpers.elOffset(_this10.element).top + _this10.element.scrollTop;\n          break;\n\n        case \"virtual\":\n          _this10._virtualRenderFill(rowIndex, true);\n\n          break;\n      } //align to correct position\n\n\n      switch (position) {\n        case \"middle\":\n        case \"center\":\n          if (_this10.element.scrollHeight - _this10.element.scrollTop == _this10.element.clientHeight) {\n            _this10.element.scrollTop = _this10.element.scrollTop + (rowEl.offsetTop - _this10.element.scrollTop) - (_this10.element.scrollHeight - rowEl.offsetTop) / 2;\n          } else {\n            _this10.element.scrollTop = _this10.element.scrollTop - _this10.element.clientHeight / 2;\n          }\n\n          break;\n\n        case \"bottom\":\n          if (_this10.element.scrollHeight - _this10.element.scrollTop == _this10.element.clientHeight) {\n            _this10.element.scrollTop = _this10.element.scrollTop - (_this10.element.scrollHeight - rowEl.offsetTop) + rowEl.offsetHeight;\n          } else {\n            _this10.element.scrollTop = _this10.element.scrollTop - _this10.element.clientHeight + rowEl.offsetHeight;\n          }\n\n          break;\n      }\n\n      resolve();\n    } else {\n      console.warn(\"Scroll Error - Row not visible\");\n      reject(\"Scroll Error - Row not visible\");\n    }\n  });\n}; ////////////////// Data Handling //////////////////\n\n\nRowManager.prototype.setData = function (data, renderInPosition, columnsChanged) {\n  var _this11 = this;\n\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    if (renderInPosition && _this11.getDisplayRows().length) {\n      if (self.table.options.pagination) {\n        self._setDataActual(data, true);\n      } else {\n        _this11.reRenderInPosition(function () {\n          self._setDataActual(data);\n        });\n      }\n    } else {\n      if (_this11.table.options.autoColumns && columnsChanged) {\n        _this11.table.columnManager.generateColumnsFromRowData(data);\n      }\n\n      _this11.resetScroll();\n\n      _this11._setDataActual(data);\n    }\n\n    resolve();\n  });\n};\n\nRowManager.prototype._setDataActual = function (data, renderInPosition) {\n  var self = this;\n  self.table.options.dataLoading.call(this.table, data);\n\n  this._wipeElements();\n\n  if (this.table.options.history && this.table.modExists(\"history\")) {\n    this.table.modules.history.clear();\n  }\n\n  if (Array.isArray(data)) {\n    if (this.table.modExists(\"selectRow\")) {\n      this.table.modules.selectRow.clearSelectionData();\n    }\n\n    if (this.table.options.reactiveData && this.table.modExists(\"reactiveData\", true)) {\n      this.table.modules.reactiveData.watchData(data);\n    }\n\n    data.forEach(function (def, i) {\n      if (def && (typeof def === 'undefined' ? 'undefined' : _typeof(def)) === \"object\") {\n        var row = new Row(def, self);\n        self.rows.push(row);\n      } else {\n        console.warn(\"Data Loading Warning - Invalid row data detected and ignored, expecting object but received:\", def);\n      }\n    });\n    self.refreshActiveData(false, false, renderInPosition);\n    self.table.options.dataLoaded.call(this.table, data);\n  } else {\n    console.error(\"Data Loading Error - Unable to process data due to invalid data type \\nExpecting: array \\nReceived: \", typeof data === 'undefined' ? 'undefined' : _typeof(data), \"\\nData:     \", data);\n  }\n};\n\nRowManager.prototype._wipeElements = function () {\n  this.rows.forEach(function (row) {\n    row.wipe();\n  });\n\n  if (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n    this.table.modules.groupRows.wipe();\n  }\n\n  this.rows = [];\n  this.adjustTableSize();\n};\n\nRowManager.prototype.deleteRow = function (row, blockRedraw) {\n  var allIndex = this.rows.indexOf(row),\n      activeIndex = this.activeRows.indexOf(row);\n\n  if (activeIndex > -1) {\n    this.activeRows.splice(activeIndex, 1);\n  }\n\n  if (allIndex > -1) {\n    this.rows.splice(allIndex, 1);\n  }\n\n  this.setActiveRows(this.activeRows);\n  this.displayRowIterator(function (rows) {\n    var displayIndex = rows.indexOf(row);\n\n    if (displayIndex > -1) {\n      rows.splice(displayIndex, 1);\n    }\n  });\n\n  if (!blockRedraw) {\n    this.reRenderInPosition();\n  }\n\n  this.regenerateRowNumbers();\n  this.table.options.rowDeleted.call(this.table, row.getComponent());\n\n  if (this.table.options.dataChanged) {\n    this.table.options.dataChanged.call(this.table, this.getData());\n  }\n\n  if (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n    this.table.modules.groupRows.updateGroupRows(true);\n  } else if (this.table.options.pagination && this.table.modExists(\"page\")) {\n    this.refreshActiveData(false, false, true);\n  } else {\n    if (this.table.options.pagination && this.table.modExists(\"page\")) {\n      this.refreshActiveData(\"page\");\n    }\n  }\n};\n\nRowManager.prototype.addRow = function (data, pos, index, blockRedraw) {\n  var row = this.addRowActual(data, pos, index, blockRedraw);\n\n  if (this.table.options.history && this.table.modExists(\"history\")) {\n    this.table.modules.history.action(\"rowAdd\", row, {\n      data: data,\n      pos: pos,\n      index: index\n    });\n  }\n\n  return row;\n}; //add multiple rows\n\n\nRowManager.prototype.addRows = function (data, pos, index) {\n  var _this12 = this;\n\n  var self = this,\n      length = 0,\n      rows = [];\n  return new Promise(function (resolve, reject) {\n    pos = _this12.findAddRowPos(pos);\n\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n\n    length = data.length - 1;\n\n    if (typeof index == \"undefined\" && pos || typeof index !== \"undefined\" && !pos) {\n      data.reverse();\n    }\n\n    data.forEach(function (item, i) {\n      var row = self.addRow(item, pos, index, true);\n      rows.push(row);\n    });\n\n    if (_this12.table.options.groupBy && _this12.table.modExists(\"groupRows\")) {\n      _this12.table.modules.groupRows.updateGroupRows(true);\n    } else if (_this12.table.options.pagination && _this12.table.modExists(\"page\")) {\n      _this12.refreshActiveData(false, false, true);\n    } else {\n      _this12.reRenderInPosition();\n    } //recalc column calculations if present\n\n\n    if (_this12.table.modExists(\"columnCalcs\")) {\n      _this12.table.modules.columnCalcs.recalc(_this12.table.rowManager.activeRows);\n    }\n\n    _this12.regenerateRowNumbers();\n\n    resolve(rows);\n  });\n};\n\nRowManager.prototype.findAddRowPos = function (pos) {\n  if (typeof pos === \"undefined\") {\n    pos = this.table.options.addRowPos;\n  }\n\n  if (pos === \"pos\") {\n    pos = true;\n  }\n\n  if (pos === \"bottom\") {\n    pos = false;\n  }\n\n  return pos;\n};\n\nRowManager.prototype.addRowActual = function (data, pos, index, blockRedraw) {\n  var row = data instanceof Row ? data : new Row(data || {}, this),\n      top = this.findAddRowPos(pos),\n      allIndex = -1,\n      activeIndex,\n      dispRows;\n\n  if (!index && this.table.options.pagination && this.table.options.paginationAddRow == \"page\") {\n    dispRows = this.getDisplayRows();\n\n    if (top) {\n      if (dispRows.length) {\n        index = dispRows[0];\n      } else {\n        if (this.activeRows.length) {\n          index = this.activeRows[this.activeRows.length - 1];\n          top = false;\n        }\n      }\n    } else {\n      if (dispRows.length) {\n        index = dispRows[dispRows.length - 1];\n        top = dispRows.length < this.table.modules.page.getPageSize() ? false : true;\n      }\n    }\n  }\n\n  if (typeof index !== \"undefined\") {\n    index = this.findRow(index);\n  }\n\n  if (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n    this.table.modules.groupRows.assignRowToGroup(row);\n    var groupRows = row.getGroup().rows;\n\n    if (groupRows.length > 1) {\n      if (!index || index && groupRows.indexOf(index) == -1) {\n        if (top) {\n          if (groupRows[0] !== row) {\n            index = groupRows[0];\n\n            this._moveRowInArray(row.getGroup().rows, row, index, !top);\n          }\n        } else {\n          if (groupRows[groupRows.length - 1] !== row) {\n            index = groupRows[groupRows.length - 1];\n\n            this._moveRowInArray(row.getGroup().rows, row, index, !top);\n          }\n        }\n      } else {\n        this._moveRowInArray(row.getGroup().rows, row, index, !top);\n      }\n    }\n  }\n\n  if (index) {\n    allIndex = this.rows.indexOf(index);\n  }\n\n  if (index && allIndex > -1) {\n    activeIndex = this.activeRows.indexOf(index);\n    this.displayRowIterator(function (rows) {\n      var displayIndex = rows.indexOf(index);\n\n      if (displayIndex > -1) {\n        rows.splice(top ? displayIndex : displayIndex + 1, 0, row);\n      }\n    });\n\n    if (activeIndex > -1) {\n      this.activeRows.splice(top ? activeIndex : activeIndex + 1, 0, row);\n    }\n\n    this.rows.splice(top ? allIndex : allIndex + 1, 0, row);\n  } else {\n    if (top) {\n      this.displayRowIterator(function (rows) {\n        rows.unshift(row);\n      });\n      this.activeRows.unshift(row);\n      this.rows.unshift(row);\n    } else {\n      this.displayRowIterator(function (rows) {\n        rows.push(row);\n      });\n      this.activeRows.push(row);\n      this.rows.push(row);\n    }\n  }\n\n  this.setActiveRows(this.activeRows);\n  this.table.options.rowAdded.call(this.table, row.getComponent());\n\n  if (this.table.options.dataChanged) {\n    this.table.options.dataChanged.call(this.table, this.getData());\n  }\n\n  if (!blockRedraw) {\n    this.reRenderInPosition();\n  }\n\n  return row;\n};\n\nRowManager.prototype.moveRow = function (from, to, after) {\n  if (this.table.options.history && this.table.modExists(\"history\")) {\n    this.table.modules.history.action(\"rowMove\", from, {\n      posFrom: this.getRowPosition(from),\n      posTo: this.getRowPosition(to),\n      to: to,\n      after: after\n    });\n  }\n\n  this.moveRowActual(from, to, after);\n  this.regenerateRowNumbers();\n  this.table.options.rowMoved.call(this.table, from.getComponent());\n};\n\nRowManager.prototype.moveRowActual = function (from, to, after) {\n  var _this13 = this;\n\n  this._moveRowInArray(this.rows, from, to, after);\n\n  this._moveRowInArray(this.activeRows, from, to, after);\n\n  this.displayRowIterator(function (rows) {\n    _this13._moveRowInArray(rows, from, to, after);\n  });\n\n  if (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n    if (!after && to instanceof Group) {\n      to = this.table.rowManager.prevDisplayRow(from) || to;\n    }\n\n    var toGroup = to.getGroup();\n    var fromGroup = from.getGroup();\n\n    if (toGroup === fromGroup) {\n      this._moveRowInArray(toGroup.rows, from, to, after);\n    } else {\n      if (fromGroup) {\n        fromGroup.removeRow(from);\n      }\n\n      toGroup.insertRow(from, to, after);\n    }\n  }\n};\n\nRowManager.prototype._moveRowInArray = function (rows, from, to, after) {\n  var fromIndex, toIndex, start, end;\n\n  if (from !== to) {\n    fromIndex = rows.indexOf(from);\n\n    if (fromIndex > -1) {\n      rows.splice(fromIndex, 1);\n      toIndex = rows.indexOf(to);\n\n      if (toIndex > -1) {\n        if (after) {\n          rows.splice(toIndex + 1, 0, from);\n        } else {\n          rows.splice(toIndex, 0, from);\n        }\n      } else {\n        rows.splice(fromIndex, 0, from);\n      }\n    } //restyle rows\n\n\n    if (rows === this.getDisplayRows()) {\n      start = fromIndex < toIndex ? fromIndex : toIndex;\n      end = toIndex > fromIndex ? toIndex : fromIndex + 1;\n\n      for (var _i4 = start; _i4 <= end; _i4++) {\n        if (rows[_i4]) {\n          this.styleRow(rows[_i4], _i4);\n        }\n      }\n    }\n  }\n};\n\nRowManager.prototype.clearData = function () {\n  this.setData([]);\n};\n\nRowManager.prototype.getRowIndex = function (row) {\n  return this.findRowIndex(row, this.rows);\n};\n\nRowManager.prototype.getDisplayRowIndex = function (row) {\n  var index = this.getDisplayRows().indexOf(row);\n  return index > -1 ? index : false;\n};\n\nRowManager.prototype.nextDisplayRow = function (row, rowOnly) {\n  var index = this.getDisplayRowIndex(row),\n      nextRow = false;\n\n  if (index !== false && index < this.displayRowsCount - 1) {\n    nextRow = this.getDisplayRows()[index + 1];\n  }\n\n  if (nextRow && (!(nextRow instanceof Row) || nextRow.type != \"row\")) {\n    return this.nextDisplayRow(nextRow, rowOnly);\n  }\n\n  return nextRow;\n};\n\nRowManager.prototype.prevDisplayRow = function (row, rowOnly) {\n  var index = this.getDisplayRowIndex(row),\n      prevRow = false;\n\n  if (index) {\n    prevRow = this.getDisplayRows()[index - 1];\n  }\n\n  if (rowOnly && prevRow && (!(prevRow instanceof Row) || prevRow.type != \"row\")) {\n    return this.prevDisplayRow(prevRow, rowOnly);\n  }\n\n  return prevRow;\n};\n\nRowManager.prototype.findRowIndex = function (row, list) {\n  var rowIndex;\n  row = this.findRow(row);\n\n  if (row) {\n    rowIndex = list.indexOf(row);\n\n    if (rowIndex > -1) {\n      return rowIndex;\n    }\n  }\n\n  return false;\n};\n\nRowManager.prototype.getData = function (active, transform) {\n  var output = [],\n      rows = this.getRows(active);\n  rows.forEach(function (row) {\n    if (row.type == \"row\") {\n      output.push(row.getData(transform || \"data\"));\n    }\n  });\n  return output;\n};\n\nRowManager.prototype.getComponents = function (active) {\n  var output = [],\n      rows = this.getRows(active);\n  rows.forEach(function (row) {\n    output.push(row.getComponent());\n  });\n  return output;\n};\n\nRowManager.prototype.getDataCount = function (active) {\n  var rows = this.getRows(active);\n  return rows.length;\n};\n\nRowManager.prototype._genRemoteRequest = function () {\n  var _this14 = this;\n\n  var table = this.table,\n      options = table.options,\n      params = {};\n\n  if (table.modExists(\"page\")) {\n    //set sort data if defined\n    if (options.ajaxSorting) {\n      var sorters = this.table.modules.sort.getSort();\n      sorters.forEach(function (item) {\n        delete item.column;\n      });\n      params[this.table.modules.page.paginationDataSentNames.sorters] = sorters;\n    } //set filter data if defined\n\n\n    if (options.ajaxFiltering) {\n      var filters = this.table.modules.filter.getFilters(true, true);\n      params[this.table.modules.page.paginationDataSentNames.filters] = filters;\n    }\n\n    this.table.modules.ajax.setParams(params, true);\n  }\n\n  table.modules.ajax.sendRequest().then(function (data) {\n    _this14._setDataActual(data, true);\n  }).catch(function (e) {});\n}; //choose the path to refresh data after a filter update\n\n\nRowManager.prototype.filterRefresh = function () {\n  var table = this.table,\n      options = table.options,\n      left = this.scrollLeft;\n\n  if (options.ajaxFiltering) {\n    if (options.pagination == \"remote\" && table.modExists(\"page\")) {\n      table.modules.page.reset(true);\n      table.modules.page.setPage(1).then(function () {}).catch(function () {});\n    } else if (options.ajaxProgressiveLoad) {\n      table.modules.ajax.loadData().then(function () {}).catch(function () {});\n    } else {\n      //assume data is url, make ajax call to url to get data\n      this._genRemoteRequest();\n    }\n  } else {\n    this.refreshActiveData(\"filter\");\n  }\n\n  this.scrollHorizontal(left);\n}; //choose the path to refresh data after a sorter update\n\n\nRowManager.prototype.sorterRefresh = function (loadOrignalData) {\n  var table = this.table,\n      options = this.table.options,\n      left = this.scrollLeft;\n\n  if (options.ajaxSorting) {\n    if ((options.pagination == \"remote\" || options.progressiveLoad) && table.modExists(\"page\")) {\n      table.modules.page.reset(true);\n      table.modules.page.setPage(1).then(function () {}).catch(function () {});\n    } else if (options.ajaxProgressiveLoad) {\n      table.modules.ajax.loadData().then(function () {}).catch(function () {});\n    } else {\n      //assume data is url, make ajax call to url to get data\n      this._genRemoteRequest();\n    }\n  } else {\n    this.refreshActiveData(loadOrignalData ? \"filter\" : \"sort\");\n  }\n\n  this.scrollHorizontal(left);\n};\n\nRowManager.prototype.scrollHorizontal = function (left) {\n  this.scrollLeft = left;\n  this.element.scrollLeft = left;\n\n  if (this.table.options.groupBy) {\n    this.table.modules.groupRows.scrollHeaders(left);\n  }\n\n  if (this.table.modExists(\"columnCalcs\")) {\n    this.table.modules.columnCalcs.scrollHorizontal(left);\n  }\n}; //set active data set\n\n\nRowManager.prototype.refreshActiveData = function (stage, skipStage, renderInPosition) {\n  var self = this,\n      table = this.table,\n      cascadeOrder = [\"all\", \"filter\", \"sort\", \"display\", \"freeze\", \"group\", \"tree\", \"page\"],\n      displayIndex;\n\n  if (this.redrawBlock) {\n    if (!this.redrawBlockRestoreConfig || cascadeOrder.indexOf(stage) < cascadeOrder.indexOf(this.redrawBlockRestoreConfig.stage)) {\n      this.redrawBlockRestoreConfig = {\n        stage: stage,\n        skipStage: skipStage,\n        renderInPosition: renderInPosition\n      };\n    }\n\n    return;\n  } else {\n    if (self.table.modExists(\"edit\")) {\n      self.table.modules.edit.cancelEdit();\n    }\n\n    if (!stage) {\n      stage = \"all\";\n    }\n\n    if (table.options.selectable && !table.options.selectablePersistence && table.modExists(\"selectRow\")) {\n      table.modules.selectRow.deselectRows();\n    } //cascade through data refresh stages\n\n\n    switch (stage) {\n      case \"all\":\n      case \"filter\":\n        if (!skipStage) {\n          if (table.modExists(\"filter\")) {\n            self.setActiveRows(table.modules.filter.filter(self.rows));\n          } else {\n            self.setActiveRows(self.rows.slice(0));\n          }\n        } else {\n          skipStage = false;\n        }\n\n      case \"sort\":\n        if (!skipStage) {\n          if (table.modExists(\"sort\")) {\n            table.modules.sort.sort(this.activeRows);\n          }\n        } else {\n          skipStage = false;\n        } //regenerate row numbers for row number formatter if in use\n\n\n        this.regenerateRowNumbers();\n      //generic stage to allow for pipeline trigger after the data manipulation stage\n\n      case \"display\":\n        this.resetDisplayRows();\n\n      case \"freeze\":\n        if (!skipStage) {\n          if (this.table.modExists(\"frozenRows\")) {\n            if (table.modules.frozenRows.isFrozen()) {\n              if (!table.modules.frozenRows.getDisplayIndex()) {\n                table.modules.frozenRows.setDisplayIndex(this.getNextDisplayIndex());\n              }\n\n              displayIndex = table.modules.frozenRows.getDisplayIndex();\n              displayIndex = self.setDisplayRows(table.modules.frozenRows.getRows(this.getDisplayRows(displayIndex - 1)), displayIndex);\n\n              if (displayIndex !== true) {\n                table.modules.frozenRows.setDisplayIndex(displayIndex);\n              }\n            }\n          }\n        } else {\n          skipStage = false;\n        }\n\n      case \"group\":\n        if (!skipStage) {\n          if (table.options.groupBy && table.modExists(\"groupRows\")) {\n            if (!table.modules.groupRows.getDisplayIndex()) {\n              table.modules.groupRows.setDisplayIndex(this.getNextDisplayIndex());\n            }\n\n            displayIndex = table.modules.groupRows.getDisplayIndex();\n            displayIndex = self.setDisplayRows(table.modules.groupRows.getRows(this.getDisplayRows(displayIndex - 1)), displayIndex);\n\n            if (displayIndex !== true) {\n              table.modules.groupRows.setDisplayIndex(displayIndex);\n            }\n          }\n        } else {\n          skipStage = false;\n        }\n\n      case \"tree\":\n        if (!skipStage) {\n          if (table.options.dataTree && table.modExists(\"dataTree\")) {\n            if (!table.modules.dataTree.getDisplayIndex()) {\n              table.modules.dataTree.setDisplayIndex(this.getNextDisplayIndex());\n            }\n\n            displayIndex = table.modules.dataTree.getDisplayIndex();\n            displayIndex = self.setDisplayRows(table.modules.dataTree.getRows(this.getDisplayRows(displayIndex - 1)), displayIndex);\n\n            if (displayIndex !== true) {\n              table.modules.dataTree.setDisplayIndex(displayIndex);\n            }\n          }\n        } else {\n          skipStage = false;\n        }\n\n        if (table.options.pagination && table.modExists(\"page\") && !renderInPosition) {\n          if (table.modules.page.getMode() == \"local\") {\n            table.modules.page.reset();\n          }\n        }\n\n      case \"page\":\n        if (!skipStage) {\n          if (table.options.pagination && table.modExists(\"page\")) {\n            if (!table.modules.page.getDisplayIndex()) {\n              table.modules.page.setDisplayIndex(this.getNextDisplayIndex());\n            }\n\n            displayIndex = table.modules.page.getDisplayIndex();\n\n            if (table.modules.page.getMode() == \"local\") {\n              table.modules.page.setMaxRows(this.getDisplayRows(displayIndex - 1).length);\n            }\n\n            displayIndex = self.setDisplayRows(table.modules.page.getRows(this.getDisplayRows(displayIndex - 1)), displayIndex);\n\n            if (displayIndex !== true) {\n              table.modules.page.setDisplayIndex(displayIndex);\n            }\n          }\n        } else {\n          skipStage = false;\n        }\n\n    }\n\n    if (Tabulator.prototype.helpers.elVisible(self.element)) {\n      if (renderInPosition) {\n        self.reRenderInPosition();\n      } else {\n        if (stage === \"all\" && this.table.options.virtualDomHoz) {\n          this.table.vdomHoz.dataChange();\n        }\n\n        self.renderTable();\n\n        if (table.options.layoutColumnsOnNewData) {\n          self.table.columnManager.redraw(true);\n        }\n      }\n    }\n\n    if (table.modExists(\"columnCalcs\")) {\n      table.modules.columnCalcs.recalc(this.activeRows);\n    }\n  }\n}; //regenerate row numbers for row number formatter if in use\n\n\nRowManager.prototype.regenerateRowNumbers = function () {\n  var _this15 = this;\n\n  if (this.rowNumColumn) {\n    this.activeRows.forEach(function (row) {\n      var cell = row.getCell(_this15.rowNumColumn);\n\n      if (cell) {\n        cell._generateContents();\n      }\n    });\n  }\n};\n\nRowManager.prototype.setActiveRows = function (activeRows) {\n  this.activeRows = activeRows;\n  this.activeRowsCount = this.activeRows.length;\n}; //reset display rows array\n\n\nRowManager.prototype.resetDisplayRows = function () {\n  this.displayRows = [];\n  this.displayRows.push(this.activeRows.slice(0));\n  this.displayRowsCount = this.displayRows[0].length;\n\n  if (this.table.modExists(\"frozenRows\")) {\n    this.table.modules.frozenRows.setDisplayIndex(0);\n  }\n\n  if (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n    this.table.modules.groupRows.setDisplayIndex(0);\n  }\n\n  if (this.table.options.pagination && this.table.modExists(\"page\")) {\n    this.table.modules.page.setDisplayIndex(0);\n  }\n};\n\nRowManager.prototype.getNextDisplayIndex = function () {\n  return this.displayRows.length;\n}; //set display row pipeline data\n\n\nRowManager.prototype.setDisplayRows = function (displayRows, index) {\n  var output = true;\n\n  if (index && typeof this.displayRows[index] != \"undefined\") {\n    this.displayRows[index] = displayRows;\n    output = true;\n  } else {\n    this.displayRows.push(displayRows);\n    output = index = this.displayRows.length - 1;\n  }\n\n  if (index == this.displayRows.length - 1) {\n    this.displayRowsCount = this.displayRows[this.displayRows.length - 1].length;\n  }\n\n  return output;\n};\n\nRowManager.prototype.getDisplayRows = function (index) {\n  if (typeof index == \"undefined\") {\n    return this.displayRows.length ? this.displayRows[this.displayRows.length - 1] : [];\n  } else {\n    return this.displayRows[index] || [];\n  }\n};\n\nRowManager.prototype.getVisibleRows = function (viewable) {\n  var topEdge = this.element.scrollTop,\n      bottomEdge = this.element.clientHeight + topEdge,\n      topFound = false,\n      topRow = 0,\n      bottomRow = 0,\n      rows = this.getDisplayRows();\n\n  if (viewable) {\n    this.getDisplayRows();\n\n    for (var i = this.vDomTop; i <= this.vDomBottom; i++) {\n      if (rows[i]) {\n        if (!topFound) {\n          if (topEdge - rows[i].getElement().offsetTop >= 0) {\n            topRow = i;\n          } else {\n            topFound = true;\n\n            if (bottomEdge - rows[i].getElement().offsetTop >= 0) {\n              bottomRow = i;\n            } else {\n              break;\n            }\n          }\n        } else {\n          if (bottomEdge - rows[i].getElement().offsetTop >= 0) {\n            bottomRow = i;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  } else {\n    topRow = this.vDomTop;\n    bottomRow = this.vDomBottom;\n  }\n\n  return rows.slice(topRow, bottomRow + 1);\n}; //repeat action accross display rows\n\n\nRowManager.prototype.displayRowIterator = function (callback) {\n  this.displayRows.forEach(callback);\n  this.displayRowsCount = this.displayRows[this.displayRows.length - 1].length;\n}; //return only actual rows (not group headers etc)\n\n\nRowManager.prototype.getRows = function (active) {\n  var rows;\n\n  switch (active) {\n    case \"active\":\n      rows = this.activeRows;\n      break;\n\n    case \"display\":\n      rows = this.table.rowManager.getDisplayRows();\n      break;\n\n    case \"visible\":\n      rows = this.getVisibleRows(true);\n      break;\n\n    case \"selected\":\n      rows = this.table.modules.selectRow.selectedRows;\n      break;\n\n    default:\n      rows = this.rows;\n  }\n\n  return rows;\n}; ///////////////// Table Rendering /////////////////\n//trigger rerender of table in current position\n\n\nRowManager.prototype.reRenderInPosition = function (callback) {\n  if (this.getRenderMode() == \"virtual\") {\n    if (this.redrawBlock) {\n      if (callback) {\n        callback();\n      } else {\n        this.redrawBlockRederInPosition = true;\n      }\n    } else {\n      var scrollTop = this.element.scrollTop;\n      var topRow = false;\n      var topOffset = false;\n      var left = this.scrollLeft;\n      var rows = this.getDisplayRows();\n\n      for (var i = this.vDomTop; i <= this.vDomBottom; i++) {\n        if (rows[i]) {\n          var diff = scrollTop - rows[i].getElement().offsetTop;\n\n          if (topOffset === false || Math.abs(diff) < topOffset) {\n            topOffset = diff;\n            topRow = i;\n          } else {\n            break;\n          }\n        }\n      }\n\n      if (callback) {\n        callback();\n      }\n\n      this._virtualRenderFill(topRow === false ? this.displayRowsCount - 1 : topRow, true, topOffset || 0);\n\n      this.scrollHorizontal(left);\n    }\n  } else {\n    this.renderTable();\n\n    if (callback) {\n      callback();\n    }\n  }\n};\n\nRowManager.prototype.setRenderMode = function () {\n  if (this.table.options.virtualDom) {\n    this.renderMode = \"virtual\";\n\n    if (this.table.element.clientHeight || this.table.options.height) {\n      this.fixedHeight = true;\n    } else {\n      this.fixedHeight = false;\n    }\n  } else {\n    this.renderMode = \"classic\";\n  }\n};\n\nRowManager.prototype.getRenderMode = function () {\n  return this.renderMode;\n};\n\nRowManager.prototype.renderTable = function () {\n  this.table.options.renderStarted.call(this.table);\n  this.element.scrollTop = 0;\n\n  switch (this.renderMode) {\n    case \"classic\":\n      this._simpleRender();\n\n      break;\n\n    case \"virtual\":\n      this._virtualRenderFill();\n\n      break;\n  }\n\n  if (this.firstRender) {\n    if (this.displayRowsCount) {\n      this.firstRender = false;\n      this.table.modules.layout.layout();\n    } else {\n      this.renderEmptyScroll();\n    }\n  }\n\n  if (this.table.modExists(\"frozenColumns\")) {\n    this.table.modules.frozenColumns.layout();\n  }\n\n  if (!this.displayRowsCount) {\n    if (this.table.options.placeholder) {\n      this.table.options.placeholder.setAttribute(\"tabulator-render-mode\", this.renderMode);\n      this.getElement().appendChild(this.table.options.placeholder);\n      this.table.options.placeholder.style.width = this.table.columnManager.getWidth() + \"px\";\n    }\n  }\n\n  this.table.options.renderComplete.call(this.table);\n}; //simple render on heightless table\n\n\nRowManager.prototype._simpleRender = function () {\n  this._clearVirtualDom();\n\n  if (this.displayRowsCount) {\n    this.checkClassicModeGroupHeaderWidth();\n  } else {\n    this.renderEmptyScroll();\n  }\n};\n\nRowManager.prototype.checkClassicModeGroupHeaderWidth = function () {\n  var self = this,\n      element = this.tableElement,\n      onlyGroupHeaders = true;\n  self.getDisplayRows().forEach(function (row, index) {\n    self.styleRow(row, index);\n    element.appendChild(row.getElement());\n    row.initialize(true);\n\n    if (row.type !== \"group\") {\n      onlyGroupHeaders = false;\n    }\n  });\n\n  if (onlyGroupHeaders) {\n    element.style.minWidth = self.table.columnManager.getWidth() + \"px\";\n  } else {\n    element.style.minWidth = \"\";\n  }\n}; //show scrollbars on empty table div\n\n\nRowManager.prototype.renderEmptyScroll = function () {\n  if (this.table.options.placeholder) {\n    this.tableElement.style.display = \"none\";\n  } else {\n    this.tableElement.style.minWidth = this.table.columnManager.getWidth() + \"px\";\n    this.tableElement.style.minHeight = \"1px\";\n    this.tableElement.style.visibility = \"hidden\";\n  }\n};\n\nRowManager.prototype._clearVirtualDom = function () {\n  var element = this.tableElement;\n\n  if (this.table.options.placeholder && this.table.options.placeholder.parentNode) {\n    this.table.options.placeholder.parentNode.removeChild(this.table.options.placeholder);\n  } // element.children.detach();\n\n\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n\n  element.style.paddingTop = \"\";\n  element.style.paddingBottom = \"\";\n  element.style.minWidth = \"\";\n  element.style.minHeight = \"\";\n  element.style.display = \"\";\n  element.style.visibility = \"\";\n  this.scrollTop = 0;\n  this.scrollLeft = 0;\n  this.vDomTop = 0;\n  this.vDomBottom = 0;\n  this.vDomTopPad = 0;\n  this.vDomBottomPad = 0;\n};\n\nRowManager.prototype.styleRow = function (row, index) {\n  var rowEl = row.getElement();\n\n  if (index % 2) {\n    rowEl.classList.add(\"tabulator-row-even\");\n    rowEl.classList.remove(\"tabulator-row-odd\");\n  } else {\n    rowEl.classList.add(\"tabulator-row-odd\");\n    rowEl.classList.remove(\"tabulator-row-even\");\n  }\n}; //full virtual render\n\n\nRowManager.prototype._virtualRenderFill = function (position, forceMove, offset) {\n  var self = this,\n      element = self.tableElement,\n      holder = self.element,\n      topPad = 0,\n      rowsHeight = 0,\n      topPadHeight = 0,\n      i = 0,\n      onlyGroupHeaders = true,\n      rows = self.getDisplayRows();\n  position = position || 0;\n  offset = offset || 0;\n\n  if (!position) {\n    self._clearVirtualDom();\n  } else {\n    while (element.firstChild) {\n      element.removeChild(element.firstChild);\n    } //check if position is too close to bottom of table\n\n\n    var heightOccupied = (self.displayRowsCount - position + 1) * self.vDomRowHeight;\n\n    if (heightOccupied < self.height) {\n      position -= Math.ceil((self.height - heightOccupied) / self.vDomRowHeight);\n\n      if (position < 0) {\n        position = 0;\n      }\n    } //calculate initial pad\n\n\n    topPad = Math.min(Math.max(Math.floor(self.vDomWindowBuffer / self.vDomRowHeight), self.vDomWindowMinMarginRows), position);\n    position -= topPad;\n  }\n\n  if (self.displayRowsCount && Tabulator.prototype.helpers.elVisible(self.element)) {\n    self.vDomTop = position;\n    self.vDomBottom = position - 1;\n\n    while ((rowsHeight <= self.height + self.vDomWindowBuffer || i < self.vDomWindowMinTotalRows) && self.vDomBottom < self.displayRowsCount - 1) {\n      var index = self.vDomBottom + 1,\n          row = rows[index],\n          rowHeight = 0;\n      self.styleRow(row, index);\n      element.appendChild(row.getElement());\n      row.initialize();\n\n      if (!row.heightInitialized) {\n        row.normalizeHeight(true);\n      } // if(!row.initialized){\n      // \trow.initialize(true);\n      // }else{\n      // \tif(!row.heightInitialized){\n      // \t\trow.normalizeHeight(true);\n      // \t}\n      // }\n\n\n      rowHeight = row.getHeight();\n\n      if (i < topPad) {\n        topPadHeight += rowHeight;\n      } else {\n        rowsHeight += rowHeight;\n      }\n\n      if (rowHeight > this.vDomWindowBuffer) {\n        this.vDomWindowBuffer = rowHeight * 2;\n      }\n\n      if (row.type !== \"group\") {\n        onlyGroupHeaders = false;\n      }\n\n      self.vDomBottom++;\n      i++;\n    }\n\n    if (!position) {\n      this.vDomTopPad = 0; //adjust rowheight to match average of rendered elements\n\n      self.vDomRowHeight = Math.floor((rowsHeight + topPadHeight) / i);\n      self.vDomBottomPad = self.vDomRowHeight * (self.displayRowsCount - self.vDomBottom - 1);\n      self.vDomScrollHeight = topPadHeight + rowsHeight + self.vDomBottomPad - self.height;\n    } else {\n      self.vDomTopPad = !forceMove ? self.scrollTop - topPadHeight : self.vDomRowHeight * this.vDomTop + offset;\n      self.vDomBottomPad = self.vDomBottom == self.displayRowsCount - 1 ? 0 : Math.max(self.vDomScrollHeight - self.vDomTopPad - rowsHeight - topPadHeight, 0);\n    }\n\n    element.style.paddingTop = self.vDomTopPad + \"px\";\n    element.style.paddingBottom = self.vDomBottomPad + \"px\";\n\n    if (forceMove) {\n      this.scrollTop = self.vDomTopPad + topPadHeight + offset - (this.element.scrollWidth > this.element.clientWidth ? this.element.offsetHeight - this.element.clientHeight : 0);\n    }\n\n    this.scrollTop = Math.min(this.scrollTop, this.element.scrollHeight - this.height); //adjust for horizontal scrollbar if present (and not at top of table)\n\n    if (this.element.scrollWidth > this.element.offsetWidth && forceMove) {\n      this.scrollTop += this.element.offsetHeight - this.element.clientHeight;\n    }\n\n    this.vDomScrollPosTop = this.scrollTop;\n    this.vDomScrollPosBottom = this.scrollTop;\n    holder.scrollTop = this.scrollTop;\n    element.style.minWidth = onlyGroupHeaders ? self.table.columnManager.getWidth() + \"px\" : \"\";\n\n    if (self.table.options.groupBy) {\n      if (self.table.modules.layout.getMode() != \"fitDataFill\" && self.displayRowsCount == self.table.modules.groupRows.countGroups()) {\n        self.tableElement.style.minWidth = self.table.columnManager.getWidth();\n      }\n    }\n  } else {\n    this.renderEmptyScroll();\n  }\n\n  if (!this.fixedHeight) {\n    this.adjustTableSize();\n  }\n}; //handle vertical scrolling\n\n\nRowManager.prototype.scrollVertical = function (dir) {\n  var topDiff = this.scrollTop - this.vDomScrollPosTop;\n  var bottomDiff = this.scrollTop - this.vDomScrollPosBottom;\n  var margin = this.vDomWindowBuffer * 2;\n\n  if (-topDiff > margin || bottomDiff > margin) {\n    //if big scroll redraw table;\n    var left = this.scrollLeft;\n\n    this._virtualRenderFill(Math.floor(this.element.scrollTop / this.element.scrollHeight * this.displayRowsCount));\n\n    this.scrollHorizontal(left);\n  } else {\n    if (dir) {\n      //scrolling up\n      if (topDiff < 0) {\n        this._addTopRow(-topDiff);\n      }\n\n      if (bottomDiff < 0) {\n        //hide bottom row if needed\n        if (this.vDomScrollHeight - this.scrollTop > this.vDomWindowBuffer) {\n          this._removeBottomRow(-bottomDiff);\n        } else {\n          this.vDomScrollPosBottom = this.scrollTop;\n        }\n      }\n    } else {\n      //scrolling down\n      if (topDiff >= 0) {\n        //hide top row if needed\n        if (this.scrollTop > this.vDomWindowBuffer) {\n          this._removeTopRow(topDiff);\n        } else {\n          this.vDomScrollPosTop = this.scrollTop;\n        }\n      }\n\n      if (bottomDiff >= 0) {\n        this._addBottomRow(bottomDiff);\n      }\n    }\n  }\n};\n\nRowManager.prototype._addTopRow = function (topDiff) {\n  var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var table = this.tableElement,\n      rows = this.getDisplayRows();\n\n  if (this.vDomTop) {\n    var index = this.vDomTop - 1,\n        topRow = rows[index],\n        topRowHeight = topRow.getHeight() || this.vDomRowHeight; //hide top row if needed\n\n    if (topDiff >= topRowHeight) {\n      this.styleRow(topRow, index);\n      table.insertBefore(topRow.getElement(), table.firstChild);\n\n      if (!topRow.initialized || !topRow.heightInitialized) {\n        this.vDomTopNewRows.push(topRow);\n\n        if (!topRow.heightInitialized) {\n          topRow.clearCellHeight();\n        }\n      }\n\n      topRow.initialize();\n      this.vDomTopPad -= topRowHeight;\n\n      if (this.vDomTopPad < 0) {\n        this.vDomTopPad = index * this.vDomRowHeight;\n      }\n\n      if (!index) {\n        this.vDomTopPad = 0;\n      }\n\n      table.style.paddingTop = this.vDomTopPad + \"px\";\n      this.vDomScrollPosTop -= topRowHeight;\n      this.vDomTop--;\n    }\n\n    topDiff = -(this.scrollTop - this.vDomScrollPosTop);\n\n    if (topRow.getHeight() > this.vDomWindowBuffer) {\n      this.vDomWindowBuffer = topRow.getHeight() * 2;\n    }\n\n    if (i < this.vDomMaxRenderChain && this.vDomTop && topDiff >= (rows[this.vDomTop - 1].getHeight() || this.vDomRowHeight)) {\n      this._addTopRow(topDiff, i + 1);\n    } else {\n      this._quickNormalizeRowHeight(this.vDomTopNewRows);\n    }\n  }\n};\n\nRowManager.prototype._removeTopRow = function (topDiff) {\n  var table = this.tableElement,\n      topRow = this.getDisplayRows()[this.vDomTop],\n      topRowHeight = topRow.getHeight() || this.vDomRowHeight;\n\n  if (topDiff >= topRowHeight) {\n    var rowEl = topRow.getElement();\n    rowEl.parentNode.removeChild(rowEl);\n    this.vDomTopPad += topRowHeight;\n    table.style.paddingTop = this.vDomTopPad + \"px\";\n    this.vDomScrollPosTop += this.vDomTop ? topRowHeight : topRowHeight + this.vDomWindowBuffer;\n    this.vDomTop++;\n    topDiff = this.scrollTop - this.vDomScrollPosTop;\n\n    this._removeTopRow(topDiff);\n  }\n};\n\nRowManager.prototype._addBottomRow = function (bottomDiff) {\n  var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var table = this.tableElement,\n      rows = this.getDisplayRows();\n\n  if (this.vDomBottom < this.displayRowsCount - 1) {\n    var index = this.vDomBottom + 1,\n        bottomRow = rows[index],\n        bottomRowHeight = bottomRow.getHeight() || this.vDomRowHeight; //hide bottom row if needed\n\n    if (bottomDiff >= bottomRowHeight) {\n      this.styleRow(bottomRow, index);\n      table.appendChild(bottomRow.getElement());\n\n      if (!bottomRow.initialized || !bottomRow.heightInitialized) {\n        this.vDomBottomNewRows.push(bottomRow);\n\n        if (!bottomRow.heightInitialized) {\n          bottomRow.clearCellHeight();\n        }\n      }\n\n      bottomRow.initialize();\n      this.vDomBottomPad -= bottomRowHeight;\n\n      if (this.vDomBottomPad < 0 || index == this.displayRowsCount - 1) {\n        this.vDomBottomPad = 0;\n      }\n\n      table.style.paddingBottom = this.vDomBottomPad + \"px\";\n      this.vDomScrollPosBottom += bottomRowHeight;\n      this.vDomBottom++;\n    }\n\n    bottomDiff = this.scrollTop - this.vDomScrollPosBottom;\n\n    if (bottomRow.getHeight() > this.vDomWindowBuffer) {\n      this.vDomWindowBuffer = bottomRow.getHeight() * 2;\n    }\n\n    if (i < this.vDomMaxRenderChain && this.vDomBottom < this.displayRowsCount - 1 && bottomDiff >= (rows[this.vDomBottom + 1].getHeight() || this.vDomRowHeight)) {\n      this._addBottomRow(bottomDiff, i + 1);\n    } else {\n      this._quickNormalizeRowHeight(this.vDomBottomNewRows);\n    }\n  }\n};\n\nRowManager.prototype._removeBottomRow = function (bottomDiff) {\n  var table = this.tableElement,\n      bottomRow = this.getDisplayRows()[this.vDomBottom],\n      bottomRowHeight = bottomRow.getHeight() || this.vDomRowHeight;\n\n  if (bottomDiff >= bottomRowHeight) {\n    var rowEl = bottomRow.getElement();\n\n    if (rowEl.parentNode) {\n      rowEl.parentNode.removeChild(rowEl);\n    }\n\n    this.vDomBottomPad += bottomRowHeight;\n\n    if (this.vDomBottomPad < 0) {\n      this.vDomBottomPad = 0;\n    }\n\n    table.style.paddingBottom = this.vDomBottomPad + \"px\";\n    this.vDomScrollPosBottom -= bottomRowHeight;\n    this.vDomBottom--;\n    bottomDiff = -(this.scrollTop - this.vDomScrollPosBottom);\n\n    this._removeBottomRow(bottomDiff);\n  }\n};\n\nRowManager.prototype._quickNormalizeRowHeight = function (rows) {\n  rows.forEach(function (row) {\n    row.calcHeight();\n  });\n  rows.forEach(function (row) {\n    row.setCellHeight();\n  });\n  rows.length = 0;\n}; //normalize height of active rows\n\n\nRowManager.prototype.normalizeHeight = function () {\n  this.activeRows.forEach(function (row) {\n    row.normalizeHeight();\n  });\n}; //adjust the height of the table holder to fit in the Tabulator element\n\n\nRowManager.prototype.adjustTableSize = function () {\n  var initialHeight = this.element.clientHeight,\n      modExists;\n\n  if (this.renderMode === \"virtual\") {\n    var otherHeight = this.columnManager.getElement().offsetHeight + (this.table.footerManager && !this.table.footerManager.external ? this.table.footerManager.getElement().offsetHeight : 0);\n\n    if (this.fixedHeight) {\n      this.element.style.minHeight = \"calc(100% - \" + otherHeight + \"px)\";\n      this.element.style.height = \"calc(100% - \" + otherHeight + \"px)\";\n      this.element.style.maxHeight = \"calc(100% - \" + otherHeight + \"px)\";\n    } else {\n      this.element.style.height = \"\";\n      this.element.style.height = this.table.element.clientHeight - otherHeight + \"px\";\n      this.element.scrollTop = this.scrollTop;\n    }\n\n    this.height = this.element.clientHeight;\n    this.vDomWindowBuffer = this.table.options.virtualDomBuffer || this.height; //check if the table has changed size when dealing with variable height tables\n\n    if (!this.fixedHeight && initialHeight != this.element.clientHeight) {\n      modExists = this.table.modExists(\"resizeTable\");\n\n      if (modExists && !this.table.modules.resizeTable.autoResize || !modExists) {\n        this.redraw();\n      }\n    }\n  }\n}; //renitialize all rows\n\n\nRowManager.prototype.reinitialize = function () {\n  this.rows.forEach(function (row) {\n    row.reinitialize();\n  });\n}; //prevent table from being redrawn\n\n\nRowManager.prototype.blockRedraw = function () {\n  this.redrawBlock = true;\n  this.redrawBlockRestoreConfig = false;\n}; //restore table redrawing\n\n\nRowManager.prototype.restoreRedraw = function () {\n  this.redrawBlock = false;\n\n  if (this.redrawBlockRestoreConfig) {\n    this.refreshActiveData(this.redrawBlockRestoreConfig.stage, this.redrawBlockRestoreConfig.skipStage, this.redrawBlockRestoreConfig.renderInPosition);\n    this.redrawBlockRestoreConfig = false;\n  } else {\n    if (this.redrawBlockRederInPosition) {\n      this.reRenderInPosition();\n    }\n  }\n\n  this.redrawBlockRederInPosition = false;\n}; //redraw table\n\n\nRowManager.prototype.redraw = function (force) {\n  var pos = 0,\n      left = this.scrollLeft;\n  this.adjustTableSize();\n  this.table.tableWidth = this.table.element.clientWidth;\n\n  if (!force) {\n    if (this.renderMode == \"classic\") {\n      if (this.table.options.groupBy) {\n        this.refreshActiveData(\"group\", false, false);\n      } else {\n        this._simpleRender();\n      }\n    } else {\n      this.reRenderInPosition();\n      this.scrollHorizontal(left);\n    }\n\n    if (!this.displayRowsCount) {\n      if (this.table.options.placeholder) {\n        this.getElement().appendChild(this.table.options.placeholder);\n      }\n    }\n  } else {\n    this.renderTable();\n  }\n};\n\nRowManager.prototype.resetScroll = function () {\n  this.element.scrollLeft = 0;\n  this.element.scrollTop = 0;\n\n  if (this.table.browser === \"ie\") {\n    var event = document.createEvent(\"Event\");\n    event.initEvent(\"scroll\", false, true);\n    this.element.dispatchEvent(event);\n  } else {\n    this.element.dispatchEvent(new Event('scroll'));\n  }\n};\n\nvar VDomHoz = function VDomHoz(table) {\n  this.table = table;\n  this.element = this.table.rowManager.tableElement;\n  this.holderEl = this.table.rowManager.element;\n  this.leftCol = 0;\n  this.rightCol = 0;\n  this.scrollLeft = 0;\n  this.vDomScrollPosLeft = 0;\n  this.vDomScrollPosRight = 0;\n  this.vDomPadLeft = 0;\n  this.vDomPadRight = 0;\n  this.fitDataColAvg = 0;\n  this.window = 200; //pixel margin to make column visible before it is shown on screen\n\n  this.initialized = false;\n  this.columns = [];\n\n  if (this.compatabilityCheck()) {\n    this.initialize();\n  }\n};\n\nVDomHoz.prototype.compatabilityCheck = function () {\n  var options = this.table.options,\n      frozen = false,\n      ok = true;\n\n  if (options.layout == \"fitDataTable\") {\n    console.warn(\"Horizontal Vitrual DOM is not compatible with fitDataTable layout mode\");\n    ok = false;\n  }\n\n  if (options.responsiveLayout) {\n    console.warn(\"Horizontal Vitrual DOM is not compatible with responsive columns\");\n    ok = false;\n  }\n\n  if (this.table.rtl) {\n    console.warn(\"Horizontal Vitrual DOM is not currently compatible with RTL text direction\");\n    ok = false;\n  } // if(options.rowFormatter){\n  // \tconsole.warn(\"Horizontal Vitrual DOM is not compatible with row formatters\");\n  // \tok = false;\n  // }\n\n\n  if (options.columns) {\n    frozen = options.columns.find(function (col) {\n      return col.frozen;\n    });\n\n    if (frozen) {\n      console.warn(\"Horizontal Vitrual DOM is not compatible with frozen columns\");\n      ok = false;\n    }\n  }\n\n  if (!ok) {\n    options.virtualDomHoz = false;\n  }\n\n  return ok;\n};\n\nVDomHoz.prototype.initialize = function () {\n  var _this16 = this;\n\n  this.holderEl.addEventListener(\"scroll\", function () {\n    var left = _this16.holderEl.scrollLeft;\n\n    if (_this16.scrollLeft != left) {\n      _this16.scrollLeft = left;\n\n      _this16.scroll(left - (_this16.vDomScrollPosLeft + _this16.window));\n    }\n  });\n};\n\nVDomHoz.prototype.deinitialize = function () {\n  this.initialized = false;\n};\n\nVDomHoz.prototype.clear = function () {\n  this.columns = [];\n  this.leftCol = -1;\n  this.rightCol = 0;\n  this.vDomScrollPosLeft = 0;\n  this.vDomScrollPosRight = 0;\n  this.vDomPadLeft = 0;\n  this.vDomPadRight = 0;\n};\n\nVDomHoz.prototype.dataChange = function () {\n  var change = false,\n      collsWidth = 0,\n      colEnd = 0,\n      group,\n      row,\n      rowEl;\n\n  if (this.table.options.layout === \"fitData\") {\n    this.table.columnManager.columnsByIndex.forEach(function (column) {\n      if (!column.definition.width && column.visible) {\n        change = true;\n      }\n    });\n\n    if (change) {\n      if (change && this.table.rowManager.getDisplayRows().length) {\n        // this.table.vdomHoz.deinitialize();\n        this.vDomScrollPosRight = this.scrollLeft + this.holderEl.clientWidth + this.window;\n\n        if (this.table.options.groupBy) {\n          group = this.table.modules.groupRows.getGroups(false)[0];\n          row = group.getRows(false)[0];\n        } else {\n          row = this.table.rowManager.getDisplayRows()[0];\n        }\n\n        if (row) {\n          rowEl = row.getElement();\n          row.generateCells();\n          this.element.appendChild(rowEl);\n\n          for (var colEnd = 0; colEnd < row.cells.length; colEnd++) {\n            var cell = row.cells[colEnd];\n            rowEl.appendChild(cell.getElement());\n            cell.column.reinitializeWidth();\n            collsWidth += cell.column.getWidth();\n\n            if (collsWidth > this.vDomScrollPosRight) {\n              break;\n            }\n          }\n\n          rowEl.parentNode.removeChild(rowEl);\n          this.fitDataColAvg = Math.floor(collsWidth / (colEnd + 1));\n\n          for (colEnd; colEnd < this.table.columnManager.columnsByIndex.length; colEnd++) {\n            this.table.columnManager.columnsByIndex[colEnd].setWidth(this.fitDataColAvg);\n          }\n\n          this.reinitialize(false, true);\n        }\n      }\n    }\n  } else {\n    if (this.table.options.layout === \"fitColumns\") {\n      this.table.modules.layout.layout();\n      this.table.vdomHoz.reinitialize(false, true);\n    }\n  }\n};\n\nVDomHoz.prototype.fitDataLayoutOverride = function () {\n  for (var _i5 = this.leftCol; _i5 <= this.rightCol; _i5++) {\n    this.columns[_i5].reinitializeWidth();\n  }\n};\n\nVDomHoz.prototype.reinitialize = function (update, blockRedraw) {\n  var _this17 = this;\n\n  var old = {\n    cols: this.columns,\n    leftCol: this.leftCol,\n    rightCol: this.rightCol\n  };\n\n  if (update && !this.initialized) {\n    return;\n  }\n\n  this.clear();\n  this.scrollLeft = this.holderEl.scrollLeft;\n  this.vDomScrollPosLeft = this.scrollLeft - this.window;\n  this.vDomScrollPosRight = this.scrollLeft + this.holderEl.clientWidth + this.window;\n  var colPos = 0;\n  this.table.columnManager.columnsByIndex.forEach(function (column) {\n    var config = {};\n\n    if (column.visible) {\n      var width = column.getWidth();\n      config.leftPos = colPos;\n      config.rightPos = colPos + width;\n\n      if (colPos + width > _this17.vDomScrollPosLeft && colPos < _this17.vDomScrollPosRight) {\n        //column is visible\n        if (_this17.leftCol == -1) {\n          _this17.leftCol = _this17.columns.length;\n          _this17.vDomPadLeft = colPos;\n        }\n\n        _this17.rightCol = _this17.columns.length;\n      } else {\n        // column is hidden\n        if (_this17.leftCol !== -1) {\n          _this17.vDomPadRight += width;\n        }\n      }\n\n      _this17.columns.push(column);\n\n      column.modules.vdomHoz = config;\n      colPos += width;\n    }\n  });\n  this.element.style.paddingLeft = this.vDomPadLeft + \"px\";\n  this.element.style.paddingRight = this.vDomPadRight + \"px\";\n  this.initialized = true;\n\n  if (!blockRedraw) {\n    if (!update || this.reinitChanged(old)) {\n      this.renitializeRows();\n    }\n  }\n\n  this.holderEl.scrollLeft = this.scrollLeft;\n};\n\nVDomHoz.prototype.reinitChanged = function (old) {\n  var _this18 = this;\n\n  var match = true;\n\n  if (old.cols.length !== this.columns.length || old.leftCol !== this.leftCol || old.rightCol !== this.rightCol) {\n    return true;\n  }\n\n  old.cols.forEach(function (col, i) {\n    if (col !== _this18.columns[i]) {\n      match = false;\n    }\n  });\n  return !match;\n};\n\nVDomHoz.prototype.renitializeRows = function () {\n  var _this19 = this;\n\n  var rows = this.table.rowManager.getVisibleRows();\n  rows.forEach(function (row) {\n    _this19.reinitializeRow(row, true);\n  });\n};\n\nVDomHoz.prototype.scroll = function (diff) {\n  this.vDomScrollPosLeft += diff;\n  this.vDomScrollPosRight += diff;\n\n  if (diff > this.holderEl.clientWidth * .8) {\n    this.reinitialize();\n  } else {\n    if (diff > 0) {\n      //scroll right\n      this.addColRight();\n      this.removeColLeft();\n    } else {\n      //scroll left\n      this.addColLeft();\n      this.removeColRight();\n    }\n  }\n};\n\nVDomHoz.prototype.colPositionAdjust = function (start, end, diff) {\n  for (var _i6 = start; _i6 < end; _i6++) {\n    var column = this.columns[_i6];\n    column.modules.vdomHoz.leftPos -= diff;\n    column.modules.vdomHoz.rightPos -= diff;\n  }\n};\n\nVDomHoz.prototype.addColRight = function () {\n  var column = this.columns[this.rightCol + 1],\n      rows,\n      oldWidth,\n      widthDiff;\n\n  if (column && column.modules.vdomHoz.leftPos <= this.vDomScrollPosRight) {\n    rows = this.table.rowManager.getVisibleRows();\n    rows.forEach(function (row) {\n      if (row.type !== \"group\") {\n        var cell = row.getCell(column);\n        row.getElement().appendChild(cell.getElement());\n        cell.cellRendered();\n      }\n    });\n\n    if (this.fitDataColAvg) {\n      oldWidth = column.getWidth();\n\n      if (oldWidth === this.fitDataColAvg) {\n        column.reinitializeWidth();\n        widthDiff = oldWidth - column.getWidth();\n\n        if (widthDiff) {\n          column.modules.vdomHoz.rightPos -= widthDiff;\n          this.colPositionAdjust(this.rightCol + 1, this.columns.length, widthDiff);\n        }\n      }\n    }\n\n    this.rightCol++;\n\n    if (this.rightCol >= this.columns.length - 1) {\n      this.vDomPadRight = 0;\n    } else {\n      this.vDomPadRight -= column.getWidth();\n    }\n\n    this.element.style.paddingRight = this.vDomPadRight + \"px\";\n    this.addColRight();\n  }\n};\n\nVDomHoz.prototype.addColLeft = function () {\n  var column = this.columns[this.leftCol - 1],\n      rows;\n\n  if (column && column.modules.vdomHoz.rightPos >= this.vDomScrollPosLeft) {\n    var rows = this.table.rowManager.getVisibleRows();\n    rows.forEach(function (row) {\n      if (row.type !== \"group\") {\n        var cell = row.getCell(column);\n        row.getElement().prepend(cell.getElement());\n        cell.cellRendered();\n      }\n    });\n\n    if (!this.leftCol) {\n      this.vDomPadLeft = 0;\n    } else {\n      this.vDomPadLeft -= column.getWidth();\n    }\n\n    this.element.style.paddingLeft = this.vDomPadLeft + \"px\";\n    this.leftCol--;\n    this.addColLeft();\n  }\n};\n\nVDomHoz.prototype.removeColRight = function (column) {\n  var column = this.columns[this.rightCol],\n      rows;\n\n  if (column && column.modules.vdomHoz.leftPos > this.vDomScrollPosRight) {\n    rows = this.table.rowManager.getVisibleRows();\n    column.modules.vdomHoz.visible = false;\n    rows.forEach(function (row) {\n      if (row.type !== \"group\") {\n        var cell = row.getCell(column);\n        row.getElement().removeChild(cell.getElement());\n      }\n    });\n    this.vDomPadRight += column.getWidth();\n    this.element.style.paddingRight = this.vDomPadRight + \"px\";\n    this.rightCol--;\n    this.removeColRight();\n  }\n};\n\nVDomHoz.prototype.removeColLeft = function () {\n  var column = this.columns[this.leftCol],\n      rows;\n\n  if (column && column.modules.vdomHoz.rightPos < this.vDomScrollPosLeft) {\n    rows = this.table.rowManager.getVisibleRows();\n    rows.forEach(function (row) {\n      if (row.type !== \"group\") {\n        var cell = row.getCell(column);\n        row.getElement().removeChild(cell.getElement());\n      }\n    });\n    this.vDomPadLeft += column.getWidth();\n    this.element.style.paddingLeft = this.vDomPadLeft + \"px\";\n    this.leftCol++;\n    this.removeColLeft();\n  }\n};\n\nVDomHoz.prototype.initializeRow = function (row) {\n  if (row.type !== \"group\") {\n    row.modules.vdomHoz = {\n      leftCol: this.leftCol,\n      rightCol: this.rightCol\n    };\n\n    for (var _i7 = this.leftCol; _i7 <= this.rightCol; _i7++) {\n      var column = this.columns[_i7];\n\n      if (column.visible) {\n        var cell = row.getCell(column);\n        row.element.appendChild(cell.getElement());\n        cell.cellRendered();\n      }\n    }\n  }\n};\n\nVDomHoz.prototype.reinitializeRow = function (row, force) {\n  if (row.type !== \"group\") {\n    if (force || !row.modules.vdomHoz || row.modules.vdomHoz.leftCol !== this.leftCol || row.modules.vdomHoz.rightCol !== this.rightCol) {\n      while (row.element.firstChild) {\n        row.element.removeChild(row.element.firstChild);\n      }\n\n      this.initializeRow(row);\n    }\n  }\n}; //public row object\n\n\nvar RowComponent = function RowComponent(row) {\n  this._row = row;\n};\n\nRowComponent.prototype.getData = function (transform) {\n  return this._row.getData(transform);\n};\n\nRowComponent.prototype.getElement = function () {\n  return this._row.getElement();\n};\n\nRowComponent.prototype.getCells = function () {\n  var cells = [];\n\n  this._row.getCells().forEach(function (cell) {\n    cells.push(cell.getComponent());\n  });\n\n  return cells;\n};\n\nRowComponent.prototype.getCell = function (column) {\n  var cell = this._row.getCell(column);\n\n  return cell ? cell.getComponent() : false;\n};\n\nRowComponent.prototype.getIndex = function () {\n  return this._row.getData(\"data\")[this._row.table.options.index];\n};\n\nRowComponent.prototype.getPosition = function (active) {\n  return this._row.table.rowManager.getRowPosition(this._row, active);\n};\n\nRowComponent.prototype.delete = function () {\n  return this._row.delete();\n};\n\nRowComponent.prototype.scrollTo = function () {\n  return this._row.table.rowManager.scrollToRow(this._row);\n};\n\nRowComponent.prototype.pageTo = function () {\n  if (this._row.table.modExists(\"page\", true)) {\n    return this._row.table.modules.page.setPageToRow(this._row);\n  }\n};\n\nRowComponent.prototype.move = function (to, after) {\n  this._row.moveToRow(to, after);\n};\n\nRowComponent.prototype.update = function (data) {\n  return this._row.updateData(data);\n};\n\nRowComponent.prototype.normalizeHeight = function () {\n  this._row.normalizeHeight(true);\n};\n\nRowComponent.prototype.select = function () {\n  this._row.table.modules.selectRow.selectRows(this._row);\n};\n\nRowComponent.prototype.deselect = function () {\n  this._row.table.modules.selectRow.deselectRows(this._row);\n};\n\nRowComponent.prototype.toggleSelect = function () {\n  this._row.table.modules.selectRow.toggleRow(this._row);\n};\n\nRowComponent.prototype.isSelected = function () {\n  return this._row.table.modules.selectRow.isRowSelected(this._row);\n};\n\nRowComponent.prototype._getSelf = function () {\n  return this._row;\n};\n\nRowComponent.prototype.validate = function () {\n  return this._row.validate();\n};\n\nRowComponent.prototype.freeze = function () {\n  if (this._row.table.modExists(\"frozenRows\", true)) {\n    this._row.table.modules.frozenRows.freezeRow(this._row);\n  }\n};\n\nRowComponent.prototype.unfreeze = function () {\n  if (this._row.table.modExists(\"frozenRows\", true)) {\n    this._row.table.modules.frozenRows.unfreezeRow(this._row);\n  }\n};\n\nRowComponent.prototype.isFrozen = function () {\n  if (this._row.table.modExists(\"frozenRows\", true)) {\n    var index = this._row.table.modules.frozenRows.rows.indexOf(this._row);\n\n    return index > -1;\n  }\n\n  return false;\n};\n\nRowComponent.prototype.treeCollapse = function () {\n  if (this._row.table.modExists(\"dataTree\", true)) {\n    this._row.table.modules.dataTree.collapseRow(this._row);\n  }\n};\n\nRowComponent.prototype.treeExpand = function () {\n  if (this._row.table.modExists(\"dataTree\", true)) {\n    this._row.table.modules.dataTree.expandRow(this._row);\n  }\n};\n\nRowComponent.prototype.treeToggle = function () {\n  if (this._row.table.modExists(\"dataTree\", true)) {\n    this._row.table.modules.dataTree.toggleRow(this._row);\n  }\n};\n\nRowComponent.prototype.getTreeParent = function () {\n  if (this._row.table.modExists(\"dataTree\", true)) {\n    return this._row.table.modules.dataTree.getTreeParent(this._row);\n  }\n\n  return false;\n};\n\nRowComponent.prototype.getTreeChildren = function () {\n  if (this._row.table.modExists(\"dataTree\", true)) {\n    return this._row.table.modules.dataTree.getTreeChildren(this._row);\n  }\n\n  return false;\n};\n\nRowComponent.prototype.addTreeChild = function (data, pos, index) {\n  if (this._row.table.modExists(\"dataTree\", true)) {\n    return this._row.table.modules.dataTree.addTreeChildRow(this._row, data, pos, index);\n  }\n\n  return false;\n};\n\nRowComponent.prototype.reformat = function () {\n  return this._row.reinitialize();\n};\n\nRowComponent.prototype.getGroup = function () {\n  return this._row.getGroup().getComponent();\n};\n\nRowComponent.prototype.getTable = function () {\n  return this._row.table;\n};\n\nRowComponent.prototype.getNextRow = function () {\n  var row = this._row.nextRow();\n\n  return row ? row.getComponent() : row;\n};\n\nRowComponent.prototype.getPrevRow = function () {\n  var row = this._row.prevRow();\n\n  return row ? row.getComponent() : row;\n};\n\nvar Row = function Row(data, parent) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"row\";\n  this.table = parent.table;\n  this.parent = parent;\n  this.data = {};\n  this.type = type; //type of element\n\n  this.element = this.createElement();\n  this.modules = {}; //hold module variables;\n\n  this.cells = [];\n  this.height = 0; //hold element height\n\n  this.heightStyled = \"\"; //hold element height prestyled to improve render efficiency\n\n  this.manualHeight = false; //user has manually set row height\n\n  this.outerHeight = 0; //holde lements outer height\n\n  this.initialized = false; //element has been rendered\n\n  this.heightInitialized = false; //element has resized cells to fit\n\n  this.component = null;\n  this.setData(data);\n  this.generateElement();\n};\n\nRow.prototype.createElement = function () {\n  var el = document.createElement(\"div\");\n  el.classList.add(\"tabulator-row\");\n  el.setAttribute(\"role\", \"row\");\n  return el;\n};\n\nRow.prototype.getElement = function () {\n  return this.element;\n};\n\nRow.prototype.detachElement = function () {\n  if (this.element && this.element.parentNode) {\n    this.element.parentNode.removeChild(this.element);\n  }\n};\n\nRow.prototype.generateElement = function () {\n  var self = this,\n      dblTap,\n      tapHold,\n      tap; //set row selection characteristics\n\n  if (self.table.options.selectable !== false && self.table.modExists(\"selectRow\")) {\n    self.table.modules.selectRow.initializeRow(this);\n  } //setup movable rows\n\n\n  if (self.table.options.movableRows !== false && self.table.modExists(\"moveRow\")) {\n    self.table.modules.moveRow.initializeRow(this);\n  } //setup data tree\n\n\n  if (self.table.options.dataTree !== false && self.table.modExists(\"dataTree\")) {\n    self.table.modules.dataTree.initializeRow(this);\n  } //setup column colapse container\n\n\n  if (self.table.options.responsiveLayout === \"collapse\" && self.table.modExists(\"responsiveLayout\")) {\n    self.table.modules.responsiveLayout.initializeRow(this);\n  } //set column menu\n\n\n  if ((self.table.options.rowContextMenu || self.table.options.rowClickMenu) && this.table.modExists(\"menu\")) {\n    self.table.modules.menu.initializeRow(this);\n  } //handle row click events\n\n\n  if (self.table.options.rowClick) {\n    self.element.addEventListener(\"click\", function (e) {\n      self.table.options.rowClick(e, self.getComponent());\n    });\n  }\n\n  if (self.table.options.rowDblClick) {\n    self.element.addEventListener(\"dblclick\", function (e) {\n      self.table.options.rowDblClick(e, self.getComponent());\n    });\n  }\n\n  if (self.table.options.rowContext) {\n    self.element.addEventListener(\"contextmenu\", function (e) {\n      self.table.options.rowContext(e, self.getComponent());\n    });\n  } //handle mouse events\n\n\n  if (self.table.options.rowMouseEnter) {\n    self.element.addEventListener(\"mouseenter\", function (e) {\n      self.table.options.rowMouseEnter(e, self.getComponent());\n    });\n  }\n\n  if (self.table.options.rowMouseLeave) {\n    self.element.addEventListener(\"mouseleave\", function (e) {\n      self.table.options.rowMouseLeave(e, self.getComponent());\n    });\n  }\n\n  if (self.table.options.rowMouseOver) {\n    self.element.addEventListener(\"mouseover\", function (e) {\n      self.table.options.rowMouseOver(e, self.getComponent());\n    });\n  }\n\n  if (self.table.options.rowMouseOut) {\n    self.element.addEventListener(\"mouseout\", function (e) {\n      self.table.options.rowMouseOut(e, self.getComponent());\n    });\n  }\n\n  if (self.table.options.rowMouseMove) {\n    self.element.addEventListener(\"mousemove\", function (e) {\n      self.table.options.rowMouseMove(e, self.getComponent());\n    });\n  }\n\n  if (self.table.options.rowTap) {\n    tap = false;\n    self.element.addEventListener(\"touchstart\", function (e) {\n      tap = true;\n    }, {\n      passive: true\n    });\n    self.element.addEventListener(\"touchend\", function (e) {\n      if (tap) {\n        self.table.options.rowTap(e, self.getComponent());\n      }\n\n      tap = false;\n    });\n  }\n\n  if (self.table.options.rowDblTap) {\n    dblTap = null;\n    self.element.addEventListener(\"touchend\", function (e) {\n      if (dblTap) {\n        clearTimeout(dblTap);\n        dblTap = null;\n        self.table.options.rowDblTap(e, self.getComponent());\n      } else {\n        dblTap = setTimeout(function () {\n          clearTimeout(dblTap);\n          dblTap = null;\n        }, 300);\n      }\n    });\n  }\n\n  if (self.table.options.rowTapHold) {\n    tapHold = null;\n    self.element.addEventListener(\"touchstart\", function (e) {\n      clearTimeout(tapHold);\n      tapHold = setTimeout(function () {\n        clearTimeout(tapHold);\n        tapHold = null;\n        tap = false;\n        self.table.options.rowTapHold(e, self.getComponent());\n      }, 1000);\n    }, {\n      passive: true\n    });\n    self.element.addEventListener(\"touchend\", function (e) {\n      clearTimeout(tapHold);\n      tapHold = null;\n    });\n  }\n};\n\nRow.prototype.generateCells = function () {\n  this.cells = this.table.columnManager.generateCells(this);\n}; //functions to setup on first render\n\n\nRow.prototype.initialize = function (force) {\n  var _this20 = this;\n\n  if (!this.initialized || force) {\n    this.deleteCells();\n\n    while (this.element.firstChild) {\n      this.element.removeChild(this.element.firstChild);\n    } //handle frozen cells\n\n\n    if (this.table.modExists(\"frozenColumns\")) {\n      this.table.modules.frozenColumns.layoutRow(this);\n    }\n\n    this.generateCells();\n\n    if (this.table.options.virtualDomHoz && this.table.vdomHoz.initialized) {\n      this.table.vdomHoz.initializeRow(this);\n    } else {\n      this.cells.forEach(function (cell) {\n        _this20.element.appendChild(cell.getElement());\n\n        cell.cellRendered();\n      });\n    }\n\n    if (force) {\n      this.normalizeHeight();\n    } //setup movable rows\n\n\n    if (this.table.options.dataTree && this.table.modExists(\"dataTree\")) {\n      this.table.modules.dataTree.layoutRow(this);\n    } //setup column colapse container\n\n\n    if (this.table.options.responsiveLayout === \"collapse\" && this.table.modExists(\"responsiveLayout\")) {\n      this.table.modules.responsiveLayout.layoutRow(this);\n    }\n\n    if (this.table.options.rowFormatter) {\n      this.table.options.rowFormatter(this.getComponent());\n    } //set resizable handles\n\n\n    if (this.table.options.resizableRows && this.table.modExists(\"resizeRows\")) {\n      this.table.modules.resizeRows.initializeRow(this);\n    }\n\n    this.initialized = true;\n  } else {\n    if (this.table.options.virtualDomHoz) {\n      this.table.vdomHoz.reinitializeRow(this);\n    }\n  }\n};\n\nRow.prototype.reinitializeHeight = function () {\n  this.heightInitialized = false;\n\n  if (this.element.offsetParent !== null) {\n    this.normalizeHeight(true);\n  }\n};\n\nRow.prototype.reinitialize = function () {\n  this.initialized = false;\n  this.heightInitialized = false;\n\n  if (!this.manualHeight) {\n    this.height = 0;\n    this.heightStyled = \"\";\n  }\n\n  if (this.element.offsetParent !== null) {\n    this.initialize(true);\n  }\n}; //get heights when doing bulk row style calcs in virtual DOM\n\n\nRow.prototype.calcHeight = function (force) {\n  var maxHeight = 0,\n      minHeight = this.table.options.resizableRows ? this.element.clientHeight : 0;\n  this.cells.forEach(function (cell) {\n    var height = cell.getHeight();\n\n    if (height > maxHeight) {\n      maxHeight = height;\n    }\n  });\n\n  if (force) {\n    this.height = Math.max(maxHeight, minHeight);\n  } else {\n    this.height = this.manualHeight ? this.height : Math.max(maxHeight, minHeight);\n  }\n\n  this.heightStyled = this.height ? this.height + \"px\" : \"\";\n  this.outerHeight = this.element.offsetHeight;\n}; //set of cells\n\n\nRow.prototype.setCellHeight = function () {\n  this.cells.forEach(function (cell) {\n    cell.setHeight();\n  });\n  this.heightInitialized = true;\n};\n\nRow.prototype.clearCellHeight = function () {\n  this.cells.forEach(function (cell) {\n    cell.clearHeight();\n  });\n}; //normalize the height of elements in the row\n\n\nRow.prototype.normalizeHeight = function (force) {\n  if (force) {\n    this.clearCellHeight();\n  }\n\n  this.calcHeight(force);\n  this.setCellHeight();\n}; // Row.prototype.setHeight = function(height){\n// \tthis.height = height;\n// \tthis.setCellHeight();\n// };\n//set height of rows\n\n\nRow.prototype.setHeight = function (height, force) {\n  if (this.height != height || force) {\n    this.manualHeight = true;\n    this.height = height;\n    this.heightStyled = height ? height + \"px\" : \"\";\n    this.setCellHeight(); // this.outerHeight = this.element.outerHeight();\n\n    this.outerHeight = this.element.offsetHeight;\n  }\n}; //return rows outer height\n\n\nRow.prototype.getHeight = function () {\n  return this.outerHeight;\n}; //return rows outer Width\n\n\nRow.prototype.getWidth = function () {\n  return this.element.offsetWidth;\n}; //////////////// Cell Management /////////////////\n\n\nRow.prototype.deleteCell = function (cell) {\n  var index = this.cells.indexOf(cell);\n\n  if (index > -1) {\n    this.cells.splice(index, 1);\n  }\n}; //////////////// Data Management /////////////////\n\n\nRow.prototype.setData = function (data) {\n  if (this.table.modExists(\"mutator\")) {\n    data = this.table.modules.mutator.transformRow(data, \"data\");\n  }\n\n  this.data = data;\n\n  if (this.table.options.reactiveData && this.table.modExists(\"reactiveData\", true)) {\n    this.table.modules.reactiveData.watchRow(this);\n  }\n}; //update the rows data\n\n\nRow.prototype.updateData = function (updatedData) {\n  var _this21 = this;\n\n  var visible = Tabulator.prototype.helpers.elVisible(this.element),\n      tempData = {},\n      newRowData;\n  return new Promise(function (resolve, reject) {\n    if (typeof updatedData === \"string\") {\n      updatedData = JSON.parse(updatedData);\n    }\n\n    if (_this21.table.options.reactiveData && _this21.table.modExists(\"reactiveData\", true)) {\n      _this21.table.modules.reactiveData.block();\n    } //mutate incomming data if needed\n\n\n    if (_this21.table.modExists(\"mutator\")) {\n      tempData = Object.assign(tempData, _this21.data);\n      tempData = Object.assign(tempData, updatedData);\n      newRowData = _this21.table.modules.mutator.transformRow(tempData, \"data\", updatedData);\n    } else {\n      newRowData = updatedData;\n    } //set data\n\n\n    for (var attrname in newRowData) {\n      _this21.data[attrname] = newRowData[attrname];\n    }\n\n    if (_this21.table.options.reactiveData && _this21.table.modExists(\"reactiveData\", true)) {\n      _this21.table.modules.reactiveData.unblock();\n    } //update affected cells only\n\n\n    for (var attrname in updatedData) {\n      var columns = _this21.table.columnManager.getColumnsByFieldRoot(attrname);\n\n      columns.forEach(function (column) {\n        var cell = _this21.getCell(column.getField());\n\n        if (cell) {\n          var value = column.getFieldValue(newRowData);\n\n          if (cell.getValue() != value) {\n            cell.setValueProcessData(value);\n\n            if (visible) {\n              cell.cellRendered();\n            }\n          }\n        }\n      });\n    }\n\n    if (_this21.table.options.groupUpdateOnCellEdit && _this21.table.options.groupBy && _this21.table.modExists(\"groupRows\")) {\n      _this21.table.modules.groupRows.reassignRowToGroup(_this21.row);\n    } //Partial reinitialization if visible\n\n\n    if (visible) {\n      _this21.normalizeHeight(true);\n\n      if (_this21.table.options.rowFormatter) {\n        _this21.table.options.rowFormatter(_this21.getComponent());\n      }\n    } else {\n      _this21.initialized = false;\n      _this21.height = 0;\n      _this21.heightStyled = \"\";\n    }\n\n    if (_this21.table.options.dataTree !== false && _this21.table.modExists(\"dataTree\") && _this21.table.modules.dataTree.redrawNeeded(updatedData)) {\n      _this21.table.modules.dataTree.initializeRow(_this21);\n\n      _this21.table.modules.dataTree.layoutRow(_this21);\n\n      _this21.table.rowManager.refreshActiveData(\"tree\", false, true);\n    } //this.reinitialize();\n\n\n    _this21.table.options.rowUpdated.call(_this21.table, _this21.getComponent());\n\n    if (_this21.table.options.dataChanged) {\n      _this21.table.options.dataChanged.call(_this21.table, _this21.table.rowManager.getData());\n    }\n\n    resolve();\n  });\n};\n\nRow.prototype.getData = function (transform) {\n  if (transform) {\n    if (this.table.modExists(\"accessor\")) {\n      return this.table.modules.accessor.transformRow(this, transform);\n    }\n  }\n\n  return this.data;\n};\n\nRow.prototype.getCell = function (column) {\n  var match = false;\n  column = this.table.columnManager.findColumn(column);\n  match = this.cells.find(function (cell) {\n    return cell.column === column;\n  });\n  return match;\n};\n\nRow.prototype.getCellIndex = function (findCell) {\n  return this.cells.findIndex(function (cell) {\n    return cell === findCell;\n  });\n};\n\nRow.prototype.findNextEditableCell = function (index) {\n  var nextCell = false;\n\n  if (index < this.cells.length - 1) {\n    for (var i = index + 1; i < this.cells.length; i++) {\n      var cell = this.cells[i];\n\n      if (cell.column.modules.edit && Tabulator.prototype.helpers.elVisible(cell.getElement())) {\n        var allowEdit = true;\n\n        if (typeof cell.column.modules.edit.check == \"function\") {\n          allowEdit = cell.column.modules.edit.check(cell.getComponent());\n        }\n\n        if (allowEdit) {\n          nextCell = cell;\n          break;\n        }\n      }\n    }\n  }\n\n  return nextCell;\n};\n\nRow.prototype.findPrevEditableCell = function (index) {\n  var prevCell = false;\n\n  if (index > 0) {\n    for (var i = index - 1; i >= 0; i--) {\n      var cell = this.cells[i],\n          allowEdit = true;\n\n      if (cell.column.modules.edit && Tabulator.prototype.helpers.elVisible(cell.getElement())) {\n        if (typeof cell.column.modules.edit.check == \"function\") {\n          allowEdit = cell.column.modules.edit.check(cell.getComponent());\n        }\n\n        if (allowEdit) {\n          prevCell = cell;\n          break;\n        }\n      }\n    }\n  }\n\n  return prevCell;\n};\n\nRow.prototype.getCells = function () {\n  return this.cells;\n};\n\nRow.prototype.nextRow = function () {\n  var row = this.table.rowManager.nextDisplayRow(this, true);\n  return row || false;\n};\n\nRow.prototype.prevRow = function () {\n  var row = this.table.rowManager.prevDisplayRow(this, true);\n  return row || false;\n};\n\nRow.prototype.moveToRow = function (to, before) {\n  var toRow = this.table.rowManager.findRow(to);\n\n  if (toRow) {\n    this.table.rowManager.moveRowActual(this, toRow, !before);\n    this.table.rowManager.refreshActiveData(\"display\", false, true);\n  } else {\n    console.warn(\"Move Error - No matching row found:\", to);\n  }\n};\n\nRow.prototype.validate = function () {\n  var invalid = [];\n  this.cells.forEach(function (cell) {\n    if (!cell.validate()) {\n      invalid.push(cell.getComponent());\n    }\n  });\n  return invalid.length ? invalid : true;\n}; ///////////////////// Actions  /////////////////////\n\n\nRow.prototype.delete = function () {\n  var _this22 = this;\n\n  return new Promise(function (resolve, reject) {\n    var index, rows;\n\n    if (_this22.table.options.history && _this22.table.modExists(\"history\")) {\n      if (_this22.table.options.groupBy && _this22.table.modExists(\"groupRows\")) {\n        rows = _this22.getGroup().rows;\n        index = rows.indexOf(_this22);\n\n        if (index) {\n          index = rows[index - 1];\n        }\n      } else {\n        index = _this22.table.rowManager.getRowIndex(_this22);\n\n        if (index) {\n          index = _this22.table.rowManager.rows[index - 1];\n        }\n      }\n\n      _this22.table.modules.history.action(\"rowDelete\", _this22, {\n        data: _this22.getData(),\n        pos: !index,\n        index: index\n      });\n    }\n\n    _this22.deleteActual();\n\n    resolve();\n  });\n};\n\nRow.prototype.deleteActual = function (blockRedraw) {\n  var index = this.table.rowManager.getRowIndex(this);\n  this.detatchModules(); // if(this.table.options.dataTree && this.table.modExists(\"dataTree\")){\n  // \tthis.table.modules.dataTree.collapseRow(this, true);\n  // }\n  //remove any reactive data watchers from row object\n\n  if (this.table.options.reactiveData && this.table.modExists(\"reactiveData\", true)) {} // this.table.modules.reactiveData.unwatchRow(this);\n  //remove from group\n\n\n  if (this.modules.group) {\n    this.modules.group.removeRow(this);\n  }\n\n  this.table.rowManager.deleteRow(this, blockRedraw);\n  this.deleteCells();\n  this.initialized = false;\n  this.heightInitialized = false;\n  this.element = false;\n\n  if (this.table.options.dataTree && this.table.modExists(\"dataTree\", true)) {\n    this.table.modules.dataTree.rowDelete(this);\n  } //recalc column calculations if present\n\n\n  if (this.table.modExists(\"columnCalcs\")) {\n    if (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n      this.table.modules.columnCalcs.recalcRowGroup(this);\n    } else {\n      this.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows);\n    }\n  }\n};\n\nRow.prototype.detatchModules = function () {\n  //deselect row if it is selected\n  if (this.table.modExists(\"selectRow\")) {\n    this.table.modules.selectRow._deselectRow(this, true);\n  } //cancel edit if row is currently being edited\n\n\n  if (this.table.modExists(\"edit\")) {\n    if (this.table.modules.edit.currentCell.row === this) {\n      this.table.modules.edit.cancelEdit();\n    }\n  }\n\n  if (this.table.modExists(\"frozenRows\")) {\n    this.table.modules.frozenRows.detachRow(this);\n  }\n};\n\nRow.prototype.deleteCells = function () {\n  var cellCount = this.cells.length;\n\n  for (var _i8 = 0; _i8 < cellCount; _i8++) {\n    this.cells[0].delete();\n  }\n};\n\nRow.prototype.wipe = function () {\n  this.detatchModules();\n  this.deleteCells();\n\n  while (this.element.firstChild) {\n    this.element.removeChild(this.element.firstChild);\n  }\n\n  this.element = false;\n  this.modules = {};\n\n  if (this.element.parentNode) {\n    this.element.parentNode.removeChild(this.element);\n  }\n};\n\nRow.prototype.getGroup = function () {\n  return this.modules.group || false;\n}; //////////////// Object Generation /////////////////\n\n\nRow.prototype.getComponent = function () {\n  if (!this.component) {\n    this.component = new RowComponent(this);\n  }\n\n  return this.component;\n}; //public row object\n\n\nvar CellComponent = function CellComponent(cell) {\n  this._cell = cell;\n};\n\nCellComponent.prototype.getValue = function () {\n  return this._cell.getValue();\n};\n\nCellComponent.prototype.getOldValue = function () {\n  return this._cell.getOldValue();\n};\n\nCellComponent.prototype.getInitialValue = function () {\n  return this._cell.initialValue;\n};\n\nCellComponent.prototype.getElement = function () {\n  return this._cell.getElement();\n};\n\nCellComponent.prototype.getRow = function () {\n  return this._cell.row.getComponent();\n};\n\nCellComponent.prototype.getData = function () {\n  return this._cell.row.getData();\n};\n\nCellComponent.prototype.getField = function () {\n  return this._cell.column.getField();\n};\n\nCellComponent.prototype.getColumn = function () {\n  return this._cell.column.getComponent();\n};\n\nCellComponent.prototype.setValue = function (value, mutate) {\n  if (typeof mutate == \"undefined\") {\n    mutate = true;\n  }\n\n  this._cell.setValue(value, mutate);\n};\n\nCellComponent.prototype.restoreOldValue = function () {\n  this._cell.setValueActual(this._cell.getOldValue());\n};\n\nCellComponent.prototype.restoreInitialValue = function () {\n  this._cell.setValueActual(this._cell.initialValue);\n};\n\nCellComponent.prototype.edit = function (force) {\n  return this._cell.edit(force);\n};\n\nCellComponent.prototype.cancelEdit = function () {\n  this._cell.cancelEdit();\n};\n\nCellComponent.prototype.isEdited = function () {\n  return !!this._cell.modules.edit && this._cell.modules.edit.edited;\n};\n\nCellComponent.prototype.clearEdited = function () {\n  if (self.table.modExists(\"edit\", true)) {\n    this._cell.table.modules.edit.clearEdited(this._cell);\n  }\n};\n\nCellComponent.prototype.isValid = function () {\n  return this._cell.modules.validate ? !this._cell.modules.validate.invalid : true;\n};\n\nCellComponent.prototype.validate = function () {\n  return this._cell.validate();\n};\n\nCellComponent.prototype.clearValidation = function () {\n  if (this._cell.table.modExists(\"validate\", true)) {\n    this._cell.table.modules.validate.clearValidation(this._cell);\n  }\n};\n\nCellComponent.prototype.nav = function () {\n  return this._cell.nav();\n};\n\nCellComponent.prototype.checkHeight = function () {\n  this._cell.checkHeight();\n};\n\nCellComponent.prototype.getTable = function () {\n  return this._cell.table;\n};\n\nCellComponent.prototype._getSelf = function () {\n  return this._cell;\n};\n\nvar Cell = function Cell(column, row) {\n  this.table = column.table;\n  this.column = column;\n  this.row = row;\n  this.element = null;\n  this.value = null;\n  this.initialValue;\n  this.oldValue = null;\n  this.modules = {};\n  this.height = null;\n  this.width = null;\n  this.minWidth = null;\n  this.component = null;\n  this.loaded = false; //track if the cell has been added to the DOM yet\n\n  this.build();\n}; //////////////// Setup Functions /////////////////\n//generate element\n\n\nCell.prototype.build = function () {\n  this.generateElement();\n  this.setWidth();\n\n  this._configureCell();\n\n  this.setValueActual(this.column.getFieldValue(this.row.data));\n  this.initialValue = this.value;\n};\n\nCell.prototype.generateElement = function () {\n  this.element = document.createElement('div');\n  this.element.className = \"tabulator-cell\";\n  this.element.setAttribute(\"role\", \"gridcell\");\n  this.element = this.element;\n};\n\nCell.prototype._configureCell = function () {\n  var self = this,\n      cellEvents = self.column.cellEvents,\n      element = self.element,\n      field = this.column.getField(),\n      vertAligns = {\n    top: \"flex-start\",\n    bottom: \"flex-end\",\n    middle: \"center\"\n  },\n      hozAligns = {\n    left: \"flex-start\",\n    right: \"flex-end\",\n    center: \"center\"\n  }; //set text alignment\n\n  element.style.textAlign = self.column.hozAlign;\n\n  if (self.column.vertAlign) {\n    element.style.display = \"inline-flex\";\n    element.style.alignItems = vertAligns[self.column.vertAlign] || \"\";\n\n    if (self.column.hozAlign) {\n      element.style.justifyContent = hozAligns[self.column.hozAlign] || \"\";\n    }\n  }\n\n  if (field) {\n    element.setAttribute(\"tabulator-field\", field);\n  } //add class to cell if needed\n\n\n  if (self.column.definition.cssClass) {\n    var classNames = self.column.definition.cssClass.split(\" \");\n    classNames.forEach(function (className) {\n      element.classList.add(className);\n    });\n  } //update tooltip on mouse enter\n\n\n  if (this.table.options.tooltipGenerationMode === \"hover\") {\n    element.addEventListener(\"mouseenter\", function (e) {\n      self._generateTooltip();\n    });\n  }\n\n  self._bindClickEvents(cellEvents);\n\n  self._bindTouchEvents(cellEvents);\n\n  self._bindMouseEvents(cellEvents);\n\n  if (self.column.modules.edit) {\n    self.table.modules.edit.bindEditor(self);\n  }\n\n  if (self.column.definition.rowHandle && self.table.options.movableRows !== false && self.table.modExists(\"moveRow\")) {\n    self.table.modules.moveRow.initializeCell(self);\n  } //hide cell if not visible\n\n\n  if (!self.column.visible) {\n    self.hide();\n  }\n};\n\nCell.prototype._bindClickEvents = function (cellEvents) {\n  var self = this,\n      element = self.element; //set event bindings\n\n  if (cellEvents.cellClick || self.table.options.cellClick) {\n    element.addEventListener(\"click\", function (e) {\n      var component = self.getComponent();\n\n      if (cellEvents.cellClick) {\n        cellEvents.cellClick.call(self.table, e, component);\n      }\n\n      if (self.table.options.cellClick) {\n        self.table.options.cellClick.call(self.table, e, component);\n      }\n    });\n  }\n\n  if (cellEvents.cellDblClick || this.table.options.cellDblClick) {\n    element.addEventListener(\"dblclick\", function (e) {\n      var component = self.getComponent();\n\n      if (cellEvents.cellDblClick) {\n        cellEvents.cellDblClick.call(self.table, e, component);\n      }\n\n      if (self.table.options.cellDblClick) {\n        self.table.options.cellDblClick.call(self.table, e, component);\n      }\n    });\n  } else {\n    element.addEventListener(\"dblclick\", function (e) {\n      if (self.table.modExists(\"edit\")) {\n        if (self.table.modules.edit.currentCell === self) {\n          return; //prevent instant selection of editor content\n        }\n      }\n\n      e.preventDefault();\n\n      try {\n        if (document.selection) {\n          // IE\n          var range = document.body.createTextRange();\n          range.moveToElementText(self.element);\n          range.select();\n        } else if (window.getSelection) {\n          var range = document.createRange();\n          range.selectNode(self.element);\n          window.getSelection().removeAllRanges();\n          window.getSelection().addRange(range);\n        }\n      } catch (e) {}\n    });\n  }\n\n  if (cellEvents.cellContext || this.table.options.cellContext) {\n    element.addEventListener(\"contextmenu\", function (e) {\n      var component = self.getComponent();\n\n      if (cellEvents.cellContext) {\n        cellEvents.cellContext.call(self.table, e, component);\n      }\n\n      if (self.table.options.cellContext) {\n        self.table.options.cellContext.call(self.table, e, component);\n      }\n    });\n  }\n};\n\nCell.prototype._bindMouseEvents = function (cellEvents) {\n  var self = this,\n      element = self.element;\n\n  if (cellEvents.cellMouseEnter || self.table.options.cellMouseEnter) {\n    element.addEventListener(\"mouseenter\", function (e) {\n      var component = self.getComponent();\n\n      if (cellEvents.cellMouseEnter) {\n        cellEvents.cellMouseEnter.call(self.table, e, component);\n      }\n\n      if (self.table.options.cellMouseEnter) {\n        self.table.options.cellMouseEnter.call(self.table, e, component);\n      }\n    });\n  }\n\n  if (cellEvents.cellMouseLeave || self.table.options.cellMouseLeave) {\n    element.addEventListener(\"mouseleave\", function (e) {\n      var component = self.getComponent();\n\n      if (cellEvents.cellMouseLeave) {\n        cellEvents.cellMouseLeave.call(self.table, e, component);\n      }\n\n      if (self.table.options.cellMouseLeave) {\n        self.table.options.cellMouseLeave.call(self.table, e, component);\n      }\n    });\n  }\n\n  if (cellEvents.cellMouseOver || self.table.options.cellMouseOver) {\n    element.addEventListener(\"mouseover\", function (e) {\n      var component = self.getComponent();\n\n      if (cellEvents.cellMouseOver) {\n        cellEvents.cellMouseOver.call(self.table, e, component);\n      }\n\n      if (self.table.options.cellMouseOver) {\n        self.table.options.cellMouseOver.call(self.table, e, component);\n      }\n    });\n  }\n\n  if (cellEvents.cellMouseOut || self.table.options.cellMouseOut) {\n    element.addEventListener(\"mouseout\", function (e) {\n      var component = self.getComponent();\n\n      if (cellEvents.cellMouseOut) {\n        cellEvents.cellMouseOut.call(self.table, e, component);\n      }\n\n      if (self.table.options.cellMouseOut) {\n        self.table.options.cellMouseOut.call(self.table, e, component);\n      }\n    });\n  }\n\n  if (cellEvents.cellMouseMove || self.table.options.cellMouseMove) {\n    element.addEventListener(\"mousemove\", function (e) {\n      var component = self.getComponent();\n\n      if (cellEvents.cellMouseMove) {\n        cellEvents.cellMouseMove.call(self.table, e, component);\n      }\n\n      if (self.table.options.cellMouseMove) {\n        self.table.options.cellMouseMove.call(self.table, e, component);\n      }\n    });\n  }\n};\n\nCell.prototype._bindTouchEvents = function (cellEvents) {\n  var self = this,\n      element = self.element,\n      dblTap,\n      tapHold,\n      tap;\n\n  if (cellEvents.cellTap || this.table.options.cellTap) {\n    tap = false;\n    element.addEventListener(\"touchstart\", function (e) {\n      tap = true;\n    }, {\n      passive: true\n    });\n    element.addEventListener(\"touchend\", function (e) {\n      if (tap) {\n        var component = self.getComponent();\n\n        if (cellEvents.cellTap) {\n          cellEvents.cellTap.call(self.table, e, component);\n        }\n\n        if (self.table.options.cellTap) {\n          self.table.options.cellTap.call(self.table, e, component);\n        }\n      }\n\n      tap = false;\n    });\n  }\n\n  if (cellEvents.cellDblTap || this.table.options.cellDblTap) {\n    dblTap = null;\n    element.addEventListener(\"touchend\", function (e) {\n      if (dblTap) {\n        clearTimeout(dblTap);\n        dblTap = null;\n        var component = self.getComponent();\n\n        if (cellEvents.cellDblTap) {\n          cellEvents.cellDblTap.call(self.table, e, component);\n        }\n\n        if (self.table.options.cellDblTap) {\n          self.table.options.cellDblTap.call(self.table, e, component);\n        }\n      } else {\n        dblTap = setTimeout(function () {\n          clearTimeout(dblTap);\n          dblTap = null;\n        }, 300);\n      }\n    });\n  }\n\n  if (cellEvents.cellTapHold || this.table.options.cellTapHold) {\n    tapHold = null;\n    element.addEventListener(\"touchstart\", function (e) {\n      clearTimeout(tapHold);\n      tapHold = setTimeout(function () {\n        clearTimeout(tapHold);\n        tapHold = null;\n        tap = false;\n        var component = self.getComponent();\n\n        if (cellEvents.cellTapHold) {\n          cellEvents.cellTapHold.call(self.table, e, component);\n        }\n\n        if (self.table.options.cellTapHold) {\n          self.table.options.cellTapHold.call(self.table, e, component);\n        }\n      }, 1000);\n    }, {\n      passive: true\n    });\n    element.addEventListener(\"touchend\", function (e) {\n      clearTimeout(tapHold);\n      tapHold = null;\n    });\n  }\n}; //generate cell contents\n\n\nCell.prototype._generateContents = function () {\n  var val;\n\n  if (this.table.modExists(\"format\")) {\n    val = this.table.modules.format.formatValue(this);\n  } else {\n    val = this.element.innerHTML = this.value;\n  }\n\n  switch (typeof val === 'undefined' ? 'undefined' : _typeof(val)) {\n    case \"object\":\n      if (val instanceof Node) {\n        //clear previous cell contents\n        while (this.element.firstChild) {\n          this.element.removeChild(this.element.firstChild);\n        }\n\n        this.element.appendChild(val);\n      } else {\n        this.element.innerHTML = \"\";\n\n        if (val != null) {\n          console.warn(\"Format Error - Formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:\", val);\n        }\n      }\n\n      break;\n\n    case \"undefined\":\n    case \"null\":\n      this.element.innerHTML = \"\";\n      break;\n\n    default:\n      this.element.innerHTML = val;\n  }\n};\n\nCell.prototype.cellRendered = function () {\n  if (this.table.modExists(\"format\") && this.table.modules.format.cellRendered) {\n    this.table.modules.format.cellRendered(this);\n  }\n}; //generate tooltip text\n\n\nCell.prototype._generateTooltip = function () {\n  var tooltip = this.column.tooltip;\n\n  if (tooltip) {\n    if (tooltip === true) {\n      tooltip = this.value;\n    } else if (typeof tooltip == \"function\") {\n      tooltip = tooltip(this.getComponent());\n\n      if (tooltip === false) {\n        tooltip = \"\";\n      }\n    }\n\n    if (typeof tooltip === \"undefined\") {\n      tooltip = \"\";\n    }\n\n    this.element.setAttribute(\"title\", tooltip);\n  } else {\n    this.element.setAttribute(\"title\", \"\");\n  }\n}; //////////////////// Getters ////////////////////\n\n\nCell.prototype.getElement = function () {\n  if (!this.loaded) {\n    this.loaded = true;\n    this.layoutElement();\n  }\n\n  return this.element;\n};\n\nCell.prototype.getValue = function () {\n  return this.value;\n};\n\nCell.prototype.getOldValue = function () {\n  return this.oldValue;\n}; //////////////////// Actions ////////////////////\n\n\nCell.prototype.setValue = function (value, mutate) {\n  var changed = this.setValueProcessData(value, mutate),\n      component;\n\n  if (changed) {\n    if (this.table.options.history && this.table.modExists(\"history\")) {\n      this.table.modules.history.action(\"cellEdit\", this, {\n        oldValue: this.oldValue,\n        newValue: this.value\n      });\n    }\n\n    component = this.getComponent();\n\n    if (this.column.cellEvents.cellEdited) {\n      this.column.cellEvents.cellEdited.call(this.table, component);\n    }\n\n    if (this.table.options.groupUpdateOnCellEdit && this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n      this.table.modules.groupRows.reassignRowToGroup(this.row);\n    }\n\n    this.cellRendered();\n    this.table.options.cellEdited.call(this.table, component);\n\n    if (this.table.options.dataChanged) {\n      this.table.options.dataChanged.call(this.table, this.table.rowManager.getData());\n    }\n  }\n};\n\nCell.prototype.setValueProcessData = function (value, mutate) {\n  var changed = false;\n\n  if (this.value != value) {\n    changed = true;\n\n    if (mutate) {\n      if (this.column.modules.mutate) {\n        value = this.table.modules.mutator.transformCell(this, value);\n      }\n    }\n  }\n\n  this.setValueActual(value);\n\n  if (changed && this.table.modExists(\"columnCalcs\")) {\n    if (this.column.definition.topCalc || this.column.definition.bottomCalc) {\n      if (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n        if (this.table.options.columnCalcs == \"table\" || this.table.options.columnCalcs == \"both\") {\n          this.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows);\n        }\n\n        if (this.table.options.columnCalcs != \"table\") {\n          this.table.modules.columnCalcs.recalcRowGroup(this.row);\n        }\n      } else {\n        this.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows);\n      }\n    }\n  }\n\n  return changed;\n};\n\nCell.prototype.setValueActual = function (value) {\n  this.oldValue = this.value;\n  this.value = value;\n\n  if (this.table.options.reactiveData && this.table.modExists(\"reactiveData\")) {\n    this.table.modules.reactiveData.block();\n  }\n\n  this.column.setFieldValue(this.row.data, value);\n\n  if (this.table.options.reactiveData && this.table.modExists(\"reactiveData\")) {\n    this.table.modules.reactiveData.unblock();\n  }\n\n  if (this.loaded) {\n    this.layoutElement();\n  }\n};\n\nCell.prototype.layoutElement = function () {\n  this._generateContents();\n\n  this._generateTooltip(); //set resizable handles\n\n\n  if (this.table.options.resizableColumns && this.table.modExists(\"resizeColumns\") && this.row.type === \"row\") {\n    this.table.modules.resizeColumns.initializeColumn(\"cell\", this.column, this.element);\n  }\n\n  if ((this.column.definition.contextMenu || this.column.definition.clickMenu) && this.table.modExists(\"menu\")) {\n    this.table.modules.menu.initializeCell(this);\n  } //handle frozen cells\n\n\n  if (this.table.modExists(\"frozenColumns\")) {\n    this.table.modules.frozenColumns.layoutElement(this.element, this.column);\n  }\n};\n\nCell.prototype.setWidth = function () {\n  this.width = this.column.width;\n  this.element.style.width = this.column.widthStyled;\n};\n\nCell.prototype.clearWidth = function () {\n  this.width = \"\";\n  this.element.style.width = \"\";\n};\n\nCell.prototype.getWidth = function () {\n  return this.width || this.element.offsetWidth;\n};\n\nCell.prototype.setMinWidth = function () {\n  this.minWidth = this.column.minWidth;\n  this.element.style.minWidth = this.column.minWidthStyled;\n};\n\nCell.prototype.checkHeight = function () {\n  // var height = this.element.css(\"height\");\n  this.row.reinitializeHeight();\n};\n\nCell.prototype.clearHeight = function () {\n  this.element.style.height = \"\";\n  this.height = null;\n};\n\nCell.prototype.setHeight = function () {\n  this.height = this.row.height;\n  this.element.style.height = this.row.heightStyled;\n};\n\nCell.prototype.getHeight = function () {\n  return this.height || this.element.offsetHeight;\n};\n\nCell.prototype.show = function () {\n  this.element.style.display = \"\";\n};\n\nCell.prototype.hide = function () {\n  this.element.style.display = \"none\";\n};\n\nCell.prototype.edit = function (force) {\n  if (this.table.modExists(\"edit\", true)) {\n    return this.table.modules.edit.editCell(this, force);\n  }\n};\n\nCell.prototype.cancelEdit = function () {\n  if (this.table.modExists(\"edit\", true)) {\n    var editing = this.table.modules.edit.getCurrentCell();\n\n    if (editing && editing._getSelf() === this) {\n      this.table.modules.edit.cancelEdit();\n    } else {\n      console.warn(\"Cancel Editor Error - This cell is not currently being edited \");\n    }\n  }\n};\n\nCell.prototype.validate = function () {\n  if (this.column.modules.validate && this.table.modExists(\"validate\", true)) {\n    var valid = this.table.modules.validate.validate(this.column.modules.validate, this, this.getValue());\n    return valid === true;\n  } else {\n    return true;\n  }\n};\n\nCell.prototype.delete = function () {\n  if (!this.table.rowManager.redrawBlock && this.element.parentNode) {\n    this.element.parentNode.removeChild(this.element);\n  }\n\n  if (this.modules.validate && this.modules.validate.invalid) {\n    this.table.modules.validate.clearValidation(this);\n  }\n\n  if (this.modules.edit && this.modules.edit.edited) {\n    this.table.modules.edit.clearEdited(this);\n  }\n\n  if (this.table.options.history) {\n    this.table.modules.history.clearComponentHistory(this);\n  }\n\n  this.element = false;\n  this.column.deleteCell(this);\n  this.row.deleteCell(this);\n  this.calcs = {};\n}; //////////////// Navigation /////////////////\n\n\nCell.prototype.nav = function () {\n  var self = this,\n      nextCell = false,\n      index = this.row.getCellIndex(this);\n  return {\n    next: function next() {\n      var nextCell = this.right(),\n          nextRow;\n\n      if (!nextCell) {\n        nextRow = self.table.rowManager.nextDisplayRow(self.row, true);\n\n        if (nextRow) {\n          nextCell = nextRow.findNextEditableCell(-1);\n\n          if (nextCell) {\n            nextCell.edit();\n            return true;\n          }\n        }\n      } else {\n        return true;\n      }\n\n      return false;\n    },\n    prev: function prev() {\n      var nextCell = this.left(),\n          prevRow;\n\n      if (!nextCell) {\n        prevRow = self.table.rowManager.prevDisplayRow(self.row, true);\n\n        if (prevRow) {\n          nextCell = prevRow.findPrevEditableCell(prevRow.cells.length);\n\n          if (nextCell) {\n            nextCell.edit();\n            return true;\n          }\n        }\n      } else {\n        return true;\n      }\n\n      return false;\n    },\n    left: function left() {\n      nextCell = self.row.findPrevEditableCell(index);\n\n      if (nextCell) {\n        nextCell.edit();\n        return true;\n      } else {\n        return false;\n      }\n    },\n    right: function right() {\n      nextCell = self.row.findNextEditableCell(index);\n\n      if (nextCell) {\n        nextCell.edit();\n        return true;\n      } else {\n        return false;\n      }\n    },\n    up: function up() {\n      var nextRow = self.table.rowManager.prevDisplayRow(self.row, true);\n\n      if (nextRow) {\n        nextRow.cells[index].edit();\n      }\n    },\n    down: function down() {\n      var nextRow = self.table.rowManager.nextDisplayRow(self.row, true);\n\n      if (nextRow) {\n        nextRow.cells[index].edit();\n      }\n    }\n  };\n};\n\nCell.prototype.getIndex = function () {\n  this.row.getCellIndex(this);\n}; //////////////// Object Generation /////////////////\n\n\nCell.prototype.getComponent = function () {\n  if (!this.component) {\n    this.component = new CellComponent(this);\n  }\n\n  return this.component;\n};\n\nvar FooterManager = function FooterManager(table) {\n  this.table = table;\n  this.active = false;\n  this.element = this.createElement(); //containing element\n\n  this.external = false;\n  this.links = [];\n\n  this._initialize();\n};\n\nFooterManager.prototype.createElement = function () {\n  var el = document.createElement(\"div\");\n  el.classList.add(\"tabulator-footer\");\n  return el;\n};\n\nFooterManager.prototype._initialize = function (element) {\n  if (this.table.options.footerElement) {\n    switch (_typeof(this.table.options.footerElement)) {\n      case \"string\":\n        if (this.table.options.footerElement[0] === \"<\") {\n          this.element.innerHTML = this.table.options.footerElement;\n        } else {\n          this.external = true;\n          this.element = document.querySelector(this.table.options.footerElement);\n        }\n\n        break;\n\n      default:\n        this.element = this.table.options.footerElement;\n        break;\n    }\n  }\n};\n\nFooterManager.prototype.getElement = function () {\n  return this.element;\n};\n\nFooterManager.prototype.append = function (element, parent) {\n  this.activate(parent);\n  this.element.appendChild(element);\n  this.table.rowManager.adjustTableSize();\n};\n\nFooterManager.prototype.prepend = function (element, parent) {\n  this.activate(parent);\n  this.element.insertBefore(element, this.element.firstChild);\n  this.table.rowManager.adjustTableSize();\n};\n\nFooterManager.prototype.remove = function (element) {\n  element.parentNode.removeChild(element);\n  this.deactivate();\n};\n\nFooterManager.prototype.deactivate = function (force) {\n  if (!this.element.firstChild || force) {\n    if (!this.external) {\n      this.element.parentNode.removeChild(this.element);\n    }\n\n    this.active = false;\n  } // this.table.rowManager.adjustTableSize();\n\n};\n\nFooterManager.prototype.activate = function (parent) {\n  if (!this.active) {\n    this.active = true;\n\n    if (!this.external) {\n      this.table.element.appendChild(this.getElement());\n      this.table.element.style.display = '';\n    }\n  }\n\n  if (parent) {\n    this.links.push(parent);\n  }\n};\n\nFooterManager.prototype.redraw = function () {\n  this.links.forEach(function (link) {\n    link.footerRedraw();\n  });\n};\n\nvar Tabulator = function Tabulator(element, options) {\n  this.options = {};\n  this.columnManager = null; // hold Column Manager\n\n  this.rowManager = null; //hold Row Manager\n\n  this.footerManager = null; //holder Footer Manager\n\n  this.vdomHoz = null; //holder horizontal virtual dom\n\n  this.browser = \"\"; //hold current browser type\n\n  this.browserSlow = false; //handle reduced functionality for slower browsers\n\n  this.browserMobile = false; //check if running on moble, prevent resize cancelling edit on keyboard appearence\n\n  this.rtl = false; //check if the table is in RTL mode\n\n  this.modules = {}; //hold all modules bound to this table\n\n  if (this.initializeElement(element)) {\n    this.initializeOptions(options || {});\n\n    this._create();\n  }\n\n  Tabulator.prototype.comms.register(this); //register table for inderdevice communication\n}; //default setup options\n\n\nTabulator.prototype.defaultOptions = {\n  height: false,\n  //height of tabulator\n  minHeight: false,\n  //minimum height of tabulator\n  maxHeight: false,\n  //maximum height of tabulator\n  layout: \"fitData\",\n  ///layout type \"fitColumns\" | \"fitData\"\n  layoutColumnsOnNewData: false,\n  //update column widths on setData\n  columnMinWidth: 40,\n  //minimum global width for a column\n  columnHeaderVertAlign: \"top\",\n  //vertical alignment of column headers\n  columnVertAlign: false,\n  // DEPRECATED - Left to allow warning\n  resizableColumns: true,\n  //resizable columns\n  resizableRows: false,\n  //resizable rows\n  autoResize: true,\n  //auto resize table\n  columns: [],\n  //store for colum header info\n  cellHozAlign: \"\",\n  //horizontal align columns\n  cellVertAlign: \"\",\n  //vertical align columns\n  headerHozAlign: \"\",\n  //horizontal header alignment\n  data: [],\n  //default starting data\n  autoColumns: false,\n  //build columns from data row structure\n  autoColumnsDefinitions: false,\n  reactiveData: false,\n  //enable data reactivity\n  nestedFieldSeparator: \".\",\n  //seperatpr for nested data\n  tooltips: false,\n  //Tool tip value\n  tooltipsHeader: false,\n  //Tool tip for headers\n  tooltipGenerationMode: \"load\",\n  //when to generate tooltips\n  initialSort: false,\n  //initial sorting criteria\n  initialFilter: false,\n  //initial filtering criteria\n  initialHeaderFilter: false,\n  //initial header filtering criteria\n  columnHeaderSortMulti: true,\n  //multiple or single column sorting\n  sortOrderReverse: false,\n  //reverse internal sort ordering\n  headerSort: true,\n  //set default global header sort\n  headerSortTristate: false,\n  //set default tristate header sorting\n  headerSortElement: \"<div class='tabulator-arrow'></div>\",\n  //header sort element\n  footerElement: false,\n  //hold footer element\n  index: \"id\",\n  //filed for row index\n  textDirection: \"auto\",\n  keybindings: [],\n  //array for keybindings\n  tabEndNewRow: false,\n  //create new row when tab to end of table\n  invalidOptionWarnings: true,\n  //allow toggling of invalid option warnings\n  clipboard: false,\n  //enable clipboard\n  clipboardCopyStyled: true,\n  //formatted table data\n  clipboardCopyConfig: false,\n  //clipboard config\n  clipboardCopyFormatter: false,\n  //DEPRICATED - REMOVE in 5.0\n  clipboardCopyRowRange: \"active\",\n  //restrict clipboard to visible rows only\n  clipboardPasteParser: \"table\",\n  //convert pasted clipboard data to rows\n  clipboardPasteAction: \"insert\",\n  //how to insert pasted data into the table\n  clipboardCopied: function clipboardCopied() {},\n  //data has been copied to the clipboard\n  clipboardPasted: function clipboardPasted() {},\n  //data has been pasted into the table\n  clipboardPasteError: function clipboardPasteError() {},\n  //data has not successfully been pasted into the table\n  downloadDataFormatter: false,\n  //function to manipulate table data before it is downloaded\n  downloadReady: function downloadReady(data, blob) {\n    return blob;\n  },\n  //function to manipulate download data\n  downloadComplete: false,\n  //function to manipulate download data\n  downloadConfig: {},\n  //download config\n  downloadRowRange: \"active\",\n  //restrict download to active rows only\n  dataTree: false,\n  //enable data tree\n  dataTreeFilter: true,\n  //filter child rows\n  dataTreeSort: true,\n  //sort child rows\n  dataTreeElementColumn: false,\n  dataTreeBranchElement: true,\n  //show data tree branch element\n  dataTreeChildIndent: 9,\n  //data tree child indent in px\n  dataTreeChildField: \"_children\",\n  //data tre column field to look for child rows\n  dataTreeCollapseElement: false,\n  //data tree row collapse element\n  dataTreeExpandElement: false,\n  //data tree row expand element\n  dataTreeStartExpanded: false,\n  dataTreeRowExpanded: function dataTreeRowExpanded() {},\n  //row has been expanded\n  dataTreeRowCollapsed: function dataTreeRowCollapsed() {},\n  //row has been collapsed\n  dataTreeChildColumnCalcs: false,\n  //include visible data tree rows in column calculations\n  dataTreeSelectPropagate: false,\n  //seleccting a parent row selects its children\n  printAsHtml: false,\n  //enable print as html\n  printFormatter: false,\n  //printing page formatter\n  printHeader: false,\n  //page header contents\n  printFooter: false,\n  //page footer contents\n  printCopyStyle: true,\n  //DEPRICATED - REMOVE in 5.0\n  printStyled: true,\n  //enable print as html styling\n  printVisibleRows: true,\n  //DEPRICATED - REMOVE in 5.0\n  printRowRange: \"visible\",\n  //restrict print to visible rows only\n  printConfig: {},\n  //print config options\n  addRowPos: \"bottom\",\n  //position to insert blank rows, top|bottom\n  selectable: \"highlight\",\n  //highlight rows on hover\n  selectableRangeMode: \"drag\",\n  //highlight rows on hover\n  selectableRollingSelection: true,\n  //roll selection once maximum number of selectable rows is reached\n  selectablePersistence: true,\n  // maintain selection when table view is updated\n  selectableCheck: function selectableCheck(data, row) {\n    return true;\n  },\n  //check wheather row is selectable\n  headerFilterLiveFilterDelay: 300,\n  //delay before updating column after user types in header filter\n  headerFilterPlaceholder: false,\n  //placeholder text to display in header filters\n  headerVisible: true,\n  //hide header\n  history: false,\n  //enable edit history\n  locale: false,\n  //current system language\n  langs: {},\n  virtualDom: true,\n  //enable DOM virtualization\n  virtualDomBuffer: 0,\n  // set virtual DOM buffer size\n  virtualDomHoz: false,\n  //enable horizontal DOM virtualization\n  persistentLayout: false,\n  //DEPRICATED - REMOVE in 5.0\n  persistentSort: false,\n  //DEPRICATED - REMOVE in 5.0\n  persistentFilter: false,\n  //DEPRICATED - REMOVE in 5.0\n  persistenceID: \"\",\n  //key for persistent storage\n  persistenceMode: true,\n  //mode for storing persistence information\n  persistenceReaderFunc: false,\n  //function for handling persistence data reading\n  persistenceWriterFunc: false,\n  //function for handling persistence data writing\n  persistence: false,\n  responsiveLayout: false,\n  //responsive layout flags\n  responsiveLayoutCollapseStartOpen: true,\n  //start showing collapsed data\n  responsiveLayoutCollapseUseFormatters: true,\n  //responsive layout collapse formatter\n  responsiveLayoutCollapseFormatter: false,\n  //responsive layout collapse formatter\n  pagination: false,\n  //set pagination type\n  paginationSize: false,\n  //set number of rows to a page\n  paginationInitialPage: 1,\n  //initail page to show on load\n  paginationButtonCount: 5,\n  // set count of page button\n  paginationSizeSelector: false,\n  //add pagination size selector element\n  paginationElement: false,\n  //element to hold pagination numbers\n  paginationDataSent: {},\n  //pagination data sent to the server\n  paginationDataReceived: {},\n  //pagination data received from the server\n  paginationAddRow: \"page\",\n  //add rows on table or page\n  ajaxURL: false,\n  //url for ajax loading\n  ajaxURLGenerator: false,\n  ajaxParams: {},\n  //params for ajax loading\n  ajaxConfig: \"get\",\n  //ajax request type\n  ajaxContentType: \"form\",\n  //ajax request type\n  ajaxRequestFunc: false,\n  //promise function\n  ajaxLoader: true,\n  //show loader\n  ajaxLoaderLoading: false,\n  //loader element\n  ajaxLoaderError: false,\n  //loader element\n  ajaxFiltering: false,\n  ajaxSorting: false,\n  ajaxProgressiveLoad: false,\n  //progressive loading\n  ajaxProgressiveLoadDelay: 0,\n  //delay between requests\n  ajaxProgressiveLoadScrollMargin: 0,\n  //margin before scroll begins\n  groupBy: false,\n  //enable table grouping and set field to group by\n  groupStartOpen: true,\n  //starting state of group\n  groupValues: false,\n  groupUpdateOnCellEdit: false,\n  groupHeader: false,\n  //header generation function\n  groupHeaderPrint: null,\n  groupHeaderClipboard: null,\n  groupHeaderHtmlOutput: null,\n  groupHeaderDownload: null,\n  htmlOutputConfig: false,\n  //html outypu config\n  movableColumns: false,\n  //enable movable columns\n  movableRows: false,\n  //enable movable rows\n  movableRowsConnectedTables: false,\n  //tables for movable rows to be connected to\n  movableRowsConnectedElements: false,\n  //other elements for movable rows to be connected to\n  movableRowsSender: false,\n  movableRowsReceiver: \"insert\",\n  movableRowsSendingStart: function movableRowsSendingStart() {},\n  movableRowsSent: function movableRowsSent() {},\n  movableRowsSentFailed: function movableRowsSentFailed() {},\n  movableRowsSendingStop: function movableRowsSendingStop() {},\n  movableRowsReceivingStart: function movableRowsReceivingStart() {},\n  movableRowsReceived: function movableRowsReceived() {},\n  movableRowsReceivedFailed: function movableRowsReceivedFailed() {},\n  movableRowsReceivingStop: function movableRowsReceivingStop() {},\n  movableRowsElementDrop: function movableRowsElementDrop() {},\n  scrollToRowPosition: \"top\",\n  scrollToRowIfVisible: true,\n  scrollToColumnPosition: \"left\",\n  scrollToColumnIfVisible: true,\n  rowFormatter: false,\n  rowFormatterPrint: null,\n  rowFormatterClipboard: null,\n  rowFormatterHtmlOutput: null,\n  placeholder: false,\n  //table building callbacks\n  tableBuilding: function tableBuilding() {},\n  tableBuilt: function tableBuilt() {},\n  //render callbacks\n  renderStarted: function renderStarted() {},\n  renderComplete: function renderComplete() {},\n  //row callbacks\n  rowClick: false,\n  rowDblClick: false,\n  rowContext: false,\n  rowTap: false,\n  rowDblTap: false,\n  rowTapHold: false,\n  rowMouseEnter: false,\n  rowMouseLeave: false,\n  rowMouseOver: false,\n  rowMouseOut: false,\n  rowMouseMove: false,\n  rowContextMenu: false,\n  rowClickMenu: false,\n  rowAdded: function rowAdded() {},\n  rowDeleted: function rowDeleted() {},\n  rowMoved: function rowMoved() {},\n  rowUpdated: function rowUpdated() {},\n  rowSelectionChanged: function rowSelectionChanged() {},\n  rowSelected: function rowSelected() {},\n  rowDeselected: function rowDeselected() {},\n  rowResized: function rowResized() {},\n  //cell callbacks\n  //row callbacks\n  cellClick: false,\n  cellDblClick: false,\n  cellContext: false,\n  cellTap: false,\n  cellDblTap: false,\n  cellTapHold: false,\n  cellMouseEnter: false,\n  cellMouseLeave: false,\n  cellMouseOver: false,\n  cellMouseOut: false,\n  cellMouseMove: false,\n  cellEditing: function cellEditing() {},\n  cellEdited: function cellEdited() {},\n  cellEditCancelled: function cellEditCancelled() {},\n  //column callbacks\n  columnMoved: false,\n  columnResized: function columnResized() {},\n  columnTitleChanged: function columnTitleChanged() {},\n  columnVisibilityChanged: function columnVisibilityChanged() {},\n  //HTML iport callbacks\n  htmlImporting: function htmlImporting() {},\n  htmlImported: function htmlImported() {},\n  //data callbacks\n  dataLoading: function dataLoading() {},\n  dataLoaded: function dataLoaded() {},\n  dataEdited: false,\n  //DEPRECATED\n  dataChanged: false,\n  //ajax callbacks\n  ajaxRequesting: function ajaxRequesting() {},\n  ajaxResponse: false,\n  ajaxError: function ajaxError() {},\n  //filtering callbacks\n  dataFiltering: false,\n  dataFiltered: false,\n  //sorting callbacks\n  dataSorting: function dataSorting() {},\n  dataSorted: function dataSorted() {},\n  //grouping callbacks\n  groupToggleElement: \"arrow\",\n  groupClosedShowCalcs: false,\n  dataGrouping: function dataGrouping() {},\n  dataGrouped: false,\n  groupVisibilityChanged: function groupVisibilityChanged() {},\n  groupClick: false,\n  groupDblClick: false,\n  groupContext: false,\n  groupContextMenu: false,\n  groupClickMenu: false,\n  groupTap: false,\n  groupDblTap: false,\n  groupTapHold: false,\n  columnCalcs: true,\n  //pagination callbacks\n  pageLoaded: function pageLoaded() {},\n  //localization callbacks\n  localized: function localized() {},\n  //validation callbacks\n  validationMode: \"blocking\",\n  validationFailed: function validationFailed() {},\n  //history callbacks\n  historyUndo: function historyUndo() {},\n  historyRedo: function historyRedo() {},\n  //scroll callbacks\n  scrollHorizontal: function scrollHorizontal() {},\n  scrollVertical: function scrollVertical() {}\n};\n\nTabulator.prototype.initializeOptions = function (options) {\n  //warn user if option is not available\n  if (options.invalidOptionWarnings !== false) {\n    for (var key in options) {\n      if (typeof this.defaultOptions[key] === \"undefined\") {\n        console.warn(\"Invalid table constructor option:\", key);\n      }\n    }\n  } //assign options to table\n\n\n  for (var key in this.defaultOptions) {\n    if (key in options) {\n      this.options[key] = options[key];\n    } else {\n      if (Array.isArray(this.defaultOptions[key])) {\n        this.options[key] = [];\n      } else if (_typeof(this.defaultOptions[key]) === \"object\" && this.defaultOptions[key] !== null) {\n        this.options[key] = {};\n      } else {\n        this.options[key] = this.defaultOptions[key];\n      }\n    }\n  }\n};\n\nTabulator.prototype.initializeElement = function (element) {\n  if (typeof HTMLElement !== \"undefined\" && element instanceof HTMLElement) {\n    this.element = element;\n    return true;\n  } else if (typeof element === \"string\") {\n    this.element = document.querySelector(element);\n\n    if (this.element) {\n      return true;\n    } else {\n      console.error(\"Tabulator Creation Error - no element found matching selector: \", element);\n      return false;\n    }\n  } else {\n    console.error(\"Tabulator Creation Error - Invalid element provided:\", element);\n    return false;\n  }\n};\n\nTabulator.prototype.rtlCheck = function () {\n  var style = window.getComputedStyle(this.element);\n\n  switch (this.options.textDirection) {\n    case \"auto\":\n      if (style.direction !== \"rtl\") {\n        break;\n      }\n\n      ;\n\n    case \"rtl\":\n      this.element.classList.add(\"tabulator-rtl\");\n      this.rtl = true;\n      break;\n\n    case \"ltr\":\n      this.element.classList.add(\"tabulator-ltr\");\n\n    default:\n      this.rtl = false;\n  }\n}; //convert depricated functionality to new functions\n\n\nTabulator.prototype._mapDepricatedFunctionality = function () {\n  //map depricated persistance setup options\n  if (this.options.persistentLayout || this.options.persistentSort || this.options.persistentFilter) {\n    if (!this.options.persistence) {\n      this.options.persistence = {};\n    }\n  }\n\n  if (this.options.dataEdited) {\n    console.warn(\"DEPRECATION WARNING - dataEdited option has been deprecated, please use the dataChanged option instead\");\n    this.options.dataChanged = this.options.dataEdited;\n  }\n\n  if (this.options.downloadDataFormatter) {\n    console.warn(\"DEPRECATION WARNING - downloadDataFormatter option has been deprecated\");\n  }\n\n  if (typeof this.options.clipboardCopyHeader !== \"undefined\") {\n    this.options.columnHeaders = this.options.clipboardCopyHeader;\n    console.warn(\"DEPRECATION WARNING - clipboardCopyHeader option has been deprecated, please use the columnHeaders property on the clipboardCopyConfig option\");\n  }\n\n  if (this.options.printVisibleRows !== true) {\n    console.warn(\"printVisibleRows option is deprecated, you should now use the printRowRange option\");\n    this.options.persistence.printRowRange = \"active\";\n  }\n\n  if (this.options.printCopyStyle !== true) {\n    console.warn(\"printCopyStyle option is deprecated, you should now use the printStyled option\");\n    this.options.persistence.printStyled = this.options.printCopyStyle;\n  }\n\n  if (this.options.persistentLayout) {\n    console.warn(\"persistentLayout option is deprecated, you should now use the persistence option\");\n\n    if (this.options.persistence !== true && typeof this.options.persistence.columns === \"undefined\") {\n      this.options.persistence.columns = true;\n    }\n  }\n\n  if (this.options.persistentSort) {\n    console.warn(\"persistentSort option is deprecated, you should now use the persistence option\");\n\n    if (this.options.persistence !== true && typeof this.options.persistence.sort === \"undefined\") {\n      this.options.persistence.sort = true;\n    }\n  }\n\n  if (this.options.persistentFilter) {\n    console.warn(\"persistentFilter option is deprecated, you should now use the persistence option\");\n\n    if (this.options.persistence !== true && typeof this.options.persistence.filter === \"undefined\") {\n      this.options.persistence.filter = true;\n    }\n  }\n\n  if (this.options.columnVertAlign) {\n    console.warn(\"columnVertAlign option is deprecated, you should now use the columnHeaderVertAlign option\");\n    this.options.columnHeaderVertAlign = this.options.columnVertAlign;\n  }\n};\n\nTabulator.prototype._clearSelection = function () {\n  this.element.classList.add(\"tabulator-block-select\");\n\n  if (window.getSelection) {\n    if (window.getSelection().empty) {\n      // Chrome\n      window.getSelection().empty();\n    } else if (window.getSelection().removeAllRanges) {\n      // Firefox\n      window.getSelection().removeAllRanges();\n    }\n  } else if (document.selection) {\n    // IE?\n    document.selection.empty();\n  }\n\n  this.element.classList.remove(\"tabulator-block-select\");\n}; //concreate table\n\n\nTabulator.prototype._create = function () {\n  this._clearObjectPointers();\n\n  this._mapDepricatedFunctionality();\n\n  this.bindModules();\n  this.rtlCheck();\n\n  if (this.element.tagName === \"TABLE\") {\n    if (this.modExists(\"htmlTableImport\", true)) {\n      this.modules.htmlTableImport.parseTable();\n    }\n  }\n\n  this.columnManager = new ColumnManager(this);\n  this.rowManager = new RowManager(this);\n  this.footerManager = new FooterManager(this);\n  this.columnManager.setRowManager(this.rowManager);\n  this.rowManager.setColumnManager(this.columnManager);\n\n  if (this.options.virtualDomHoz) {\n    this.vdomHoz = new VDomHoz(this);\n  }\n\n  this._buildElement();\n\n  this._loadInitialData();\n}; //clear pointers to objects in default config object\n\n\nTabulator.prototype._clearObjectPointers = function () {\n  this.options.columns = this.options.columns.slice(0);\n\n  if (!this.options.reactiveData) {\n    this.options.data = this.options.data.slice(0);\n  }\n}; //build tabulator element\n\n\nTabulator.prototype._buildElement = function () {\n  var _this23 = this;\n\n  var element = this.element,\n      mod = this.modules,\n      options = this.options;\n  options.tableBuilding.call(this);\n  element.classList.add(\"tabulator\");\n  element.setAttribute(\"role\", \"grid\"); //empty element\n\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  } //set table height\n\n\n  if (options.height) {\n    options.height = isNaN(options.height) ? options.height : options.height + \"px\";\n    element.style.height = options.height;\n  } //set table min height\n\n\n  if (options.minHeight !== false) {\n    options.minHeight = isNaN(options.minHeight) ? options.minHeight : options.minHeight + \"px\";\n    element.style.minHeight = options.minHeight;\n  } //set table maxHeight\n\n\n  if (options.maxHeight !== false) {\n    options.maxHeight = isNaN(options.maxHeight) ? options.maxHeight : options.maxHeight + \"px\";\n    element.style.maxHeight = options.maxHeight;\n  }\n\n  this.columnManager.initialize();\n  this.rowManager.initialize();\n\n  this._detectBrowser();\n\n  if (this.modExists(\"layout\", true)) {\n    mod.layout.initialize(options.layout);\n  } //set localization\n\n\n  mod.localize.initialize();\n\n  if (options.headerFilterPlaceholder !== false) {\n    mod.localize.setHeaderFilterPlaceholder(options.headerFilterPlaceholder);\n  }\n\n  for (var locale in options.langs) {\n    mod.localize.installLang(locale, options.langs[locale]);\n  }\n\n  mod.localize.setLocale(options.locale); //configure placeholder element\n\n  if (typeof options.placeholder == \"string\") {\n    var el = document.createElement(\"div\");\n    el.classList.add(\"tabulator-placeholder\");\n    var span = document.createElement(\"span\");\n    span.innerHTML = options.placeholder;\n    el.appendChild(span);\n    options.placeholder = el;\n  } //build table elements\n\n\n  element.appendChild(this.columnManager.getElement());\n  element.appendChild(this.rowManager.getElement());\n\n  if (options.footerElement) {\n    this.footerManager.activate();\n  }\n\n  if (options.persistence && this.modExists(\"persistence\", true)) {\n    mod.persistence.initialize();\n  }\n\n  if (options.persistence && this.modExists(\"persistence\", true) && mod.persistence.config.columns) {\n    options.columns = mod.persistence.load(\"columns\", options.columns);\n  }\n\n  if (options.movableRows && this.modExists(\"moveRow\")) {\n    mod.moveRow.initialize();\n  }\n\n  if (options.autoColumns && this.options.data) {\n    this.columnManager.generateColumnsFromRowData(this.options.data);\n  }\n\n  if (this.modExists(\"columnCalcs\")) {\n    mod.columnCalcs.initialize();\n  }\n\n  this.columnManager.setColumns(options.columns);\n\n  if (options.dataTree && this.modExists(\"dataTree\", true)) {\n    mod.dataTree.initialize();\n  }\n\n  if (this.modExists(\"frozenRows\")) {\n    this.modules.frozenRows.initialize();\n  }\n\n  if ((options.persistence && this.modExists(\"persistence\", true) && mod.persistence.config.sort || options.initialSort) && this.modExists(\"sort\", true)) {\n    var sorters = [];\n\n    if (options.persistence && this.modExists(\"persistence\", true) && mod.persistence.config.sort) {\n      sorters = mod.persistence.load(\"sort\");\n\n      if (sorters === false && options.initialSort) {\n        sorters = options.initialSort;\n      }\n    } else if (options.initialSort) {\n      sorters = options.initialSort;\n    }\n\n    mod.sort.setSort(sorters);\n  }\n\n  if ((options.persistence && this.modExists(\"persistence\", true) && mod.persistence.config.filter || options.initialFilter) && this.modExists(\"filter\", true)) {\n    var filters = [];\n\n    if (options.persistence && this.modExists(\"persistence\", true) && mod.persistence.config.filter) {\n      filters = mod.persistence.load(\"filter\");\n\n      if (filters === false && options.initialFilter) {\n        filters = options.initialFilter;\n      }\n    } else if (options.initialFilter) {\n      filters = options.initialFilter;\n    }\n\n    mod.filter.setFilter(filters);\n  }\n\n  if (options.initialHeaderFilter && this.modExists(\"filter\", true)) {\n    options.initialHeaderFilter.forEach(function (item) {\n      var column = _this23.columnManager.findColumn(item.field);\n\n      if (column) {\n        mod.filter.setHeaderFilterValue(column, item.value);\n      } else {\n        console.warn(\"Column Filter Error - No matching column found:\", item.field);\n        return false;\n      }\n    });\n  }\n\n  if (this.modExists(\"ajax\")) {\n    mod.ajax.initialize();\n  }\n\n  if (options.pagination && this.modExists(\"page\", true)) {\n    mod.page.initialize();\n  }\n\n  if (options.groupBy && this.modExists(\"groupRows\", true)) {\n    mod.groupRows.initialize();\n  }\n\n  if (this.modExists(\"keybindings\")) {\n    mod.keybindings.initialize();\n  }\n\n  if (this.modExists(\"selectRow\")) {\n    mod.selectRow.clearSelectionData(true);\n  }\n\n  if (options.autoResize && this.modExists(\"resizeTable\")) {\n    mod.resizeTable.initialize();\n  }\n\n  if (this.modExists(\"clipboard\")) {\n    mod.clipboard.initialize();\n  }\n\n  if (options.printAsHtml && this.modExists(\"print\")) {\n    mod.print.initialize();\n  }\n\n  options.tableBuilt.call(this);\n};\n\nTabulator.prototype._loadInitialData = function () {\n  var self = this;\n\n  if (self.options.pagination && self.modExists(\"page\")) {\n    self.modules.page.reset(true, true);\n\n    if (self.options.pagination == \"local\") {\n      if (self.options.data.length) {\n        self.rowManager.setData(self.options.data, false, true);\n      } else {\n        if ((self.options.ajaxURL || self.options.ajaxURLGenerator) && self.modExists(\"ajax\")) {\n          self.modules.ajax.loadData(false, true).then(function () {}).catch(function () {\n            if (self.options.paginationInitialPage) {\n              self.modules.page.setPage(self.options.paginationInitialPage);\n            }\n          });\n          return;\n        } else {\n          self.rowManager.setData(self.options.data, false, true);\n        }\n      }\n\n      if (self.options.paginationInitialPage) {\n        self.modules.page.setPage(self.options.paginationInitialPage);\n      }\n    } else {\n      if (self.options.ajaxURL) {\n        self.modules.page.setPage(self.options.paginationInitialPage).then(function () {}).catch(function () {});\n      } else {\n        self.rowManager.setData([], false, true);\n      }\n    }\n  } else {\n    if (self.options.data.length) {\n      self.rowManager.setData(self.options.data);\n    } else {\n      if ((self.options.ajaxURL || self.options.ajaxURLGenerator) && self.modExists(\"ajax\")) {\n        self.modules.ajax.loadData(false, true).then(function () {}).catch(function () {});\n      } else {\n        self.rowManager.setData(self.options.data, false, true);\n      }\n    }\n  }\n}; //deconstructor\n\n\nTabulator.prototype.destroy = function () {\n  var element = this.element;\n  Tabulator.prototype.comms.deregister(this); //deregister table from inderdevice communication\n\n  if (this.options.reactiveData && this.modExists(\"reactiveData\", true)) {\n    this.modules.reactiveData.unwatchData();\n  } //clear row data\n\n\n  this.rowManager.rows.forEach(function (row) {\n    row.wipe();\n  });\n  this.rowManager.rows = [];\n  this.rowManager.activeRows = [];\n  this.rowManager.displayRows = []; //clear event bindings\n\n  if (this.options.autoResize && this.modExists(\"resizeTable\")) {\n    this.modules.resizeTable.clearBindings();\n  }\n\n  if (this.modExists(\"keybindings\")) {\n    this.modules.keybindings.clearBindings();\n  } //clear DOM\n\n\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n\n  element.classList.remove(\"tabulator\");\n};\n\nTabulator.prototype._detectBrowser = function () {\n  var ua = navigator.userAgent || navigator.vendor || window.opera;\n\n  if (ua.indexOf(\"Trident\") > -1) {\n    this.browser = \"ie\";\n    this.browserSlow = true;\n  } else if (ua.indexOf(\"Edge\") > -1) {\n    this.browser = \"edge\";\n    this.browserSlow = true;\n  } else if (ua.indexOf(\"Firefox\") > -1) {\n    this.browser = \"firefox\";\n    this.browserSlow = false;\n  } else {\n    this.browser = \"other\";\n    this.browserSlow = false;\n  }\n\n  this.browserMobile = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(ua) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(ua.substr(0, 4));\n}; ////////////////// Data Handling //////////////////\n//block table redrawing\n\n\nTabulator.prototype.blockRedraw = function () {\n  return this.rowManager.blockRedraw();\n}; //restore table redrawing\n\n\nTabulator.prototype.restoreRedraw = function () {\n  return this.rowManager.restoreRedraw();\n}; //local data from local file\n\n\nTabulator.prototype.setDataFromLocalFile = function (extensions) {\n  var _this24 = this;\n\n  return new Promise(function (resolve, reject) {\n    var input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = extensions || \".json,application/json\";\n    input.addEventListener(\"change\", function (e) {\n      var file = input.files[0],\n          reader = new FileReader(),\n          data;\n      reader.readAsText(file);\n\n      reader.onload = function (e) {\n        try {\n          data = JSON.parse(reader.result);\n        } catch (e) {\n          console.warn(\"File Load Error - File contents is invalid JSON\", e);\n          reject(e);\n          return;\n        }\n\n        _this24.setData(data).then(function (data) {\n          resolve(data);\n        }).catch(function (err) {\n          resolve(err);\n        });\n      };\n\n      reader.onerror = function (e) {\n        console.warn(\"File Load Error - Unable to read file\");\n        reject();\n      };\n    });\n    input.click();\n  });\n}; //load data\n\n\nTabulator.prototype.setData = function (data, params, config) {\n  if (this.modExists(\"ajax\")) {\n    this.modules.ajax.blockActiveRequest();\n  }\n\n  return this._setData(data, params, config, false, true);\n};\n\nTabulator.prototype._setData = function (data, params, config, inPosition, columnsChanged) {\n  var self = this;\n\n  if (typeof data === \"string\") {\n    if (data.indexOf(\"{\") == 0 || data.indexOf(\"[\") == 0) {\n      //data is a json encoded string\n      return self.rowManager.setData(JSON.parse(data), inPosition, columnsChanged);\n    } else {\n      if (self.modExists(\"ajax\", true)) {\n        if (params) {\n          self.modules.ajax.setParams(params);\n        }\n\n        if (config) {\n          self.modules.ajax.setConfig(config);\n        }\n\n        self.modules.ajax.setUrl(data);\n\n        if (self.options.pagination == \"remote\" && self.modExists(\"page\", true)) {\n          self.modules.page.reset(true, true);\n          return self.modules.page.setPage(1);\n        } else {\n          //assume data is url, make ajax call to url to get data\n          return self.modules.ajax.loadData(inPosition, columnsChanged);\n        }\n      }\n    }\n  } else {\n    if (data) {\n      //asume data is already an object\n      return self.rowManager.setData(data, inPosition, columnsChanged);\n    } else {\n      //no data provided, check if ajaxURL is present;\n      if (self.modExists(\"ajax\") && (self.modules.ajax.getUrl || self.options.ajaxURLGenerator)) {\n        if (self.options.pagination == \"remote\" && self.modExists(\"page\", true)) {\n          self.modules.page.reset(true, true);\n          return self.modules.page.setPage(1);\n        } else {\n          return self.modules.ajax.loadData(inPosition, columnsChanged);\n        }\n      } else {\n        //empty data\n        return self.rowManager.setData([], inPosition, columnsChanged);\n      }\n    }\n  }\n}; //clear data\n\n\nTabulator.prototype.clearData = function () {\n  if (this.modExists(\"ajax\")) {\n    this.modules.ajax.blockActiveRequest();\n  }\n\n  this.rowManager.clearData();\n}; //get table data array\n\n\nTabulator.prototype.getData = function (active) {\n  if (active === true) {\n    console.warn(\"passing a boolean to the getData function is deprecated, you should now pass the string 'active'\");\n    active = \"active\";\n  }\n\n  return this.rowManager.getData(active);\n}; //get table data array count\n\n\nTabulator.prototype.getDataCount = function (active) {\n  if (active === true) {\n    console.warn(\"passing a boolean to the getDataCount function is deprecated, you should now pass the string 'active'\");\n    active = \"active\";\n  }\n\n  return this.rowManager.getDataCount(active);\n}; //search for specific row components\n\n\nTabulator.prototype.searchRows = function (field, type, value) {\n  if (this.modExists(\"filter\", true)) {\n    return this.modules.filter.search(\"rows\", field, type, value);\n  }\n}; //search for specific data\n\n\nTabulator.prototype.searchData = function (field, type, value) {\n  if (this.modExists(\"filter\", true)) {\n    return this.modules.filter.search(\"data\", field, type, value);\n  }\n}; //get table html\n\n\nTabulator.prototype.getHtml = function (visible, style, config) {\n  if (this.modExists(\"export\", true)) {\n    return this.modules.export.getHtml(visible, style, config);\n  }\n}; //get print html\n\n\nTabulator.prototype.print = function (visible, style, config) {\n  if (this.modExists(\"print\", true)) {\n    return this.modules.print.printFullscreen(visible, style, config);\n  }\n}; //retrieve Ajax URL\n\n\nTabulator.prototype.getAjaxUrl = function () {\n  if (this.modExists(\"ajax\", true)) {\n    return this.modules.ajax.getUrl();\n  }\n}; //replace data, keeping table in position with same sort\n\n\nTabulator.prototype.replaceData = function (data, params, config) {\n  if (this.modExists(\"ajax\")) {\n    this.modules.ajax.blockActiveRequest();\n  }\n\n  return this._setData(data, params, config, true);\n}; //update table data\n\n\nTabulator.prototype.updateData = function (data) {\n  var _this25 = this;\n\n  var self = this;\n  var responses = 0;\n  return new Promise(function (resolve, reject) {\n    if (_this25.modExists(\"ajax\")) {\n      _this25.modules.ajax.blockActiveRequest();\n    }\n\n    if (typeof data === \"string\") {\n      data = JSON.parse(data);\n    }\n\n    if (data) {\n      data.forEach(function (item) {\n        var row = self.rowManager.findRow(item[self.options.index]);\n\n        if (row) {\n          responses++;\n          row.updateData(item).then(function () {\n            responses--;\n\n            if (!responses) {\n              resolve();\n            }\n          });\n        }\n      });\n    } else {\n      console.warn(\"Update Error - No data provided\");\n      reject(\"Update Error - No data provided\");\n    }\n  });\n};\n\nTabulator.prototype.addData = function (data, pos, index) {\n  var _this26 = this;\n\n  return new Promise(function (resolve, reject) {\n    if (_this26.modExists(\"ajax\")) {\n      _this26.modules.ajax.blockActiveRequest();\n    }\n\n    if (typeof data === \"string\") {\n      data = JSON.parse(data);\n    }\n\n    if (data) {\n      _this26.rowManager.addRows(data, pos, index).then(function (rows) {\n        var output = [];\n        rows.forEach(function (row) {\n          output.push(row.getComponent());\n        });\n        resolve(output);\n      });\n    } else {\n      console.warn(\"Update Error - No data provided\");\n      reject(\"Update Error - No data provided\");\n    }\n  });\n}; //update table data\n\n\nTabulator.prototype.updateOrAddData = function (data) {\n  var _this27 = this;\n\n  var self = this,\n      rows = [],\n      responses = 0;\n  return new Promise(function (resolve, reject) {\n    if (_this27.modExists(\"ajax\")) {\n      _this27.modules.ajax.blockActiveRequest();\n    }\n\n    if (typeof data === \"string\") {\n      data = JSON.parse(data);\n    }\n\n    if (data) {\n      data.forEach(function (item) {\n        var row = self.rowManager.findRow(item[self.options.index]);\n        responses++;\n\n        if (row) {\n          row.updateData(item).then(function () {\n            responses--;\n            rows.push(row.getComponent());\n\n            if (!responses) {\n              resolve(rows);\n            }\n          });\n        } else {\n          self.rowManager.addRows(item).then(function (newRows) {\n            responses--;\n            rows.push(newRows[0].getComponent());\n\n            if (!responses) {\n              resolve(rows);\n            }\n          });\n        }\n      });\n    } else {\n      console.warn(\"Update Error - No data provided\");\n      reject(\"Update Error - No data provided\");\n    }\n  });\n}; //get row object\n\n\nTabulator.prototype.getRow = function (index) {\n  var row = this.rowManager.findRow(index);\n\n  if (row) {\n    return row.getComponent();\n  } else {\n    console.warn(\"Find Error - No matching row found:\", index);\n    return false;\n  }\n}; //get row object\n\n\nTabulator.prototype.getRowFromPosition = function (position, active) {\n  var row = this.rowManager.getRowFromPosition(position, active);\n\n  if (row) {\n    return row.getComponent();\n  } else {\n    console.warn(\"Find Error - No matching row found:\", position);\n    return false;\n  }\n}; //delete row from table\n\n\nTabulator.prototype.deleteRow = function (index) {\n  var _this28 = this;\n\n  return new Promise(function (resolve, reject) {\n    var self = _this28,\n        count = 0,\n        successCount = 0,\n        foundRows = [];\n\n    function doneCheck() {\n      count++;\n\n      if (count == index.length) {\n        if (successCount) {\n          self.rowManager.reRenderInPosition();\n          resolve();\n        }\n      }\n    }\n\n    if (!Array.isArray(index)) {\n      index = [index];\n    } //find matching rows\n\n\n    index.forEach(function (item) {\n      var row = _this28.rowManager.findRow(item, true);\n\n      if (row) {\n        foundRows.push(row);\n      } else {\n        console.warn(\"Delete Error - No matching row found:\", item);\n        reject(\"Delete Error - No matching row found\");\n        doneCheck();\n      }\n    }); //sort rows into correct order to ensure smooth delete from table\n\n    foundRows.sort(function (a, b) {\n      return _this28.rowManager.rows.indexOf(a) > _this28.rowManager.rows.indexOf(b) ? 1 : -1;\n    });\n    foundRows.forEach(function (row) {\n      row.delete().then(function () {\n        successCount++;\n        doneCheck();\n      }).catch(function (err) {\n        doneCheck();\n        reject(err);\n      });\n    });\n  });\n}; //add row to table\n\n\nTabulator.prototype.addRow = function (data, pos, index) {\n  var _this29 = this;\n\n  return new Promise(function (resolve, reject) {\n    if (typeof data === \"string\") {\n      data = JSON.parse(data);\n    }\n\n    _this29.rowManager.addRows(data, pos, index).then(function (rows) {\n      //recalc column calculations if present\n      if (_this29.modExists(\"columnCalcs\")) {\n        _this29.modules.columnCalcs.recalc(_this29.rowManager.activeRows);\n      }\n\n      resolve(rows[0].getComponent());\n    });\n  });\n}; //update a row if it exitsts otherwise create it\n\n\nTabulator.prototype.updateOrAddRow = function (index, data) {\n  var _this30 = this;\n\n  return new Promise(function (resolve, reject) {\n    var row = _this30.rowManager.findRow(index);\n\n    if (typeof data === \"string\") {\n      data = JSON.parse(data);\n    }\n\n    if (row) {\n      row.updateData(data).then(function () {\n        //recalc column calculations if present\n        if (_this30.modExists(\"columnCalcs\")) {\n          _this30.modules.columnCalcs.recalc(_this30.rowManager.activeRows);\n        }\n\n        resolve(row.getComponent());\n      }).catch(function (err) {\n        reject(err);\n      });\n    } else {\n      row = _this30.rowManager.addRows(data).then(function (rows) {\n        //recalc column calculations if present\n        if (_this30.modExists(\"columnCalcs\")) {\n          _this30.modules.columnCalcs.recalc(_this30.rowManager.activeRows);\n        }\n\n        resolve(rows[0].getComponent());\n      }).catch(function (err) {\n        reject(err);\n      });\n    }\n  });\n}; //update row data\n\n\nTabulator.prototype.updateRow = function (index, data) {\n  var _this31 = this;\n\n  return new Promise(function (resolve, reject) {\n    var row = _this31.rowManager.findRow(index);\n\n    if (typeof data === \"string\") {\n      data = JSON.parse(data);\n    }\n\n    if (row) {\n      row.updateData(data).then(function () {\n        resolve(row.getComponent());\n      }).catch(function (err) {\n        reject(err);\n      });\n    } else {\n      console.warn(\"Update Error - No matching row found:\", index);\n      reject(\"Update Error - No matching row found\");\n    }\n  });\n}; //scroll to row in DOM\n\n\nTabulator.prototype.scrollToRow = function (index, position, ifVisible) {\n  var _this32 = this;\n\n  return new Promise(function (resolve, reject) {\n    var row = _this32.rowManager.findRow(index);\n\n    if (row) {\n      _this32.rowManager.scrollToRow(row, position, ifVisible).then(function () {\n        resolve();\n      }).catch(function (err) {\n        reject(err);\n      });\n    } else {\n      console.warn(\"Scroll Error - No matching row found:\", index);\n      reject(\"Scroll Error - No matching row found\");\n    }\n  });\n};\n\nTabulator.prototype.moveRow = function (from, to, after) {\n  var fromRow = this.rowManager.findRow(from);\n\n  if (fromRow) {\n    fromRow.moveToRow(to, after);\n  } else {\n    console.warn(\"Move Error - No matching row found:\", from);\n  }\n};\n\nTabulator.prototype.getRows = function (active) {\n  if (active === true) {\n    console.warn(\"passing a boolean to the getRows function is deprecated, you should now pass the string 'active'\");\n    active = \"active\";\n  }\n\n  return this.rowManager.getComponents(active);\n}; //get position of row in table\n\n\nTabulator.prototype.getRowPosition = function (index, active) {\n  var row = this.rowManager.findRow(index);\n\n  if (row) {\n    return this.rowManager.getRowPosition(row, active);\n  } else {\n    console.warn(\"Position Error - No matching row found:\", index);\n    return false;\n  }\n}; //copy table data to clipboard\n\n\nTabulator.prototype.copyToClipboard = function (selector) {\n  if (this.modExists(\"clipboard\", true)) {\n    this.modules.clipboard.copy(selector);\n  }\n}; /////////////// Column Functions  ///////////////\n\n\nTabulator.prototype.setColumns = function (definition) {\n  this.columnManager.setColumns(definition);\n};\n\nTabulator.prototype.getColumns = function (structured) {\n  return this.columnManager.getComponents(structured);\n};\n\nTabulator.prototype.getColumn = function (field) {\n  var col = this.columnManager.findColumn(field);\n\n  if (col) {\n    return col.getComponent();\n  } else {\n    console.warn(\"Find Error - No matching column found:\", field);\n    return false;\n  }\n};\n\nTabulator.prototype.getColumnDefinitions = function () {\n  return this.columnManager.getDefinitionTree();\n};\n\nTabulator.prototype.getColumnLayout = function () {\n  if (this.modExists(\"persistence\", true)) {\n    return this.modules.persistence.parseColumns(this.columnManager.getColumns());\n  }\n};\n\nTabulator.prototype.setColumnLayout = function (layout) {\n  if (this.modExists(\"persistence\", true)) {\n    this.columnManager.setColumns(this.modules.persistence.mergeDefinition(this.options.columns, layout));\n    return true;\n  }\n\n  return false;\n};\n\nTabulator.prototype.showColumn = function (field) {\n  var column = this.columnManager.findColumn(field);\n\n  if (column) {\n    column.show();\n\n    if (this.options.responsiveLayout && this.modExists(\"responsiveLayout\", true)) {\n      this.modules.responsiveLayout.update();\n    }\n  } else {\n    console.warn(\"Column Show Error - No matching column found:\", field);\n    return false;\n  }\n};\n\nTabulator.prototype.hideColumn = function (field) {\n  var column = this.columnManager.findColumn(field);\n\n  if (column) {\n    column.hide();\n\n    if (this.options.responsiveLayout && this.modExists(\"responsiveLayout\", true)) {\n      this.modules.responsiveLayout.update();\n    }\n  } else {\n    console.warn(\"Column Hide Error - No matching column found:\", field);\n    return false;\n  }\n};\n\nTabulator.prototype.toggleColumn = function (field) {\n  var column = this.columnManager.findColumn(field);\n\n  if (column) {\n    if (column.visible) {\n      column.hide();\n    } else {\n      column.show();\n    }\n  } else {\n    console.warn(\"Column Visibility Toggle Error - No matching column found:\", field);\n    return false;\n  }\n};\n\nTabulator.prototype.addColumn = function (definition, before, field) {\n  var _this33 = this;\n\n  return new Promise(function (resolve, reject) {\n    var column = _this33.columnManager.findColumn(field);\n\n    _this33.columnManager.addColumn(definition, before, column).then(function (column) {\n      resolve(column.getComponent());\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n};\n\nTabulator.prototype.deleteColumn = function (field) {\n  var _this34 = this;\n\n  return new Promise(function (resolve, reject) {\n    var column = _this34.columnManager.findColumn(field);\n\n    if (column) {\n      column.delete().then(function () {\n        resolve();\n      }).catch(function (err) {\n        reject(err);\n      });\n    } else {\n      console.warn(\"Column Delete Error - No matching column found:\", field);\n      reject();\n    }\n  });\n};\n\nTabulator.prototype.updateColumnDefinition = function (field, definition) {\n  var _this35 = this;\n\n  return new Promise(function (resolve, reject) {\n    var column = _this35.columnManager.findColumn(field);\n\n    if (column) {\n      column.updateDefinition(definition).then(function (col) {\n        resolve(col);\n      }).catch(function (err) {\n        reject(err);\n      });\n    } else {\n      console.warn(\"Column Update Error - No matching column found:\", field);\n      reject();\n    }\n  });\n};\n\nTabulator.prototype.moveColumn = function (from, to, after) {\n  var fromColumn = this.columnManager.findColumn(from);\n  var toColumn = this.columnManager.findColumn(to);\n\n  if (fromColumn) {\n    if (toColumn) {\n      this.columnManager.moveColumn(fromColumn, toColumn, after);\n    } else {\n      console.warn(\"Move Error - No matching column found:\", toColumn);\n    }\n  } else {\n    console.warn(\"Move Error - No matching column found:\", from);\n  }\n}; //scroll to column in DOM\n\n\nTabulator.prototype.scrollToColumn = function (field, position, ifVisible) {\n  var _this36 = this;\n\n  return new Promise(function (resolve, reject) {\n    var column = _this36.columnManager.findColumn(field);\n\n    if (column) {\n      _this36.columnManager.scrollToColumn(column, position, ifVisible).then(function () {\n        resolve();\n      }).catch(function (err) {\n        reject(err);\n      });\n    } else {\n      console.warn(\"Scroll Error - No matching column found:\", field);\n      reject(\"Scroll Error - No matching column found\");\n    }\n  });\n}; //////////// Localization Functions  ////////////\n\n\nTabulator.prototype.setLocale = function (locale) {\n  this.modules.localize.setLocale(locale);\n};\n\nTabulator.prototype.getLocale = function () {\n  return this.modules.localize.getLocale();\n};\n\nTabulator.prototype.getLang = function (locale) {\n  return this.modules.localize.getLang(locale);\n}; //////////// General Public Functions ////////////\n//redraw list without updating data\n\n\nTabulator.prototype.redraw = function (force) {\n  this.columnManager.redraw(force);\n  this.rowManager.redraw(force);\n};\n\nTabulator.prototype.setHeight = function (height) {\n  if (this.rowManager.renderMode !== \"classic\") {\n    this.options.height = isNaN(height) ? height : height + \"px\";\n    this.element.style.height = this.options.height;\n    this.rowManager.setRenderMode();\n    this.rowManager.redraw();\n  } else {\n    console.warn(\"setHeight function is not available in classic render mode\");\n  }\n}; ///////////////////// Sorting ////////////////////\n//trigger sort\n\n\nTabulator.prototype.setSort = function (sortList, dir) {\n  if (this.modExists(\"sort\", true)) {\n    this.modules.sort.setSort(sortList, dir);\n    this.rowManager.sorterRefresh();\n  }\n};\n\nTabulator.prototype.getSorters = function () {\n  if (this.modExists(\"sort\", true)) {\n    return this.modules.sort.getSort();\n  }\n};\n\nTabulator.prototype.clearSort = function () {\n  if (this.modExists(\"sort\", true)) {\n    this.modules.sort.clear();\n    this.rowManager.sorterRefresh();\n  }\n}; ///////////////////// Filtering ////////////////////\n//set standard filters\n\n\nTabulator.prototype.setFilter = function (field, type, value, params) {\n  if (this.modExists(\"filter\", true)) {\n    this.modules.filter.setFilter(field, type, value, params);\n    this.rowManager.filterRefresh();\n  }\n}; //add filter to array\n\n\nTabulator.prototype.addFilter = function (field, type, value, params) {\n  if (this.modExists(\"filter\", true)) {\n    this.modules.filter.addFilter(field, type, value, params);\n    this.rowManager.filterRefresh();\n  }\n}; //get all filters\n\n\nTabulator.prototype.getFilters = function (all) {\n  if (this.modExists(\"filter\", true)) {\n    return this.modules.filter.getFilters(all);\n  }\n};\n\nTabulator.prototype.setHeaderFilterFocus = function (field) {\n  if (this.modExists(\"filter\", true)) {\n    var column = this.columnManager.findColumn(field);\n\n    if (column) {\n      this.modules.filter.setHeaderFilterFocus(column);\n    } else {\n      console.warn(\"Column Filter Focus Error - No matching column found:\", field);\n      return false;\n    }\n  }\n};\n\nTabulator.prototype.getHeaderFilterValue = function (field) {\n  if (this.modExists(\"filter\", true)) {\n    var column = this.columnManager.findColumn(field);\n\n    if (column) {\n      return this.modules.filter.getHeaderFilterValue(column);\n    } else {\n      console.warn(\"Column Filter Error - No matching column found:\", field);\n    }\n  }\n};\n\nTabulator.prototype.setHeaderFilterValue = function (field, value) {\n  if (this.modExists(\"filter\", true)) {\n    var column = this.columnManager.findColumn(field);\n\n    if (column) {\n      this.modules.filter.setHeaderFilterValue(column, value);\n    } else {\n      console.warn(\"Column Filter Error - No matching column found:\", field);\n      return false;\n    }\n  }\n};\n\nTabulator.prototype.getHeaderFilters = function () {\n  if (this.modExists(\"filter\", true)) {\n    return this.modules.filter.getHeaderFilters();\n  }\n}; //remove filter from array\n\n\nTabulator.prototype.removeFilter = function (field, type, value) {\n  if (this.modExists(\"filter\", true)) {\n    this.modules.filter.removeFilter(field, type, value);\n    this.rowManager.filterRefresh();\n  }\n}; //clear filters\n\n\nTabulator.prototype.clearFilter = function (all) {\n  if (this.modExists(\"filter\", true)) {\n    this.modules.filter.clearFilter(all);\n    this.rowManager.filterRefresh();\n  }\n}; //clear header filters\n\n\nTabulator.prototype.clearHeaderFilter = function () {\n  if (this.modExists(\"filter\", true)) {\n    this.modules.filter.clearHeaderFilter();\n    this.rowManager.filterRefresh();\n  }\n}; ///////////////////// select ////////////////////\n\n\nTabulator.prototype.selectRow = function (rows) {\n  if (this.modExists(\"selectRow\", true)) {\n    if (rows === true) {\n      console.warn(\"passing a boolean to the selectRowselectRow function is deprecated, you should now pass the string 'active'\");\n      rows = \"active\";\n    }\n\n    this.modules.selectRow.selectRows(rows);\n  }\n};\n\nTabulator.prototype.deselectRow = function (rows) {\n  if (this.modExists(\"selectRow\", true)) {\n    this.modules.selectRow.deselectRows(rows);\n  }\n};\n\nTabulator.prototype.toggleSelectRow = function (row) {\n  if (this.modExists(\"selectRow\", true)) {\n    this.modules.selectRow.toggleRow(row);\n  }\n};\n\nTabulator.prototype.getSelectedRows = function () {\n  if (this.modExists(\"selectRow\", true)) {\n    return this.modules.selectRow.getSelectedRows();\n  }\n};\n\nTabulator.prototype.getSelectedData = function () {\n  if (this.modExists(\"selectRow\", true)) {\n    return this.modules.selectRow.getSelectedData();\n  }\n}; ///////////////////// validation  ////////////////////\n\n\nTabulator.prototype.getInvalidCells = function () {\n  if (this.modExists(\"validate\", true)) {\n    return this.modules.validate.getInvalidCells();\n  }\n};\n\nTabulator.prototype.clearCellValidation = function (cells) {\n  var _this37 = this;\n\n  if (this.modExists(\"validate\", true)) {\n    if (!cells) {\n      cells = this.modules.validate.getInvalidCells();\n    }\n\n    if (!Array.isArray(cells)) {\n      cells = [cells];\n    }\n\n    cells.forEach(function (cell) {\n      _this37.modules.validate.clearValidation(cell._getSelf());\n    });\n  }\n};\n\nTabulator.prototype.validate = function (cells) {\n  var output = []; //clear row data\n\n  this.rowManager.rows.forEach(function (row) {\n    var valid = row.validate();\n\n    if (valid !== true) {\n      output = output.concat(valid);\n    }\n  });\n  return output.length ? output : true;\n}; //////////// Pagination Functions  ////////////\n\n\nTabulator.prototype.setMaxPage = function (max) {\n  if (this.options.pagination && this.modExists(\"page\")) {\n    this.modules.page.setMaxPage(max);\n  } else {\n    return false;\n  }\n};\n\nTabulator.prototype.setPage = function (page) {\n  if (this.options.pagination && this.modExists(\"page\")) {\n    return this.modules.page.setPage(page);\n  } else {\n    return new Promise(function (resolve, reject) {\n      reject();\n    });\n  }\n};\n\nTabulator.prototype.setPageToRow = function (row) {\n  var _this38 = this;\n\n  return new Promise(function (resolve, reject) {\n    if (_this38.options.pagination && _this38.modExists(\"page\")) {\n      row = _this38.rowManager.findRow(row);\n\n      if (row) {\n        _this38.modules.page.setPageToRow(row).then(function () {\n          resolve();\n        }).catch(function () {\n          reject();\n        });\n      } else {\n        reject();\n      }\n    } else {\n      reject();\n    }\n  });\n};\n\nTabulator.prototype.setPageSize = function (size) {\n  if (this.options.pagination && this.modExists(\"page\")) {\n    this.modules.page.setPageSize(size);\n    this.modules.page.setPage(1).then(function () {}).catch(function () {});\n  } else {\n    return false;\n  }\n};\n\nTabulator.prototype.getPageSize = function () {\n  if (this.options.pagination && this.modExists(\"page\", true)) {\n    return this.modules.page.getPageSize();\n  }\n};\n\nTabulator.prototype.previousPage = function () {\n  if (this.options.pagination && this.modExists(\"page\")) {\n    this.modules.page.previousPage();\n  } else {\n    return false;\n  }\n};\n\nTabulator.prototype.nextPage = function () {\n  if (this.options.pagination && this.modExists(\"page\")) {\n    this.modules.page.nextPage();\n  } else {\n    return false;\n  }\n};\n\nTabulator.prototype.getPage = function () {\n  if (this.options.pagination && this.modExists(\"page\")) {\n    return this.modules.page.getPage();\n  } else {\n    return false;\n  }\n};\n\nTabulator.prototype.getPageMax = function () {\n  if (this.options.pagination && this.modExists(\"page\")) {\n    return this.modules.page.getPageMax();\n  } else {\n    return false;\n  }\n}; ///////////////// Grouping Functions ///////////////\n\n\nTabulator.prototype.setGroupBy = function (groups) {\n  if (this.modExists(\"groupRows\", true)) {\n    this.options.groupBy = groups;\n    this.modules.groupRows.initialize();\n    this.rowManager.refreshActiveData(\"display\");\n\n    if (this.options.persistence && this.modExists(\"persistence\", true) && this.modules.persistence.config.group) {\n      this.modules.persistence.save(\"group\");\n    }\n  } else {\n    return false;\n  }\n};\n\nTabulator.prototype.setGroupValues = function (groupValues) {\n  if (this.modExists(\"groupRows\", true)) {\n    this.options.groupValues = groupValues;\n    this.modules.groupRows.initialize();\n    this.rowManager.refreshActiveData(\"display\");\n\n    if (this.options.persistence && this.modExists(\"persistence\", true) && this.modules.persistence.config.group) {\n      this.modules.persistence.save(\"group\");\n    }\n  } else {\n    return false;\n  }\n};\n\nTabulator.prototype.setGroupStartOpen = function (values) {\n  if (this.modExists(\"groupRows\", true)) {\n    this.options.groupStartOpen = values;\n    this.modules.groupRows.initialize();\n\n    if (this.options.groupBy) {\n      this.rowManager.refreshActiveData(\"group\");\n\n      if (this.options.persistence && this.modExists(\"persistence\", true) && this.modules.persistence.config.group) {\n        this.modules.persistence.save(\"group\");\n      }\n    } else {\n      console.warn(\"Grouping Update - cant refresh view, no groups have been set\");\n    }\n  } else {\n    return false;\n  }\n};\n\nTabulator.prototype.setGroupHeader = function (values) {\n  if (this.modExists(\"groupRows\", true)) {\n    this.options.groupHeader = values;\n    this.modules.groupRows.initialize();\n\n    if (this.options.groupBy) {\n      this.rowManager.refreshActiveData(\"group\");\n\n      if (this.options.persistence && this.modExists(\"persistence\", true) && this.modules.persistence.config.group) {\n        this.modules.persistence.save(\"group\");\n      }\n    } else {\n      console.warn(\"Grouping Update - cant refresh view, no groups have been set\");\n    }\n  } else {\n    return false;\n  }\n};\n\nTabulator.prototype.getGroups = function (values) {\n  if (this.modExists(\"groupRows\", true)) {\n    return this.modules.groupRows.getGroups(true);\n  } else {\n    return false;\n  }\n}; // get grouped table data in the same format as getData()\n\n\nTabulator.prototype.getGroupedData = function () {\n  if (this.modExists(\"groupRows\", true)) {\n    return this.options.groupBy ? this.modules.groupRows.getGroupedData() : this.getData();\n  }\n};\n\nTabulator.prototype.getEditedCells = function () {\n  if (this.modExists(\"edit\", true)) {\n    return this.modules.edit.getEditedCells();\n  }\n};\n\nTabulator.prototype.clearCellEdited = function (cells) {\n  var _this39 = this;\n\n  if (this.modExists(\"edit\", true)) {\n    if (!cells) {\n      cells = this.modules.edit.getEditedCells();\n    }\n\n    if (!Array.isArray(cells)) {\n      cells = [cells];\n    }\n\n    cells.forEach(function (cell) {\n      _this39.modules.edit.clearEdited(cell._getSelf());\n    });\n  }\n}; ///////////////// Column Calculation Functions ///////////////\n\n\nTabulator.prototype.getCalcResults = function () {\n  if (this.modExists(\"columnCalcs\", true)) {\n    return this.modules.columnCalcs.getResults();\n  } else {\n    return false;\n  }\n};\n\nTabulator.prototype.recalc = function () {\n  if (this.modExists(\"columnCalcs\", true)) {\n    this.modules.columnCalcs.recalcAll(this.rowManager.activeRows);\n  }\n}; /////////////// Navigation Management //////////////\n\n\nTabulator.prototype.navigatePrev = function () {\n  var cell = false;\n\n  if (this.modExists(\"edit\", true)) {\n    cell = this.modules.edit.currentCell;\n\n    if (cell) {\n      return cell.nav().prev();\n    }\n  }\n\n  return false;\n};\n\nTabulator.prototype.navigateNext = function () {\n  var cell = false;\n\n  if (this.modExists(\"edit\", true)) {\n    cell = this.modules.edit.currentCell;\n\n    if (cell) {\n      return cell.nav().next();\n    }\n  }\n\n  return false;\n};\n\nTabulator.prototype.navigateLeft = function () {\n  var cell = false;\n\n  if (this.modExists(\"edit\", true)) {\n    cell = this.modules.edit.currentCell;\n\n    if (cell) {\n      e.preventDefault();\n      return cell.nav().left();\n    }\n  }\n\n  return false;\n};\n\nTabulator.prototype.navigateRight = function () {\n  var cell = false;\n\n  if (this.modExists(\"edit\", true)) {\n    cell = this.modules.edit.currentCell;\n\n    if (cell) {\n      e.preventDefault();\n      return cell.nav().right();\n    }\n  }\n\n  return false;\n};\n\nTabulator.prototype.navigateUp = function () {\n  var cell = false;\n\n  if (this.modExists(\"edit\", true)) {\n    cell = this.modules.edit.currentCell;\n\n    if (cell) {\n      e.preventDefault();\n      return cell.nav().up();\n    }\n  }\n\n  return false;\n};\n\nTabulator.prototype.navigateDown = function () {\n  var cell = false;\n\n  if (this.modExists(\"edit\", true)) {\n    cell = this.modules.edit.currentCell;\n\n    if (cell) {\n      e.preventDefault();\n      return cell.nav().down();\n    }\n  }\n\n  return false;\n}; /////////////// History Management //////////////\n\n\nTabulator.prototype.undo = function () {\n  if (this.options.history && this.modExists(\"history\", true)) {\n    return this.modules.history.undo();\n  } else {\n    return false;\n  }\n};\n\nTabulator.prototype.redo = function () {\n  if (this.options.history && this.modExists(\"history\", true)) {\n    return this.modules.history.redo();\n  } else {\n    return false;\n  }\n};\n\nTabulator.prototype.getHistoryUndoSize = function () {\n  if (this.options.history && this.modExists(\"history\", true)) {\n    return this.modules.history.getHistoryUndoSize();\n  } else {\n    return false;\n  }\n};\n\nTabulator.prototype.getHistoryRedoSize = function () {\n  if (this.options.history && this.modExists(\"history\", true)) {\n    return this.modules.history.getHistoryRedoSize();\n  } else {\n    return false;\n  }\n}; /////////////// Download Management //////////////\n\n\nTabulator.prototype.download = function (type, filename, options, active) {\n  if (this.modExists(\"download\", true)) {\n    this.modules.download.download(type, filename, options, active);\n  }\n};\n\nTabulator.prototype.downloadToTab = function (type, filename, options, active) {\n  if (this.modExists(\"download\", true)) {\n    this.modules.download.download(type, filename, options, active, true);\n  }\n}; /////////// Inter Table Communications ///////////\n\n\nTabulator.prototype.tableComms = function (table, module, action, data) {\n  this.modules.comms.receive(table, module, action, data);\n}; ////////////// Extension Management //////////////\n//object to hold module\n\n\nTabulator.prototype.moduleBindings = {}; //extend module\n\nTabulator.prototype.extendModule = function (name, property, values) {\n  if (Tabulator.prototype.moduleBindings[name]) {\n    var source = Tabulator.prototype.moduleBindings[name].prototype[property];\n\n    if (source) {\n      if ((typeof values === 'undefined' ? 'undefined' : _typeof(values)) == \"object\") {\n        for (var key in values) {\n          source[key] = values[key];\n        }\n      } else {\n        console.warn(\"Module Error - Invalid value type, it must be an object\");\n      }\n    } else {\n      console.warn(\"Module Error - property does not exist:\", property);\n    }\n  } else {\n    console.warn(\"Module Error - module does not exist:\", name);\n  }\n}; //add module to tabulator\n\n\nTabulator.prototype.registerModule = function (name, module) {\n  var self = this;\n  Tabulator.prototype.moduleBindings[name] = module;\n}; //ensure that module are bound to instantiated function\n\n\nTabulator.prototype.bindModules = function () {\n  this.modules = {};\n\n  for (var name in Tabulator.prototype.moduleBindings) {\n    this.modules[name] = new Tabulator.prototype.moduleBindings[name](this);\n  }\n}; //Check for module\n\n\nTabulator.prototype.modExists = function (plugin, required) {\n  if (this.modules[plugin]) {\n    return true;\n  } else {\n    if (required) {\n      console.error(\"Tabulator Module Not Installed: \" + plugin);\n    }\n\n    return false;\n  }\n};\n\nTabulator.prototype.helpers = {\n  elVisible: function elVisible(el) {\n    return !(el.offsetWidth <= 0 && el.offsetHeight <= 0);\n  },\n  elOffset: function elOffset(el) {\n    var box = el.getBoundingClientRect();\n    return {\n      top: box.top + window.pageYOffset - document.documentElement.clientTop,\n      left: box.left + window.pageXOffset - document.documentElement.clientLeft\n    };\n  },\n  deepClone: function deepClone(obj) {\n    var clone = Object.assign(Array.isArray(obj) ? [] : {}, obj);\n\n    for (var i in obj) {\n      if (obj[i] != null && _typeof(obj[i]) === \"object\") {\n        if (obj[i] instanceof Date) {\n          clone[i] = new Date(obj[i]);\n        } else {\n          clone[i] = this.deepClone(obj[i]);\n        }\n      }\n    }\n\n    return clone;\n  }\n};\nTabulator.prototype.comms = {\n  tables: [],\n  register: function register(table) {\n    Tabulator.prototype.comms.tables.push(table);\n  },\n  deregister: function deregister(table) {\n    var index = Tabulator.prototype.comms.tables.indexOf(table);\n\n    if (index > -1) {\n      Tabulator.prototype.comms.tables.splice(index, 1);\n    }\n  },\n  lookupTable: function lookupTable(query, silent) {\n    var results = [],\n        matches,\n        match;\n\n    if (typeof query === \"string\") {\n      matches = document.querySelectorAll(query);\n\n      if (matches.length) {\n        for (var i = 0; i < matches.length; i++) {\n          match = Tabulator.prototype.comms.matchElement(matches[i]);\n\n          if (match) {\n            results.push(match);\n          }\n        }\n      }\n    } else if (typeof HTMLElement !== \"undefined\" && query instanceof HTMLElement || query instanceof Tabulator) {\n      match = Tabulator.prototype.comms.matchElement(query);\n\n      if (match) {\n        results.push(match);\n      }\n    } else if (Array.isArray(query)) {\n      query.forEach(function (item) {\n        results = results.concat(Tabulator.prototype.comms.lookupTable(item));\n      });\n    } else {\n      if (!silent) {\n        console.warn(\"Table Connection Error - Invalid Selector\", query);\n      }\n    }\n\n    return results;\n  },\n  matchElement: function matchElement(element) {\n    return Tabulator.prototype.comms.tables.find(function (table) {\n      return element instanceof Tabulator ? table === element : table.element === element;\n    });\n  }\n};\n\nTabulator.prototype.findTable = function (query) {\n  var results = Tabulator.prototype.comms.lookupTable(query, true);\n  return Array.isArray(results) && !results.length ? false : results;\n};\n\nvar Layout = function Layout(table) {\n  this.table = table;\n  this.mode = null;\n}; //initialize layout system\n\n\nLayout.prototype.initialize = function (layout) {\n  if (this.modes[layout]) {\n    this.mode = layout;\n  } else {\n    console.warn(\"Layout Error - invalid mode set, defaulting to 'fitData' : \" + layout);\n    this.mode = 'fitData';\n  }\n\n  this.table.element.setAttribute(\"tabulator-layout\", this.mode);\n};\n\nLayout.prototype.getMode = function () {\n  return this.mode;\n}; //trigger table layout\n\n\nLayout.prototype.layout = function () {\n  this.modes[this.mode].call(this, this.table.columnManager.columnsByIndex);\n}; //layout render functions\n\n\nLayout.prototype.modes = {\n  //resize columns to fit data they contain\n  \"fitData\": function fitData(columns) {\n    if (this.table.options.virtualDomHoz) {\n      this.table.vdomHoz.fitDataLayoutOverride();\n    } else {\n      columns.forEach(function (column) {\n        column.reinitializeWidth();\n      });\n    }\n\n    if (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n      this.table.modules.responsiveLayout.update();\n    }\n  },\n  //resize columns to fit data they contain and stretch row to fill table\n  \"fitDataFill\": function fitDataFill(columns) {\n    columns.forEach(function (column) {\n      column.reinitializeWidth();\n    });\n\n    if (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n      this.table.modules.responsiveLayout.update();\n    }\n  },\n  //resize columns to fit data they contain\n  \"fitDataTable\": function fitDataTable(columns) {\n    columns.forEach(function (column) {\n      column.reinitializeWidth();\n    });\n\n    if (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n      this.table.modules.responsiveLayout.update();\n    }\n  },\n  //resize columns to fit data the contain and stretch last column to fill table\n  \"fitDataStretch\": function fitDataStretch(columns) {\n    var _this40 = this;\n\n    var colsWidth = 0,\n        tableWidth = this.table.rowManager.element.clientWidth,\n        gap = 0,\n        lastCol = false;\n    columns.forEach(function (column, i) {\n      if (!column.widthFixed) {\n        column.reinitializeWidth();\n      }\n\n      if (_this40.table.options.responsiveLayout ? column.modules.responsive.visible : column.visible) {\n        lastCol = column;\n      }\n\n      if (column.visible) {\n        colsWidth += column.getWidth();\n      }\n    });\n\n    if (lastCol) {\n      gap = tableWidth - colsWidth + lastCol.getWidth();\n\n      if (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n        lastCol.setWidth(0);\n        this.table.modules.responsiveLayout.update();\n      }\n\n      if (gap > 0) {\n        lastCol.setWidth(gap);\n      } else {\n        lastCol.reinitializeWidth();\n      }\n    } else {\n      if (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n        this.table.modules.responsiveLayout.update();\n      }\n    }\n  },\n  //resize columns to fit\n  \"fitColumns\": function fitColumns(columns) {\n    var self = this;\n    var totalWidth = self.table.element.clientWidth; //table element width\n\n    var fixedWidth = 0; //total width of columns with a defined width\n\n    var flexWidth = 0; //total width available to flexible columns\n\n    var flexGrowUnits = 0; //total number of widthGrow blocks accross all columns\n\n    var flexColWidth = 0; //desired width of flexible columns\n\n    var flexColumns = []; //array of flexible width columns\n\n    var fixedShrinkColumns = []; //array of fixed width columns that can shrink\n\n    var flexShrinkUnits = 0; //total number of widthShrink blocks accross all columns\n\n    var overflowWidth = 0; //horizontal overflow width\n\n    var gapFill = 0; //number of pixels to be added to final column to close and half pixel gaps\n\n    function calcWidth(width) {\n      var colWidth;\n\n      if (typeof width == \"string\") {\n        if (width.indexOf(\"%\") > -1) {\n          colWidth = totalWidth / 100 * parseInt(width);\n        } else {\n          colWidth = parseInt(width);\n        }\n      } else {\n        colWidth = width;\n      }\n\n      return colWidth;\n    } //ensure columns resize to take up the correct amount of space\n\n\n    function scaleColumns(columns, freeSpace, colWidth, shrinkCols) {\n      var oversizeCols = [],\n          oversizeSpace = 0,\n          remainingSpace = 0,\n          nextColWidth = 0,\n          gap = 0,\n          changeUnits = 0,\n          undersizeCols = [];\n\n      function calcGrow(col) {\n        return colWidth * (col.column.definition.widthGrow || 1);\n      }\n\n      function calcShrink(col) {\n        return calcWidth(col.width) - colWidth * (col.column.definition.widthShrink || 0);\n      }\n\n      columns.forEach(function (col, i) {\n        var width = shrinkCols ? calcShrink(col) : calcGrow(col);\n\n        if (col.column.minWidth >= width) {\n          oversizeCols.push(col);\n        } else {\n          undersizeCols.push(col);\n          changeUnits += shrinkCols ? col.column.definition.widthShrink || 1 : col.column.definition.widthGrow || 1;\n        }\n      });\n\n      if (oversizeCols.length) {\n        oversizeCols.forEach(function (col) {\n          oversizeSpace += shrinkCols ? col.width - col.column.minWidth : col.column.minWidth;\n          col.width = col.column.minWidth;\n        });\n        remainingSpace = freeSpace - oversizeSpace;\n        nextColWidth = changeUnits ? Math.floor(remainingSpace / changeUnits) : remainingSpace;\n        gap = remainingSpace - nextColWidth * changeUnits;\n        gap += scaleColumns(undersizeCols, remainingSpace, nextColWidth, shrinkCols);\n      } else {\n        gap = changeUnits ? freeSpace - Math.floor(freeSpace / changeUnits) * changeUnits : freeSpace;\n        undersizeCols.forEach(function (column) {\n          column.width = shrinkCols ? calcShrink(column) : calcGrow(column);\n        });\n      }\n\n      return gap;\n    }\n\n    if (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n      this.table.modules.responsiveLayout.update();\n    } //adjust for vertical scrollbar if present\n\n\n    if (this.table.rowManager.element.scrollHeight > this.table.rowManager.element.clientHeight) {\n      totalWidth -= this.table.rowManager.element.offsetWidth - this.table.rowManager.element.clientWidth;\n    }\n\n    columns.forEach(function (column) {\n      var width, minWidth, colWidth;\n\n      if (column.visible) {\n        width = column.definition.width;\n        minWidth = parseInt(column.minWidth);\n\n        if (width) {\n          colWidth = calcWidth(width);\n          fixedWidth += colWidth > minWidth ? colWidth : minWidth;\n\n          if (column.definition.widthShrink) {\n            fixedShrinkColumns.push({\n              column: column,\n              width: colWidth > minWidth ? colWidth : minWidth\n            });\n            flexShrinkUnits += column.definition.widthShrink;\n          }\n        } else {\n          flexColumns.push({\n            column: column,\n            width: 0\n          });\n          flexGrowUnits += column.definition.widthGrow || 1;\n        }\n      }\n    }); //calculate available space\n\n    flexWidth = totalWidth - fixedWidth; //calculate correct column size\n\n    flexColWidth = Math.floor(flexWidth / flexGrowUnits); //generate column widths\n\n    var gapFill = scaleColumns(flexColumns, flexWidth, flexColWidth, false); //increase width of last column to account for rounding errors\n\n    if (flexColumns.length && gapFill > 0) {\n      flexColumns[flexColumns.length - 1].width += +gapFill;\n    } //caculate space for columns to be shrunk into\n\n\n    flexColumns.forEach(function (col) {\n      flexWidth -= col.width;\n    });\n    overflowWidth = Math.abs(gapFill) + flexWidth; //shrink oversize columns if there is no available space\n\n    if (overflowWidth > 0 && flexShrinkUnits) {\n      gapFill = scaleColumns(fixedShrinkColumns, overflowWidth, Math.floor(overflowWidth / flexShrinkUnits), true);\n    } //decrease width of last column to account for rounding errors\n\n\n    if (fixedShrinkColumns.length) {\n      fixedShrinkColumns[fixedShrinkColumns.length - 1].width -= gapFill;\n    }\n\n    flexColumns.forEach(function (col) {\n      col.column.setWidth(col.width);\n    });\n    fixedShrinkColumns.forEach(function (col) {\n      col.column.setWidth(col.width);\n    });\n  }\n};\nTabulator.prototype.registerModule(\"layout\", Layout);\n\nvar Localize = function Localize(table) {\n  this.table = table; //hold Tabulator object\n\n  this.locale = \"default\"; //current locale\n\n  this.lang = false; //current language\n\n  this.bindings = {}; //update events to call when locale is changed\n\n  this.langList = {};\n};\n\nLocalize.prototype.initialize = function () {\n  this.langList = Tabulator.prototype.helpers.deepClone(this.langs);\n}; //set header placehoder\n\n\nLocalize.prototype.setHeaderFilterPlaceholder = function (placeholder) {\n  this.langList.default.headerFilters.default = placeholder;\n}; //set header filter placeholder by column\n\n\nLocalize.prototype.setHeaderFilterColumnPlaceholder = function (column, placeholder) {\n  this.langList.default.headerFilters.columns[column] = placeholder;\n\n  if (this.lang && !this.lang.headerFilters.columns[column]) {\n    this.lang.headerFilters.columns[column] = placeholder;\n  }\n}; //setup a lang description object\n\n\nLocalize.prototype.installLang = function (locale, lang) {\n  if (this.langList[locale]) {\n    this._setLangProp(this.langList[locale], lang);\n  } else {\n    this.langList[locale] = lang;\n  }\n};\n\nLocalize.prototype._setLangProp = function (lang, values) {\n  for (var key in values) {\n    if (lang[key] && _typeof(lang[key]) == \"object\") {\n      this._setLangProp(lang[key], values[key]);\n    } else {\n      lang[key] = values[key];\n    }\n  }\n}; //set current locale\n\n\nLocalize.prototype.setLocale = function (desiredLocale) {\n  var self = this;\n  desiredLocale = desiredLocale || \"default\"; //fill in any matching languge values\n\n  function traverseLang(trans, path) {\n    for (var prop in trans) {\n      if (_typeof(trans[prop]) == \"object\") {\n        if (!path[prop]) {\n          path[prop] = {};\n        }\n\n        traverseLang(trans[prop], path[prop]);\n      } else {\n        path[prop] = trans[prop];\n      }\n    }\n  } //determing correct locale to load\n\n\n  if (desiredLocale === true && navigator.language) {\n    //get local from system\n    desiredLocale = navigator.language.toLowerCase();\n  }\n\n  if (desiredLocale) {\n    //if locale is not set, check for matching top level locale else use default\n    if (!self.langList[desiredLocale]) {\n      var prefix = desiredLocale.split(\"-\")[0];\n\n      if (self.langList[prefix]) {\n        console.warn(\"Localization Error - Exact matching locale not found, using closest match: \", desiredLocale, prefix);\n        desiredLocale = prefix;\n      } else {\n        console.warn(\"Localization Error - Matching locale not found, using default: \", desiredLocale);\n        desiredLocale = \"default\";\n      }\n    }\n  }\n\n  self.locale = desiredLocale; //load default lang template\n\n  self.lang = Tabulator.prototype.helpers.deepClone(self.langList.default || {});\n\n  if (desiredLocale != \"default\") {\n    traverseLang(self.langList[desiredLocale], self.lang);\n  }\n\n  self.table.options.localized.call(self.table, self.locale, self.lang);\n\n  self._executeBindings();\n}; //get current locale\n\n\nLocalize.prototype.getLocale = function (locale) {\n  return self.locale;\n}; //get lang object for given local or current if none provided\n\n\nLocalize.prototype.getLang = function (locale) {\n  return locale ? this.langList[locale] : this.lang;\n}; //get text for current locale\n\n\nLocalize.prototype.getText = function (path, value) {\n  var path = value ? path + \"|\" + value : path,\n      pathArray = path.split(\"|\"),\n      text = this._getLangElement(pathArray, this.locale); // if(text === false){\n  // \tconsole.warn(\"Localization Error - Matching localized text not found for given path: \", path);\n  // }\n\n\n  return text || \"\";\n}; //traverse langs object and find localized copy\n\n\nLocalize.prototype._getLangElement = function (path, locale) {\n  var self = this;\n  var root = self.lang;\n  path.forEach(function (level) {\n    var rootPath;\n\n    if (root) {\n      rootPath = root[level];\n\n      if (typeof rootPath != \"undefined\") {\n        root = rootPath;\n      } else {\n        root = false;\n      }\n    }\n  });\n  return root;\n}; //set update binding\n\n\nLocalize.prototype.bind = function (path, callback) {\n  if (!this.bindings[path]) {\n    this.bindings[path] = [];\n  }\n\n  this.bindings[path].push(callback);\n  callback(this.getText(path), this.lang);\n}; //itterate through bindings and trigger updates\n\n\nLocalize.prototype._executeBindings = function () {\n  var self = this;\n\n  var _loop = function _loop(path) {\n    self.bindings[path].forEach(function (binding) {\n      binding(self.getText(path), self.lang);\n    });\n  };\n\n  for (var path in self.bindings) {\n    _loop(path);\n  }\n}; //Localized text listings\n\n\nLocalize.prototype.langs = {\n  \"default\": {\n    //hold default locale text\n    \"groups\": {\n      \"item\": \"item\",\n      \"items\": \"items\"\n    },\n    \"columns\": {},\n    \"ajax\": {\n      \"loading\": \"Loading\",\n      \"error\": \"Error\"\n    },\n    \"pagination\": {\n      \"page_size\": \"Page Size\",\n      \"page_title\": \"Show Page\",\n      \"first\": \"First\",\n      \"first_title\": \"First Page\",\n      \"last\": \"Last\",\n      \"last_title\": \"Last Page\",\n      \"prev\": \"Prev\",\n      \"prev_title\": \"Prev Page\",\n      \"next\": \"Next\",\n      \"next_title\": \"Next Page\",\n      \"all\": \"All\"\n    },\n    \"headerFilters\": {\n      \"default\": \"filter column...\",\n      \"columns\": {}\n    }\n  }\n};\nTabulator.prototype.registerModule(\"localize\", Localize);\n\nvar Comms = function Comms(table) {\n  this.table = table;\n};\n\nComms.prototype.getConnections = function (selectors) {\n  var self = this,\n      connections = [],\n      connection;\n  connection = Tabulator.prototype.comms.lookupTable(selectors);\n  connection.forEach(function (con) {\n    if (self.table !== con) {\n      connections.push(con);\n    }\n  });\n  return connections;\n};\n\nComms.prototype.send = function (selectors, module, action, data) {\n  var self = this,\n      connections = this.getConnections(selectors);\n  connections.forEach(function (connection) {\n    connection.tableComms(self.table.element, module, action, data);\n  });\n\n  if (!connections.length && selectors) {\n    console.warn(\"Table Connection Error - No tables matching selector found\", selectors);\n  }\n};\n\nComms.prototype.receive = function (table, module, action, data) {\n  if (this.table.modExists(module)) {\n    return this.table.modules[module].commsReceived(table, action, data);\n  } else {\n    console.warn(\"Inter-table Comms Error - no such module:\", module);\n  }\n};\n\nTabulator.prototype.registerModule(\"comms\", Comms);\n\nvar Accessor = function Accessor(table) {\n  this.table = table; //hold Tabulator object\n\n  this.allowedTypes = [\"\", \"data\", \"download\", \"clipboard\", \"print\", \"htmlOutput\"]; //list of accessor types\n}; //initialize column accessor\n\n\nAccessor.prototype.initializeColumn = function (column) {\n  var self = this,\n      match = false,\n      config = {};\n  this.allowedTypes.forEach(function (type) {\n    var key = \"accessor\" + (type.charAt(0).toUpperCase() + type.slice(1)),\n        accessor;\n\n    if (column.definition[key]) {\n      accessor = self.lookupAccessor(column.definition[key]);\n\n      if (accessor) {\n        match = true;\n        config[key] = {\n          accessor: accessor,\n          params: column.definition[key + \"Params\"] || {}\n        };\n      }\n    }\n  });\n\n  if (match) {\n    column.modules.accessor = config;\n  }\n};\n\nAccessor.prototype.lookupAccessor = function (value) {\n  var accessor = false; //set column accessor\n\n  switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n    case \"string\":\n      if (this.accessors[value]) {\n        accessor = this.accessors[value];\n      } else {\n        console.warn(\"Accessor Error - No such accessor found, ignoring: \", value);\n      }\n\n      break;\n\n    case \"function\":\n      accessor = value;\n      break;\n  }\n\n  return accessor;\n}; //apply accessor to row\n\n\nAccessor.prototype.transformRow = function (row, type) {\n  var key = \"accessor\" + (type.charAt(0).toUpperCase() + type.slice(1)),\n      rowComponent = row.getComponent(); //clone data object with deep copy to isolate internal data from returned result\n\n  var data = Tabulator.prototype.helpers.deepClone(row.data || {});\n  this.table.columnManager.traverse(function (column) {\n    var value, accessor, params, colCompnent;\n\n    if (column.modules.accessor) {\n      accessor = column.modules.accessor[key] || column.modules.accessor.accessor || false;\n\n      if (accessor) {\n        value = column.getFieldValue(data);\n\n        if (value != \"undefined\") {\n          colCompnent = column.getComponent();\n          params = typeof accessor.params === \"function\" ? accessor.params(value, data, type, colCompnent, rowComponent) : accessor.params;\n          column.setFieldValue(data, accessor.accessor(value, data, type, params, colCompnent, rowComponent));\n        }\n      }\n    }\n  });\n  return data;\n}, //default accessors\nAccessor.prototype.accessors = {};\nTabulator.prototype.registerModule(\"accessor\", Accessor);\n\nvar Ajax = function Ajax(table) {\n  this.table = table; //hold Tabulator object\n\n  this.config = false; //hold config object for ajax request\n\n  this.url = \"\"; //request URL\n\n  this.urlGenerator = false;\n  this.params = false; //request parameters\n\n  this.loaderElement = this.createLoaderElement(); //loader message div\n\n  this.msgElement = this.createMsgElement(); //message element\n\n  this.loadingElement = false;\n  this.errorElement = false;\n  this.loaderPromise = false;\n  this.progressiveLoad = false;\n  this.loading = false;\n  this.requestOrder = 0; //prevent requests comming out of sequence if overridden by another load request\n}; //initialize setup options\n\n\nAjax.prototype.initialize = function () {\n  var template;\n  this.loaderElement.appendChild(this.msgElement);\n\n  if (this.table.options.ajaxLoaderLoading) {\n    if (typeof this.table.options.ajaxLoaderLoading == \"string\") {\n      template = document.createElement('template');\n      template.innerHTML = this.table.options.ajaxLoaderLoading.trim();\n      this.loadingElement = template.content.firstChild;\n    } else {\n      this.loadingElement = this.table.options.ajaxLoaderLoading;\n    }\n  }\n\n  this.loaderPromise = this.table.options.ajaxRequestFunc || this.defaultLoaderPromise;\n  this.urlGenerator = this.table.options.ajaxURLGenerator || this.defaultURLGenerator;\n\n  if (this.table.options.ajaxLoaderError) {\n    if (typeof this.table.options.ajaxLoaderError == \"string\") {\n      template = document.createElement('template');\n      template.innerHTML = this.table.options.ajaxLoaderError.trim();\n      this.errorElement = template.content.firstChild;\n    } else {\n      this.errorElement = this.table.options.ajaxLoaderError;\n    }\n  }\n\n  if (this.table.options.ajaxParams) {\n    this.setParams(this.table.options.ajaxParams);\n  }\n\n  if (this.table.options.ajaxConfig) {\n    this.setConfig(this.table.options.ajaxConfig);\n  }\n\n  if (this.table.options.ajaxURL) {\n    this.setUrl(this.table.options.ajaxURL);\n  }\n\n  if (this.table.options.ajaxProgressiveLoad) {\n    if (this.table.options.pagination) {\n      this.progressiveLoad = false;\n      console.error(\"Progressive Load Error - Pagination and progressive load cannot be used at the same time\");\n    } else {\n      if (this.table.modExists(\"page\")) {\n        this.progressiveLoad = this.table.options.ajaxProgressiveLoad;\n        this.table.modules.page.initializeProgressive(this.progressiveLoad);\n      } else {\n        console.error(\"Pagination plugin is required for progressive ajax loading\");\n      }\n    }\n  }\n};\n\nAjax.prototype.createLoaderElement = function () {\n  var el = document.createElement(\"div\");\n  el.classList.add(\"tabulator-loader\");\n  return el;\n};\n\nAjax.prototype.createMsgElement = function () {\n  var el = document.createElement(\"div\");\n  el.classList.add(\"tabulator-loader-msg\");\n  el.setAttribute(\"role\", \"alert\");\n  return el;\n}; //set ajax params\n\n\nAjax.prototype.setParams = function (params, update) {\n  if (update) {\n    this.params = this.params || {};\n\n    for (var key in params) {\n      this.params[key] = params[key];\n    }\n  } else {\n    this.params = params;\n  }\n};\n\nAjax.prototype.getParams = function () {\n  return this.params || {};\n}; //load config object\n\n\nAjax.prototype.setConfig = function (config) {\n  this._loadDefaultConfig();\n\n  if (typeof config == \"string\") {\n    this.config.method = config;\n  } else {\n    for (var key in config) {\n      this.config[key] = config[key];\n    }\n  }\n}; //create config object from default\n\n\nAjax.prototype._loadDefaultConfig = function (force) {\n  var self = this;\n\n  if (!self.config || force) {\n    self.config = {}; //load base config from defaults\n\n    for (var key in self.defaultConfig) {\n      self.config[key] = self.defaultConfig[key];\n    }\n  }\n}; //set request url\n\n\nAjax.prototype.setUrl = function (url) {\n  this.url = url;\n}; //get request url\n\n\nAjax.prototype.getUrl = function () {\n  return this.url;\n}; //lstandard loading function\n\n\nAjax.prototype.loadData = function (inPosition, columnsChanged) {\n  var self = this;\n\n  if (this.progressiveLoad) {\n    return this._loadDataProgressive();\n  } else {\n    return this._loadDataStandard(inPosition, columnsChanged);\n  }\n};\n\nAjax.prototype.nextPage = function (diff) {\n  var margin;\n\n  if (!this.loading) {\n    margin = this.table.options.ajaxProgressiveLoadScrollMargin || this.table.rowManager.getElement().clientHeight * 2;\n\n    if (diff < margin) {\n      this.table.modules.page.nextPage().then(function () {}).catch(function () {});\n    }\n  }\n};\n\nAjax.prototype.blockActiveRequest = function () {\n  this.requestOrder++;\n};\n\nAjax.prototype._loadDataProgressive = function () {\n  this.table.rowManager.setData([]);\n  return this.table.modules.page.setPage(1);\n};\n\nAjax.prototype._loadDataStandard = function (inPosition, columnsChanged) {\n  var _this41 = this;\n\n  return new Promise(function (resolve, reject) {\n    _this41.sendRequest(inPosition).then(function (data) {\n      _this41.table.rowManager.setData(data, inPosition, columnsChanged).then(function () {\n        resolve();\n      }).catch(function (e) {\n        reject(e);\n      });\n    }).catch(function (e) {\n      reject(e);\n    });\n  });\n};\n\nAjax.prototype.generateParamsList = function (data, prefix) {\n  var self = this,\n      output = [];\n  prefix = prefix || \"\";\n\n  if (Array.isArray(data)) {\n    data.forEach(function (item, i) {\n      output = output.concat(self.generateParamsList(item, prefix ? prefix + \"[\" + i + \"]\" : i));\n    });\n  } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === \"object\") {\n    for (var key in data) {\n      output = output.concat(self.generateParamsList(data[key], prefix ? prefix + \"[\" + key + \"]\" : key));\n    }\n  } else {\n    output.push({\n      key: prefix,\n      value: data\n    });\n  }\n\n  return output;\n};\n\nAjax.prototype.serializeParams = function (params) {\n  var output = this.generateParamsList(params),\n      encoded = [];\n  output.forEach(function (item) {\n    encoded.push(encodeURIComponent(item.key) + \"=\" + encodeURIComponent(item.value));\n  });\n  return encoded.join(\"&\");\n}; //send ajax request\n\n\nAjax.prototype.sendRequest = function (silent) {\n  var _this42 = this;\n\n  var self = this,\n      url = self.url,\n      requestNo,\n      esc,\n      query;\n  self.requestOrder++;\n  requestNo = self.requestOrder;\n\n  self._loadDefaultConfig();\n\n  return new Promise(function (resolve, reject) {\n    if (self.table.options.ajaxRequesting.call(_this42.table, self.url, self.params) !== false) {\n      self.loading = true;\n\n      if (!silent) {\n        self.showLoader();\n      }\n\n      _this42.loaderPromise(url, self.config, self.params).then(function (data) {\n        if (requestNo === self.requestOrder) {\n          if (self.table.options.ajaxResponse) {\n            data = self.table.options.ajaxResponse.call(self.table, self.url, self.params, data);\n          }\n\n          resolve(data);\n          self.hideLoader();\n          self.loading = false;\n        } else {\n          console.warn(\"Ajax Response Blocked - An active ajax request was blocked by an attempt to change table data while the request was being made\");\n        }\n      }).catch(function (error) {\n        console.error(\"Ajax Load Error: \", error);\n        self.table.options.ajaxError.call(self.table, error);\n        self.showError();\n        setTimeout(function () {\n          self.hideLoader();\n        }, 3000);\n        self.loading = false;\n        reject();\n      });\n    } else {\n      reject();\n    }\n  });\n};\n\nAjax.prototype.showLoader = function () {\n  var shouldLoad = typeof this.table.options.ajaxLoader === \"function\" ? this.table.options.ajaxLoader() : this.table.options.ajaxLoader;\n\n  if (shouldLoad) {\n    this.hideLoader();\n\n    while (this.msgElement.firstChild) {\n      this.msgElement.removeChild(this.msgElement.firstChild);\n    }\n\n    this.msgElement.classList.remove(\"tabulator-error\");\n    this.msgElement.classList.add(\"tabulator-loading\");\n\n    if (this.loadingElement) {\n      this.msgElement.appendChild(this.loadingElement);\n    } else {\n      this.msgElement.innerHTML = this.table.modules.localize.getText(\"ajax|loading\");\n    }\n\n    this.table.element.appendChild(this.loaderElement);\n  }\n};\n\nAjax.prototype.showError = function () {\n  this.hideLoader();\n\n  while (this.msgElement.firstChild) {\n    this.msgElement.removeChild(this.msgElement.firstChild);\n  }\n\n  this.msgElement.classList.remove(\"tabulator-loading\");\n  this.msgElement.classList.add(\"tabulator-error\");\n\n  if (this.errorElement) {\n    this.msgElement.appendChild(this.errorElement);\n  } else {\n    this.msgElement.innerHTML = this.table.modules.localize.getText(\"ajax|error\");\n  }\n\n  this.table.element.appendChild(this.loaderElement);\n};\n\nAjax.prototype.hideLoader = function () {\n  if (this.loaderElement.parentNode) {\n    this.loaderElement.parentNode.removeChild(this.loaderElement);\n  }\n}; //default ajax config object\n\n\nAjax.prototype.defaultConfig = {\n  method: \"GET\"\n};\n\nAjax.prototype.defaultURLGenerator = function (url, config, params) {\n  if (url) {\n    if (params && Object.keys(params).length) {\n      if (!config.method || config.method.toLowerCase() == \"get\") {\n        config.method = \"get\";\n        url += (url.includes(\"?\") ? \"&\" : \"?\") + this.serializeParams(params);\n      }\n    }\n  }\n\n  return url;\n};\n\nAjax.prototype.defaultLoaderPromise = function (url, config, params) {\n  var self = this,\n      contentType;\n  return new Promise(function (resolve, reject) {\n    //set url\n    url = self.urlGenerator(url, config, params); //set body content if not GET request\n\n    if (config.method.toUpperCase() != \"GET\") {\n      contentType = _typeof(self.table.options.ajaxContentType) === \"object\" ? self.table.options.ajaxContentType : self.contentTypeFormatters[self.table.options.ajaxContentType];\n\n      if (contentType) {\n        for (var key in contentType.headers) {\n          if (!config.headers) {\n            config.headers = {};\n          }\n\n          if (typeof config.headers[key] === \"undefined\") {\n            config.headers[key] = contentType.headers[key];\n          }\n        }\n\n        config.body = contentType.body.call(self, url, config, params);\n      } else {\n        console.warn(\"Ajax Error - Invalid ajaxContentType value:\", self.table.options.ajaxContentType);\n      }\n    }\n\n    if (url) {\n      //configure headers\n      if (typeof config.headers === \"undefined\") {\n        config.headers = {};\n      }\n\n      if (typeof config.headers.Accept === \"undefined\") {\n        config.headers.Accept = \"application/json\";\n      }\n\n      if (typeof config.headers[\"X-Requested-With\"] === \"undefined\") {\n        config.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n      }\n\n      if (typeof config.mode === \"undefined\") {\n        config.mode = \"cors\";\n      }\n\n      if (config.mode == \"cors\") {\n        if (typeof config.headers[\"Access-Control-Allow-Origin\"] === \"undefined\") {\n          config.headers[\"Access-Control-Allow-Origin\"] = window.location.origin;\n        }\n\n        if (typeof config.credentials === \"undefined\") {\n          config.credentials = 'same-origin';\n        }\n      } else {\n        if (typeof config.credentials === \"undefined\") {\n          config.credentials = 'include';\n        }\n      } //send request\n\n\n      fetch(url, config).then(function (response) {\n        if (response.ok) {\n          response.json().then(function (data) {\n            resolve(data);\n          }).catch(function (error) {\n            reject(error);\n            console.warn(\"Ajax Load Error - Invalid JSON returned\", error);\n          });\n        } else {\n          console.error(\"Ajax Load Error - Connection Error: \" + response.status, response.statusText);\n          reject(response);\n        }\n      }).catch(function (error) {\n        console.error(\"Ajax Load Error - Connection Error: \", error);\n        reject(error);\n      });\n    } else {\n      console.warn(\"Ajax Load Error - No URL Set\");\n      resolve([]);\n    }\n  });\n};\n\nAjax.prototype.contentTypeFormatters = {\n  \"json\": {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: function body(url, config, params) {\n      return JSON.stringify(params);\n    }\n  },\n  \"form\": {\n    headers: {},\n    body: function body(url, config, params) {\n      var output = this.generateParamsList(params),\n          form = new FormData();\n      output.forEach(function (item) {\n        form.append(item.key, item.value);\n      });\n      return form;\n    }\n  }\n};\nTabulator.prototype.registerModule(\"ajax\", Ajax); //public calc object\n\nvar CalcComponent = function CalcComponent(row) {\n  this._row = row;\n};\n\nCalcComponent.prototype.getData = function (transform) {\n  return this._row.getData(transform);\n};\n\nCalcComponent.prototype.getElement = function () {\n  return this._row.getElement();\n};\n\nRowComponent.prototype.getTable = function () {\n  return this._row.table;\n};\n\nCalcComponent.prototype.getCells = function () {\n  var cells = [];\n\n  this._row.getCells().forEach(function (cell) {\n    cells.push(cell.getComponent());\n  });\n\n  return cells;\n};\n\nCalcComponent.prototype.getCell = function (column) {\n  var cell = this._row.getCell(column);\n\n  return cell ? cell.getComponent() : false;\n};\n\nCalcComponent.prototype._getSelf = function () {\n  return this._row;\n};\n\nvar ColumnCalcs = function ColumnCalcs(table) {\n  this.table = table; //hold Tabulator object\n\n  this.topCalcs = [];\n  this.botCalcs = [];\n  this.genColumn = false;\n  this.topElement = this.createElement();\n  this.botElement = this.createElement();\n  this.topRow = false;\n  this.botRow = false;\n  this.topInitialized = false;\n  this.botInitialized = false;\n  this.initialize();\n};\n\nColumnCalcs.prototype.createElement = function () {\n  var el = document.createElement(\"div\");\n  el.classList.add(\"tabulator-calcs-holder\");\n  return el;\n};\n\nColumnCalcs.prototype.initialize = function () {\n  this.genColumn = new Column({\n    field: \"value\"\n  }, this);\n}; //dummy functions to handle being mock column manager\n\n\nColumnCalcs.prototype.registerColumnField = function () {}; //initialize column calcs\n\n\nColumnCalcs.prototype.initializeColumn = function (column) {\n  var def = column.definition;\n  var config = {\n    topCalcParams: def.topCalcParams || {},\n    botCalcParams: def.bottomCalcParams || {}\n  };\n\n  if (def.topCalc) {\n    switch (_typeof(def.topCalc)) {\n      case \"string\":\n        if (this.calculations[def.topCalc]) {\n          config.topCalc = this.calculations[def.topCalc];\n        } else {\n          console.warn(\"Column Calc Error - No such calculation found, ignoring: \", def.topCalc);\n        }\n\n        break;\n\n      case \"function\":\n        config.topCalc = def.topCalc;\n        break;\n    }\n\n    if (config.topCalc) {\n      column.modules.columnCalcs = config;\n      this.topCalcs.push(column);\n\n      if (this.table.options.columnCalcs != \"group\") {\n        this.initializeTopRow();\n      }\n    }\n  }\n\n  if (def.bottomCalc) {\n    switch (_typeof(def.bottomCalc)) {\n      case \"string\":\n        if (this.calculations[def.bottomCalc]) {\n          config.botCalc = this.calculations[def.bottomCalc];\n        } else {\n          console.warn(\"Column Calc Error - No such calculation found, ignoring: \", def.bottomCalc);\n        }\n\n        break;\n\n      case \"function\":\n        config.botCalc = def.bottomCalc;\n        break;\n    }\n\n    if (config.botCalc) {\n      column.modules.columnCalcs = config;\n      this.botCalcs.push(column);\n\n      if (this.table.options.columnCalcs != \"group\") {\n        this.initializeBottomRow();\n      }\n    }\n  }\n};\n\nColumnCalcs.prototype.removeCalcs = function () {\n  var changed = false;\n\n  if (this.topInitialized) {\n    this.topInitialized = false;\n    this.topElement.parentNode.removeChild(this.topElement);\n    changed = true;\n  }\n\n  if (this.botInitialized) {\n    this.botInitialized = false;\n    this.table.footerManager.remove(this.botElement);\n    changed = true;\n  }\n\n  if (changed) {\n    this.table.rowManager.adjustTableSize();\n  }\n};\n\nColumnCalcs.prototype.initializeTopRow = function () {\n  if (!this.topInitialized) {\n    // this.table.columnManager.headersElement.after(this.topElement);\n    this.table.columnManager.getElement().insertBefore(this.topElement, this.table.columnManager.headersElement.nextSibling);\n    this.topInitialized = true;\n  }\n};\n\nColumnCalcs.prototype.initializeBottomRow = function () {\n  if (!this.botInitialized) {\n    this.table.footerManager.prepend(this.botElement);\n    this.botInitialized = true;\n  }\n};\n\nColumnCalcs.prototype.scrollHorizontal = function (left) {\n  var hozAdjust = 0,\n      scrollWidth = this.table.columnManager.getElement().scrollWidth - this.table.element.clientWidth;\n\n  if (this.botInitialized && this.botRow) {\n    this.botRow.getElement().style.marginLeft = -left + \"px\";\n  }\n};\n\nColumnCalcs.prototype.recalc = function (rows) {\n  var data, row;\n\n  if (this.topInitialized || this.botInitialized) {\n    data = this.rowsToData(rows);\n\n    if (this.topInitialized) {\n      if (this.topRow) {\n        this.topRow.deleteCells();\n      }\n\n      row = this.generateRow(\"top\", this.rowsToData(rows));\n      this.topRow = row;\n\n      while (this.topElement.firstChild) {\n        this.topElement.removeChild(this.topElement.firstChild);\n      }\n\n      this.topElement.appendChild(row.getElement());\n      row.initialize(true);\n    }\n\n    if (this.botInitialized) {\n      if (this.botRow) {\n        this.botRow.deleteCells();\n      }\n\n      row = this.generateRow(\"bottom\", this.rowsToData(rows));\n      this.botRow = row;\n\n      while (this.botElement.firstChild) {\n        this.botElement.removeChild(this.botElement.firstChild);\n      }\n\n      this.botElement.appendChild(row.getElement());\n      row.initialize(true);\n    }\n\n    this.table.rowManager.adjustTableSize(); //set resizable handles\n\n    if (this.table.modExists(\"frozenColumns\")) {\n      this.table.modules.frozenColumns.layout();\n    }\n  }\n};\n\nColumnCalcs.prototype.recalcRowGroup = function (row) {\n  this.recalcGroup(this.table.modules.groupRows.getRowGroup(row));\n};\n\nColumnCalcs.prototype.recalcAll = function () {\n  var _this43 = this;\n\n  if (this.topCalcs.length || this.botCalcs.length) {\n    if (this.table.options.columnCalcs !== \"group\") {\n      this.recalc(this.table.rowManager.activeRows);\n    }\n\n    if (this.table.options.groupBy && this.table.options.columnCalcs !== \"table\") {\n      var groups = table.modules.groupRows.getChildGroups();\n      groups.forEach(function (group) {\n        _this43.recalcGroup(group);\n      });\n    }\n  }\n};\n\nColumnCalcs.prototype.recalcGroup = function (group) {\n  var data, rowData;\n\n  if (group) {\n    if (group.calcs) {\n      if (group.calcs.bottom) {\n        data = this.rowsToData(group.rows);\n        rowData = this.generateRowData(\"bottom\", data);\n        group.calcs.bottom.updateData(rowData);\n        group.calcs.bottom.reinitialize();\n      }\n\n      if (group.calcs.top) {\n        data = this.rowsToData(group.rows);\n        rowData = this.generateRowData(\"top\", data);\n        group.calcs.top.updateData(rowData);\n        group.calcs.top.reinitialize();\n      }\n    }\n  }\n}; //generate top stats row\n\n\nColumnCalcs.prototype.generateTopRow = function (rows) {\n  return this.generateRow(\"top\", this.rowsToData(rows));\n}; //generate bottom stats row\n\n\nColumnCalcs.prototype.generateBottomRow = function (rows) {\n  return this.generateRow(\"bottom\", this.rowsToData(rows));\n};\n\nColumnCalcs.prototype.rowsToData = function (rows) {\n  var _this44 = this;\n\n  var data = [];\n  rows.forEach(function (row) {\n    data.push(row.getData());\n\n    if (_this44.table.options.dataTree && _this44.table.options.dataTreeChildColumnCalcs) {\n      if (row.modules.dataTree.open) {\n        var children = _this44.rowsToData(_this44.table.modules.dataTree.getFilteredTreeChildren(row));\n\n        data = data.concat(children);\n      }\n    }\n  });\n  return data;\n}; //generate stats row\n\n\nColumnCalcs.prototype.generateRow = function (pos, data) {\n  var self = this,\n      rowData = this.generateRowData(pos, data),\n      row;\n\n  if (self.table.modExists(\"mutator\")) {\n    self.table.modules.mutator.disable();\n  }\n\n  row = new Row(rowData, this, \"calc\");\n\n  if (self.table.modExists(\"mutator\")) {\n    self.table.modules.mutator.enable();\n  }\n\n  row.getElement().classList.add(\"tabulator-calcs\", \"tabulator-calcs-\" + pos);\n  row.component = false;\n\n  row.getComponent = function () {\n    if (!this.component) {\n      this.component = new CalcComponent(this);\n    }\n\n    return this.component;\n  };\n\n  row.generateCells = function () {\n    var cells = [];\n    self.table.columnManager.columnsByIndex.forEach(function (column) {\n      //set field name of mock column\n      self.genColumn.setField(column.getField());\n      self.genColumn.hozAlign = column.hozAlign;\n\n      if (column.definition[pos + \"CalcFormatter\"] && self.table.modExists(\"format\")) {\n        self.genColumn.modules.format = {\n          formatter: self.table.modules.format.getFormatter(column.definition[pos + \"CalcFormatter\"]),\n          params: column.definition[pos + \"CalcFormatterParams\"]\n        };\n      } else {\n        self.genColumn.modules.format = {\n          formatter: self.table.modules.format.getFormatter(\"plaintext\"),\n          params: {}\n        };\n      } //ensure css class defintion is replicated to calculation cell\n\n\n      self.genColumn.definition.cssClass = column.definition.cssClass; //generate cell and assign to correct column\n\n      var cell = new Cell(self.genColumn, row);\n      cell.column = column;\n      cell.setWidth();\n      column.cells.push(cell);\n      cells.push(cell);\n\n      if (!column.visible) {\n        cell.hide();\n      }\n    });\n    this.cells = cells;\n  };\n\n  return row;\n}; //generate stats row\n\n\nColumnCalcs.prototype.generateRowData = function (pos, data) {\n  var rowData = {},\n      calcs = pos == \"top\" ? this.topCalcs : this.botCalcs,\n      type = pos == \"top\" ? \"topCalc\" : \"botCalc\",\n      params,\n      paramKey;\n  calcs.forEach(function (column) {\n    var values = [];\n\n    if (column.modules.columnCalcs && column.modules.columnCalcs[type]) {\n      data.forEach(function (item) {\n        values.push(column.getFieldValue(item));\n      });\n      paramKey = type + \"Params\";\n      params = typeof column.modules.columnCalcs[paramKey] === \"function\" ? column.modules.columnCalcs[paramKey](values, data) : column.modules.columnCalcs[paramKey];\n      column.setFieldValue(rowData, column.modules.columnCalcs[type](values, data, params));\n    }\n  });\n  return rowData;\n};\n\nColumnCalcs.prototype.hasTopCalcs = function () {\n  return !!this.topCalcs.length;\n};\n\nColumnCalcs.prototype.hasBottomCalcs = function () {\n  return !!this.botCalcs.length;\n}; //handle table redraw\n\n\nColumnCalcs.prototype.redraw = function () {\n  if (this.topRow) {\n    this.topRow.normalizeHeight(true);\n  }\n\n  if (this.botRow) {\n    this.botRow.normalizeHeight(true);\n  }\n}; //return the calculated\n\n\nColumnCalcs.prototype.getResults = function () {\n  var self = this,\n      results = {},\n      groups;\n\n  if (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n    groups = this.table.modules.groupRows.getGroups(true);\n    groups.forEach(function (group) {\n      results[group.getKey()] = self.getGroupResults(group);\n    });\n  } else {\n    results = {\n      top: this.topRow ? this.topRow.getData() : {},\n      bottom: this.botRow ? this.botRow.getData() : {}\n    };\n  }\n\n  return results;\n}; //get results from a group\n\n\nColumnCalcs.prototype.getGroupResults = function (group) {\n  var self = this,\n      groupObj = group._getSelf(),\n      subGroups = group.getSubGroups(),\n      subGroupResults = {},\n      results = {};\n\n  subGroups.forEach(function (subgroup) {\n    subGroupResults[subgroup.getKey()] = self.getGroupResults(subgroup);\n  });\n  results = {\n    top: groupObj.calcs.top ? groupObj.calcs.top.getData() : {},\n    bottom: groupObj.calcs.bottom ? groupObj.calcs.bottom.getData() : {},\n    groups: subGroupResults\n  };\n  return results;\n}; //default calculations\n\n\nColumnCalcs.prototype.calculations = {\n  \"avg\": function avg(values, data, calcParams) {\n    var output = 0,\n        precision = typeof calcParams.precision !== \"undefined\" ? calcParams.precision : 2;\n\n    if (values.length) {\n      output = values.reduce(function (sum, value) {\n        value = Number(value);\n        return sum + value;\n      });\n      output = output / values.length;\n      output = precision !== false ? output.toFixed(precision) : output;\n    }\n\n    return parseFloat(output).toString();\n  },\n  \"max\": function max(values, data, calcParams) {\n    var output = null,\n        precision = typeof calcParams.precision !== \"undefined\" ? calcParams.precision : false;\n    values.forEach(function (value) {\n      value = Number(value);\n\n      if (value > output || output === null) {\n        output = value;\n      }\n    });\n    return output !== null ? precision !== false ? output.toFixed(precision) : output : \"\";\n  },\n  \"min\": function min(values, data, calcParams) {\n    var output = null,\n        precision = typeof calcParams.precision !== \"undefined\" ? calcParams.precision : false;\n    values.forEach(function (value) {\n      value = Number(value);\n\n      if (value < output || output === null) {\n        output = value;\n      }\n    });\n    return output !== null ? precision !== false ? output.toFixed(precision) : output : \"\";\n  },\n  \"sum\": function sum(values, data, calcParams) {\n    var output = 0,\n        precision = typeof calcParams.precision !== \"undefined\" ? calcParams.precision : false;\n\n    if (values.length) {\n      values.forEach(function (value) {\n        value = Number(value);\n        output += !isNaN(value) ? Number(value) : 0;\n      });\n    }\n\n    return precision !== false ? output.toFixed(precision) : output;\n  },\n  \"concat\": function concat(values, data, calcParams) {\n    var output = 0;\n\n    if (values.length) {\n      output = values.reduce(function (sum, value) {\n        return String(sum) + String(value);\n      });\n    }\n\n    return output;\n  },\n  \"count\": function count(values, data, calcParams) {\n    var output = 0;\n\n    if (values.length) {\n      values.forEach(function (value) {\n        if (value) {\n          output++;\n        }\n      });\n    }\n\n    return output;\n  }\n};\nTabulator.prototype.registerModule(\"columnCalcs\", ColumnCalcs);\n\nvar Clipboard = function Clipboard(table) {\n  this.table = table;\n  this.mode = true;\n\n  this.pasteParser = function () {};\n\n  this.pasteAction = function () {};\n\n  this.customSelection = false;\n  this.rowRange = false;\n  this.blocked = true; //block copy actions not originating from this command\n};\n\nClipboard.prototype.initialize = function () {\n  var _this45 = this;\n\n  this.mode = this.table.options.clipboard;\n  this.rowRange = this.table.options.clipboardCopyRowRange;\n\n  if (this.mode === true || this.mode === \"copy\") {\n    this.table.element.addEventListener(\"copy\", function (e) {\n      var plain, html, list;\n\n      if (!_this45.blocked) {\n        e.preventDefault();\n\n        if (_this45.customSelection) {\n          plain = _this45.customSelection;\n\n          if (_this45.table.options.clipboardCopyFormatter) {\n            plain = _this45.table.options.clipboardCopyFormatter(\"plain\", plain);\n          }\n        } else {\n          var list = _this45.table.modules.export.generateExportList(_this45.rowRange, _this45.table.options.clipboardCopyStyled, _this45.table.options.clipboardCopyConfig, \"clipboard\");\n\n          html = _this45.table.modules.export.genereateHTMLTable(list);\n          plain = html ? _this45.generatePlainContent(list) : \"\";\n\n          if (_this45.table.options.clipboardCopyFormatter) {\n            plain = _this45.table.options.clipboardCopyFormatter(\"plain\", plain);\n            html = _this45.table.options.clipboardCopyFormatter(\"html\", html);\n          }\n        }\n\n        if (window.clipboardData && window.clipboardData.setData) {\n          window.clipboardData.setData('Text', plain);\n        } else if (e.clipboardData && e.clipboardData.setData) {\n          e.clipboardData.setData('text/plain', plain);\n\n          if (html) {\n            e.clipboardData.setData('text/html', html);\n          }\n        } else if (e.originalEvent && e.originalEvent.clipboardData.setData) {\n          e.originalEvent.clipboardData.setData('text/plain', plain);\n\n          if (html) {\n            e.originalEvent.clipboardData.setData('text/html', html);\n          }\n        }\n\n        _this45.table.options.clipboardCopied.call(_this45.table, plain, html);\n\n        _this45.reset();\n      }\n    });\n  }\n\n  if (this.mode === true || this.mode === \"paste\") {\n    this.table.element.addEventListener(\"paste\", function (e) {\n      _this45.paste(e);\n    });\n  }\n\n  this.setPasteParser(this.table.options.clipboardPasteParser);\n  this.setPasteAction(this.table.options.clipboardPasteAction);\n};\n\nClipboard.prototype.reset = function () {\n  this.blocked = false;\n  this.originalSelectionText = \"\";\n};\n\nClipboard.prototype.generatePlainContent = function (list) {\n  var output = [];\n  list.forEach(function (row) {\n    var rowData = [];\n    row.columns.forEach(function (col) {\n      var value = \"\";\n\n      if (col) {\n        if (row.type === \"group\") {\n          col.value = col.component.getKey();\n        }\n\n        if (col.value === null) {\n          value = \"\";\n        } else {\n          switch (_typeof(col.value)) {\n            case \"object\":\n              value = JSON.stringify(col.value);\n              break;\n\n            case \"undefined\":\n              value = \"\";\n              break;\n\n            default:\n              value = col.value;\n          }\n        }\n      }\n\n      rowData.push(value);\n    });\n    output.push(rowData.join(\"\\t\"));\n  });\n  return output.join(\"\\n\");\n};\n\nClipboard.prototype.copy = function (range, internal) {\n  var range, sel, textRange;\n  this.blocked = false;\n  this.customSelection = false;\n\n  if (this.mode === true || this.mode === \"copy\") {\n    this.rowRange = range || this.table.options.clipboardCopyRowRange;\n\n    if (typeof window.getSelection != \"undefined\" && typeof document.createRange != \"undefined\") {\n      range = document.createRange();\n      range.selectNodeContents(this.table.element);\n      sel = window.getSelection();\n\n      if (sel.toString() && internal) {\n        this.customSelection = sel.toString();\n      }\n\n      sel.removeAllRanges();\n      sel.addRange(range);\n    } else if (typeof document.selection != \"undefined\" && typeof document.body.createTextRange != \"undefined\") {\n      textRange = document.body.createTextRange();\n      textRange.moveToElementText(this.table.element);\n      textRange.select();\n    }\n\n    document.execCommand('copy');\n\n    if (sel) {\n      sel.removeAllRanges();\n    }\n  }\n}; //PASTE EVENT HANDLING\n\n\nClipboard.prototype.setPasteAction = function (action) {\n  switch (typeof action === 'undefined' ? 'undefined' : _typeof(action)) {\n    case \"string\":\n      this.pasteAction = this.pasteActions[action];\n\n      if (!this.pasteAction) {\n        console.warn(\"Clipboard Error - No such paste action found:\", action);\n      }\n\n      break;\n\n    case \"function\":\n      this.pasteAction = action;\n      break;\n  }\n};\n\nClipboard.prototype.setPasteParser = function (parser) {\n  switch (typeof parser === 'undefined' ? 'undefined' : _typeof(parser)) {\n    case \"string\":\n      this.pasteParser = this.pasteParsers[parser];\n\n      if (!this.pasteParser) {\n        console.warn(\"Clipboard Error - No such paste parser found:\", parser);\n      }\n\n      break;\n\n    case \"function\":\n      this.pasteParser = parser;\n      break;\n  }\n};\n\nClipboard.prototype.paste = function (e) {\n  var data, rowData, rows;\n\n  if (this.checkPaseOrigin(e)) {\n    data = this.getPasteData(e);\n    rowData = this.pasteParser.call(this, data);\n\n    if (rowData) {\n      e.preventDefault();\n\n      if (this.table.modExists(\"mutator\")) {\n        rowData = this.mutateData(rowData);\n      }\n\n      rows = this.pasteAction.call(this, rowData);\n      this.table.options.clipboardPasted.call(this.table, data, rowData, rows);\n    } else {\n      this.table.options.clipboardPasteError.call(this.table, data);\n    }\n  }\n};\n\nClipboard.prototype.mutateData = function (data) {\n  var self = this,\n      output = [];\n\n  if (Array.isArray(data)) {\n    data.forEach(function (row) {\n      output.push(self.table.modules.mutator.transformRow(row, \"clipboard\"));\n    });\n  } else {\n    output = data;\n  }\n\n  return output;\n};\n\nClipboard.prototype.checkPaseOrigin = function (e) {\n  var valid = true;\n\n  if (e.target.tagName != \"DIV\" || this.table.modules.edit.currentCell) {\n    valid = false;\n  }\n\n  return valid;\n};\n\nClipboard.prototype.getPasteData = function (e) {\n  var data;\n\n  if (window.clipboardData && window.clipboardData.getData) {\n    data = window.clipboardData.getData('Text');\n  } else if (e.clipboardData && e.clipboardData.getData) {\n    data = e.clipboardData.getData('text/plain');\n  } else if (e.originalEvent && e.originalEvent.clipboardData.getData) {\n    data = e.originalEvent.clipboardData.getData('text/plain');\n  }\n\n  return data;\n};\n\nClipboard.prototype.pasteParsers = {\n  table: function table(clipboard) {\n    var data = [],\n        success = false,\n        headerFindSuccess = true,\n        columns = this.table.columnManager.columns,\n        columnMap = [],\n        rows = []; //get data from clipboard into array of columns and rows.\n\n    clipboard = clipboard.split(\"\\n\");\n    clipboard.forEach(function (row) {\n      data.push(row.split(\"\\t\"));\n    });\n\n    if (data.length && !(data.length === 1 && data[0].length < 2)) {\n      success = true; //check if headers are present by title\n\n      data[0].forEach(function (value) {\n        var column = columns.find(function (column) {\n          return value && column.definition.title && value.trim() && column.definition.title.trim() === value.trim();\n        });\n\n        if (column) {\n          columnMap.push(column);\n        } else {\n          headerFindSuccess = false;\n        }\n      }); //check if column headers are present by field\n\n      if (!headerFindSuccess) {\n        headerFindSuccess = true;\n        columnMap = [];\n        data[0].forEach(function (value) {\n          var column = columns.find(function (column) {\n            return value && column.field && value.trim() && column.field.trim() === value.trim();\n          });\n\n          if (column) {\n            columnMap.push(column);\n          } else {\n            headerFindSuccess = false;\n          }\n        });\n\n        if (!headerFindSuccess) {\n          columnMap = this.table.columnManager.columnsByIndex;\n        }\n      } //remove header row if found\n\n\n      if (headerFindSuccess) {\n        data.shift();\n      }\n\n      data.forEach(function (item) {\n        var row = {};\n        item.forEach(function (value, i) {\n          if (columnMap[i]) {\n            row[columnMap[i].field] = value;\n          }\n        });\n        rows.push(row);\n      });\n      return rows;\n    } else {\n      return false;\n    }\n  }\n};\nClipboard.prototype.pasteActions = {\n  replace: function replace(rows) {\n    return this.table.setData(rows);\n  },\n  update: function update(rows) {\n    return this.table.updateOrAddData(rows);\n  },\n  insert: function insert(rows) {\n    return this.table.addData(rows);\n  }\n};\nTabulator.prototype.registerModule(\"clipboard\", Clipboard);\n\nvar DataTree = function DataTree(table) {\n  this.table = table;\n  this.indent = 10;\n  this.field = \"\";\n  this.collapseEl = null;\n  this.expandEl = null;\n  this.branchEl = null;\n  this.elementField = false;\n\n  this.startOpen = function () {};\n\n  this.displayIndex = 0;\n};\n\nDataTree.prototype.initialize = function () {\n  var dummyEl = null,\n      firstCol = this.table.columnManager.getFirstVisibileColumn(),\n      options = this.table.options;\n  this.field = options.dataTreeChildField;\n  this.indent = options.dataTreeChildIndent;\n  this.elementField = options.dataTreeElementColumn || (firstCol ? firstCol.field : false);\n\n  if (options.dataTreeBranchElement) {\n    if (options.dataTreeBranchElement === true) {\n      this.branchEl = document.createElement(\"div\");\n      this.branchEl.classList.add(\"tabulator-data-tree-branch\");\n    } else {\n      if (typeof options.dataTreeBranchElement === \"string\") {\n        dummyEl = document.createElement(\"div\");\n        dummyEl.innerHTML = options.dataTreeBranchElement;\n        this.branchEl = dummyEl.firstChild;\n      } else {\n        this.branchEl = options.dataTreeBranchElement;\n      }\n    }\n  }\n\n  if (options.dataTreeCollapseElement) {\n    if (typeof options.dataTreeCollapseElement === \"string\") {\n      dummyEl = document.createElement(\"div\");\n      dummyEl.innerHTML = options.dataTreeCollapseElement;\n      this.collapseEl = dummyEl.firstChild;\n    } else {\n      this.collapseEl = options.dataTreeCollapseElement;\n    }\n  } else {\n    this.collapseEl = document.createElement(\"div\");\n    this.collapseEl.classList.add(\"tabulator-data-tree-control\");\n    this.collapseEl.tabIndex = 0;\n    this.collapseEl.innerHTML = \"<div class='tabulator-data-tree-control-collapse'></div>\";\n  }\n\n  if (options.dataTreeExpandElement) {\n    if (typeof options.dataTreeExpandElement === \"string\") {\n      dummyEl = document.createElement(\"div\");\n      dummyEl.innerHTML = options.dataTreeExpandElement;\n      this.expandEl = dummyEl.firstChild;\n    } else {\n      this.expandEl = options.dataTreeExpandElement;\n    }\n  } else {\n    this.expandEl = document.createElement(\"div\");\n    this.expandEl.classList.add(\"tabulator-data-tree-control\");\n    this.expandEl.tabIndex = 0;\n    this.expandEl.innerHTML = \"<div class='tabulator-data-tree-control-expand'></div>\";\n  }\n\n  switch (_typeof(options.dataTreeStartExpanded)) {\n    case \"boolean\":\n      this.startOpen = function (row, index) {\n        return options.dataTreeStartExpanded;\n      };\n\n      break;\n\n    case \"function\":\n      this.startOpen = options.dataTreeStartExpanded;\n      break;\n\n    default:\n      this.startOpen = function (row, index) {\n        return options.dataTreeStartExpanded[index];\n      };\n\n      break;\n  }\n};\n\nDataTree.prototype.initializeRow = function (row) {\n  var childArray = row.getData()[this.field];\n  var isArray = Array.isArray(childArray);\n  var children = isArray || !isArray && (typeof childArray === 'undefined' ? 'undefined' : _typeof(childArray)) === \"object\" && childArray !== null;\n\n  if (!children && row.modules.dataTree && row.modules.dataTree.branchEl) {\n    row.modules.dataTree.branchEl.parentNode.removeChild(row.modules.dataTree.branchEl);\n  }\n\n  if (!children && row.modules.dataTree && row.modules.dataTree.controlEl) {\n    row.modules.dataTree.controlEl.parentNode.removeChild(row.modules.dataTree.controlEl);\n  }\n\n  row.modules.dataTree = {\n    index: row.modules.dataTree ? row.modules.dataTree.index : 0,\n    open: children ? row.modules.dataTree ? row.modules.dataTree.open : this.startOpen(row.getComponent(), 0) : false,\n    controlEl: row.modules.dataTree && children ? row.modules.dataTree.controlEl : false,\n    branchEl: row.modules.dataTree && children ? row.modules.dataTree.branchEl : false,\n    parent: row.modules.dataTree ? row.modules.dataTree.parent : false,\n    children: children\n  };\n};\n\nDataTree.prototype.layoutRow = function (row) {\n  var cell = this.elementField ? row.getCell(this.elementField) : row.getCells()[0],\n      el = cell.getElement(),\n      config = row.modules.dataTree;\n\n  if (config.branchEl) {\n    if (config.branchEl.parentNode) {\n      config.branchEl.parentNode.removeChild(config.branchEl);\n    }\n\n    config.branchEl = false;\n  }\n\n  if (config.controlEl) {\n    if (config.controlEl.parentNode) {\n      config.controlEl.parentNode.removeChild(config.controlEl);\n    }\n\n    config.controlEl = false;\n  }\n\n  this.generateControlElement(row, el);\n  row.element.classList.add(\"tabulator-tree-level-\" + config.index);\n\n  if (config.index) {\n    if (this.branchEl) {\n      config.branchEl = this.branchEl.cloneNode(true);\n      el.insertBefore(config.branchEl, el.firstChild);\n\n      if (this.table.rtl) {\n        config.branchEl.style.marginRight = (config.branchEl.offsetWidth + config.branchEl.style.marginLeft) * (config.index - 1) + config.index * this.indent + \"px\";\n      } else {\n        config.branchEl.style.marginLeft = (config.branchEl.offsetWidth + config.branchEl.style.marginRight) * (config.index - 1) + config.index * this.indent + \"px\";\n      }\n    } else {\n      if (this.table.rtl) {\n        el.style.paddingRight = parseInt(window.getComputedStyle(el, null).getPropertyValue('padding-right')) + config.index * this.indent + \"px\";\n      } else {\n        el.style.paddingLeft = parseInt(window.getComputedStyle(el, null).getPropertyValue('padding-left')) + config.index * this.indent + \"px\";\n      }\n    }\n  }\n};\n\nDataTree.prototype.generateControlElement = function (row, el) {\n  var _this46 = this;\n\n  var config = row.modules.dataTree,\n      el = el || row.getCells()[0].getElement(),\n      oldControl = config.controlEl;\n\n  if (config.children !== false) {\n    if (config.open) {\n      config.controlEl = this.collapseEl.cloneNode(true);\n      config.controlEl.addEventListener(\"click\", function (e) {\n        e.stopPropagation();\n\n        _this46.collapseRow(row);\n      });\n    } else {\n      config.controlEl = this.expandEl.cloneNode(true);\n      config.controlEl.addEventListener(\"click\", function (e) {\n        e.stopPropagation();\n\n        _this46.expandRow(row);\n      });\n    }\n\n    config.controlEl.addEventListener(\"mousedown\", function (e) {\n      e.stopPropagation();\n    });\n\n    if (oldControl && oldControl.parentNode === el) {\n      oldControl.parentNode.replaceChild(config.controlEl, oldControl);\n    } else {\n      el.insertBefore(config.controlEl, el.firstChild);\n    }\n  }\n};\n\nDataTree.prototype.setDisplayIndex = function (index) {\n  this.displayIndex = index;\n};\n\nDataTree.prototype.getDisplayIndex = function () {\n  return this.displayIndex;\n};\n\nDataTree.prototype.getRows = function (rows) {\n  var _this47 = this;\n\n  var output = [];\n  rows.forEach(function (row, i) {\n    var config, children;\n    output.push(row);\n\n    if (row instanceof Row) {\n      config = row.modules.dataTree.children;\n\n      if (!config.index && config.children !== false) {\n        children = _this47.getChildren(row);\n        children.forEach(function (child) {\n          output.push(child);\n        });\n      }\n    }\n  });\n  return output;\n};\n\nDataTree.prototype.getChildren = function (row) {\n  var _this48 = this;\n\n  var config = row.modules.dataTree,\n      children = [],\n      output = [];\n\n  if (config.children !== false && config.open) {\n    if (!Array.isArray(config.children)) {\n      config.children = this.generateChildren(row);\n    }\n\n    if (this.table.modExists(\"filter\") && this.table.options.dataTreeFilter) {\n      children = this.table.modules.filter.filter(config.children);\n    } else {\n      children = config.children;\n    }\n\n    if (this.table.modExists(\"sort\") && this.table.options.dataTreeSort) {\n      this.table.modules.sort.sort(children);\n    }\n\n    children.forEach(function (child) {\n      output.push(child);\n\n      var subChildren = _this48.getChildren(child);\n\n      subChildren.forEach(function (sub) {\n        output.push(sub);\n      });\n    });\n  }\n\n  return output;\n};\n\nDataTree.prototype.generateChildren = function (row) {\n  var _this49 = this;\n\n  var children = [];\n  var childArray = row.getData()[this.field];\n\n  if (!Array.isArray(childArray)) {\n    childArray = [childArray];\n  }\n\n  childArray.forEach(function (childData) {\n    var childRow = new Row(childData || {}, _this49.table.rowManager);\n    childRow.modules.dataTree.index = row.modules.dataTree.index + 1;\n    childRow.modules.dataTree.parent = row;\n\n    if (childRow.modules.dataTree.children) {\n      childRow.modules.dataTree.open = _this49.startOpen(childRow.getComponent(), childRow.modules.dataTree.index);\n    }\n\n    children.push(childRow);\n  });\n  return children;\n};\n\nDataTree.prototype.expandRow = function (row, silent) {\n  var config = row.modules.dataTree;\n\n  if (config.children !== false) {\n    config.open = true;\n    row.reinitialize();\n    this.table.rowManager.refreshActiveData(\"tree\", false, true);\n    this.table.options.dataTreeRowExpanded(row.getComponent(), row.modules.dataTree.index);\n  }\n};\n\nDataTree.prototype.collapseRow = function (row) {\n  var config = row.modules.dataTree;\n\n  if (config.children !== false) {\n    config.open = false;\n    row.reinitialize();\n    this.table.rowManager.refreshActiveData(\"tree\", false, true);\n    this.table.options.dataTreeRowCollapsed(row.getComponent(), row.modules.dataTree.index);\n  }\n};\n\nDataTree.prototype.toggleRow = function (row) {\n  var config = row.modules.dataTree;\n\n  if (config.children !== false) {\n    if (config.open) {\n      this.collapseRow(row);\n    } else {\n      this.expandRow(row);\n    }\n  }\n};\n\nDataTree.prototype.getTreeParent = function (row) {\n  return row.modules.dataTree.parent ? row.modules.dataTree.parent.getComponent() : false;\n};\n\nDataTree.prototype.getFilteredTreeChildren = function (row) {\n  var config = row.modules.dataTree,\n      output = [],\n      children;\n\n  if (config.children) {\n    if (!Array.isArray(config.children)) {\n      config.children = this.generateChildren(row);\n    }\n\n    if (this.table.modExists(\"filter\") && this.table.options.dataTreeFilter) {\n      children = this.table.modules.filter.filter(config.children);\n    } else {\n      children = config.children;\n    }\n\n    children.forEach(function (childRow) {\n      if (childRow instanceof Row) {\n        output.push(childRow);\n      }\n    });\n  }\n\n  return output;\n};\n\nDataTree.prototype.rowDelete = function (row) {\n  var parent = row.modules.dataTree.parent,\n      childIndex;\n\n  if (parent) {\n    childIndex = this.findChildIndex(row, parent);\n\n    if (childIndex !== false) {\n      parent.data[this.field].splice(childIndex, 1);\n    }\n\n    if (!parent.data[this.field].length) {\n      delete parent.data[this.field];\n    }\n\n    this.initializeRow(parent);\n    this.layoutRow(parent);\n  }\n\n  this.table.rowManager.refreshActiveData(\"tree\", false, true);\n};\n\nDataTree.prototype.addTreeChildRow = function (row, data, top, index) {\n  var childIndex = false;\n\n  if (typeof data === \"string\") {\n    data = JSON.parse(data);\n  }\n\n  if (!Array.isArray(row.data[this.field])) {\n    row.data[this.field] = [];\n    row.modules.dataTree.open = this.startOpen(row.getComponent(), row.modules.dataTree.index);\n  }\n\n  if (typeof index !== \"undefined\") {\n    childIndex = this.findChildIndex(index, row);\n\n    if (childIndex !== false) {\n      row.data[this.field].splice(top ? childIndex : childIndex + 1, 0, data);\n    }\n  }\n\n  if (childIndex === false) {\n    if (top) {\n      row.data[this.field].unshift(data);\n    } else {\n      row.data[this.field].push(data);\n    }\n  }\n\n  this.initializeRow(row);\n  this.layoutRow(row);\n  this.table.rowManager.refreshActiveData(\"tree\", false, true);\n};\n\nDataTree.prototype.findChildIndex = function (subject, parent) {\n  var _this50 = this;\n\n  var match = false;\n\n  if ((typeof subject === 'undefined' ? 'undefined' : _typeof(subject)) == \"object\") {\n    if (subject instanceof Row) {\n      //subject is row element\n      match = subject.data;\n    } else if (subject instanceof RowComponent) {\n      //subject is public row component\n      match = subject._getSelf().data;\n    } else if (typeof HTMLElement !== \"undefined\" && subject instanceof HTMLElement) {\n      if (parent.modules.dataTree) {\n        match = parent.modules.dataTree.children.find(function (childRow) {\n          return childRow instanceof Row ? childRow.element === subject : false;\n        });\n\n        if (match) {\n          match = match.data;\n        }\n      }\n    }\n  } else if (typeof subject == \"undefined\" || subject === null) {\n    match = false;\n  } else {\n    //subject should be treated as the index of the row\n    match = parent.data[this.field].find(function (row) {\n      return row.data[_this50.table.options.index] == subject;\n    });\n  }\n\n  if (match) {\n    if (Array.isArray(parent.data[this.field])) {\n      match = parent.data[this.field].indexOf(match);\n    }\n\n    if (match == -1) {\n      match = false;\n    }\n  } //catch all for any other type of input\n\n\n  return match;\n};\n\nDataTree.prototype.getTreeChildren = function (row) {\n  var config = row.modules.dataTree,\n      output = [];\n\n  if (config.children) {\n    if (!Array.isArray(config.children)) {\n      config.children = this.generateChildren(row);\n    }\n\n    config.children.forEach(function (childRow) {\n      if (childRow instanceof Row) {\n        output.push(childRow.getComponent());\n      }\n    });\n  }\n\n  return output;\n};\n\nDataTree.prototype.checkForRestyle = function (cell) {\n  if (!cell.row.cells.indexOf(cell)) {\n    cell.row.reinitialize();\n  }\n};\n\nDataTree.prototype.getChildField = function () {\n  return this.field;\n};\n\nDataTree.prototype.redrawNeeded = function (data) {\n  return (this.field ? typeof data[this.field] !== \"undefined\" : false) || (this.elementField ? typeof data[this.elementField] !== \"undefined\" : false);\n};\n\nTabulator.prototype.registerModule(\"dataTree\", DataTree);\n\nvar Download = function Download(table) {\n  this.table = table; //hold Tabulator object\n}; //trigger file download\n\n\nDownload.prototype.download = function (type, filename, options, range, interceptCallback) {\n  var self = this,\n      downloadFunc = false;\n\n  function buildLink(data, mime) {\n    if (interceptCallback) {\n      if (interceptCallback === true) {\n        self.triggerDownload(data, mime, type, filename, true);\n      } else {\n        interceptCallback(data);\n      }\n    } else {\n      self.triggerDownload(data, mime, type, filename);\n    }\n  }\n\n  if (typeof type == \"function\") {\n    downloadFunc = type;\n  } else {\n    if (self.downloaders[type]) {\n      downloadFunc = self.downloaders[type];\n    } else {\n      console.warn(\"Download Error - No such download type found: \", type);\n    }\n  }\n\n  if (downloadFunc) {\n    var list = this.generateExportList(range);\n    downloadFunc.call(this.table, list, options || {}, buildLink);\n  }\n};\n\nDownload.prototype.generateExportList = function (range) {\n  var list = this.table.modules.export.generateExportList(this.table.options.downloadConfig, false, range || this.table.options.downloadRowRange, \"download\"); //assign group header formatter\n\n  var groupHeader = this.table.options.groupHeaderDownload;\n\n  if (groupHeader && !Array.isArray(groupHeader)) {\n    groupHeader = [groupHeader];\n  }\n\n  list.forEach(function (row) {\n    var group;\n\n    if (row.type === \"group\") {\n      group = row.columns[0];\n\n      if (groupHeader && groupHeader[row.indent]) {\n        group.value = groupHeader[row.indent](group.value, row.component._group.getRowCount(), row.component._group.getData(), row.component);\n      }\n    }\n  });\n  return list;\n};\n\nDownload.prototype.triggerDownload = function (data, mime, type, filename, newTab) {\n  var element = document.createElement('a'),\n      blob = new Blob([data], {\n    type: mime\n  }),\n      filename = filename || \"Tabulator.\" + (typeof type === \"function\" ? \"txt\" : type);\n  blob = this.table.options.downloadReady.call(this.table, data, blob);\n\n  if (blob) {\n    if (newTab) {\n      window.open(window.URL.createObjectURL(blob));\n    } else {\n      if (navigator.msSaveOrOpenBlob) {\n        navigator.msSaveOrOpenBlob(blob, filename);\n      } else {\n        element.setAttribute('href', window.URL.createObjectURL(blob)); //set file title\n\n        element.setAttribute('download', filename); //trigger download\n\n        element.style.display = 'none';\n        document.body.appendChild(element);\n        element.click(); //remove temporary link element\n\n        document.body.removeChild(element);\n      }\n    }\n\n    if (this.table.options.downloadComplete) {\n      this.table.options.downloadComplete();\n    }\n  }\n};\n\nDownload.prototype.commsReceived = function (table, action, data) {\n  switch (action) {\n    case \"intercept\":\n      this.download(data.type, \"\", data.options, data.active, data.intercept);\n      break;\n  }\n}; //downloaders\n\n\nDownload.prototype.downloaders = {\n  csv: function csv(list, options, setFileContents) {\n    var delimiter = options && options.delimiter ? options.delimiter : \",\",\n        fileContents = [],\n        headers = [];\n    list.forEach(function (row) {\n      var item = [];\n\n      switch (row.type) {\n        case \"group\":\n          console.warn(\"Download Warning - CSV downloader cannot process row groups\");\n          break;\n\n        case \"calc\":\n          console.warn(\"Download Warning - CSV downloader cannot process column calculations\");\n          break;\n\n        case \"header\":\n          row.columns.forEach(function (col, i) {\n            if (col && col.depth === 1) {\n              headers[i] = typeof col.value == \"undefined\" || col.value === null ? \"\" : '\"' + String(col.value).split('\"').join('\"\"') + '\"';\n            }\n          });\n          break;\n\n        case \"row\":\n          row.columns.forEach(function (col) {\n            if (col) {\n              switch (_typeof(col.value)) {\n                case \"object\":\n                  col.value = JSON.stringify(col.value);\n                  break;\n\n                case \"undefined\":\n                case \"null\":\n                  col.value = \"\";\n                  break;\n              }\n\n              item.push('\"' + String(col.value).split('\"').join('\"\"') + '\"');\n            }\n          });\n          fileContents.push(item.join(delimiter));\n          break;\n      }\n    });\n\n    if (headers.length) {\n      fileContents.unshift(headers.join(delimiter));\n    }\n\n    fileContents = fileContents.join(\"\\n\");\n\n    if (options.bom) {\n      fileContents = '\\uFEFF' + fileContents;\n    }\n\n    setFileContents(fileContents, \"text/csv\");\n  },\n  json: function json(list, options, setFileContents) {\n    var fileContents = [];\n    list.forEach(function (row) {\n      var item = {};\n\n      switch (row.type) {\n        case \"header\":\n          break;\n\n        case \"group\":\n          console.warn(\"Download Warning - JSON downloader cannot process row groups\");\n          break;\n\n        case \"calc\":\n          console.warn(\"Download Warning - JSON downloader cannot process column calculations\");\n          break;\n\n        case \"row\":\n          row.columns.forEach(function (col) {\n            if (col) {\n              item[col.component.getField()] = col.value;\n            }\n          });\n          fileContents.push(item);\n          break;\n      }\n    });\n    fileContents = JSON.stringify(fileContents, null, '\\t');\n    setFileContents(fileContents, \"application/json\");\n  },\n  pdf: function pdf(list, options, setFileContents) {\n    var header = [],\n        body = [],\n        autoTableParams = {},\n        rowGroupStyles = options.rowGroupStyles || {\n      fontStyle: \"bold\",\n      fontSize: 12,\n      cellPadding: 6,\n      fillColor: 220\n    },\n        rowCalcStyles = options.rowCalcStyles || {\n      fontStyle: \"bold\",\n      fontSize: 10,\n      cellPadding: 4,\n      fillColor: 232\n    },\n        jsPDFParams = options.jsPDF || {},\n        title = options && options.title ? options.title : \"\";\n\n    if (!jsPDFParams.orientation) {\n      jsPDFParams.orientation = options.orientation || \"landscape\";\n    }\n\n    if (!jsPDFParams.unit) {\n      jsPDFParams.unit = \"pt\";\n    } //parse row list\n\n\n    list.forEach(function (row) {\n      var item = {};\n\n      switch (row.type) {\n        case \"header\":\n          header.push(parseRow(row));\n          break;\n\n        case \"group\":\n          body.push(parseRow(row, rowGroupStyles));\n          break;\n\n        case \"calc\":\n          body.push(parseRow(row, rowCalcStyles));\n          break;\n\n        case \"row\":\n          body.push(parseRow(row));\n          break;\n      }\n    });\n\n    function parseRow(row, styles) {\n      var rowData = [];\n      row.columns.forEach(function (col) {\n        var cell;\n\n        if (col) {\n          switch (_typeof(col.value)) {\n            case \"object\":\n              col.value = JSON.stringify(col.value);\n              break;\n\n            case \"undefined\":\n            case \"null\":\n              col.value = \"\";\n              break;\n          }\n\n          cell = {\n            content: col.value,\n            colSpan: col.width,\n            rowSpan: col.height\n          };\n\n          if (styles) {\n            cell.styles = styles;\n          }\n\n          rowData.push(cell);\n        } else {\n          rowData.push(\"\");\n        }\n      });\n      return rowData;\n    } //configure PDF\n\n\n    var doc = new jsPDF(jsPDFParams); //set document to landscape, better for most tables\n\n    if (options && options.autoTable) {\n      if (typeof options.autoTable === \"function\") {\n        autoTableParams = options.autoTable(doc) || {};\n      } else {\n        autoTableParams = options.autoTable;\n      }\n    }\n\n    if (title) {\n      autoTableParams.addPageContent = function (data) {\n        doc.text(title, 40, 30);\n      };\n    }\n\n    autoTableParams.head = header;\n    autoTableParams.body = body;\n    doc.autoTable(autoTableParams);\n\n    if (options && options.documentProcessing) {\n      options.documentProcessing(doc);\n    }\n\n    setFileContents(doc.output(\"arraybuffer\"), \"application/pdf\");\n  },\n  xlsx: function xlsx(list, options, setFileContents) {\n    var self = this,\n        sheetName = options.sheetName || \"Sheet1\",\n        workbook = XLSX.utils.book_new(),\n        output;\n    workbook.SheetNames = [];\n    workbook.Sheets = {};\n\n    function generateSheet() {\n      var rows = [],\n          merges = [],\n          worksheet = {},\n          range = {\n        s: {\n          c: 0,\n          r: 0\n        },\n        e: {\n          c: list[0] ? list[0].columns.reduce(function (a, b) {\n            return a + (b && b.width ? b.width : 1);\n          }, 0) : 0,\n          r: list.length\n        }\n      }; //parse row list\n\n      list.forEach(function (row, i) {\n        var rowData = [];\n        row.columns.forEach(function (col, j) {\n          if (col) {\n            rowData.push(!(col.value instanceof Date) && _typeof(col.value) === \"object\" ? JSON.stringify(col.value) : col.value);\n\n            if (col.width > 1 || col.height > -1) {\n              merges.push({\n                s: {\n                  r: i,\n                  c: j\n                },\n                e: {\n                  r: i + col.height - 1,\n                  c: j + col.width - 1\n                }\n              });\n            }\n          } else {\n            rowData.push(\"\");\n          }\n        });\n        rows.push(rowData);\n      }); //convert rows to worksheet\n\n      XLSX.utils.sheet_add_aoa(worksheet, rows);\n      worksheet['!ref'] = XLSX.utils.encode_range(range);\n\n      if (merges.length) {\n        worksheet[\"!merges\"] = merges;\n      }\n\n      return worksheet;\n    }\n\n    if (options.sheetOnly) {\n      setFileContents(generateSheet());\n      return;\n    }\n\n    if (options.sheets) {\n      for (var sheet in options.sheets) {\n        if (options.sheets[sheet] === true) {\n          workbook.SheetNames.push(sheet);\n          workbook.Sheets[sheet] = generateSheet();\n        } else {\n          workbook.SheetNames.push(sheet);\n          this.modules.comms.send(options.sheets[sheet], \"download\", \"intercept\", {\n            type: \"xlsx\",\n            options: {\n              sheetOnly: true\n            },\n            active: self.active,\n            intercept: function intercept(data) {\n              workbook.Sheets[sheet] = data;\n            }\n          });\n        }\n      }\n    } else {\n      workbook.SheetNames.push(sheetName);\n      workbook.Sheets[sheetName] = generateSheet();\n    }\n\n    if (options.documentProcessing) {\n      workbook = options.documentProcessing(workbook);\n    } //convert workbook to binary array\n\n\n    function s2ab(s) {\n      var buf = new ArrayBuffer(s.length);\n      var view = new Uint8Array(buf);\n\n      for (var i = 0; i != s.length; ++i) {\n        view[i] = s.charCodeAt(i) & 0xFF;\n      }\n\n      return buf;\n    }\n\n    output = XLSX.write(workbook, {\n      bookType: 'xlsx',\n      bookSST: true,\n      type: 'binary'\n    });\n    setFileContents(s2ab(output), \"application/octet-stream\");\n  },\n  html: function html(list, options, setFileContents) {\n    if (this.modExists(\"export\", true)) {\n      setFileContents(this.modules.export.genereateHTMLTable(list), \"text/html\");\n    }\n  }\n};\nTabulator.prototype.registerModule(\"download\", Download);\n\nvar Edit = function Edit(table) {\n  this.table = table; //hold Tabulator object\n\n  this.currentCell = false; //hold currently editing cell\n\n  this.mouseClick = false; //hold mousedown state to prevent click binding being overriden by editor opening\n\n  this.recursionBlock = false; //prevent focus recursion\n\n  this.invalidEdit = false;\n  this.editedCells = [];\n}; //initialize column editor\n\n\nEdit.prototype.initializeColumn = function (column) {\n  var self = this,\n      config = {\n    editor: false,\n    blocked: false,\n    check: column.definition.editable,\n    params: column.definition.editorParams || {}\n  }; //set column editor\n\n  switch (_typeof(column.definition.editor)) {\n    case \"string\":\n      if (column.definition.editor === \"tick\") {\n        column.definition.editor = \"tickCross\";\n        console.warn(\"DEPRECATION WARNING - the tick editor has been deprecated, please use the tickCross editor\");\n      }\n\n      if (self.editors[column.definition.editor]) {\n        config.editor = self.editors[column.definition.editor];\n      } else {\n        console.warn(\"Editor Error - No such editor found: \", column.definition.editor);\n      }\n\n      break;\n\n    case \"function\":\n      config.editor = column.definition.editor;\n      break;\n\n    case \"boolean\":\n      if (column.definition.editor === true) {\n        if (typeof column.definition.formatter !== \"function\") {\n          if (column.definition.formatter === \"tick\") {\n            column.definition.formatter = \"tickCross\";\n            console.warn(\"DEPRECATION WARNING - the tick editor has been deprecated, please use the tickCross editor\");\n          }\n\n          if (self.editors[column.definition.formatter]) {\n            config.editor = self.editors[column.definition.formatter];\n          } else {\n            config.editor = self.editors[\"input\"];\n          }\n        } else {\n          console.warn(\"Editor Error - Cannot auto lookup editor for a custom formatter: \", column.definition.formatter);\n        }\n      }\n\n      break;\n  }\n\n  if (config.editor) {\n    column.modules.edit = config;\n  }\n};\n\nEdit.prototype.getCurrentCell = function () {\n  return this.currentCell ? this.currentCell.getComponent() : false;\n};\n\nEdit.prototype.clearEditor = function (cancel) {\n  var cell = this.currentCell,\n      cellEl;\n  this.invalidEdit = false;\n\n  if (cell) {\n    this.currentCell = false;\n    cellEl = cell.getElement();\n\n    if (cancel) {\n      cell.validate();\n    } else {\n      cellEl.classList.remove(\"tabulator-validation-fail\");\n    }\n\n    cellEl.classList.remove(\"tabulator-editing\");\n\n    while (cellEl.firstChild) {\n      cellEl.removeChild(cellEl.firstChild);\n    }\n\n    cell.row.getElement().classList.remove(\"tabulator-row-editing\");\n  }\n};\n\nEdit.prototype.cancelEdit = function () {\n  if (this.currentCell) {\n    var cell = this.currentCell;\n    var component = this.currentCell.getComponent();\n    this.clearEditor(true);\n    cell.setValueActual(cell.getValue());\n    cell.cellRendered();\n\n    if (cell.column.definition.editor == \"textarea\" || cell.column.definition.variableHeight) {\n      cell.row.normalizeHeight(true);\n    }\n\n    if (cell.column.cellEvents.cellEditCancelled) {\n      cell.column.cellEvents.cellEditCancelled.call(this.table, component);\n    }\n\n    this.table.options.cellEditCancelled.call(this.table, component);\n  }\n}; //return a formatted value for a cell\n\n\nEdit.prototype.bindEditor = function (cell) {\n  var self = this,\n      element = cell.getElement();\n  element.setAttribute(\"tabindex\", 0);\n  element.addEventListener(\"click\", function (e) {\n    if (!element.classList.contains(\"tabulator-editing\")) {\n      element.focus({\n        preventScroll: true\n      });\n    }\n  });\n  element.addEventListener(\"mousedown\", function (e) {\n    if (e.button === 2) {\n      e.preventDefault();\n    } else {\n      self.mouseClick = true;\n    }\n  });\n  element.addEventListener(\"focus\", function (e) {\n    if (!self.recursionBlock) {\n      self.edit(cell, e, false);\n    }\n  });\n};\n\nEdit.prototype.focusCellNoEvent = function (cell, block) {\n  this.recursionBlock = true;\n\n  if (!(block && this.table.browser === \"ie\")) {\n    cell.getElement().focus({\n      preventScroll: true\n    });\n  }\n\n  this.recursionBlock = false;\n};\n\nEdit.prototype.editCell = function (cell, forceEdit) {\n  this.focusCellNoEvent(cell);\n  this.edit(cell, false, forceEdit);\n};\n\nEdit.prototype.focusScrollAdjust = function (cell) {\n  if (this.table.rowManager.getRenderMode() == \"virtual\") {\n    var topEdge = this.table.rowManager.element.scrollTop,\n        bottomEdge = this.table.rowManager.element.clientHeight + this.table.rowManager.element.scrollTop,\n        rowEl = cell.row.getElement(),\n        offset = rowEl.offsetTop;\n\n    if (rowEl.offsetTop < topEdge) {\n      this.table.rowManager.element.scrollTop -= topEdge - rowEl.offsetTop;\n    } else {\n      if (rowEl.offsetTop + rowEl.offsetHeight > bottomEdge) {\n        this.table.rowManager.element.scrollTop += rowEl.offsetTop + rowEl.offsetHeight - bottomEdge;\n      }\n    }\n\n    var leftEdge = this.table.rowManager.element.scrollLeft,\n        rightEdge = this.table.rowManager.element.clientWidth + this.table.rowManager.element.scrollLeft,\n        cellEl = cell.getElement(),\n        offset = cellEl.offsetLeft;\n\n    if (this.table.modExists(\"frozenColumns\")) {\n      leftEdge += parseInt(this.table.modules.frozenColumns.leftMargin);\n      rightEdge -= parseInt(this.table.modules.frozenColumns.rightMargin);\n    }\n\n    if (cellEl.offsetLeft < leftEdge) {\n      this.table.rowManager.element.scrollLeft -= leftEdge - cellEl.offsetLeft;\n    } else {\n      if (cellEl.offsetLeft + cellEl.offsetWidth > rightEdge) {\n        this.table.rowManager.element.scrollLeft += cellEl.offsetLeft + cellEl.offsetWidth - rightEdge;\n      }\n    }\n  }\n};\n\nEdit.prototype.edit = function (cell, e, forceEdit) {\n  var self = this,\n      allowEdit = true,\n      rendered = function rendered() {},\n      element = cell.getElement(),\n      cellEditor,\n      component,\n      params; //prevent editing if another cell is refusing to leave focus (eg. validation fail)\n\n\n  if (this.currentCell) {\n    if (!this.invalidEdit) {\n      this.cancelEdit();\n    }\n\n    return;\n  } //handle successfull value change\n\n\n  function success(value) {\n    if (self.currentCell === cell) {\n      var valid = true;\n\n      if (cell.column.modules.validate && self.table.modExists(\"validate\") && self.table.options.validationMode != \"manual\") {\n        valid = self.table.modules.validate.validate(cell.column.modules.validate, cell, value);\n      }\n\n      if (valid === true || self.table.options.validationMode === \"highlight\") {\n        self.clearEditor();\n\n        if (!cell.modules.edit) {\n          cell.modules.edit = {};\n        }\n\n        cell.modules.edit.edited = true;\n\n        if (self.editedCells.indexOf(cell) == -1) {\n          self.editedCells.push(cell);\n        }\n\n        cell.setValue(value, true);\n\n        if (self.table.options.dataTree && self.table.modExists(\"dataTree\")) {\n          self.table.modules.dataTree.checkForRestyle(cell);\n        }\n\n        if (valid !== true) {\n          element.classList.add(\"tabulator-validation-fail\");\n          self.table.options.validationFailed.call(self.table, cell.getComponent(), value, valid);\n          return false;\n        }\n\n        return true;\n      } else {\n        self.invalidEdit = true;\n        element.classList.add(\"tabulator-validation-fail\");\n        self.focusCellNoEvent(cell, true);\n        rendered();\n        self.table.options.validationFailed.call(self.table, cell.getComponent(), value, valid);\n        return false;\n      }\n    } else {// console.warn(\"Edit Success Error - cannot call success on a cell that is no longer being edited\");\n    }\n  } //handle aborted edit\n\n\n  function cancel() {\n    if (self.currentCell === cell) {\n      self.cancelEdit();\n\n      if (self.table.options.dataTree && self.table.modExists(\"dataTree\")) {\n        self.table.modules.dataTree.checkForRestyle(cell);\n      }\n    } else {// console.warn(\"Edit Success Error - cannot call cancel on a cell that is no longer being edited\");\n    }\n  }\n\n  function onRendered(callback) {\n    rendered = callback;\n  }\n\n  if (!cell.column.modules.edit.blocked) {\n    if (e) {\n      e.stopPropagation();\n    }\n\n    switch (_typeof(cell.column.modules.edit.check)) {\n      case \"function\":\n        allowEdit = cell.column.modules.edit.check(cell.getComponent());\n        break;\n\n      case \"boolean\":\n        allowEdit = cell.column.modules.edit.check;\n        break;\n    }\n\n    if (allowEdit || forceEdit) {\n      self.cancelEdit();\n      self.currentCell = cell;\n      this.focusScrollAdjust(cell);\n      component = cell.getComponent();\n\n      if (this.mouseClick) {\n        this.mouseClick = false;\n\n        if (cell.column.cellEvents.cellClick) {\n          cell.column.cellEvents.cellClick.call(this.table, e, component);\n        }\n      }\n\n      if (cell.column.cellEvents.cellEditing) {\n        cell.column.cellEvents.cellEditing.call(this.table, component);\n      }\n\n      self.table.options.cellEditing.call(this.table, component);\n      params = typeof cell.column.modules.edit.params === \"function\" ? cell.column.modules.edit.params(component) : cell.column.modules.edit.params;\n      cellEditor = cell.column.modules.edit.editor.call(self, component, onRendered, success, cancel, params); //if editor returned, add to DOM, if false, abort edit\n\n      if (cellEditor !== false) {\n        if (cellEditor instanceof Node) {\n          element.classList.add(\"tabulator-editing\");\n          cell.row.getElement().classList.add(\"tabulator-row-editing\");\n\n          while (element.firstChild) {\n            element.removeChild(element.firstChild);\n          }\n\n          element.appendChild(cellEditor); //trigger onRendered Callback\n\n          rendered(); //prevent editing from triggering rowClick event\n\n          var children = element.children;\n\n          for (var i = 0; i < children.length; i++) {\n            children[i].addEventListener(\"click\", function (e) {\n              e.stopPropagation();\n            });\n          }\n        } else {\n          console.warn(\"Edit Error - Editor should return an instance of Node, the editor returned:\", cellEditor);\n          element.blur();\n          return false;\n        }\n      } else {\n        element.blur();\n        return false;\n      }\n\n      return true;\n    } else {\n      this.mouseClick = false;\n      element.blur();\n      return false;\n    }\n  } else {\n    this.mouseClick = false;\n    element.blur();\n    return false;\n  }\n};\n\nEdit.prototype.maskInput = function (el, options) {\n  var mask = options.mask,\n      maskLetter = typeof options.maskLetterChar !== \"undefined\" ? options.maskLetterChar : \"A\",\n      maskNumber = typeof options.maskNumberChar !== \"undefined\" ? options.maskNumberChar : \"9\",\n      maskWildcard = typeof options.maskWildcardChar !== \"undefined\" ? options.maskWildcardChar : \"*\",\n      success = false;\n\n  function fillSymbols(index) {\n    var symbol = mask[index];\n\n    if (typeof symbol !== \"undefined\" && symbol !== maskWildcard && symbol !== maskLetter && symbol !== maskNumber) {\n      el.value = el.value + \"\" + symbol;\n      fillSymbols(index + 1);\n    }\n  }\n\n  el.addEventListener(\"keydown\", function (e) {\n    var index = el.value.length,\n        char = e.key;\n\n    if (e.keyCode > 46) {\n      if (index >= mask.length) {\n        e.preventDefault();\n        e.stopPropagation();\n        success = false;\n        return false;\n      } else {\n        switch (mask[index]) {\n          case maskLetter:\n            if (char.toUpperCase() == char.toLowerCase()) {\n              e.preventDefault();\n              e.stopPropagation();\n              success = false;\n              return false;\n            }\n\n            break;\n\n          case maskNumber:\n            if (isNaN(char)) {\n              e.preventDefault();\n              e.stopPropagation();\n              success = false;\n              return false;\n            }\n\n            break;\n\n          case maskWildcard:\n            break;\n\n          default:\n            if (char !== mask[index]) {\n              e.preventDefault();\n              e.stopPropagation();\n              success = false;\n              return false;\n            }\n\n        }\n      }\n\n      success = true;\n    }\n\n    return;\n  });\n  el.addEventListener(\"keyup\", function (e) {\n    if (e.keyCode > 46) {\n      if (options.maskAutoFill) {\n        fillSymbols(el.value.length);\n      }\n    }\n  });\n\n  if (!el.placeholder) {\n    el.placeholder = mask;\n  }\n\n  if (options.maskAutoFill) {\n    fillSymbols(el.value.length);\n  }\n};\n\nEdit.prototype.getEditedCells = function () {\n  var output = [];\n  this.editedCells.forEach(function (cell) {\n    output.push(cell.getComponent());\n  });\n  return output;\n};\n\nEdit.prototype.clearEdited = function (cell) {\n  var editIndex;\n\n  if (cell.modules.validate && cell.modules.edit && cell.modules.edit.edited) {\n    cell.modules.validate.invalid = false;\n    editIndex = this.editedCells.indexOf(cell);\n\n    if (editIndex > -1) {\n      this.editedCells.splice(editIndex, 1);\n    }\n  }\n}; //default data editors\n\n\nEdit.prototype.editors = {\n  //input element\n  input: function input(cell, onRendered, success, cancel, editorParams) {\n    //create and style input\n    var cellValue = cell.getValue(),\n        input = document.createElement(\"input\");\n    input.setAttribute(\"type\", editorParams.search ? \"search\" : \"text\");\n    input.style.padding = \"4px\";\n    input.style.width = \"100%\";\n    input.style.boxSizing = \"border-box\";\n\n    if (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n      for (var key in editorParams.elementAttributes) {\n        if (key.charAt(0) == \"+\") {\n          key = key.slice(1);\n          input.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n        } else {\n          input.setAttribute(key, editorParams.elementAttributes[key]);\n        }\n      }\n    }\n\n    input.value = typeof cellValue !== \"undefined\" ? cellValue : \"\";\n    onRendered(function () {\n      input.focus({\n        preventScroll: true\n      });\n      input.style.height = \"100%\";\n    });\n\n    function onChange(e) {\n      if ((cellValue === null || typeof cellValue === \"undefined\") && input.value !== \"\" || input.value !== cellValue) {\n        if (success(input.value)) {\n          cellValue = input.value; //persist value if successfully validated incase editor is used as header filter\n        }\n      } else {\n        cancel();\n      }\n    } //submit new value on blur or change\n\n\n    input.addEventListener(\"change\", onChange);\n    input.addEventListener(\"blur\", onChange); //submit new value on enter\n\n    input.addEventListener(\"keydown\", function (e) {\n      switch (e.keyCode) {\n        // case 9:\n        case 13:\n          onChange(e);\n          break;\n\n        case 27:\n          cancel();\n          break;\n\n        case 35:\n        case 36:\n          e.stopPropagation();\n          break;\n      }\n    });\n\n    if (editorParams.mask) {\n      this.table.modules.edit.maskInput(input, editorParams);\n    }\n\n    return input;\n  },\n  //resizable text area element\n  textarea: function textarea(cell, onRendered, success, cancel, editorParams) {\n    var self = this,\n        cellValue = cell.getValue(),\n        vertNav = editorParams.verticalNavigation || \"hybrid\",\n        value = String(cellValue !== null && typeof cellValue !== \"undefined\" ? cellValue : \"\"),\n        count = (value.match(/(?:\\r\\n|\\r|\\n)/g) || []).length + 1,\n        input = document.createElement(\"textarea\"),\n        scrollHeight = 0; //create and style input\n\n    input.style.display = \"block\";\n    input.style.padding = \"2px\";\n    input.style.height = \"100%\";\n    input.style.width = \"100%\";\n    input.style.boxSizing = \"border-box\";\n    input.style.whiteSpace = \"pre-wrap\";\n    input.style.resize = \"none\";\n\n    if (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n      for (var key in editorParams.elementAttributes) {\n        if (key.charAt(0) == \"+\") {\n          key = key.slice(1);\n          input.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n        } else {\n          input.setAttribute(key, editorParams.elementAttributes[key]);\n        }\n      }\n    }\n\n    input.value = value;\n    onRendered(function () {\n      input.focus({\n        preventScroll: true\n      });\n      input.style.height = \"100%\";\n      input.scrollHeight;\n      input.style.height = input.scrollHeight + \"px\";\n      cell.getRow().normalizeHeight();\n    });\n\n    function onChange(e) {\n      if ((cellValue === null || typeof cellValue === \"undefined\") && input.value !== \"\" || input.value !== cellValue) {\n        if (success(input.value)) {\n          cellValue = input.value; //persist value if successfully validated incase editor is used as header filter\n        }\n\n        setTimeout(function () {\n          cell.getRow().normalizeHeight();\n        }, 300);\n      } else {\n        cancel();\n      }\n    } //submit new value on blur or change\n\n\n    input.addEventListener(\"change\", onChange);\n    input.addEventListener(\"blur\", onChange);\n    input.addEventListener(\"keyup\", function () {\n      input.style.height = \"\";\n      var heightNow = input.scrollHeight;\n      input.style.height = heightNow + \"px\";\n\n      if (heightNow != scrollHeight) {\n        scrollHeight = heightNow;\n        cell.getRow().normalizeHeight();\n      }\n    });\n    input.addEventListener(\"keydown\", function (e) {\n      switch (e.keyCode) {\n        case 27:\n          cancel();\n          break;\n\n        case 38:\n          //up arrow\n          if (vertNav == \"editor\" || vertNav == \"hybrid\" && input.selectionStart) {\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n          }\n\n          break;\n\n        case 40:\n          //down arrow\n          if (vertNav == \"editor\" || vertNav == \"hybrid\" && input.selectionStart !== input.value.length) {\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n          }\n\n          break;\n\n        case 35:\n        case 36:\n          e.stopPropagation();\n          break;\n      }\n    });\n\n    if (editorParams.mask) {\n      this.table.modules.edit.maskInput(input, editorParams);\n    }\n\n    return input;\n  },\n  //input element with type of number\n  number: function number(cell, onRendered, success, cancel, editorParams) {\n    var cellValue = cell.getValue(),\n        vertNav = editorParams.verticalNavigation || \"editor\",\n        input = document.createElement(\"input\");\n    input.setAttribute(\"type\", \"number\");\n\n    if (typeof editorParams.max != \"undefined\") {\n      input.setAttribute(\"max\", editorParams.max);\n    }\n\n    if (typeof editorParams.min != \"undefined\") {\n      input.setAttribute(\"min\", editorParams.min);\n    }\n\n    if (typeof editorParams.step != \"undefined\") {\n      input.setAttribute(\"step\", editorParams.step);\n    } //create and style input\n\n\n    input.style.padding = \"4px\";\n    input.style.width = \"100%\";\n    input.style.boxSizing = \"border-box\";\n\n    if (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n      for (var key in editorParams.elementAttributes) {\n        if (key.charAt(0) == \"+\") {\n          key = key.slice(1);\n          input.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n        } else {\n          input.setAttribute(key, editorParams.elementAttributes[key]);\n        }\n      }\n    }\n\n    input.value = cellValue;\n\n    var blurFunc = function blurFunc(e) {\n      onChange();\n    };\n\n    onRendered(function () {\n      //submit new value on blur\n      input.removeEventListener(\"blur\", blurFunc);\n      input.focus({\n        preventScroll: true\n      });\n      input.style.height = \"100%\"; //submit new value on blur\n\n      input.addEventListener(\"blur\", blurFunc);\n    });\n\n    function onChange() {\n      var value = input.value;\n\n      if (!isNaN(value) && value !== \"\") {\n        value = Number(value);\n      }\n\n      if (value !== cellValue) {\n        if (success(value)) {\n          cellValue = value; //persist value if successfully validated incase editor is used as header filter\n        }\n      } else {\n        cancel();\n      }\n    } //submit new value on enter\n\n\n    input.addEventListener(\"keydown\", function (e) {\n      switch (e.keyCode) {\n        case 13:\n          // case 9:\n          onChange();\n          break;\n\n        case 27:\n          cancel();\n          break;\n\n        case 38: //up arrow\n\n        case 40:\n          //down arrow\n          if (vertNav == \"editor\") {\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n          }\n\n          break;\n\n        case 35:\n        case 36:\n          e.stopPropagation();\n          break;\n      }\n    });\n\n    if (editorParams.mask) {\n      this.table.modules.edit.maskInput(input, editorParams);\n    }\n\n    return input;\n  },\n  //input element with type of number\n  range: function range(cell, onRendered, success, cancel, editorParams) {\n    var cellValue = cell.getValue(),\n        input = document.createElement(\"input\");\n    input.setAttribute(\"type\", \"range\");\n\n    if (typeof editorParams.max != \"undefined\") {\n      input.setAttribute(\"max\", editorParams.max);\n    }\n\n    if (typeof editorParams.min != \"undefined\") {\n      input.setAttribute(\"min\", editorParams.min);\n    }\n\n    if (typeof editorParams.step != \"undefined\") {\n      input.setAttribute(\"step\", editorParams.step);\n    } //create and style input\n\n\n    input.style.padding = \"4px\";\n    input.style.width = \"100%\";\n    input.style.boxSizing = \"border-box\";\n\n    if (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n      for (var key in editorParams.elementAttributes) {\n        if (key.charAt(0) == \"+\") {\n          key = key.slice(1);\n          input.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n        } else {\n          input.setAttribute(key, editorParams.elementAttributes[key]);\n        }\n      }\n    }\n\n    input.value = cellValue;\n    onRendered(function () {\n      input.focus({\n        preventScroll: true\n      });\n      input.style.height = \"100%\";\n    });\n\n    function onChange() {\n      var value = input.value;\n\n      if (!isNaN(value) && value !== \"\") {\n        value = Number(value);\n      }\n\n      if (value != cellValue) {\n        if (success(value)) {\n          cellValue = value; //persist value if successfully validated incase editor is used as header filter\n        }\n      } else {\n        cancel();\n      }\n    } //submit new value on blur\n\n\n    input.addEventListener(\"blur\", function (e) {\n      onChange();\n    }); //submit new value on enter\n\n    input.addEventListener(\"keydown\", function (e) {\n      switch (e.keyCode) {\n        case 13:\n          // case 9:\n          onChange();\n          break;\n\n        case 27:\n          cancel();\n          break;\n      }\n    });\n    return input;\n  },\n  //select\n  select: function select(cell, onRendered, success, cancel, editorParams) {\n    var _this51 = this;\n\n    var self = this,\n        cellEl = cell.getElement(),\n        initialValue = cell.getValue(),\n        vertNav = editorParams.verticalNavigation || \"editor\",\n        initialDisplayValue = typeof initialValue !== \"undefined\" || initialValue === null ? Array.isArray(initialValue) ? initialValue : [initialValue] : typeof editorParams.defaultValue !== \"undefined\" ? editorParams.defaultValue : [],\n        input = document.createElement(\"input\"),\n        listEl = document.createElement(\"div\"),\n        multiselect = editorParams.multiselect,\n        dataItems = [],\n        currentItem = {},\n        displayItems = [],\n        currentItems = [],\n        blurable = true,\n        blockListShow = false;\n\n    if (Array.isArray(editorParams) || !Array.isArray(editorParams) && (typeof editorParams === 'undefined' ? 'undefined' : _typeof(editorParams)) === \"object\" && !editorParams.values) {\n      console.warn(\"DEPRECATION WARNING - values for the select editor must now be passed into the values property of the editorParams object, not as the editorParams object\");\n      editorParams = {\n        values: editorParams\n      };\n    }\n\n    function getUniqueColumnValues(field) {\n      var output = {},\n          data = self.table.getData(),\n          column;\n\n      if (field) {\n        column = self.table.columnManager.getColumnByField(field);\n      } else {\n        column = cell.getColumn()._getSelf();\n      }\n\n      if (column) {\n        data.forEach(function (row) {\n          var val = column.getFieldValue(row);\n\n          if (val !== null && typeof val !== \"undefined\" && val !== \"\") {\n            output[val] = true;\n          }\n        });\n\n        if (editorParams.sortValuesList) {\n          if (editorParams.sortValuesList == \"asc\") {\n            output = Object.keys(output).sort();\n          } else {\n            output = Object.keys(output).sort().reverse();\n          }\n        } else {\n          output = Object.keys(output);\n        }\n      } else {\n        console.warn(\"unable to find matching column to create select lookup list:\", field);\n      }\n\n      return output;\n    }\n\n    function parseItems(inputValues, curentValues) {\n      var dataList = [];\n      var displayList = [];\n\n      function processComplexListItem(item) {\n        var item = {\n          label: item.label,\n          value: item.value,\n          itemParams: item.itemParams,\n          elementAttributes: item.elementAttributes,\n          element: false\n        }; // if(item.value === curentValue || (!isNaN(parseFloat(item.value)) && !isNaN(parseFloat(item.value)) && parseFloat(item.value) === parseFloat(curentValue))){\n        // \tsetCurrentItem(item);\n        // }\n\n        if (curentValues.indexOf(item.value) > -1) {\n          setItem(item);\n        }\n\n        dataList.push(item);\n        displayList.push(item);\n        return item;\n      }\n\n      if (typeof inputValues == \"function\") {\n        inputValues = inputValues(cell);\n      }\n\n      if (Array.isArray(inputValues)) {\n        inputValues.forEach(function (value) {\n          var item;\n\n          if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === \"object\") {\n            if (value.options) {\n              item = {\n                label: value.label,\n                group: true,\n                itemParams: value.itemParams,\n                elementAttributes: value.elementAttributes,\n                element: false\n              };\n              displayList.push(item);\n              value.options.forEach(function (item) {\n                processComplexListItem(item);\n              });\n            } else {\n              processComplexListItem(value);\n            }\n          } else {\n            item = {\n              label: value,\n              value: value,\n              element: false\n            }; // if(item.value === curentValue || (!isNaN(parseFloat(item.value)) && !isNaN(parseFloat(item.value)) && parseFloat(item.value) === parseFloat(curentValue))){\n            // \tsetCurrentItem(item);\n            // }\n\n            if (curentValues.indexOf(item.value) > -1) {\n              setItem(item);\n            }\n\n            dataList.push(item);\n            displayList.push(item);\n          }\n        });\n      } else {\n        for (var key in inputValues) {\n          var item = {\n            label: inputValues[key],\n            value: key,\n            element: false\n          }; // if(item.value === curentValue || (!isNaN(parseFloat(item.value)) && !isNaN(parseFloat(item.value)) && parseFloat(item.value) === parseFloat(curentValue))){\n          // \tsetCurrentItem(item);\n          // }\n\n          if (curentValues.indexOf(item.value) > -1) {\n            setItem(item);\n          }\n\n          dataList.push(item);\n          displayList.push(item);\n        }\n      }\n\n      dataItems = dataList;\n      displayItems = displayList;\n      fillList();\n    }\n\n    function fillList() {\n      while (listEl.firstChild) {\n        listEl.removeChild(listEl.firstChild);\n      }\n\n      displayItems.forEach(function (item) {\n        var el = item.element;\n\n        if (!el) {\n          el = document.createElement(\"div\");\n          item.label = editorParams.listItemFormatter ? editorParams.listItemFormatter(item.value, item.label, cell, el, item.itemParams) : item.label;\n\n          if (item.group) {\n            el.classList.add(\"tabulator-edit-select-list-group\");\n            el.tabIndex = 0;\n            el.innerHTML = item.label === \"\" ? \"&nbsp;\" : item.label;\n          } else {\n            el.classList.add(\"tabulator-edit-select-list-item\");\n            el.tabIndex = 0;\n            el.innerHTML = item.label === \"\" ? \"&nbsp;\" : item.label;\n            el.addEventListener(\"click\", function () {\n              blockListShow = true;\n              setTimeout(function () {\n                blockListShow = false;\n              }, 10); // setCurrentItem(item);\n              // chooseItem();\n\n              if (multiselect) {\n                toggleItem(item);\n                input.focus();\n              } else {\n                chooseItem(item);\n              }\n            }); // if(item === currentItem){\n            // \tel.classList.add(\"active\");\n            // }\n\n            if (currentItems.indexOf(item) > -1) {\n              el.classList.add(\"active\");\n            }\n          }\n\n          if (item.elementAttributes && _typeof(item.elementAttributes) == \"object\") {\n            for (var key in item.elementAttributes) {\n              if (key.charAt(0) == \"+\") {\n                key = key.slice(1);\n                el.setAttribute(key, input.getAttribute(key) + item.elementAttributes[\"+\" + key]);\n              } else {\n                el.setAttribute(key, item.elementAttributes[key]);\n              }\n            }\n          }\n\n          el.addEventListener(\"mousedown\", function () {\n            blurable = false;\n            setTimeout(function () {\n              blurable = true;\n            }, 10);\n          });\n          item.element = el;\n        }\n\n        listEl.appendChild(el);\n      });\n    }\n\n    function setCurrentItem(item, active) {\n      if (!multiselect && currentItem && currentItem.element) {\n        currentItem.element.classList.remove(\"active\");\n      }\n\n      if (currentItem && currentItem.element) {\n        currentItem.element.classList.remove(\"focused\");\n      }\n\n      currentItem = item;\n\n      if (item.element) {\n        item.element.classList.add(\"focused\");\n\n        if (active) {\n          item.element.classList.add(\"active\");\n        }\n      }\n    } // function chooseItem(){\n    // \thideList();\n    // \tif(initialValue !== currentItem.value){\n    // \t\tinitialValue = currentItem.value;\n    // \t\tsuccess(currentItem.value);\n    // \t}else{\n    // \t\tcancel();\n    // \t}\n    // }\n\n\n    function setItem(item) {\n      var index = currentItems.indexOf(item);\n\n      if (index == -1) {\n        currentItems.push(item);\n        setCurrentItem(item, true);\n      }\n\n      fillInput();\n    }\n\n    function unsetItem(index) {\n      var item = currentItems[index];\n\n      if (index > -1) {\n        currentItems.splice(index, 1);\n\n        if (item.element) {\n          item.element.classList.remove(\"active\");\n        }\n      }\n    }\n\n    function toggleItem(item) {\n      if (!item) {\n        item = currentItem;\n      }\n\n      var index = currentItems.indexOf(item);\n\n      if (index > -1) {\n        unsetItem(index);\n      } else {\n        if (multiselect !== true && currentItems.length >= multiselect) {\n          unsetItem(0);\n        }\n\n        setItem(item);\n      }\n\n      fillInput();\n    }\n\n    function chooseItem(item) {\n      hideList();\n\n      if (!item) {\n        item = currentItem;\n      }\n\n      if (item) {\n        input.value = item.label;\n        success(item.value);\n      }\n\n      initialDisplayValue = input.value;\n    }\n\n    function chooseItems(silent) {\n      if (!silent) {\n        hideList();\n      }\n\n      var output = [];\n      currentItems.forEach(function (item) {\n        output.push(item.value);\n      });\n      initialDisplayValue = input.value;\n      success(output);\n    }\n\n    function fillInput() {\n      var output = [];\n      currentItems.forEach(function (item) {\n        output.push(item.label);\n      });\n      input.value = output.join(\", \");\n\n      if (self.currentCell === false) {\n        chooseItems(true);\n      }\n    }\n\n    function unsetItems() {\n      var len = currentItems.length;\n\n      for (var _i9 = 0; _i9 < len; _i9++) {\n        unsetItem(0);\n      }\n    }\n\n    function cancelItem() {\n      hideList();\n      cancel();\n    }\n\n    function showList() {\n      currentItems = [];\n\n      if (!listEl.parentNode) {\n        if (editorParams.values === true) {\n          parseItems(getUniqueColumnValues(), initialDisplayValue);\n        } else if (typeof editorParams.values === \"string\") {\n          parseItems(getUniqueColumnValues(editorParams.values), initialDisplayValue);\n        } else {\n          parseItems(editorParams.values || [], initialDisplayValue);\n        }\n\n        var offset = Tabulator.prototype.helpers.elOffset(cellEl);\n        listEl.style.minWidth = cellEl.offsetWidth + \"px\";\n        listEl.style.top = offset.top + cellEl.offsetHeight + \"px\";\n        listEl.style.left = offset.left + \"px\";\n        listEl.addEventListener(\"mousedown\", function (e) {\n          blurable = false;\n          setTimeout(function () {\n            blurable = true;\n          }, 10);\n        });\n        document.body.appendChild(listEl);\n      }\n    }\n\n    function hideList() {\n      if (listEl.parentNode) {\n        listEl.parentNode.removeChild(listEl);\n      }\n\n      removeScrollListener();\n    }\n\n    function removeScrollListener() {\n      self.table.rowManager.element.removeEventListener(\"scroll\", cancelItem);\n    } //style input\n\n\n    input.setAttribute(\"type\", \"text\");\n    input.style.padding = \"4px\";\n    input.style.width = \"100%\";\n    input.style.boxSizing = \"border-box\";\n    input.style.cursor = \"default\";\n    input.readOnly = this.currentCell != false;\n\n    if (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n      for (var key in editorParams.elementAttributes) {\n        if (key.charAt(0) == \"+\") {\n          key = key.slice(1);\n          input.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n        } else {\n          input.setAttribute(key, editorParams.elementAttributes[key]);\n        }\n      }\n    }\n\n    input.value = typeof initialValue !== \"undefined\" || initialValue === null ? initialValue : \"\"; // if(editorParams.values === true){\n    // \tparseItems(getUniqueColumnValues(), initialValue);\n    // }else if(typeof editorParams.values === \"string\"){\n    // \tparseItems(getUniqueColumnValues(editorParams.values), initialValue);\n    // }else{\n    // \tparseItems(editorParams.values || [], initialValue);\n    // }\n\n    input.addEventListener(\"search\", function (e) {\n      if (!input.value) {\n        unsetItems();\n        chooseItems();\n      }\n    }); //allow key based navigation\n\n    input.addEventListener(\"keydown\", function (e) {\n      var index;\n\n      switch (e.keyCode) {\n        case 38:\n          //up arrow\n          index = dataItems.indexOf(currentItem);\n\n          if (vertNav == \"editor\" || vertNav == \"hybrid\" && index) {\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n            e.preventDefault();\n\n            if (index > 0) {\n              setCurrentItem(dataItems[index - 1], !multiselect);\n            }\n          }\n\n          break;\n\n        case 40:\n          //down arrow\n          index = dataItems.indexOf(currentItem);\n\n          if (vertNav == \"editor\" || vertNav == \"hybrid\" && index < dataItems.length - 1) {\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n            e.preventDefault();\n\n            if (index < dataItems.length - 1) {\n              if (index == -1) {\n                setCurrentItem(dataItems[0], !multiselect);\n              } else {\n                setCurrentItem(dataItems[index + 1], !multiselect);\n              }\n            }\n          }\n\n          break;\n\n        case 37: //left arrow\n\n        case 39:\n          //right arrow\n          e.stopImmediatePropagation();\n          e.stopPropagation();\n          e.preventDefault();\n          break;\n\n        case 13:\n          //enter\n          // chooseItem();\n          if (multiselect) {\n            toggleItem();\n          } else {\n            chooseItem();\n          }\n\n          break;\n\n        case 27:\n          //escape\n          cancelItem();\n          break;\n\n        case 9:\n          //tab\n          break;\n\n        default:\n          if (self.currentCell === false) {\n            e.preventDefault();\n          }\n\n      }\n    });\n    input.addEventListener(\"blur\", function (e) {\n      if (blurable) {\n        if (multiselect) {\n          chooseItems();\n        } else {\n          cancelItem();\n        }\n      }\n    });\n    input.addEventListener(\"focus\", function (e) {\n      if (!blockListShow) {\n        showList();\n      }\n    }); //style list element\n\n    listEl = document.createElement(\"div\");\n    listEl.classList.add(\"tabulator-edit-select-list\");\n    onRendered(function () {\n      input.style.height = \"100%\";\n      input.focus({\n        preventScroll: true\n      });\n    });\n    setTimeout(function () {\n      _this51.table.rowManager.element.addEventListener(\"scroll\", cancelItem);\n    }, 10);\n    return input;\n  },\n  //autocomplete\n  autocomplete: function autocomplete(cell, onRendered, success, cancel, editorParams) {\n    var _this52 = this;\n\n    var self = this,\n        cellEl = cell.getElement(),\n        initialValue = cell.getValue(),\n        vertNav = editorParams.verticalNavigation || \"editor\",\n        initialDisplayValue = typeof initialValue !== \"undefined\" || initialValue === null ? initialValue : typeof editorParams.defaultValue !== \"undefined\" ? editorParams.defaultValue : \"\",\n        input = document.createElement(\"input\"),\n        listEl = document.createElement(\"div\"),\n        allItems = [],\n        displayItems = [],\n        values = [],\n        currentItem = false,\n        blurable = true,\n        uniqueColumnValues = false; //style input\n\n    input.setAttribute(\"type\", \"search\");\n    input.style.padding = \"4px\";\n    input.style.width = \"100%\";\n    input.style.boxSizing = \"border-box\";\n\n    if (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n      for (var key in editorParams.elementAttributes) {\n        if (key.charAt(0) == \"+\") {\n          key = key.slice(1);\n          input.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n        } else {\n          input.setAttribute(key, editorParams.elementAttributes[key]);\n        }\n      }\n    } //style list element\n\n\n    listEl.classList.add(\"tabulator-edit-select-list\");\n    listEl.addEventListener(\"mousedown\", function (e) {\n      blurable = false;\n      setTimeout(function () {\n        blurable = true;\n      }, 10);\n    });\n\n    function genUniqueColumnValues() {\n      if (editorParams.values === true) {\n        uniqueColumnValues = getUniqueColumnValues();\n      } else if (typeof editorParams.values === \"string\") {\n        uniqueColumnValues = getUniqueColumnValues(editorParams.values);\n      }\n    }\n\n    function getUniqueColumnValues(field) {\n      var output = {},\n          data = self.table.getData(),\n          column;\n\n      if (field) {\n        column = self.table.columnManager.getColumnByField(field);\n      } else {\n        column = cell.getColumn()._getSelf();\n      }\n\n      if (column) {\n        data.forEach(function (row) {\n          var val = column.getFieldValue(row);\n\n          if (val !== null && typeof val !== \"undefined\" && val !== \"\") {\n            output[val] = true;\n          }\n        });\n\n        if (editorParams.sortValuesList) {\n          if (editorParams.sortValuesList == \"asc\") {\n            output = Object.keys(output).sort();\n          } else {\n            output = Object.keys(output).sort().reverse();\n          }\n        } else {\n          output = Object.keys(output);\n        }\n      } else {\n        console.warn(\"unable to find matching column to create autocomplete lookup list:\", field);\n      }\n\n      return output;\n    }\n\n    function filterList(term, intialLoad) {\n      var matches = [],\n          values,\n          items,\n          searchEl; //lookup base values list\n\n      if (uniqueColumnValues) {\n        values = uniqueColumnValues;\n      } else {\n        values = editorParams.values || [];\n      }\n\n      if (editorParams.searchFunc) {\n        matches = editorParams.searchFunc(term, values);\n\n        if (matches instanceof Promise) {\n          addNotice(typeof editorParams.searchingPlaceholder !== \"undefined\" ? editorParams.searchingPlaceholder : \"Searching...\");\n          matches.then(function (result) {\n            fillListIfNotEmpty(parseItems(result), intialLoad);\n          }).catch(function (err) {\n            console.err(\"error in autocomplete search promise:\", err);\n          });\n        } else {\n          fillListIfNotEmpty(parseItems(matches), intialLoad);\n        }\n      } else {\n        items = parseItems(values);\n\n        if (term === \"\") {\n          if (editorParams.showListOnEmpty) {\n            matches = items;\n          }\n        } else {\n          items.forEach(function (item) {\n            if (item.value !== null || typeof item.value !== \"undefined\") {\n              if (String(item.value).toLowerCase().indexOf(String(term).toLowerCase()) > -1 || String(item.title).toLowerCase().indexOf(String(term).toLowerCase()) > -1) {\n                matches.push(item);\n              }\n            }\n          });\n        }\n\n        fillListIfNotEmpty(matches, intialLoad);\n      }\n    }\n\n    function addNotice(notice) {\n      var searchEl = document.createElement(\"div\");\n      clearList();\n\n      if (notice !== false) {\n        searchEl.classList.add(\"tabulator-edit-select-list-notice\");\n        searchEl.tabIndex = 0;\n\n        if (notice instanceof Node) {\n          searchEl.appendChild(notice);\n        } else {\n          searchEl.innerHTML = notice;\n        }\n\n        listEl.appendChild(searchEl);\n      }\n    }\n\n    function parseItems(inputValues) {\n      var itemList = [];\n\n      if (Array.isArray(inputValues)) {\n        inputValues.forEach(function (value) {\n          var item = {};\n\n          if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === \"object\") {\n            item.title = editorParams.listItemFormatter ? editorParams.listItemFormatter(value.value, value.label) : value.label;\n            item.value = value.value;\n          } else {\n            item.title = editorParams.listItemFormatter ? editorParams.listItemFormatter(value, value) : value;\n            item.value = value;\n          }\n\n          itemList.push(item);\n        });\n      } else {\n        for (var key in inputValues) {\n          var item = {\n            title: editorParams.listItemFormatter ? editorParams.listItemFormatter(key, inputValues[key]) : inputValues[key],\n            value: key\n          };\n          itemList.push(item);\n        }\n      }\n\n      return itemList;\n    }\n\n    function clearList() {\n      while (listEl.firstChild) {\n        listEl.removeChild(listEl.firstChild);\n      }\n    }\n\n    function fillListIfNotEmpty(items, intialLoad) {\n      if (items.length) {\n        fillList(items, intialLoad);\n      } else {\n        if (editorParams.emptyPlaceholder) {\n          addNotice(editorParams.emptyPlaceholder);\n        }\n      }\n    }\n\n    function fillList(items, intialLoad) {\n      var current = false;\n      clearList();\n      displayItems = items;\n      displayItems.forEach(function (item) {\n        var el = item.element;\n\n        if (!el) {\n          el = document.createElement(\"div\");\n          el.classList.add(\"tabulator-edit-select-list-item\");\n          el.tabIndex = 0;\n          el.innerHTML = item.title;\n          el.addEventListener(\"click\", function (e) {\n            setCurrentItem(item);\n            chooseItem();\n          });\n          el.addEventListener(\"mousedown\", function (e) {\n            blurable = false;\n            setTimeout(function () {\n              blurable = true;\n            }, 10);\n          });\n          item.element = el;\n\n          if (intialLoad && item.value == initialValue) {\n            input.value = item.title;\n            item.element.classList.add(\"active\");\n            current = true;\n          }\n\n          if (item === currentItem) {\n            item.element.classList.add(\"active\");\n            current = true;\n          }\n        }\n\n        listEl.appendChild(el);\n      });\n\n      if (!current) {\n        setCurrentItem(false);\n      }\n    }\n\n    function chooseItem() {\n      hideList();\n\n      if (currentItem) {\n        if (initialValue !== currentItem.value) {\n          initialValue = currentItem.value;\n          input.value = currentItem.title;\n          success(currentItem.value);\n        } else {\n          cancel();\n        }\n      } else {\n        if (editorParams.freetext) {\n          initialValue = input.value;\n          success(input.value);\n        } else {\n          if (editorParams.allowEmpty && input.value === \"\") {\n            initialValue = input.value;\n            success(input.value);\n          } else {\n            cancel();\n          }\n        }\n      }\n    }\n\n    function showList() {\n      if (!listEl.parentNode) {\n        while (listEl.firstChild) {\n          listEl.removeChild(listEl.firstChild);\n        }\n\n        var offset = Tabulator.prototype.helpers.elOffset(cellEl);\n        listEl.style.minWidth = cellEl.offsetWidth + \"px\";\n        listEl.style.top = offset.top + cellEl.offsetHeight + \"px\";\n        listEl.style.left = offset.left + \"px\";\n        document.body.appendChild(listEl);\n      }\n    }\n\n    function setCurrentItem(item, showInputValue) {\n      if (currentItem && currentItem.element) {\n        currentItem.element.classList.remove(\"active\");\n      }\n\n      currentItem = item;\n\n      if (item && item.element) {\n        item.element.classList.add(\"active\");\n      }\n    }\n\n    function hideList() {\n      if (listEl.parentNode) {\n        listEl.parentNode.removeChild(listEl);\n      }\n\n      removeScrollListener();\n    }\n\n    function cancelItem() {\n      hideList();\n      cancel();\n    }\n\n    function removeScrollListener() {\n      self.table.rowManager.element.removeEventListener(\"scroll\", cancelItem);\n    } //allow key based navigation\n\n\n    input.addEventListener(\"keydown\", function (e) {\n      var index;\n\n      switch (e.keyCode) {\n        case 38:\n          //up arrow\n          index = displayItems.indexOf(currentItem);\n\n          if (vertNav == \"editor\" || vertNav == \"hybrid\" && index) {\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n            e.preventDefault();\n\n            if (index > 0) {\n              setCurrentItem(displayItems[index - 1]);\n            } else {\n              setCurrentItem(false);\n            }\n          }\n\n          break;\n\n        case 40:\n          //down arrow\n          index = displayItems.indexOf(currentItem);\n\n          if (vertNav == \"editor\" || vertNav == \"hybrid\" && index < displayItems.length - 1) {\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n            e.preventDefault();\n\n            if (index < displayItems.length - 1) {\n              if (index == -1) {\n                setCurrentItem(displayItems[0]);\n              } else {\n                setCurrentItem(displayItems[index + 1]);\n              }\n            }\n          }\n\n          break;\n\n        case 37: //left arrow\n\n        case 39:\n          //right arrow\n          e.stopImmediatePropagation();\n          e.stopPropagation(); // e.preventDefault();\n\n          break;\n\n        case 13:\n          //enter\n          chooseItem();\n          break;\n\n        case 27:\n          //escape\n          cancelItem();\n          break;\n\n        case 36: //home\n\n        case 35:\n          //end\n          //prevent table navigation while using input element\n          e.stopImmediatePropagation();\n          break;\n      }\n    });\n    input.addEventListener(\"keyup\", function (e) {\n      switch (e.keyCode) {\n        case 38: //up arrow\n\n        case 37: //left arrow\n\n        case 39: //up arrow\n\n        case 40: //right arrow\n\n        case 13: //enter\n\n        case 27:\n          //escape\n          break;\n\n        default:\n          filterList(input.value);\n      }\n    });\n    input.addEventListener(\"search\", function (e) {\n      filterList(input.value);\n    });\n    input.addEventListener(\"blur\", function (e) {\n      if (blurable) {\n        chooseItem();\n      }\n    });\n    input.addEventListener(\"focus\", function (e) {\n      var value = initialDisplayValue;\n      genUniqueColumnValues();\n      showList();\n      input.value = value;\n      filterList(value, true);\n    });\n    onRendered(function () {\n      input.style.height = \"100%\";\n      input.focus({\n        preventScroll: true\n      });\n    });\n\n    if (editorParams.mask) {\n      this.table.modules.edit.maskInput(input, editorParams);\n    }\n\n    setTimeout(function () {\n      _this52.table.rowManager.element.addEventListener(\"scroll\", cancelItem);\n    }, 10);\n    genUniqueColumnValues();\n    input.value = initialDisplayValue;\n    filterList(initialDisplayValue, true);\n    return input;\n  },\n  //star rating\n  star: function star(cell, onRendered, success, cancel, editorParams) {\n    var self = this,\n        element = cell.getElement(),\n        value = cell.getValue(),\n        maxStars = element.getElementsByTagName(\"svg\").length || 5,\n        size = element.getElementsByTagName(\"svg\")[0] ? element.getElementsByTagName(\"svg\")[0].getAttribute(\"width\") : 14,\n        stars = [],\n        starsHolder = document.createElement(\"div\"),\n        star = document.createElementNS('http://www.w3.org/2000/svg', \"svg\"); //change star type\n\n    function starChange(val) {\n      stars.forEach(function (star, i) {\n        if (i < val) {\n          if (self.table.browser == \"ie\") {\n            star.setAttribute(\"class\", \"tabulator-star-active\");\n          } else {\n            star.classList.replace(\"tabulator-star-inactive\", \"tabulator-star-active\");\n          }\n\n          star.innerHTML = '<polygon fill=\"#488CE9\" stroke=\"#014AAE\" stroke-width=\"37.6152\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 \"/>';\n        } else {\n          if (self.table.browser == \"ie\") {\n            star.setAttribute(\"class\", \"tabulator-star-inactive\");\n          } else {\n            star.classList.replace(\"tabulator-star-active\", \"tabulator-star-inactive\");\n          }\n\n          star.innerHTML = '<polygon fill=\"#010155\" stroke=\"#686868\" stroke-width=\"37.6152\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 \"/>';\n        }\n      });\n    } //build stars\n\n\n    function buildStar(i) {\n      var starHolder = document.createElement(\"span\");\n      var nextStar = star.cloneNode(true);\n      stars.push(nextStar);\n      starHolder.addEventListener(\"mouseenter\", function (e) {\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n        starChange(i);\n      });\n      starHolder.addEventListener(\"mousemove\", function (e) {\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n      });\n      starHolder.addEventListener(\"click\", function (e) {\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n        success(i);\n        element.blur();\n      });\n      starHolder.appendChild(nextStar);\n      starsHolder.appendChild(starHolder);\n    } //handle keyboard navigation value change\n\n\n    function changeValue(val) {\n      value = val;\n      starChange(val);\n    } //style cell\n\n\n    element.style.whiteSpace = \"nowrap\";\n    element.style.overflow = \"hidden\";\n    element.style.textOverflow = \"ellipsis\"; //style holding element\n\n    starsHolder.style.verticalAlign = \"middle\";\n    starsHolder.style.display = \"inline-block\";\n    starsHolder.style.padding = \"4px\"; //style star\n\n    star.setAttribute(\"width\", size);\n    star.setAttribute(\"height\", size);\n    star.setAttribute(\"viewBox\", \"0 0 512 512\");\n    star.setAttribute(\"xml:space\", \"preserve\");\n    star.style.padding = \"0 1px\";\n\n    if (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n      for (var key in editorParams.elementAttributes) {\n        if (key.charAt(0) == \"+\") {\n          key = key.slice(1);\n          starsHolder.setAttribute(key, starsHolder.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n        } else {\n          starsHolder.setAttribute(key, editorParams.elementAttributes[key]);\n        }\n      }\n    } //create correct number of stars\n\n\n    for (var i = 1; i <= maxStars; i++) {\n      buildStar(i);\n    } //ensure value does not exceed number of stars\n\n\n    value = Math.min(parseInt(value), maxStars); // set initial styling of stars\n\n    starChange(value);\n    starsHolder.addEventListener(\"mousemove\", function (e) {\n      starChange(0);\n    });\n    starsHolder.addEventListener(\"click\", function (e) {\n      success(0);\n    });\n    element.addEventListener(\"blur\", function (e) {\n      cancel();\n    }); //allow key based navigation\n\n    element.addEventListener(\"keydown\", function (e) {\n      switch (e.keyCode) {\n        case 39:\n          //right arrow\n          changeValue(value + 1);\n          break;\n\n        case 37:\n          //left arrow\n          changeValue(value - 1);\n          break;\n\n        case 13:\n          //enter\n          success(value);\n          break;\n\n        case 27:\n          //escape\n          cancel();\n          break;\n      }\n    });\n    return starsHolder;\n  },\n  //draggable progress bar\n  progress: function progress(cell, onRendered, success, cancel, editorParams) {\n    var element = cell.getElement(),\n        max = typeof editorParams.max === \"undefined\" ? element.getElementsByTagName(\"div\")[0].getAttribute(\"max\") || 100 : editorParams.max,\n        min = typeof editorParams.min === \"undefined\" ? element.getElementsByTagName(\"div\")[0].getAttribute(\"min\") || 0 : editorParams.min,\n        percent = (max - min) / 100,\n        value = cell.getValue() || 0,\n        handle = document.createElement(\"div\"),\n        bar = document.createElement(\"div\"),\n        mouseDrag,\n        mouseDragWidth; //set new value\n\n    function updateValue() {\n      var calcVal = percent * Math.round(bar.offsetWidth / (element.clientWidth / 100)) + min;\n      success(calcVal);\n      element.setAttribute(\"aria-valuenow\", calcVal);\n      element.setAttribute(\"aria-label\", value);\n    } //style handle\n\n\n    handle.style.position = \"absolute\";\n    handle.style.right = \"0\";\n    handle.style.top = \"0\";\n    handle.style.bottom = \"0\";\n    handle.style.width = \"5px\";\n    handle.classList.add(\"tabulator-progress-handle\"); //style bar\n\n    bar.style.display = \"inline-block\";\n    bar.style.position = \"relative\"; // bar.style.top = \"8px\";\n    // bar.style.bottom = \"8px\";\n    // bar.style.left = \"4px\";\n    // bar.style.marginRight = \"4px\";\n\n    bar.style.height = \"100%\";\n    bar.style.backgroundColor = \"#488CE9\";\n    bar.style.maxWidth = \"100%\";\n    bar.style.minWidth = \"0%\";\n\n    if (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n      for (var key in editorParams.elementAttributes) {\n        if (key.charAt(0) == \"+\") {\n          key = key.slice(1);\n          bar.setAttribute(key, bar.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n        } else {\n          bar.setAttribute(key, editorParams.elementAttributes[key]);\n        }\n      }\n    } //style cell\n\n\n    element.style.padding = \"4px 4px\"; //make sure value is in range\n\n    value = Math.min(parseFloat(value), max);\n    value = Math.max(parseFloat(value), min); //workout percentage\n\n    value = Math.round((value - min) / percent); // bar.style.right = value + \"%\";\n\n    bar.style.width = value + \"%\";\n    element.setAttribute(\"aria-valuemin\", min);\n    element.setAttribute(\"aria-valuemax\", max);\n    bar.appendChild(handle);\n    handle.addEventListener(\"mousedown\", function (e) {\n      mouseDrag = e.screenX;\n      mouseDragWidth = bar.offsetWidth;\n    });\n    handle.addEventListener(\"mouseover\", function () {\n      handle.style.cursor = \"ew-resize\";\n    });\n    element.addEventListener(\"mousemove\", function (e) {\n      if (mouseDrag) {\n        bar.style.width = mouseDragWidth + e.screenX - mouseDrag + \"px\";\n      }\n    });\n    element.addEventListener(\"mouseup\", function (e) {\n      if (mouseDrag) {\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n        mouseDrag = false;\n        mouseDragWidth = false;\n        updateValue();\n      }\n    }); //allow key based navigation\n\n    element.addEventListener(\"keydown\", function (e) {\n      switch (e.keyCode) {\n        case 39:\n          //right arrow\n          e.preventDefault();\n          bar.style.width = bar.clientWidth + element.clientWidth / 100 + \"px\";\n          break;\n\n        case 37:\n          //left arrow\n          e.preventDefault();\n          bar.style.width = bar.clientWidth - element.clientWidth / 100 + \"px\";\n          break;\n\n        case 9: //tab\n\n        case 13:\n          //enter\n          updateValue();\n          break;\n\n        case 27:\n          //escape\n          cancel();\n          break;\n      }\n    });\n    element.addEventListener(\"blur\", function () {\n      cancel();\n    });\n    return bar;\n  },\n  //checkbox\n  tickCross: function tickCross(cell, onRendered, success, cancel, editorParams) {\n    var value = cell.getValue(),\n        input = document.createElement(\"input\"),\n        tristate = editorParams.tristate,\n        indetermValue = typeof editorParams.indeterminateValue === \"undefined\" ? null : editorParams.indeterminateValue,\n        indetermState = false;\n    input.setAttribute(\"type\", \"checkbox\");\n    input.style.marginTop = \"5px\";\n    input.style.boxSizing = \"border-box\";\n\n    if (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n      for (var key in editorParams.elementAttributes) {\n        if (key.charAt(0) == \"+\") {\n          key = key.slice(1);\n          input.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n        } else {\n          input.setAttribute(key, editorParams.elementAttributes[key]);\n        }\n      }\n    }\n\n    input.value = value;\n\n    if (tristate && (typeof value === \"undefined\" || value === indetermValue || value === \"\")) {\n      indetermState = true;\n      input.indeterminate = true;\n    }\n\n    if (this.table.browser != \"firefox\") {\n      //prevent blur issue on mac firefox\n      onRendered(function () {\n        input.focus({\n          preventScroll: true\n        });\n      });\n    }\n\n    input.checked = value === true || value === \"true\" || value === \"True\" || value === 1;\n    onRendered(function () {\n      input.focus();\n    });\n\n    function setValue(blur) {\n      if (tristate) {\n        if (!blur) {\n          if (input.checked && !indetermState) {\n            input.checked = false;\n            input.indeterminate = true;\n            indetermState = true;\n            return indetermValue;\n          } else {\n            indetermState = false;\n            return input.checked;\n          }\n        } else {\n          if (indetermState) {\n            return indetermValue;\n          } else {\n            return input.checked;\n          }\n        }\n      } else {\n        return input.checked;\n      }\n    } //submit new value on blur\n\n\n    input.addEventListener(\"change\", function (e) {\n      success(setValue());\n    });\n    input.addEventListener(\"blur\", function (e) {\n      success(setValue(true));\n    }); //submit new value on enter\n\n    input.addEventListener(\"keydown\", function (e) {\n      if (e.keyCode == 13) {\n        success(setValue());\n      }\n\n      if (e.keyCode == 27) {\n        cancel();\n      }\n    });\n    return input;\n  }\n};\nTabulator.prototype.registerModule(\"edit\", Edit);\n\nvar ExportRow = function ExportRow(type, columns, component, indent) {\n  this.type = type;\n  this.columns = columns;\n  this.component = component || false;\n  this.indent = indent || 0;\n};\n\nvar ExportColumn = function ExportColumn(value, component, width, height, depth) {\n  this.value = value;\n  this.component = component || false;\n  this.width = width;\n  this.height = height;\n  this.depth = depth;\n};\n\nvar Export = function Export(table) {\n  this.table = table; //hold Tabulator object\n\n  this.config = {};\n  this.cloneTableStyle = true;\n  this.colVisProp = \"\";\n};\n\nExport.prototype.generateExportList = function (config, style, range, colVisProp) {\n  this.cloneTableStyle = style;\n  this.config = config || {};\n  this.colVisProp = colVisProp;\n  var headers = this.config.columnHeaders !== false ? this.headersToExportRows(this.generateColumnGroupHeaders()) : [];\n  var body = this.bodyToExportRows(this.rowLookup(range));\n  return headers.concat(body);\n};\n\nExport.prototype.genereateTable = function (config, style, range, colVisProp) {\n  var list = this.generateExportList(config, style, range, colVisProp);\n  return this.genereateTableElement(list);\n};\n\nExport.prototype.rowLookup = function (range) {\n  var _this53 = this;\n\n  var rows = [];\n\n  if (typeof range == \"function\") {\n    range.call(this.table).forEach(function (row) {\n      row = _this53.table.rowManager.findRow(row);\n\n      if (row) {\n        rows.push(row);\n      }\n    });\n  } else {\n    switch (range) {\n      case true:\n      case \"visible\":\n        rows = this.table.rowManager.getVisibleRows(true);\n        break;\n\n      case \"all\":\n        rows = this.table.rowManager.rows;\n        break;\n\n      case \"selected\":\n        rows = this.table.modules.selectRow.selectedRows;\n        break;\n\n      case \"active\":\n      default:\n        if (this.table.options.pagination) {\n          rows = this.table.rowManager.getDisplayRows(this.table.rowManager.displayRows.length - 2);\n        } else {\n          rows = this.table.rowManager.getDisplayRows();\n        }\n\n    }\n  }\n\n  return Object.assign([], rows);\n};\n\nExport.prototype.generateColumnGroupHeaders = function () {\n  var _this54 = this;\n\n  var output = [];\n  var columns = this.config.columnGroups !== false ? this.table.columnManager.columns : this.table.columnManager.columnsByIndex;\n  columns.forEach(function (column) {\n    var colData = _this54.processColumnGroup(column);\n\n    if (colData) {\n      output.push(colData);\n    }\n  });\n  return output;\n};\n\nExport.prototype.processColumnGroup = function (column) {\n  var _this55 = this;\n\n  var subGroups = column.columns,\n      maxDepth = 0,\n      title = column.definition[\"title\" + (this.colVisProp.charAt(0).toUpperCase() + this.colVisProp.slice(1))] || column.definition.title;\n  var groupData = {\n    title: title,\n    column: column,\n    depth: 1\n  };\n\n  if (subGroups.length) {\n    groupData.subGroups = [];\n    groupData.width = 0;\n    subGroups.forEach(function (subGroup) {\n      var subGroupData = _this55.processColumnGroup(subGroup);\n\n      if (subGroupData) {\n        groupData.width += subGroupData.width;\n        groupData.subGroups.push(subGroupData);\n\n        if (subGroupData.depth > maxDepth) {\n          maxDepth = subGroupData.depth;\n        }\n      }\n    });\n    groupData.depth += maxDepth;\n\n    if (!groupData.width) {\n      return false;\n    }\n  } else {\n    if (this.columnVisCheck(column)) {\n      groupData.width = 1;\n    } else {\n      return false;\n    }\n  }\n\n  return groupData;\n};\n\nExport.prototype.columnVisCheck = function (column) {\n  return column.definition[this.colVisProp] !== false && (column.visible || !column.visible && column.definition[this.colVisProp]);\n};\n\nExport.prototype.headersToExportRows = function (columns) {\n  var headers = [],\n      headerDepth = 0,\n      exportRows = [];\n\n  function parseColumnGroup(column, level) {\n    var depth = headerDepth - level;\n\n    if (typeof headers[level] === \"undefined\") {\n      headers[level] = [];\n    }\n\n    column.height = column.subGroups ? 1 : depth - column.depth + 1;\n    headers[level].push(column);\n\n    if (column.height > 1) {\n      for (var _i10 = 1; _i10 < column.height; _i10++) {\n        if (typeof headers[level + _i10] === \"undefined\") {\n          headers[level + _i10] = [];\n        }\n\n        headers[level + _i10].push(false);\n      }\n    }\n\n    if (column.width > 1) {\n      for (var _i11 = 1; _i11 < column.width; _i11++) {\n        headers[level].push(false);\n      }\n    }\n\n    if (column.subGroups) {\n      column.subGroups.forEach(function (subGroup) {\n        parseColumnGroup(subGroup, level + 1);\n      });\n    }\n  } //calculate maximum header debth\n\n\n  columns.forEach(function (column) {\n    if (column.depth > headerDepth) {\n      headerDepth = column.depth;\n    }\n  });\n  columns.forEach(function (column) {\n    parseColumnGroup(column, 0);\n  });\n  headers.forEach(function (header) {\n    var columns = [];\n    header.forEach(function (col) {\n      if (col) {\n        columns.push(new ExportColumn(col.title, col.column.getComponent(), col.width, col.height, col.depth));\n      } else {\n        columns.push(null);\n      }\n    });\n    exportRows.push(new ExportRow(\"header\", columns));\n  });\n  return exportRows;\n};\n\nExport.prototype.bodyToExportRows = function (rows) {\n  var _this56 = this;\n\n  var columns = [];\n  var exportRows = [];\n  this.table.columnManager.columnsByIndex.forEach(function (column) {\n    if (_this56.columnVisCheck(column)) {\n      columns.push(column.getComponent());\n    }\n  });\n\n  if (this.config.columnCalcs !== false && this.table.modExists(\"columnCalcs\")) {\n    if (this.table.modules.columnCalcs.topInitialized) {\n      rows.unshift(this.table.modules.columnCalcs.topRow);\n    }\n\n    if (this.table.modules.columnCalcs.botInitialized) {\n      rows.push(this.table.modules.columnCalcs.botRow);\n    }\n  }\n\n  rows = rows.filter(function (row) {\n    switch (row.type) {\n      case \"group\":\n        return _this56.config.rowGroups !== false;\n        break;\n\n      case \"calc\":\n        return _this56.config.columnCalcs !== false;\n        break;\n\n      case \"row\":\n        return !(_this56.table.options.dataTree && _this56.config.dataTree === false && row.modules.dataTree.parent);\n        break;\n    }\n\n    return true;\n  });\n  rows.forEach(function (row, i) {\n    var rowData = row.getData(_this56.colVisProp);\n    var exportCols = [];\n    var indent = 0;\n\n    switch (row.type) {\n      case \"group\":\n        indent = row.level;\n        exportCols.push(new ExportColumn(row.key, row.getComponent(), columns.length, 1));\n        break;\n\n      case \"calc\":\n      case \"row\":\n        columns.forEach(function (col) {\n          exportCols.push(new ExportColumn(col._column.getFieldValue(rowData), col, 1, 1));\n        });\n\n        if (_this56.table.options.dataTree && _this56.config.dataTree !== false) {\n          indent = row.modules.dataTree.index;\n        }\n\n        break;\n    }\n\n    exportRows.push(new ExportRow(row.type, exportCols, row.getComponent(), indent));\n  });\n  return exportRows;\n};\n\nExport.prototype.genereateTableElement = function (list) {\n  var _this57 = this;\n\n  var table = document.createElement(\"table\"),\n      headerEl = document.createElement(\"thead\"),\n      bodyEl = document.createElement(\"tbody\"),\n      styles = this.lookupTableStyles(),\n      rowFormatter = this.table.options[\"rowFormatter\" + (this.colVisProp.charAt(0).toUpperCase() + this.colVisProp.slice(1))],\n      setup = {};\n  setup.rowFormatter = rowFormatter !== null ? rowFormatter : this.table.options.rowFormatter;\n\n  if (this.table.options.dataTree && this.config.dataTree !== false && this.table.modExists(\"columnCalcs\")) {\n    setup.treeElementField = this.table.modules.dataTree.elementField;\n  } //assign group header formatter\n\n\n  setup.groupHeader = this.table.options[\"groupHeader\" + (this.colVisProp.charAt(0).toUpperCase() + this.colVisProp.slice(1))];\n\n  if (setup.groupHeader && !Array.isArray(setup.groupHeader)) {\n    setup.groupHeader = [setup.groupHeader];\n  }\n\n  table.classList.add(\"tabulator-print-table\");\n  this.mapElementStyles(this.table.columnManager.getHeadersElement(), headerEl, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"background-color\", \"color\", \"font-weight\", \"font-family\", \"font-size\"]);\n\n  if (list.length > 1000) {\n    console.warn(\"It may take a long time to render an HTML table with more than 1000 rows\");\n  }\n\n  list.forEach(function (row, i) {\n    switch (row.type) {\n      case \"header\":\n        headerEl.appendChild(_this57.genereateHeaderElement(row, setup, styles));\n        break;\n\n      case \"group\":\n        bodyEl.appendChild(_this57.genereateGroupElement(row, setup, styles));\n        break;\n\n      case \"calc\":\n        bodyEl.appendChild(_this57.genereateCalcElement(row, setup, styles));\n        break;\n\n      case \"row\":\n        var rowEl = _this57.genereateRowElement(row, setup, styles);\n\n        _this57.mapElementStyles(i % 2 && styles.evenRow ? styles.evenRow : styles.oddRow, rowEl, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"color\", \"font-weight\", \"font-family\", \"font-size\", \"background-color\"]);\n\n        bodyEl.appendChild(rowEl);\n        break;\n    }\n  });\n\n  if (headerEl.innerHTML) {\n    table.appendChild(headerEl);\n  }\n\n  table.appendChild(bodyEl);\n  this.mapElementStyles(this.table.element, table, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\"]);\n  return table;\n};\n\nExport.prototype.lookupTableStyles = function () {\n  var styles = {}; //lookup row styles\n\n  if (this.cloneTableStyle && window.getComputedStyle) {\n    styles.oddRow = this.table.element.querySelector(\".tabulator-row-odd:not(.tabulator-group):not(.tabulator-calcs)\");\n    styles.evenRow = this.table.element.querySelector(\".tabulator-row-even:not(.tabulator-group):not(.tabulator-calcs)\");\n    styles.calcRow = this.table.element.querySelector(\".tabulator-row.tabulator-calcs\");\n    styles.firstRow = this.table.element.querySelector(\".tabulator-row:not(.tabulator-group):not(.tabulator-calcs)\");\n    styles.firstGroup = this.table.element.getElementsByClassName(\"tabulator-group\")[0];\n\n    if (styles.firstRow) {\n      styles.styleCells = styles.firstRow.getElementsByClassName(\"tabulator-cell\");\n      styles.firstCell = styles.styleCells[0];\n      styles.lastCell = styles.styleCells[styles.styleCells.length - 1];\n    }\n  }\n\n  return styles;\n};\n\nExport.prototype.genereateHeaderElement = function (row, setup, styles) {\n  var _this58 = this;\n\n  var rowEl = document.createElement(\"tr\");\n  row.columns.forEach(function (column) {\n    if (column) {\n      var cellEl = document.createElement(\"th\");\n      var classNames = column.component._column.definition.cssClass ? column.component._column.definition.cssClass.split(\" \") : [];\n      cellEl.colSpan = column.width;\n      cellEl.rowSpan = column.height;\n      cellEl.innerHTML = column.value;\n\n      if (_this58.cloneTableStyle) {\n        cellEl.style.boxSizing = \"border-box\";\n      }\n\n      classNames.forEach(function (className) {\n        cellEl.classList.add(className);\n      });\n\n      _this58.mapElementStyles(column.component.getElement(), cellEl, [\"text-align\", \"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"background-color\", \"color\", \"font-weight\", \"font-family\", \"font-size\"]);\n\n      _this58.mapElementStyles(column.component._column.contentElement, cellEl, [\"padding-top\", \"padding-left\", \"padding-right\", \"padding-bottom\"]);\n\n      if (column.component._column.visible) {\n        _this58.mapElementStyles(column.component.getElement(), cellEl, [\"width\"]);\n      } else {\n        if (column.component._column.definition.width) {\n          cellEl.style.width = column.component._column.definition.width + \"px\";\n        }\n      }\n\n      if (column.component._column.parent) {\n        _this58.mapElementStyles(column.component._column.parent.groupElement, cellEl, [\"border-top\"]);\n      }\n\n      rowEl.appendChild(cellEl);\n    }\n  });\n  return rowEl;\n};\n\nExport.prototype.genereateGroupElement = function (row, setup, styles) {\n  var rowEl = document.createElement(\"tr\"),\n      cellEl = document.createElement(\"td\"),\n      group = row.columns[0];\n  rowEl.classList.add(\"tabulator-print-table-row\");\n\n  if (setup.groupHeader && setup.groupHeader[row.indent]) {\n    group.value = setup.groupHeader[row.indent](group.value, row.component._group.getRowCount(), row.component._group.getData(), row.component);\n  } else {\n    if (setup.groupHeader === false) {\n      group.value = group.value;\n    } else {\n      group.value = row.component._group.generator(group.value, row.component._group.getRowCount(), row.component._group.getData(), row.component);\n    }\n  }\n\n  cellEl.colSpan = group.width;\n  cellEl.innerHTML = group.value;\n  rowEl.classList.add(\"tabulator-print-table-group\");\n  rowEl.classList.add(\"tabulator-group-level-\" + row.indent);\n\n  if (group.component.isVisible()) {\n    rowEl.classList.add(\"tabulator-group-visible\");\n  }\n\n  this.mapElementStyles(styles.firstGroup, rowEl, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"color\", \"font-weight\", \"font-family\", \"font-size\", \"background-color\"]);\n  this.mapElementStyles(styles.firstGroup, cellEl, [\"padding-top\", \"padding-left\", \"padding-right\", \"padding-bottom\"]);\n  rowEl.appendChild(cellEl);\n  return rowEl;\n};\n\nExport.prototype.genereateCalcElement = function (row, setup, styles) {\n  var rowEl = this.genereateRowElement(row, setup, styles);\n  rowEl.classList.add(\"tabulator-print-table-calcs\");\n  this.mapElementStyles(styles.calcRow, rowEl, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"color\", \"font-weight\", \"font-family\", \"font-size\", \"background-color\"]);\n  return rowEl;\n};\n\nExport.prototype.genereateRowElement = function (row, setup, styles) {\n  var _this59 = this;\n\n  var rowEl = document.createElement(\"tr\");\n  rowEl.classList.add(\"tabulator-print-table-row\");\n  row.columns.forEach(function (col) {\n    if (col) {\n      var cellEl = document.createElement(\"td\"),\n          column = col.component._column,\n          value = col.value;\n      var cellWrapper = {\n        modules: {},\n        getValue: function getValue() {\n          return value;\n        },\n        getField: function getField() {\n          return column.definition.field;\n        },\n        getElement: function getElement() {\n          return cellEl;\n        },\n        getColumn: function getColumn() {\n          return column.getComponent();\n        },\n        getData: function getData() {\n          return rowData;\n        },\n        getRow: function getRow() {\n          return row.getComponent();\n        },\n        getComponent: function getComponent() {\n          return cellWrapper;\n        },\n        column: column\n      };\n      var classNames = column.definition.cssClass ? column.definition.cssClass.split(\" \") : [];\n      classNames.forEach(function (className) {\n        cellEl.classList.add(className);\n      });\n\n      if (_this59.table.modExists(\"format\") && _this59.config.formatCells !== false) {\n        value = _this59.table.modules.format.formatExportValue(cellWrapper, _this59.colVisProp);\n      } else {\n        switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n          case \"object\":\n            value = JSON.stringify(value);\n            break;\n\n          case \"undefined\":\n          case \"null\":\n            value = \"\";\n            break;\n\n          default:\n            value = value;\n        }\n      }\n\n      if (value instanceof Node) {\n        cellEl.appendChild(value);\n      } else {\n        cellEl.innerHTML = value;\n      }\n\n      if (styles.firstCell) {\n        _this59.mapElementStyles(styles.firstCell, cellEl, [\"padding-top\", \"padding-left\", \"padding-right\", \"padding-bottom\", \"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"color\", \"font-weight\", \"font-family\", \"font-size\"]);\n\n        if (column.definition.align) {\n          cellEl.style.textAlign = column.definition.align;\n        }\n      }\n\n      if (_this59.table.options.dataTree && _this59.config.dataTree !== false) {\n        if (setup.treeElementField && setup.treeElementField == column.field || !setup.treeElementField && i == 0) {\n          if (row.component._row.modules.dataTree.controlEl) {\n            cellEl.insertBefore(row.component._row.modules.dataTree.controlEl.cloneNode(true), cellEl.firstChild);\n          }\n\n          if (row.component._row.modules.dataTree.branchEl) {\n            cellEl.insertBefore(row.component._row.modules.dataTree.branchEl.cloneNode(true), cellEl.firstChild);\n          }\n        }\n      }\n\n      rowEl.appendChild(cellEl);\n\n      if (cellWrapper.modules.format && cellWrapper.modules.format.renderedCallback) {\n        cellWrapper.modules.format.renderedCallback();\n      }\n\n      if (setup.rowFormatter && _this59.config.formatCells !== false) {\n        setup.rowFormatter(row.component);\n      }\n    }\n  });\n  return rowEl;\n};\n\nExport.prototype.genereateHTMLTable = function (list) {\n  var holder = document.createElement(\"div\");\n  holder.appendChild(this.genereateTableElement(list));\n  return holder.innerHTML;\n};\n\nExport.prototype.getHtml = function (visible, style, config, colVisProp) {\n  var list = this.generateExportList(config || this.table.options.htmlOutputConfig, style, visible, colVisProp || \"htmlOutput\");\n  return this.genereateHTMLTable(list);\n};\n\nExport.prototype.mapElementStyles = function (from, to, props) {\n  if (this.cloneTableStyle && from && to) {\n    var lookup = {\n      \"background-color\": \"backgroundColor\",\n      \"color\": \"fontColor\",\n      \"width\": \"width\",\n      \"font-weight\": \"fontWeight\",\n      \"font-family\": \"fontFamily\",\n      \"font-size\": \"fontSize\",\n      \"text-align\": \"textAlign\",\n      \"border-top\": \"borderTop\",\n      \"border-left\": \"borderLeft\",\n      \"border-right\": \"borderRight\",\n      \"border-bottom\": \"borderBottom\",\n      \"padding-top\": \"paddingTop\",\n      \"padding-left\": \"paddingLeft\",\n      \"padding-right\": \"paddingRight\",\n      \"padding-bottom\": \"paddingBottom\"\n    };\n\n    if (window.getComputedStyle) {\n      var fromStyle = window.getComputedStyle(from);\n      props.forEach(function (prop) {\n        to.style[lookup[prop]] = fromStyle.getPropertyValue(prop);\n      });\n    }\n  }\n};\n\nTabulator.prototype.registerModule(\"export\", Export);\n\nvar Filter = function Filter(table) {\n  this.table = table; //hold Tabulator object\n\n  this.filterList = []; //hold filter list\n\n  this.headerFilters = {}; //hold column filters\n\n  this.headerFilterColumns = []; //hold columns that use header filters\n\n  this.prevHeaderFilterChangeCheck = \"\";\n  this.prevHeaderFilterChangeCheck = \"{}\";\n  this.changed = false; //has filtering changed since last render\n}; //initialize column header filter\n\n\nFilter.prototype.initializeColumn = function (column, value) {\n  var self = this,\n      field = column.getField(),\n      params; //handle successfull value change\n\n  function success(value) {\n    var filterType = column.modules.filter.tagType == \"input\" && column.modules.filter.attrType == \"text\" || column.modules.filter.tagType == \"textarea\" ? \"partial\" : \"match\",\n        type = \"\",\n        filterChangeCheck = \"\",\n        filterFunc;\n\n    if (typeof column.modules.filter.prevSuccess === \"undefined\" || column.modules.filter.prevSuccess !== value) {\n      column.modules.filter.prevSuccess = value;\n\n      if (!column.modules.filter.emptyFunc(value)) {\n        column.modules.filter.value = value;\n\n        switch (_typeof(column.definition.headerFilterFunc)) {\n          case \"string\":\n            if (self.filters[column.definition.headerFilterFunc]) {\n              type = column.definition.headerFilterFunc;\n\n              filterFunc = function filterFunc(data) {\n                var params = column.definition.headerFilterFuncParams || {};\n                var fieldVal = column.getFieldValue(data);\n                params = typeof params === \"function\" ? params(value, fieldVal, data) : params;\n                return self.filters[column.definition.headerFilterFunc](value, fieldVal, data, params);\n              };\n            } else {\n              console.warn(\"Header Filter Error - Matching filter function not found: \", column.definition.headerFilterFunc);\n            }\n\n            break;\n\n          case \"function\":\n            filterFunc = function filterFunc(data) {\n              var params = column.definition.headerFilterFuncParams || {};\n              var fieldVal = column.getFieldValue(data);\n              params = typeof params === \"function\" ? params(value, fieldVal, data) : params;\n              return column.definition.headerFilterFunc(value, fieldVal, data, params);\n            };\n\n            type = filterFunc;\n            break;\n        }\n\n        if (!filterFunc) {\n          switch (filterType) {\n            case \"partial\":\n              filterFunc = function filterFunc(data) {\n                var colVal = column.getFieldValue(data);\n\n                if (typeof colVal !== 'undefined' && colVal !== null) {\n                  return String(colVal).toLowerCase().indexOf(String(value).toLowerCase()) > -1;\n                } else {\n                  return false;\n                }\n              };\n\n              type = \"like\";\n              break;\n\n            default:\n              filterFunc = function filterFunc(data) {\n                return column.getFieldValue(data) == value;\n              };\n\n              type = \"=\";\n          }\n        }\n\n        self.headerFilters[field] = {\n          value: value,\n          func: filterFunc,\n          type: type,\n          params: params || {}\n        };\n      } else {\n        delete self.headerFilters[field];\n      }\n\n      filterChangeCheck = JSON.stringify(self.headerFilters);\n\n      if (self.prevHeaderFilterChangeCheck !== filterChangeCheck) {\n        self.prevHeaderFilterChangeCheck = filterChangeCheck;\n        self.changed = true;\n        self.table.rowManager.filterRefresh();\n      }\n    }\n\n    return true;\n  }\n\n  column.modules.filter = {\n    success: success,\n    attrType: false,\n    tagType: false,\n    emptyFunc: false\n  };\n  this.generateHeaderFilterElement(column);\n};\n\nFilter.prototype.generateHeaderFilterElement = function (column, initialValue, reinitialize) {\n  var _this60 = this;\n\n  var self = this,\n      success = column.modules.filter.success,\n      field = column.getField(),\n      filterElement,\n      editor,\n      editorElement,\n      cellWrapper,\n      typingTimer,\n      searchTrigger,\n      params; //handle aborted edit\n\n  function cancel() {}\n\n  if (column.modules.filter.headerElement && column.modules.filter.headerElement.parentNode) {\n    column.contentElement.removeChild(column.modules.filter.headerElement.parentNode);\n  }\n\n  if (field) {\n    //set empty value function\n    column.modules.filter.emptyFunc = column.definition.headerFilterEmptyCheck || function (value) {\n      return !value && value !== \"0\";\n    };\n\n    filterElement = document.createElement(\"div\");\n    filterElement.classList.add(\"tabulator-header-filter\"); //set column editor\n\n    switch (_typeof(column.definition.headerFilter)) {\n      case \"string\":\n        if (self.table.modules.edit.editors[column.definition.headerFilter]) {\n          editor = self.table.modules.edit.editors[column.definition.headerFilter];\n\n          if ((column.definition.headerFilter === \"tick\" || column.definition.headerFilter === \"tickCross\") && !column.definition.headerFilterEmptyCheck) {\n            column.modules.filter.emptyFunc = function (value) {\n              return value !== true && value !== false;\n            };\n          }\n        } else {\n          console.warn(\"Filter Error - Cannot build header filter, No such editor found: \", column.definition.editor);\n        }\n\n        break;\n\n      case \"function\":\n        editor = column.definition.headerFilter;\n        break;\n\n      case \"boolean\":\n        if (column.modules.edit && column.modules.edit.editor) {\n          editor = column.modules.edit.editor;\n        } else {\n          if (column.definition.formatter && self.table.modules.edit.editors[column.definition.formatter]) {\n            editor = self.table.modules.edit.editors[column.definition.formatter];\n\n            if ((column.definition.formatter === \"tick\" || column.definition.formatter === \"tickCross\") && !column.definition.headerFilterEmptyCheck) {\n              column.modules.filter.emptyFunc = function (value) {\n                return value !== true && value !== false;\n              };\n            }\n          } else {\n            editor = self.table.modules.edit.editors[\"input\"];\n          }\n        }\n\n        break;\n    }\n\n    if (editor) {\n      cellWrapper = {\n        getValue: function getValue() {\n          return typeof initialValue !== \"undefined\" ? initialValue : \"\";\n        },\n        getField: function getField() {\n          return column.definition.field;\n        },\n        getElement: function getElement() {\n          return filterElement;\n        },\n        getColumn: function getColumn() {\n          return column.getComponent();\n        },\n        getRow: function getRow() {\n          return {\n            normalizeHeight: function normalizeHeight() {}\n          };\n        }\n      };\n      params = column.definition.headerFilterParams || {};\n      params = typeof params === \"function\" ? params.call(self.table) : params;\n      editorElement = editor.call(this.table.modules.edit, cellWrapper, function () {}, success, cancel, params);\n\n      if (!editorElement) {\n        console.warn(\"Filter Error - Cannot add filter to \" + field + \" column, editor returned a value of false\");\n        return;\n      }\n\n      if (!(editorElement instanceof Node)) {\n        console.warn(\"Filter Error - Cannot add filter to \" + field + \" column, editor should return an instance of Node, the editor returned:\", editorElement);\n        return;\n      } //set Placeholder Text\n\n\n      if (field) {\n        self.table.modules.localize.bind(\"headerFilters|columns|\" + column.definition.field, function (value) {\n          editorElement.setAttribute(\"placeholder\", typeof value !== \"undefined\" && value ? value : self.table.modules.localize.getText(\"headerFilters|default\"));\n        });\n      } else {\n        self.table.modules.localize.bind(\"headerFilters|default\", function (value) {\n          editorElement.setAttribute(\"placeholder\", typeof self.column.definition.headerFilterPlaceholder !== \"undefined\" && self.column.definition.headerFilterPlaceholder ? self.column.definition.headerFilterPlaceholder : value);\n        });\n      } //focus on element on click\n\n\n      editorElement.addEventListener(\"click\", function (e) {\n        e.stopPropagation();\n        editorElement.focus();\n      });\n      editorElement.addEventListener(\"focus\", function (e) {\n        var left = _this60.table.columnManager.element.scrollLeft;\n\n        if (left !== _this60.table.rowManager.element.scrollLeft) {\n          _this60.table.rowManager.scrollHorizontal(left);\n\n          _this60.table.columnManager.scrollHorizontal(left);\n        }\n      }); //live update filters as user types\n\n      typingTimer = false;\n\n      searchTrigger = function searchTrigger(e) {\n        if (typingTimer) {\n          clearTimeout(typingTimer);\n        }\n\n        typingTimer = setTimeout(function () {\n          success(editorElement.value);\n        }, self.table.options.headerFilterLiveFilterDelay);\n      };\n\n      column.modules.filter.headerElement = editorElement;\n      column.modules.filter.attrType = editorElement.hasAttribute(\"type\") ? editorElement.getAttribute(\"type\").toLowerCase() : \"\";\n      column.modules.filter.tagType = editorElement.tagName.toLowerCase();\n\n      if (column.definition.headerFilterLiveFilter !== false) {\n        if (!(column.definition.headerFilter === 'autocomplete' || column.definition.headerFilter === 'tickCross' || (column.definition.editor === 'autocomplete' || column.definition.editor === 'tickCross') && column.definition.headerFilter === true)) {\n          editorElement.addEventListener(\"keyup\", searchTrigger);\n          editorElement.addEventListener(\"search\", searchTrigger); //update number filtered columns on change\n\n          if (column.modules.filter.attrType == \"number\") {\n            editorElement.addEventListener(\"change\", function (e) {\n              success(editorElement.value);\n            });\n          } //change text inputs to search inputs to allow for clearing of field\n\n\n          if (column.modules.filter.attrType == \"text\" && this.table.browser !== \"ie\") {\n            editorElement.setAttribute(\"type\", \"search\"); // editorElement.off(\"change blur\"); //prevent blur from triggering filter and preventing selection click\n          }\n        } //prevent input and select elements from propegating click to column sorters etc\n\n\n        if (column.modules.filter.tagType == \"input\" || column.modules.filter.tagType == \"select\" || column.modules.filter.tagType == \"textarea\") {\n          editorElement.addEventListener(\"mousedown\", function (e) {\n            e.stopPropagation();\n          });\n        }\n      }\n\n      filterElement.appendChild(editorElement);\n      column.contentElement.appendChild(filterElement);\n\n      if (!reinitialize) {\n        self.headerFilterColumns.push(column);\n      }\n    }\n  } else {\n    console.warn(\"Filter Error - Cannot add header filter, column has no field set:\", column.definition.title);\n  }\n}; //hide all header filter elements (used to ensure correct column widths in \"fitData\" layout mode)\n\n\nFilter.prototype.hideHeaderFilterElements = function () {\n  this.headerFilterColumns.forEach(function (column) {\n    if (column.modules.filter && column.modules.filter.headerElement) {\n      column.modules.filter.headerElement.style.display = 'none';\n    }\n  });\n}; //show all header filter elements (used to ensure correct column widths in \"fitData\" layout mode)\n\n\nFilter.prototype.showHeaderFilterElements = function () {\n  this.headerFilterColumns.forEach(function (column) {\n    if (column.modules.filter && column.modules.filter.headerElement) {\n      column.modules.filter.headerElement.style.display = '';\n    }\n  });\n}; //programatically set focus of header filter\n\n\nFilter.prototype.setHeaderFilterFocus = function (column) {\n  if (column.modules.filter && column.modules.filter.headerElement) {\n    column.modules.filter.headerElement.focus();\n  } else {\n    console.warn(\"Column Filter Focus Error - No header filter set on column:\", column.getField());\n  }\n}; //programmatically get value of header filter\n\n\nFilter.prototype.getHeaderFilterValue = function (column) {\n  if (column.modules.filter && column.modules.filter.headerElement) {\n    return column.modules.filter.headerElement.value;\n  } else {\n    console.warn(\"Column Filter Error - No header filter set on column:\", column.getField());\n  }\n}; //programatically set value of header filter\n\n\nFilter.prototype.setHeaderFilterValue = function (column, value) {\n  if (column) {\n    if (column.modules.filter && column.modules.filter.headerElement) {\n      this.generateHeaderFilterElement(column, value, true);\n      column.modules.filter.success(value);\n    } else {\n      console.warn(\"Column Filter Error - No header filter set on column:\", column.getField());\n    }\n  }\n};\n\nFilter.prototype.reloadHeaderFilter = function (column) {\n  if (column) {\n    if (column.modules.filter && column.modules.filter.headerElement) {\n      this.generateHeaderFilterElement(column, column.modules.filter.value, true);\n    } else {\n      console.warn(\"Column Filter Error - No header filter set on column:\", column.getField());\n    }\n  }\n}; //check if the filters has changed since last use\n\n\nFilter.prototype.hasChanged = function () {\n  var changed = this.changed;\n  this.changed = false;\n  return changed;\n}; //set standard filters\n\n\nFilter.prototype.setFilter = function (field, type, value, params) {\n  var self = this;\n  self.filterList = [];\n\n  if (!Array.isArray(field)) {\n    field = [{\n      field: field,\n      type: type,\n      value: value,\n      params: params\n    }];\n  }\n\n  self.addFilter(field);\n}; //add filter to array\n\n\nFilter.prototype.addFilter = function (field, type, value, params) {\n  var self = this;\n\n  if (!Array.isArray(field)) {\n    field = [{\n      field: field,\n      type: type,\n      value: value,\n      params: params\n    }];\n  }\n\n  field.forEach(function (filter) {\n    filter = self.findFilter(filter);\n\n    if (filter) {\n      self.filterList.push(filter);\n      self.changed = true;\n    }\n  });\n\n  if (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.filter) {\n    this.table.modules.persistence.save(\"filter\");\n  }\n};\n\nFilter.prototype.findFilter = function (filter) {\n  var self = this,\n      column;\n\n  if (Array.isArray(filter)) {\n    return this.findSubFilters(filter);\n  }\n\n  var filterFunc = false;\n\n  if (typeof filter.field == \"function\") {\n    filterFunc = function filterFunc(data) {\n      return filter.field(data, filter.type || {}); // pass params to custom filter function\n    };\n  } else {\n    if (self.filters[filter.type]) {\n      column = self.table.columnManager.getColumnByField(filter.field);\n\n      if (column) {\n        filterFunc = function filterFunc(data) {\n          return self.filters[filter.type](filter.value, column.getFieldValue(data), data, filter.params || {});\n        };\n      } else {\n        filterFunc = function filterFunc(data) {\n          return self.filters[filter.type](filter.value, data[filter.field], data, filter.params || {});\n        };\n      }\n    } else {\n      console.warn(\"Filter Error - No such filter type found, ignoring: \", filter.type);\n    }\n  }\n\n  filter.func = filterFunc;\n  return filter.func ? filter : false;\n};\n\nFilter.prototype.findSubFilters = function (filters) {\n  var self = this,\n      output = [];\n  filters.forEach(function (filter) {\n    filter = self.findFilter(filter);\n\n    if (filter) {\n      output.push(filter);\n    }\n  });\n  return output.length ? output : false;\n}; //get all filters\n\n\nFilter.prototype.getFilters = function (all, ajax) {\n  var output = [];\n\n  if (all) {\n    output = this.getHeaderFilters();\n  }\n\n  if (ajax) {\n    output.forEach(function (item) {\n      if (typeof item.type == \"function\") {\n        item.type = \"function\";\n      }\n    });\n  }\n\n  output = output.concat(this.filtersToArray(this.filterList, ajax));\n  return output;\n}; //filter to Object\n\n\nFilter.prototype.filtersToArray = function (filterList, ajax) {\n  var _this61 = this;\n\n  var output = [];\n  filterList.forEach(function (filter) {\n    var item;\n\n    if (Array.isArray(filter)) {\n      output.push(_this61.filtersToArray(filter, ajax));\n    } else {\n      item = {\n        field: filter.field,\n        type: filter.type,\n        value: filter.value\n      };\n\n      if (ajax) {\n        if (typeof item.type == \"function\") {\n          item.type = \"function\";\n        }\n      }\n\n      output.push(item);\n    }\n  });\n  return output;\n}; //get all filters\n\n\nFilter.prototype.getHeaderFilters = function () {\n  var self = this,\n      output = [];\n\n  for (var key in this.headerFilters) {\n    output.push({\n      field: key,\n      type: this.headerFilters[key].type,\n      value: this.headerFilters[key].value\n    });\n  }\n\n  return output;\n}; //remove filter from array\n\n\nFilter.prototype.removeFilter = function (field, type, value) {\n  var self = this;\n\n  if (!Array.isArray(field)) {\n    field = [{\n      field: field,\n      type: type,\n      value: value\n    }];\n  }\n\n  field.forEach(function (filter) {\n    var index = -1;\n\n    if (_typeof(filter.field) == \"object\") {\n      index = self.filterList.findIndex(function (element) {\n        return filter === element;\n      });\n    } else {\n      index = self.filterList.findIndex(function (element) {\n        return filter.field === element.field && filter.type === element.type && filter.value === element.value;\n      });\n    }\n\n    if (index > -1) {\n      self.filterList.splice(index, 1);\n      self.changed = true;\n    } else {\n      console.warn(\"Filter Error - No matching filter type found, ignoring: \", filter.type);\n    }\n  });\n\n  if (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.filter) {\n    this.table.modules.persistence.save(\"filter\");\n  }\n}; //clear filters\n\n\nFilter.prototype.clearFilter = function (all) {\n  this.filterList = [];\n\n  if (all) {\n    this.clearHeaderFilter();\n  }\n\n  this.changed = true;\n\n  if (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.filter) {\n    this.table.modules.persistence.save(\"filter\");\n  }\n}; //clear header filters\n\n\nFilter.prototype.clearHeaderFilter = function () {\n  var self = this;\n  this.headerFilters = {};\n  self.prevHeaderFilterChangeCheck = \"{}\";\n  this.headerFilterColumns.forEach(function (column) {\n    column.modules.filter.value = null;\n    column.modules.filter.prevSuccess = undefined;\n    self.reloadHeaderFilter(column);\n  });\n  this.changed = true;\n}; //search data and return matching rows\n\n\nFilter.prototype.search = function (searchType, field, type, value) {\n  var self = this,\n      activeRows = [],\n      filterList = [];\n\n  if (!Array.isArray(field)) {\n    field = [{\n      field: field,\n      type: type,\n      value: value\n    }];\n  }\n\n  field.forEach(function (filter) {\n    filter = self.findFilter(filter);\n\n    if (filter) {\n      filterList.push(filter);\n    }\n  });\n  this.table.rowManager.rows.forEach(function (row) {\n    var match = true;\n    filterList.forEach(function (filter) {\n      if (!self.filterRecurse(filter, row.getData())) {\n        match = false;\n      }\n    });\n\n    if (match) {\n      activeRows.push(searchType === \"data\" ? row.getData(\"data\") : row.getComponent());\n    }\n  });\n  return activeRows;\n}; //filter row array\n\n\nFilter.prototype.filter = function (rowList, filters) {\n  var self = this,\n      activeRows = [],\n      activeRowComponents = [];\n\n  if (self.table.options.dataFiltering) {\n    self.table.options.dataFiltering.call(self.table, self.getFilters());\n  }\n\n  if (!self.table.options.ajaxFiltering && (self.filterList.length || Object.keys(self.headerFilters).length)) {\n    rowList.forEach(function (row) {\n      if (self.filterRow(row)) {\n        activeRows.push(row);\n      }\n    });\n  } else {\n    activeRows = rowList.slice(0);\n  }\n\n  if (self.table.options.dataFiltered) {\n    activeRows.forEach(function (row) {\n      activeRowComponents.push(row.getComponent());\n    });\n    self.table.options.dataFiltered.call(self.table, self.getFilters(), activeRowComponents);\n  }\n\n  return activeRows;\n}; //filter individual row\n\n\nFilter.prototype.filterRow = function (row, filters) {\n  var self = this,\n      match = true,\n      data = row.getData();\n  self.filterList.forEach(function (filter) {\n    if (!self.filterRecurse(filter, data)) {\n      match = false;\n    }\n  });\n\n  for (var field in self.headerFilters) {\n    if (!self.headerFilters[field].func(data)) {\n      match = false;\n    }\n  }\n\n  return match;\n};\n\nFilter.prototype.filterRecurse = function (filter, data) {\n  var self = this,\n      match = false;\n\n  if (Array.isArray(filter)) {\n    filter.forEach(function (subFilter) {\n      if (self.filterRecurse(subFilter, data)) {\n        match = true;\n      }\n    });\n  } else {\n    match = filter.func(data);\n  }\n\n  return match;\n}; //list of available filters\n\n\nFilter.prototype.filters = {\n  //equal to\n  \"=\": function _(filterVal, rowVal, rowData, filterParams) {\n    return rowVal == filterVal ? true : false;\n  },\n  //less than\n  \"<\": function _(filterVal, rowVal, rowData, filterParams) {\n    return rowVal < filterVal ? true : false;\n  },\n  //less than or equal to\n  \"<=\": function _(filterVal, rowVal, rowData, filterParams) {\n    return rowVal <= filterVal ? true : false;\n  },\n  //greater than\n  \">\": function _(filterVal, rowVal, rowData, filterParams) {\n    return rowVal > filterVal ? true : false;\n  },\n  //greater than or equal to\n  \">=\": function _(filterVal, rowVal, rowData, filterParams) {\n    return rowVal >= filterVal ? true : false;\n  },\n  //not equal to\n  \"!=\": function _(filterVal, rowVal, rowData, filterParams) {\n    return rowVal != filterVal ? true : false;\n  },\n  \"regex\": function regex(filterVal, rowVal, rowData, filterParams) {\n    if (typeof filterVal == \"string\") {\n      filterVal = new RegExp(filterVal);\n    }\n\n    return filterVal.test(rowVal);\n  },\n  //contains the string\n  \"like\": function like(filterVal, rowVal, rowData, filterParams) {\n    if (filterVal === null || typeof filterVal === \"undefined\") {\n      return rowVal === filterVal ? true : false;\n    } else {\n      if (typeof rowVal !== 'undefined' && rowVal !== null) {\n        return String(rowVal).toLowerCase().indexOf(filterVal.toLowerCase()) > -1;\n      } else {\n        return false;\n      }\n    }\n  },\n  //contains the keywords\n  \"keywords\": function keywords(filterVal, rowVal, rowData, filterParams) {\n    var keywords = filterVal.toLowerCase().split(typeof filterParams.separator === \"undefined\" ? \" \" : filterParams.separator),\n        value = String(rowVal === null || typeof rowVal === \"undefined\" ? \"\" : rowVal).toLowerCase(),\n        matches = [];\n    keywords.forEach(function (keyword) {\n      if (value.includes(keyword)) {\n        matches.push(true);\n      }\n    });\n    return filterParams.matchAll ? matches.length === keywords.length : !!matches.length;\n  },\n  //starts with the string\n  \"starts\": function starts(filterVal, rowVal, rowData, filterParams) {\n    if (filterVal === null || typeof filterVal === \"undefined\") {\n      return rowVal === filterVal ? true : false;\n    } else {\n      if (typeof rowVal !== 'undefined' && rowVal !== null) {\n        return String(rowVal).toLowerCase().startsWith(filterVal.toLowerCase());\n      } else {\n        return false;\n      }\n    }\n  },\n  //ends with the string\n  \"ends\": function ends(filterVal, rowVal, rowData, filterParams) {\n    if (filterVal === null || typeof filterVal === \"undefined\") {\n      return rowVal === filterVal ? true : false;\n    } else {\n      if (typeof rowVal !== 'undefined' && rowVal !== null) {\n        return String(rowVal).toLowerCase().endsWith(filterVal.toLowerCase());\n      } else {\n        return false;\n      }\n    }\n  },\n  //in array\n  \"in\": function _in(filterVal, rowVal, rowData, filterParams) {\n    if (Array.isArray(filterVal)) {\n      return filterVal.length ? filterVal.indexOf(rowVal) > -1 : true;\n    } else {\n      console.warn(\"Filter Error - filter value is not an array:\", filterVal);\n      return false;\n    }\n  }\n};\nTabulator.prototype.registerModule(\"filter\", Filter);\n\nvar Format = function Format(table) {\n  this.table = table; //hold Tabulator object\n}; //initialize column formatter\n\n\nFormat.prototype.initializeColumn = function (column) {\n  column.modules.format = this.lookupFormatter(column, \"\");\n\n  if (typeof column.definition.formatterPrint !== \"undefined\") {\n    column.modules.format.print = this.lookupFormatter(column, \"Print\");\n  }\n\n  if (typeof column.definition.formatterClipboard !== \"undefined\") {\n    column.modules.format.clipboard = this.lookupFormatter(column, \"Clipboard\");\n  }\n\n  if (typeof column.definition.formatterHtmlOutput !== \"undefined\") {\n    column.modules.format.htmlOutput = this.lookupFormatter(column, \"HtmlOutput\");\n  }\n};\n\nFormat.prototype.lookupFormatter = function (column, type) {\n  var config = {\n    params: column.definition[\"formatter\" + type + \"Params\"] || {}\n  },\n      formatter = column.definition[\"formatter\" + type]; //set column formatter\n\n  switch (typeof formatter === 'undefined' ? 'undefined' : _typeof(formatter)) {\n    case \"string\":\n      if (formatter === \"tick\") {\n        formatter = \"tickCross\";\n\n        if (typeof config.params.crossElement == \"undefined\") {\n          config.params.crossElement = false;\n        }\n\n        console.warn(\"DEPRECATION WARNING - the tick formatter has been deprecated, please use the tickCross formatter with the crossElement param set to false\");\n      }\n\n      if (this.formatters[formatter]) {\n        config.formatter = this.formatters[formatter];\n      } else {\n        console.warn(\"Formatter Error - No such formatter found: \", formatter);\n        config.formatter = this.formatters.plaintext;\n      }\n\n      break;\n\n    case \"function\":\n      config.formatter = formatter;\n      break;\n\n    default:\n      config.formatter = this.formatters.plaintext;\n      break;\n  }\n\n  return config;\n};\n\nFormat.prototype.cellRendered = function (cell) {\n  if (cell.modules.format && cell.modules.format.renderedCallback && !cell.modules.format.rendered) {\n    cell.modules.format.renderedCallback();\n    cell.modules.format.rendered = true;\n  }\n}; //return a formatted value for a cell\n\n\nFormat.prototype.formatValue = function (cell) {\n  var component = cell.getComponent(),\n      params = typeof cell.column.modules.format.params === \"function\" ? cell.column.modules.format.params(component) : cell.column.modules.format.params;\n\n  function onRendered(callback) {\n    if (!cell.modules.format) {\n      cell.modules.format = {};\n    }\n\n    cell.modules.format.renderedCallback = callback;\n    cell.modules.format.rendered = false;\n  }\n\n  return cell.column.modules.format.formatter.call(this, component, params, onRendered);\n};\n\nFormat.prototype.formatExportValue = function (cell, type) {\n  var formatter = cell.column.modules.format[type],\n      params;\n\n  if (formatter) {\n    var onRendered = function onRendered(callback) {\n      if (!cell.modules.format) {\n        cell.modules.format = {};\n      }\n\n      cell.modules.format.renderedCallback = callback;\n      cell.modules.format.rendered = false;\n    };\n\n    params = typeof formatter.params === \"function\" ? formatter.params(component) : formatter.params;\n    return formatter.formatter.call(this, cell.getComponent(), params, onRendered);\n  } else {\n    return this.formatValue(cell);\n  }\n};\n\nFormat.prototype.sanitizeHTML = function (value) {\n  if (value) {\n    var entityMap = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;',\n      '/': '&#x2F;',\n      '`': '&#x60;',\n      '=': '&#x3D;'\n    };\n    return String(value).replace(/[&<>\"'`=\\/]/g, function (s) {\n      return entityMap[s];\n    });\n  } else {\n    return value;\n  }\n};\n\nFormat.prototype.emptyToSpace = function (value) {\n  return value === null || typeof value === \"undefined\" || value === \"\" ? \"&nbsp;\" : value;\n}; //get formatter for cell\n\n\nFormat.prototype.getFormatter = function (formatter) {\n  var formatter;\n\n  switch (typeof formatter === 'undefined' ? 'undefined' : _typeof(formatter)) {\n    case \"string\":\n      if (this.formatters[formatter]) {\n        formatter = this.formatters[formatter];\n      } else {\n        console.warn(\"Formatter Error - No such formatter found: \", formatter);\n        formatter = this.formatters.plaintext;\n      }\n\n      break;\n\n    case \"function\":\n      formatter = formatter;\n      break;\n\n    default:\n      formatter = this.formatters.plaintext;\n      break;\n  }\n\n  return formatter;\n}; //default data formatters\n\n\nFormat.prototype.formatters = {\n  //plain text value\n  plaintext: function plaintext(cell, formatterParams, onRendered) {\n    return this.emptyToSpace(this.sanitizeHTML(cell.getValue()));\n  },\n  //html text value\n  html: function html(cell, formatterParams, onRendered) {\n    return cell.getValue();\n  },\n  //multiline text area\n  textarea: function textarea(cell, formatterParams, onRendered) {\n    cell.getElement().style.whiteSpace = \"pre-wrap\";\n    return this.emptyToSpace(this.sanitizeHTML(cell.getValue()));\n  },\n  //currency formatting\n  money: function money(cell, formatterParams, onRendered) {\n    var floatVal = parseFloat(cell.getValue()),\n        number,\n        integer,\n        decimal,\n        rgx;\n    var decimalSym = formatterParams.decimal || \".\";\n    var thousandSym = formatterParams.thousand || \",\";\n    var symbol = formatterParams.symbol || \"\";\n    var after = !!formatterParams.symbolAfter;\n    var precision = typeof formatterParams.precision !== \"undefined\" ? formatterParams.precision : 2;\n\n    if (isNaN(floatVal)) {\n      return this.emptyToSpace(this.sanitizeHTML(cell.getValue()));\n    }\n\n    number = precision !== false ? floatVal.toFixed(precision) : floatVal;\n    number = String(number).split(\".\");\n    integer = number[0];\n    decimal = number.length > 1 ? decimalSym + number[1] : \"\";\n    rgx = /(\\d+)(\\d{3})/;\n\n    while (rgx.test(integer)) {\n      integer = integer.replace(rgx, \"$1\" + thousandSym + \"$2\");\n    }\n\n    return after ? integer + decimal + symbol : symbol + integer + decimal;\n  },\n  //clickable anchor tag\n  link: function link(cell, formatterParams, onRendered) {\n    var value = cell.getValue(),\n        urlPrefix = formatterParams.urlPrefix || \"\",\n        download = formatterParams.download,\n        label = value,\n        el = document.createElement(\"a\"),\n        data;\n\n    if (formatterParams.labelField) {\n      data = cell.getData();\n      label = data[formatterParams.labelField];\n    }\n\n    if (formatterParams.label) {\n      switch (_typeof(formatterParams.label)) {\n        case \"string\":\n          label = formatterParams.label;\n          break;\n\n        case \"function\":\n          label = formatterParams.label(cell);\n          break;\n      }\n    }\n\n    if (label) {\n      if (formatterParams.urlField) {\n        data = cell.getData();\n        value = data[formatterParams.urlField];\n      }\n\n      if (formatterParams.url) {\n        switch (_typeof(formatterParams.url)) {\n          case \"string\":\n            value = formatterParams.url;\n            break;\n\n          case \"function\":\n            value = formatterParams.url(cell);\n            break;\n        }\n      }\n\n      el.setAttribute(\"href\", urlPrefix + value);\n\n      if (formatterParams.target) {\n        el.setAttribute(\"target\", formatterParams.target);\n      }\n\n      if (formatterParams.download) {\n        if (typeof download == \"function\") {\n          download = download(cell);\n        } else {\n          download = download === true ? \"\" : download;\n        }\n\n        el.setAttribute(\"download\", download);\n      }\n\n      el.innerHTML = this.emptyToSpace(this.sanitizeHTML(label));\n      return el;\n    } else {\n      return \"&nbsp;\";\n    }\n  },\n  //image element\n  image: function image(cell, formatterParams, onRendered) {\n    var el = document.createElement(\"img\");\n    el.setAttribute(\"src\", cell.getValue());\n\n    switch (_typeof(formatterParams.height)) {\n      case \"number\":\n        el.style.height = formatterParams.height + \"px\";\n        break;\n\n      case \"string\":\n        el.style.height = formatterParams.height;\n        break;\n    }\n\n    switch (_typeof(formatterParams.width)) {\n      case \"number\":\n        el.style.width = formatterParams.width + \"px\";\n        break;\n\n      case \"string\":\n        el.style.width = formatterParams.width;\n        break;\n    }\n\n    el.addEventListener(\"load\", function () {\n      cell.getRow().normalizeHeight();\n    });\n    return el;\n  },\n  //tick or cross\n  tickCross: function tickCross(cell, formatterParams, onRendered) {\n    var value = cell.getValue(),\n        element = cell.getElement(),\n        empty = formatterParams.allowEmpty,\n        truthy = formatterParams.allowTruthy,\n        tick = typeof formatterParams.tickElement !== \"undefined\" ? formatterParams.tickElement : '<svg enable-background=\"new 0 0 24 24\" height=\"14\" width=\"14\" viewBox=\"0 0 24 24\" xml:space=\"preserve\" ><path fill=\"#2DC214\" clip-rule=\"evenodd\" d=\"M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z\" fill-rule=\"evenodd\"/></svg>',\n        cross = typeof formatterParams.crossElement !== \"undefined\" ? formatterParams.crossElement : '<svg enable-background=\"new 0 0 24 24\" height=\"14\" width=\"14\"  viewBox=\"0 0 24 24\" xml:space=\"preserve\" ><path fill=\"#CE1515\" d=\"M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z\"/></svg>';\n\n    if (truthy && value || value === true || value === \"true\" || value === \"True\" || value === 1 || value === \"1\") {\n      element.setAttribute(\"aria-checked\", true);\n      return tick || \"\";\n    } else {\n      if (empty && (value === \"null\" || value === \"\" || value === null || typeof value === \"undefined\")) {\n        element.setAttribute(\"aria-checked\", \"mixed\");\n        return \"\";\n      } else {\n        element.setAttribute(\"aria-checked\", false);\n        return cross || \"\";\n      }\n    }\n  },\n  datetime: function datetime(cell, formatterParams, onRendered) {\n    var inputFormat = formatterParams.inputFormat || \"YYYY-MM-DD hh:mm:ss\";\n    var outputFormat = formatterParams.outputFormat || \"DD/MM/YYYY hh:mm:ss\";\n    var invalid = typeof formatterParams.invalidPlaceholder !== \"undefined\" ? formatterParams.invalidPlaceholder : \"\";\n    var value = cell.getValue();\n    var newDatetime = moment(value, inputFormat);\n\n    if (newDatetime.isValid()) {\n      return formatterParams.timezone ? newDatetime.tz(formatterParams.timezone).format(outputFormat) : newDatetime.format(outputFormat);\n    } else {\n      if (invalid === true) {\n        return value;\n      } else if (typeof invalid === \"function\") {\n        return invalid(value);\n      } else {\n        return invalid;\n      }\n    }\n  },\n  datetimediff: function datetime(cell, formatterParams, onRendered) {\n    var inputFormat = formatterParams.inputFormat || \"YYYY-MM-DD hh:mm:ss\";\n    var invalid = typeof formatterParams.invalidPlaceholder !== \"undefined\" ? formatterParams.invalidPlaceholder : \"\";\n    var suffix = typeof formatterParams.suffix !== \"undefined\" ? formatterParams.suffix : false;\n    var unit = typeof formatterParams.unit !== \"undefined\" ? formatterParams.unit : undefined;\n    var humanize = typeof formatterParams.humanize !== \"undefined\" ? formatterParams.humanize : false;\n    var date = typeof formatterParams.date !== \"undefined\" ? formatterParams.date : moment();\n    var value = cell.getValue();\n    var newDatetime = moment(value, inputFormat);\n\n    if (newDatetime.isValid()) {\n      if (humanize) {\n        return moment.duration(newDatetime.diff(date)).humanize(suffix);\n      } else {\n        return newDatetime.diff(date, unit) + (suffix ? \" \" + suffix : \"\");\n      }\n    } else {\n      if (invalid === true) {\n        return value;\n      } else if (typeof invalid === \"function\") {\n        return invalid(value);\n      } else {\n        return invalid;\n      }\n    }\n  },\n  //select\n  lookup: function lookup(cell, formatterParams, onRendered) {\n    var value = cell.getValue();\n\n    if (typeof formatterParams[value] === \"undefined\") {\n      console.warn('Missing display value for ' + value);\n      return value;\n    }\n\n    return formatterParams[value];\n  },\n  //star rating\n  star: function star(cell, formatterParams, onRendered) {\n    var value = cell.getValue(),\n        element = cell.getElement(),\n        maxStars = formatterParams && formatterParams.stars ? formatterParams.stars : 5,\n        stars = document.createElement(\"span\"),\n        star = document.createElementNS('http://www.w3.org/2000/svg', \"svg\"),\n        starActive = '<polygon fill=\"#FFEA00\" stroke=\"#C1AB60\" stroke-width=\"37.6152\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 \"/>',\n        starInactive = '<polygon fill=\"#D2D2D2\" stroke=\"#686868\" stroke-width=\"37.6152\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 \"/>'; //style stars holder\n\n    stars.style.verticalAlign = \"middle\"; //style star\n\n    star.setAttribute(\"width\", \"14\");\n    star.setAttribute(\"height\", \"14\");\n    star.setAttribute(\"viewBox\", \"0 0 512 512\");\n    star.setAttribute(\"xml:space\", \"preserve\");\n    star.style.padding = \"0 1px\";\n    value = value && !isNaN(value) ? parseInt(value) : 0;\n    value = Math.max(0, Math.min(value, maxStars));\n\n    for (var i = 1; i <= maxStars; i++) {\n      var nextStar = star.cloneNode(true);\n      nextStar.innerHTML = i <= value ? starActive : starInactive;\n      stars.appendChild(nextStar);\n    }\n\n    element.style.whiteSpace = \"nowrap\";\n    element.style.overflow = \"hidden\";\n    element.style.textOverflow = \"ellipsis\";\n    element.setAttribute(\"aria-label\", value);\n    return stars;\n  },\n  traffic: function traffic(cell, formatterParams, onRendered) {\n    var value = this.sanitizeHTML(cell.getValue()) || 0,\n        el = document.createElement(\"span\"),\n        max = formatterParams && formatterParams.max ? formatterParams.max : 100,\n        min = formatterParams && formatterParams.min ? formatterParams.min : 0,\n        colors = formatterParams && typeof formatterParams.color !== \"undefined\" ? formatterParams.color : [\"red\", \"orange\", \"green\"],\n        color = \"#666666\",\n        percent,\n        percentValue;\n\n    if (isNaN(value) || typeof cell.getValue() === \"undefined\") {\n      return;\n    }\n\n    el.classList.add(\"tabulator-traffic-light\"); //make sure value is in range\n\n    percentValue = parseFloat(value) <= max ? parseFloat(value) : max;\n    percentValue = parseFloat(percentValue) >= min ? parseFloat(percentValue) : min; //workout percentage\n\n    percent = (max - min) / 100;\n    percentValue = Math.round((percentValue - min) / percent); //set color\n\n    switch (typeof colors === 'undefined' ? 'undefined' : _typeof(colors)) {\n      case \"string\":\n        color = colors;\n        break;\n\n      case \"function\":\n        color = colors(value);\n        break;\n\n      case \"object\":\n        if (Array.isArray(colors)) {\n          var unit = 100 / colors.length;\n          var index = Math.floor(percentValue / unit);\n          index = Math.min(index, colors.length - 1);\n          index = Math.max(index, 0);\n          color = colors[index];\n          break;\n        }\n\n    }\n\n    el.style.backgroundColor = color;\n    return el;\n  },\n  //progress bar\n  progress: function progress(cell, formatterParams, onRendered) {\n    //progress bar\n    var value = this.sanitizeHTML(cell.getValue()) || 0,\n        element = cell.getElement(),\n        max = formatterParams && formatterParams.max ? formatterParams.max : 100,\n        min = formatterParams && formatterParams.min ? formatterParams.min : 0,\n        legendAlign = formatterParams && formatterParams.legendAlign ? formatterParams.legendAlign : \"center\",\n        percent,\n        percentValue,\n        color,\n        legend,\n        legendColor,\n        top,\n        left,\n        right,\n        bottom; //make sure value is in range\n\n    percentValue = parseFloat(value) <= max ? parseFloat(value) : max;\n    percentValue = parseFloat(percentValue) >= min ? parseFloat(percentValue) : min; //workout percentage\n\n    percent = (max - min) / 100;\n    percentValue = Math.round((percentValue - min) / percent); //set bar color\n\n    switch (_typeof(formatterParams.color)) {\n      case \"string\":\n        color = formatterParams.color;\n        break;\n\n      case \"function\":\n        color = formatterParams.color(value);\n        break;\n\n      case \"object\":\n        if (Array.isArray(formatterParams.color)) {\n          var unit = 100 / formatterParams.color.length;\n          var index = Math.floor(percentValue / unit);\n          index = Math.min(index, formatterParams.color.length - 1);\n          index = Math.max(index, 0);\n          color = formatterParams.color[index];\n          break;\n        }\n\n      default:\n        color = \"#2DC214\";\n    } //generate legend\n\n\n    switch (_typeof(formatterParams.legend)) {\n      case \"string\":\n        legend = formatterParams.legend;\n        break;\n\n      case \"function\":\n        legend = formatterParams.legend(value);\n        break;\n\n      case \"boolean\":\n        legend = value;\n        break;\n\n      default:\n        legend = false;\n    } //set legend color\n\n\n    switch (_typeof(formatterParams.legendColor)) {\n      case \"string\":\n        legendColor = formatterParams.legendColor;\n        break;\n\n      case \"function\":\n        legendColor = formatterParams.legendColor(value);\n        break;\n\n      case \"object\":\n        if (Array.isArray(formatterParams.legendColor)) {\n          var unit = 100 / formatterParams.legendColor.length;\n          var index = Math.floor(percentValue / unit);\n          index = Math.min(index, formatterParams.legendColor.length - 1);\n          index = Math.max(index, 0);\n          legendColor = formatterParams.legendColor[index];\n        }\n\n        break;\n\n      default:\n        legendColor = \"#000\";\n    }\n\n    element.style.minWidth = \"30px\";\n    element.style.position = \"relative\";\n    element.setAttribute(\"aria-label\", percentValue);\n    var barEl = document.createElement(\"div\");\n    barEl.style.display = \"inline-block\";\n    barEl.style.position = \"relative\";\n    barEl.style.width = percentValue + \"%\";\n    barEl.style.backgroundColor = color;\n    barEl.style.height = \"100%\";\n    barEl.setAttribute('data-max', max);\n    barEl.setAttribute('data-min', min);\n\n    if (legend) {\n      var legendEl = document.createElement(\"div\");\n      legendEl.style.position = \"absolute\";\n      legendEl.style.top = \"4px\";\n      legendEl.style.left = 0;\n      legendEl.style.textAlign = legendAlign;\n      legendEl.style.width = \"100%\";\n      legendEl.style.color = legendColor;\n      legendEl.innerHTML = legend;\n    }\n\n    onRendered(function () {\n      //handle custom element needed if formatter is to be included in printed/downloaded output\n      if (!(cell instanceof CellComponent)) {\n        var holderEl = document.createElement(\"div\");\n        holderEl.style.position = \"absolute\";\n        holderEl.style.top = \"4px\";\n        holderEl.style.bottom = \"4px\";\n        holderEl.style.left = \"4px\";\n        holderEl.style.right = \"4px\";\n        element.appendChild(holderEl);\n        element = holderEl;\n      }\n\n      element.appendChild(barEl);\n\n      if (legend) {\n        element.appendChild(legendEl);\n      }\n    });\n    return \"\";\n  },\n  //background color\n  color: function color(cell, formatterParams, onRendered) {\n    cell.getElement().style.backgroundColor = this.sanitizeHTML(cell.getValue());\n    return \"\";\n  },\n  //tick icon\n  buttonTick: function buttonTick(cell, formatterParams, onRendered) {\n    return '<svg enable-background=\"new 0 0 24 24\" height=\"14\" width=\"14\" viewBox=\"0 0 24 24\" xml:space=\"preserve\" ><path fill=\"#2DC214\" clip-rule=\"evenodd\" d=\"M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z\" fill-rule=\"evenodd\"/></svg>';\n  },\n  //cross icon\n  buttonCross: function buttonCross(cell, formatterParams, onRendered) {\n    return '<svg enable-background=\"new 0 0 24 24\" height=\"14\" width=\"14\" viewBox=\"0 0 24 24\" xml:space=\"preserve\" ><path fill=\"#CE1515\" d=\"M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z\"/></svg>';\n  },\n  //current row number\n  rownum: function rownum(cell, formatterParams, onRendered) {\n    return this.table.rowManager.activeRows.indexOf(cell.getRow()._getSelf()) + 1;\n  },\n  //row handle\n  handle: function handle(cell, formatterParams, onRendered) {\n    cell.getElement().classList.add(\"tabulator-row-handle\");\n    return \"<div class='tabulator-row-handle-box'><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div></div>\";\n  },\n  responsiveCollapse: function responsiveCollapse(cell, formatterParams, onRendered) {\n    var self = this,\n        open = false,\n        el = document.createElement(\"div\"),\n        config = cell.getRow()._row.modules.responsiveLayout;\n\n    el.classList.add(\"tabulator-responsive-collapse-toggle\");\n    el.innerHTML = \"<span class='tabulator-responsive-collapse-toggle-open'>+</span><span class='tabulator-responsive-collapse-toggle-close'>-</span>\";\n    cell.getElement().classList.add(\"tabulator-row-handle\");\n\n    function toggleList(isOpen) {\n      var collapseEl = config.element;\n      config.open = isOpen;\n\n      if (collapseEl) {\n        if (config.open) {\n          el.classList.add(\"open\");\n          collapseEl.style.display = '';\n        } else {\n          el.classList.remove(\"open\");\n          collapseEl.style.display = 'none';\n        }\n      }\n    }\n\n    el.addEventListener(\"click\", function (e) {\n      e.stopImmediatePropagation();\n      toggleList(!config.open);\n    });\n    toggleList(config.open);\n    return el;\n  },\n  rowSelection: function rowSelection(cell, formatterParams, onRendered) {\n    var _this62 = this;\n\n    var checkbox = document.createElement(\"input\");\n    checkbox.type = 'checkbox';\n\n    if (this.table.modExists(\"selectRow\", true)) {\n      checkbox.addEventListener(\"click\", function (e) {\n        e.stopPropagation();\n      });\n\n      if (typeof cell.getRow == 'function') {\n        var row = cell.getRow();\n        checkbox.addEventListener(\"change\", function (e) {\n          row.toggleSelect();\n        });\n        checkbox.checked = row.isSelected();\n        this.table.modules.selectRow.registerRowSelectCheckbox(row, checkbox);\n      } else {\n        checkbox.addEventListener(\"change\", function (e) {\n          if (_this62.table.modules.selectRow.selectedRows.length) {\n            _this62.table.deselectRow();\n          } else {\n            _this62.table.selectRow(formatterParams.rowRange);\n          }\n        });\n        this.table.modules.selectRow.registerHeaderSelectCheckbox(checkbox);\n      }\n    }\n\n    return checkbox;\n  }\n};\nTabulator.prototype.registerModule(\"format\", Format);\n\nvar FrozenColumns = function FrozenColumns(table) {\n  this.table = table; //hold Tabulator object\n\n  this.leftColumns = [];\n  this.rightColumns = [];\n  this.leftMargin = 0;\n  this.rightMargin = 0;\n  this.rightPadding = 0;\n  this.initializationMode = \"left\";\n  this.active = false;\n  this.scrollEndTimer = false;\n}; //reset initial state\n\n\nFrozenColumns.prototype.reset = function () {\n  this.initializationMode = \"left\";\n  this.leftColumns = [];\n  this.rightColumns = [];\n  this.leftMargin = 0;\n  this.rightMargin = 0;\n  this.rightMargin = 0;\n  this.active = false;\n  this.table.columnManager.headersElement.style.marginLeft = 0;\n  this.table.columnManager.element.style.paddingRight = 0;\n}; //initialize specific column\n\n\nFrozenColumns.prototype.initializeColumn = function (column) {\n  var config = {\n    margin: 0,\n    edge: false\n  };\n\n  if (!column.isGroup) {\n    if (this.frozenCheck(column)) {\n      config.position = this.initializationMode;\n\n      if (this.initializationMode == \"left\") {\n        this.leftColumns.push(column);\n      } else {\n        this.rightColumns.unshift(column);\n      }\n\n      this.active = true;\n      column.modules.frozen = config;\n    } else {\n      this.initializationMode = \"right\";\n    }\n  }\n};\n\nFrozenColumns.prototype.frozenCheck = function (column) {\n  var frozen = false;\n\n  if (column.parent.isGroup && column.definition.frozen) {\n    console.warn(\"Frozen Column Error - Parent column group must be frozen, not individual columns or sub column groups\");\n  }\n\n  if (column.parent.isGroup) {\n    return this.frozenCheck(column.parent);\n  } else {\n    return column.definition.frozen;\n  }\n\n  return frozen;\n}; //quick layout to smooth horizontal scrolling\n\n\nFrozenColumns.prototype.scrollHorizontal = function () {\n  var _this63 = this;\n\n  var rows;\n\n  if (this.active) {\n    clearTimeout(this.scrollEndTimer); //layout all rows after scroll is complete\n\n    this.scrollEndTimer = setTimeout(function () {\n      _this63.layout();\n    }, 100);\n    rows = this.table.rowManager.getVisibleRows();\n    this.calcMargins();\n    this.layoutColumnPosition();\n    this.layoutCalcRows();\n    rows.forEach(function (row) {\n      if (row.type === \"row\") {\n        _this63.layoutRow(row);\n      }\n    });\n    this.table.rowManager.tableElement.style.marginRight = this.rightMargin;\n  }\n}; //calculate margins for rows\n\n\nFrozenColumns.prototype.calcMargins = function () {\n  this.leftMargin = this._calcSpace(this.leftColumns, this.leftColumns.length) + \"px\";\n  this.table.columnManager.headersElement.style.marginLeft = this.leftMargin;\n  this.rightMargin = this._calcSpace(this.rightColumns, this.rightColumns.length) + \"px\";\n  this.table.columnManager.element.style.paddingRight = this.rightMargin; //calculate right frozen columns\n\n  this.rightPadding = this.table.rowManager.element.clientWidth + this.table.columnManager.scrollLeft;\n}; //layout calculation rows\n\n\nFrozenColumns.prototype.layoutCalcRows = function () {\n  if (this.table.modExists(\"columnCalcs\")) {\n    if (this.table.modules.columnCalcs.topInitialized && this.table.modules.columnCalcs.topRow) {\n      this.layoutRow(this.table.modules.columnCalcs.topRow);\n    }\n\n    if (this.table.modules.columnCalcs.botInitialized && this.table.modules.columnCalcs.botRow) {\n      this.layoutRow(this.table.modules.columnCalcs.botRow);\n    }\n  }\n}; //calculate column positions and layout headers\n\n\nFrozenColumns.prototype.layoutColumnPosition = function (allCells) {\n  var _this64 = this;\n\n  var leftParents = [];\n  this.leftColumns.forEach(function (column, i) {\n    column.modules.frozen.margin = _this64._calcSpace(_this64.leftColumns, i) + _this64.table.columnManager.scrollLeft + \"px\";\n\n    if (i == _this64.leftColumns.length - 1) {\n      column.modules.frozen.edge = true;\n    } else {\n      column.modules.frozen.edge = false;\n    }\n\n    if (column.parent.isGroup) {\n      var parentEl = _this64.getColGroupParentElement(column);\n\n      if (!leftParents.includes(parentEl)) {\n        _this64.layoutElement(parentEl, column);\n\n        leftParents.push(parentEl);\n      }\n\n      if (column.modules.frozen.edge) {\n        parentEl.classList.add(\"tabulator-frozen-\" + column.modules.frozen.position);\n      }\n    } else {\n      _this64.layoutElement(column.getElement(), column);\n    }\n\n    if (allCells) {\n      column.cells.forEach(function (cell) {\n        _this64.layoutElement(cell.getElement(), column);\n      });\n    }\n  });\n  this.rightColumns.forEach(function (column, i) {\n    column.modules.frozen.margin = _this64.rightPadding - _this64._calcSpace(_this64.rightColumns, i + 1) + \"px\";\n\n    if (i == _this64.rightColumns.length - 1) {\n      column.modules.frozen.edge = true;\n    } else {\n      column.modules.frozen.edge = false;\n    }\n\n    if (column.parent.isGroup) {\n      _this64.layoutElement(_this64.getColGroupParentElement(column), column);\n    } else {\n      _this64.layoutElement(column.getElement(), column);\n    }\n\n    if (allCells) {\n      column.cells.forEach(function (cell) {\n        _this64.layoutElement(cell.getElement(), column);\n      });\n    }\n  });\n};\n\nFrozenColumns.prototype.getColGroupParentElement = function (column) {\n  return column.parent.isGroup ? this.getColGroupParentElement(column.parent) : column.getElement();\n}; //layout columns appropropriatly\n\n\nFrozenColumns.prototype.layout = function () {\n  var self = this,\n      rightMargin = 0;\n\n  if (self.active) {\n    //calculate row padding\n    this.calcMargins(); // self.table.rowManager.activeRows.forEach(function(row){\n    // \tself.layoutRow(row);\n    // });\n    // if(self.table.options.dataTree){\n\n    self.table.rowManager.getDisplayRows().forEach(function (row) {\n      if (row.type === \"row\") {\n        self.layoutRow(row);\n      }\n    }); // }\n\n    this.layoutCalcRows(); //calculate left columns\n\n    this.layoutColumnPosition(true); // if(tableHolder.scrollHeight > tableHolder.clientHeight){\n    // \trightMargin -= tableHolder.offsetWidth - tableHolder.clientWidth;\n    // }\n\n    this.table.rowManager.tableElement.style.marginRight = this.rightMargin;\n  }\n};\n\nFrozenColumns.prototype.layoutRow = function (row) {\n  var _this65 = this;\n\n  var rowEl = row.getElement();\n  rowEl.style.paddingLeft = this.leftMargin; // rowEl.style.paddingRight = this.rightMargin + \"px\";\n\n  this.leftColumns.forEach(function (column) {\n    var cell = row.getCell(column);\n\n    if (cell) {\n      _this65.layoutElement(cell.getElement(), column);\n    }\n  });\n  this.rightColumns.forEach(function (column) {\n    var cell = row.getCell(column);\n\n    if (cell) {\n      _this65.layoutElement(cell.getElement(), column);\n    }\n  });\n};\n\nFrozenColumns.prototype.layoutElement = function (element, column) {\n  if (column.modules.frozen) {\n    element.style.position = \"absolute\";\n    element.style.left = column.modules.frozen.margin;\n    element.classList.add(\"tabulator-frozen\");\n\n    if (column.modules.frozen.edge) {\n      element.classList.add(\"tabulator-frozen-\" + column.modules.frozen.position);\n    }\n  }\n};\n\nFrozenColumns.prototype._calcSpace = function (columns, index) {\n  var width = 0;\n\n  for (var _i12 = 0; _i12 < index; _i12++) {\n    if (columns[_i12].visible) {\n      width += columns[_i12].getWidth();\n    }\n  }\n\n  return width;\n};\n\nTabulator.prototype.registerModule(\"frozenColumns\", FrozenColumns);\n\nvar FrozenRows = function FrozenRows(table) {\n  this.table = table; //hold Tabulator object\n\n  this.topElement = document.createElement(\"div\");\n  this.rows = [];\n  this.displayIndex = 0; //index in display pipeline\n};\n\nFrozenRows.prototype.initialize = function () {\n  this.rows = [];\n  this.topElement.classList.add(\"tabulator-frozen-rows-holder\"); // this.table.columnManager.element.append(this.topElement);\n\n  this.table.columnManager.getElement().insertBefore(this.topElement, this.table.columnManager.headersElement.nextSibling);\n};\n\nFrozenRows.prototype.setDisplayIndex = function (index) {\n  this.displayIndex = index;\n};\n\nFrozenRows.prototype.getDisplayIndex = function () {\n  return this.displayIndex;\n};\n\nFrozenRows.prototype.isFrozen = function () {\n  return !!this.rows.length;\n}; //filter frozen rows out of display data\n\n\nFrozenRows.prototype.getRows = function (rows) {\n  var self = this,\n      frozen = [],\n      output = rows.slice(0);\n  this.rows.forEach(function (row) {\n    var index = output.indexOf(row);\n\n    if (index > -1) {\n      output.splice(index, 1);\n    }\n  });\n  return output;\n};\n\nFrozenRows.prototype.freezeRow = function (row) {\n  if (!row.modules.frozen) {\n    row.modules.frozen = true;\n    this.topElement.appendChild(row.getElement());\n    row.initialize();\n    row.normalizeHeight();\n    this.table.rowManager.adjustTableSize();\n    this.rows.push(row);\n    this.table.rowManager.refreshActiveData(\"display\");\n    this.styleRows();\n  } else {\n    console.warn(\"Freeze Error - Row is already frozen\");\n  }\n};\n\nFrozenRows.prototype.unfreezeRow = function (row) {\n  var index = this.rows.indexOf(row);\n\n  if (row.modules.frozen) {\n    row.modules.frozen = false;\n    this.detachRow(row);\n    this.table.rowManager.adjustTableSize();\n    this.table.rowManager.refreshActiveData(\"display\");\n\n    if (this.rows.length) {\n      this.styleRows();\n    }\n  } else {\n    console.warn(\"Freeze Error - Row is already unfrozen\");\n  }\n};\n\nFrozenRows.prototype.detachRow = function (row) {\n  var index = this.rows.indexOf(row);\n\n  if (index > -1) {\n    var rowEl = row.getElement();\n    rowEl.parentNode.removeChild(rowEl);\n    this.rows.splice(index, 1);\n  }\n};\n\nFrozenRows.prototype.styleRows = function (row) {\n  var self = this;\n  this.rows.forEach(function (row, i) {\n    self.table.rowManager.styleRow(row, i);\n  });\n};\n\nTabulator.prototype.registerModule(\"frozenRows\", FrozenRows); //public group object\n\nvar GroupComponent = function GroupComponent(group) {\n  this._group = group;\n  this.type = \"GroupComponent\";\n};\n\nGroupComponent.prototype.getKey = function () {\n  return this._group.key;\n};\n\nGroupComponent.prototype.getField = function () {\n  return this._group.field;\n};\n\nGroupComponent.prototype.getElement = function () {\n  return this._group.element;\n};\n\nGroupComponent.prototype.getRows = function () {\n  return this._group.getRows(true);\n};\n\nGroupComponent.prototype.getSubGroups = function () {\n  return this._group.getSubGroups(true);\n};\n\nGroupComponent.prototype.getParentGroup = function () {\n  return this._group.parent ? this._group.parent.getComponent() : false;\n};\n\nGroupComponent.prototype.getVisibility = function () {\n  console.warn(\"getVisibility function is deprecated, you should now use the isVisible function\");\n  return this._group.visible;\n};\n\nGroupComponent.prototype.isVisible = function () {\n  return this._group.visible;\n};\n\nGroupComponent.prototype.show = function () {\n  this._group.show();\n};\n\nGroupComponent.prototype.hide = function () {\n  this._group.hide();\n};\n\nGroupComponent.prototype.toggle = function () {\n  this._group.toggleVisibility();\n};\n\nGroupComponent.prototype._getSelf = function () {\n  return this._group;\n};\n\nGroupComponent.prototype.getTable = function () {\n  return this._group.groupManager.table;\n}; //////////////////////////////////////////////////\n//////////////// Group Functions /////////////////\n//////////////////////////////////////////////////\n\n\nvar Group = function Group(groupManager, parent, level, key, field, generator, oldGroup) {\n  this.groupManager = groupManager;\n  this.parent = parent;\n  this.key = key;\n  this.level = level;\n  this.field = field;\n  this.hasSubGroups = level < groupManager.groupIDLookups.length - 1;\n  this.addRow = this.hasSubGroups ? this._addRowToGroup : this._addRow;\n  this.type = \"group\"; //type of element\n\n  this.old = oldGroup;\n  this.rows = [];\n  this.groups = [];\n  this.groupList = [];\n  this.generator = generator;\n  this.elementContents = false;\n  this.height = 0;\n  this.outerHeight = 0;\n  this.initialized = false;\n  this.calcs = {};\n  this.initialized = false;\n  this.modules = {};\n  this.arrowElement = false;\n  this.visible = oldGroup ? oldGroup.visible : typeof groupManager.startOpen[level] !== \"undefined\" ? groupManager.startOpen[level] : groupManager.startOpen[0];\n  this.component = null;\n  this.createElements();\n  this.addBindings();\n  this.createValueGroups();\n};\n\nGroup.prototype.wipe = function () {\n  if (this.groupList.length) {\n    this.groupList.forEach(function (group) {\n      group.wipe();\n    });\n  } else {\n    this.element = false;\n    this.arrowElement = false;\n    this.elementContents = false;\n  }\n};\n\nGroup.prototype.createElements = function () {\n  var arrow = document.createElement(\"div\");\n  arrow.classList.add(\"tabulator-arrow\");\n  this.element = document.createElement(\"div\");\n  this.element.classList.add(\"tabulator-row\");\n  this.element.classList.add(\"tabulator-group\");\n  this.element.classList.add(\"tabulator-group-level-\" + this.level);\n  this.element.setAttribute(\"role\", \"rowgroup\");\n  this.arrowElement = document.createElement(\"div\");\n  this.arrowElement.classList.add(\"tabulator-group-toggle\");\n  this.arrowElement.appendChild(arrow); //setup movable rows\n\n  if (this.groupManager.table.options.movableRows !== false && this.groupManager.table.modExists(\"moveRow\")) {\n    this.groupManager.table.modules.moveRow.initializeGroupHeader(this);\n  }\n};\n\nGroup.prototype.createValueGroups = function () {\n  var _this66 = this;\n\n  var level = this.level + 1;\n\n  if (this.groupManager.allowedValues && this.groupManager.allowedValues[level]) {\n    this.groupManager.allowedValues[level].forEach(function (value) {\n      _this66._createGroup(value, level);\n    });\n  }\n};\n\nGroup.prototype.addBindings = function () {\n  var self = this,\n      dblTap,\n      tapHold,\n      tap,\n      toggleElement; //handle group click events\n\n  if (self.groupManager.table.options.groupClick) {\n    self.element.addEventListener(\"click\", function (e) {\n      self.groupManager.table.options.groupClick.call(self.groupManager.table, e, self.getComponent());\n    });\n  }\n\n  if (self.groupManager.table.options.groupDblClick) {\n    self.element.addEventListener(\"dblclick\", function (e) {\n      self.groupManager.table.options.groupDblClick.call(self.groupManager.table, e, self.getComponent());\n    });\n  }\n\n  if (self.groupManager.table.options.groupContext) {\n    self.element.addEventListener(\"contextmenu\", function (e) {\n      self.groupManager.table.options.groupContext.call(self.groupManager.table, e, self.getComponent());\n    });\n  }\n\n  if ((self.groupManager.table.options.groupContextMenu || self.groupManager.table.options.groupClickMenu) && self.groupManager.table.modExists(\"menu\")) {\n    self.groupManager.table.modules.menu.initializeGroup.call(self.groupManager.table.modules.menu, self);\n  }\n\n  if (self.groupManager.table.options.groupTap) {\n    tap = false;\n    self.element.addEventListener(\"touchstart\", function (e) {\n      tap = true;\n    }, {\n      passive: true\n    });\n    self.element.addEventListener(\"touchend\", function (e) {\n      if (tap) {\n        self.groupManager.table.options.groupTap(e, self.getComponent());\n      }\n\n      tap = false;\n    });\n  }\n\n  if (self.groupManager.table.options.groupDblTap) {\n    dblTap = null;\n    self.element.addEventListener(\"touchend\", function (e) {\n      if (dblTap) {\n        clearTimeout(dblTap);\n        dblTap = null;\n        self.groupManager.table.options.groupDblTap(e, self.getComponent());\n      } else {\n        dblTap = setTimeout(function () {\n          clearTimeout(dblTap);\n          dblTap = null;\n        }, 300);\n      }\n    });\n  }\n\n  if (self.groupManager.table.options.groupTapHold) {\n    tapHold = null;\n    self.element.addEventListener(\"touchstart\", function (e) {\n      clearTimeout(tapHold);\n      tapHold = setTimeout(function () {\n        clearTimeout(tapHold);\n        tapHold = null;\n        tap = false;\n        self.groupManager.table.options.groupTapHold(e, self.getComponent());\n      }, 1000);\n    }, {\n      passive: true\n    });\n    self.element.addEventListener(\"touchend\", function (e) {\n      clearTimeout(tapHold);\n      tapHold = null;\n    });\n  }\n\n  if (self.groupManager.table.options.groupToggleElement) {\n    toggleElement = self.groupManager.table.options.groupToggleElement == \"arrow\" ? self.arrowElement : self.element;\n    toggleElement.addEventListener(\"click\", function (e) {\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n      self.toggleVisibility();\n    });\n  }\n};\n\nGroup.prototype._createGroup = function (groupID, level) {\n  var groupKey = level + \"_\" + groupID;\n  var group = new Group(this.groupManager, this, level, groupID, this.groupManager.groupIDLookups[level].field, this.groupManager.headerGenerator[level] || this.groupManager.headerGenerator[0], this.old ? this.old.groups[groupKey] : false);\n  this.groups[groupKey] = group;\n  this.groupList.push(group);\n};\n\nGroup.prototype._addRowToGroup = function (row) {\n  var level = this.level + 1;\n\n  if (this.hasSubGroups) {\n    var groupID = this.groupManager.groupIDLookups[level].func(row.getData()),\n        groupKey = level + \"_\" + groupID;\n\n    if (this.groupManager.allowedValues && this.groupManager.allowedValues[level]) {\n      if (this.groups[groupKey]) {\n        this.groups[groupKey].addRow(row);\n      }\n    } else {\n      if (!this.groups[groupKey]) {\n        this._createGroup(groupID, level);\n      }\n\n      this.groups[groupKey].addRow(row);\n    }\n  }\n};\n\nGroup.prototype._addRow = function (row) {\n  this.rows.push(row);\n  row.modules.group = this;\n};\n\nGroup.prototype.insertRow = function (row, to, after) {\n  var data = this.conformRowData({});\n  row.updateData(data);\n  var toIndex = this.rows.indexOf(to);\n\n  if (toIndex > -1) {\n    if (after) {\n      this.rows.splice(toIndex + 1, 0, row);\n    } else {\n      this.rows.splice(toIndex, 0, row);\n    }\n  } else {\n    if (after) {\n      this.rows.push(row);\n    } else {\n      this.rows.unshift(row);\n    }\n  }\n\n  row.modules.group = this;\n  this.generateGroupHeaderContents();\n\n  if (this.groupManager.table.modExists(\"columnCalcs\") && this.groupManager.table.options.columnCalcs != \"table\") {\n    this.groupManager.table.modules.columnCalcs.recalcGroup(this);\n  }\n\n  this.groupManager.updateGroupRows(true);\n};\n\nGroup.prototype.scrollHeader = function (left) {\n  this.arrowElement.style.marginLeft = left;\n  this.groupList.forEach(function (child) {\n    child.scrollHeader(left);\n  });\n};\n\nGroup.prototype.getRowIndex = function (row) {}; //update row data to match grouping contraints\n\n\nGroup.prototype.conformRowData = function (data) {\n  if (this.field) {\n    data[this.field] = this.key;\n  } else {\n    console.warn(\"Data Conforming Error - Cannot conform row data to match new group as groupBy is a function\");\n  }\n\n  if (this.parent) {\n    data = this.parent.conformRowData(data);\n  }\n\n  return data;\n};\n\nGroup.prototype.removeRow = function (row) {\n  var index = this.rows.indexOf(row);\n  var el = row.getElement();\n\n  if (index > -1) {\n    this.rows.splice(index, 1);\n  }\n\n  if (!this.groupManager.table.options.groupValues && !this.rows.length) {\n    if (this.parent) {\n      this.parent.removeGroup(this);\n    } else {\n      this.groupManager.removeGroup(this);\n    }\n\n    this.groupManager.updateGroupRows(true);\n  } else {\n    if (el.parentNode) {\n      el.parentNode.removeChild(el);\n    }\n\n    this.generateGroupHeaderContents();\n\n    if (this.groupManager.table.modExists(\"columnCalcs\") && this.groupManager.table.options.columnCalcs != \"table\") {\n      this.groupManager.table.modules.columnCalcs.recalcGroup(this);\n    }\n  }\n};\n\nGroup.prototype.removeGroup = function (group) {\n  var groupKey = group.level + \"_\" + group.key,\n      index;\n\n  if (this.groups[groupKey]) {\n    delete this.groups[groupKey];\n    index = this.groupList.indexOf(group);\n\n    if (index > -1) {\n      this.groupList.splice(index, 1);\n    }\n\n    if (!this.groupList.length) {\n      if (this.parent) {\n        this.parent.removeGroup(this);\n      } else {\n        this.groupManager.removeGroup(this);\n      }\n    }\n  }\n};\n\nGroup.prototype.getHeadersAndRows = function (noCalc) {\n  var output = [];\n  output.push(this);\n\n  this._visSet();\n\n  if (this.visible) {\n    if (this.groupList.length) {\n      this.groupList.forEach(function (group) {\n        output = output.concat(group.getHeadersAndRows(noCalc));\n      });\n    } else {\n      if (!noCalc && this.groupManager.table.options.columnCalcs != \"table\" && this.groupManager.table.modExists(\"columnCalcs\") && this.groupManager.table.modules.columnCalcs.hasTopCalcs()) {\n        if (this.calcs.top) {\n          this.calcs.top.detachElement();\n          this.calcs.top.deleteCells();\n        }\n\n        this.calcs.top = this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows);\n        output.push(this.calcs.top);\n      }\n\n      output = output.concat(this.rows);\n\n      if (!noCalc && this.groupManager.table.options.columnCalcs != \"table\" && this.groupManager.table.modExists(\"columnCalcs\") && this.groupManager.table.modules.columnCalcs.hasBottomCalcs()) {\n        if (this.calcs.bottom) {\n          this.calcs.bottom.detachElement();\n          this.calcs.bottom.deleteCells();\n        }\n\n        this.calcs.bottom = this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows);\n        output.push(this.calcs.bottom);\n      }\n    }\n  } else {\n    if (!this.groupList.length && this.groupManager.table.options.columnCalcs != \"table\") {\n      if (this.groupManager.table.modExists(\"columnCalcs\")) {\n        if (!noCalc && this.groupManager.table.modules.columnCalcs.hasTopCalcs()) {\n          if (this.calcs.top) {\n            this.calcs.top.detachElement();\n            this.calcs.top.deleteCells();\n          }\n\n          if (this.groupManager.table.options.groupClosedShowCalcs) {\n            this.calcs.top = this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows);\n            output.push(this.calcs.top);\n          }\n        }\n\n        if (!noCalc && this.groupManager.table.modules.columnCalcs.hasBottomCalcs()) {\n          if (this.calcs.bottom) {\n            this.calcs.bottom.detachElement();\n            this.calcs.bottom.deleteCells();\n          }\n\n          if (this.groupManager.table.options.groupClosedShowCalcs) {\n            this.calcs.bottom = this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows);\n            output.push(this.calcs.bottom);\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n};\n\nGroup.prototype.getData = function (visible, transform) {\n  var self = this,\n      output = [];\n\n  this._visSet();\n\n  if (!visible || visible && this.visible) {\n    this.rows.forEach(function (row) {\n      output.push(row.getData(transform || \"data\"));\n    });\n  }\n\n  return output;\n}; // Group.prototype.getRows = function(){\n// \tthis._visSet();\n// \treturn this.visible ? this.rows : [];\n// };\n\n\nGroup.prototype.getRowCount = function () {\n  var count = 0;\n\n  if (this.groupList.length) {\n    this.groupList.forEach(function (group) {\n      count += group.getRowCount();\n    });\n  } else {\n    count = this.rows.length;\n  }\n\n  return count;\n};\n\nGroup.prototype.toggleVisibility = function () {\n  if (this.visible) {\n    this.hide();\n  } else {\n    this.show();\n  }\n};\n\nGroup.prototype.hide = function () {\n  this.visible = false;\n\n  if (this.groupManager.table.rowManager.getRenderMode() == \"classic\" && !this.groupManager.table.options.pagination) {\n    this.element.classList.remove(\"tabulator-group-visible\");\n\n    if (this.groupList.length) {\n      this.groupList.forEach(function (group) {\n        var rows = group.getHeadersAndRows();\n        rows.forEach(function (row) {\n          row.detachElement();\n        });\n      });\n    } else {\n      this.rows.forEach(function (row) {\n        var rowEl = row.getElement();\n        rowEl.parentNode.removeChild(rowEl);\n      });\n    }\n\n    this.groupManager.table.rowManager.setDisplayRows(this.groupManager.updateGroupRows(), this.groupManager.getDisplayIndex());\n    this.groupManager.table.rowManager.checkClassicModeGroupHeaderWidth();\n  } else {\n    this.groupManager.updateGroupRows(true);\n  }\n\n  this.groupManager.table.options.groupVisibilityChanged.call(this.table, this.getComponent(), false);\n};\n\nGroup.prototype.show = function () {\n  var self = this;\n  self.visible = true;\n\n  if (this.groupManager.table.rowManager.getRenderMode() == \"classic\" && !this.groupManager.table.options.pagination) {\n    this.element.classList.add(\"tabulator-group-visible\");\n    var prev = self.getElement();\n\n    if (this.groupList.length) {\n      this.groupList.forEach(function (group) {\n        var rows = group.getHeadersAndRows();\n        rows.forEach(function (row) {\n          var rowEl = row.getElement();\n          prev.parentNode.insertBefore(rowEl, prev.nextSibling);\n          row.initialize();\n          prev = rowEl;\n        });\n      });\n    } else {\n      self.rows.forEach(function (row) {\n        var rowEl = row.getElement();\n        prev.parentNode.insertBefore(rowEl, prev.nextSibling);\n        row.initialize();\n        prev = rowEl;\n      });\n    }\n\n    this.groupManager.table.rowManager.setDisplayRows(this.groupManager.updateGroupRows(), this.groupManager.getDisplayIndex());\n    this.groupManager.table.rowManager.checkClassicModeGroupHeaderWidth();\n  } else {\n    this.groupManager.updateGroupRows(true);\n  }\n\n  this.groupManager.table.options.groupVisibilityChanged.call(this.table, this.getComponent(), true);\n};\n\nGroup.prototype._visSet = function () {\n  var data = [];\n\n  if (typeof this.visible == \"function\") {\n    this.rows.forEach(function (row) {\n      data.push(row.getData());\n    });\n    this.visible = this.visible(this.key, this.getRowCount(), data, this.getComponent());\n  }\n};\n\nGroup.prototype.getRowGroup = function (row) {\n  var match = false;\n\n  if (this.groupList.length) {\n    this.groupList.forEach(function (group) {\n      var result = group.getRowGroup(row);\n\n      if (result) {\n        match = result;\n      }\n    });\n  } else {\n    if (this.rows.find(function (item) {\n      return item === row;\n    })) {\n      match = this;\n    }\n  }\n\n  return match;\n};\n\nGroup.prototype.getSubGroups = function (component) {\n  var output = [];\n  this.groupList.forEach(function (child) {\n    output.push(component ? child.getComponent() : child);\n  });\n  return output;\n};\n\nGroup.prototype.getRows = function (compoment) {\n  var output = [];\n  this.rows.forEach(function (row) {\n    output.push(compoment ? row.getComponent() : row);\n  });\n  return output;\n};\n\nGroup.prototype.generateGroupHeaderContents = function () {\n  var data = [];\n  this.rows.forEach(function (row) {\n    data.push(row.getData());\n  });\n  this.elementContents = this.generator(this.key, this.getRowCount(), data, this.getComponent());\n\n  while (this.element.firstChild) {\n    this.element.removeChild(this.element.firstChild);\n  }\n\n  if (typeof this.elementContents === \"string\") {\n    this.element.innerHTML = this.elementContents;\n  } else {\n    this.element.appendChild(this.elementContents);\n  }\n\n  this.element.insertBefore(this.arrowElement, this.element.firstChild);\n};\n\nGroup.prototype.getPath = function () {\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  path.unshift(this.key);\n\n  if (this.parent) {\n    this.parent.getPath(path);\n  }\n\n  return path;\n}; ////////////// Standard Row Functions //////////////\n\n\nGroup.prototype.getElement = function () {\n  this.addBindingsd = false;\n\n  this._visSet();\n\n  if (this.visible) {\n    this.element.classList.add(\"tabulator-group-visible\");\n  } else {\n    this.element.classList.remove(\"tabulator-group-visible\");\n  }\n\n  for (var i = 0; i < this.element.childNodes.length; ++i) {\n    this.element.childNodes[i].parentNode.removeChild(this.element.childNodes[i]);\n  }\n\n  this.generateGroupHeaderContents(); // this.addBindings();\n\n  return this.element;\n};\n\nGroup.prototype.detachElement = function () {\n  if (this.element && this.element.parentNode) {\n    this.element.parentNode.removeChild(this.element);\n  }\n}; //normalize the height of elements in the row\n\n\nGroup.prototype.normalizeHeight = function () {\n  this.setHeight(this.element.clientHeight);\n};\n\nGroup.prototype.initialize = function (force) {\n  if (!this.initialized || force) {\n    this.normalizeHeight();\n    this.initialized = true;\n  }\n};\n\nGroup.prototype.reinitialize = function () {\n  this.initialized = false;\n  this.height = 0;\n\n  if (Tabulator.prototype.helpers.elVisible(this.element)) {\n    this.initialize(true);\n  }\n};\n\nGroup.prototype.setHeight = function (height) {\n  if (this.height != height) {\n    this.height = height;\n    this.outerHeight = this.element.offsetHeight;\n  }\n}; //return rows outer height\n\n\nGroup.prototype.getHeight = function () {\n  return this.outerHeight;\n};\n\nGroup.prototype.getGroup = function () {\n  return this;\n};\n\nGroup.prototype.reinitializeHeight = function () {};\n\nGroup.prototype.calcHeight = function () {};\n\nGroup.prototype.setCellHeight = function () {};\n\nGroup.prototype.clearCellHeight = function () {}; //////////////// Object Generation /////////////////\n\n\nGroup.prototype.getComponent = function () {\n  if (!this.component) {\n    this.component = new GroupComponent(this);\n  }\n\n  return this.component;\n}; //////////////////////////////////////////////////\n////////////// Group Row Extension ///////////////\n//////////////////////////////////////////////////\n\n\nvar GroupRows = function GroupRows(table) {\n  this.table = table; //hold Tabulator object\n\n  this.groupIDLookups = false; //enable table grouping and set field to group by\n\n  this.startOpen = [function () {\n    return false;\n  }]; //starting state of group\n\n  this.headerGenerator = [function () {\n    return \"\";\n  }];\n  this.groupList = []; //ordered list of groups\n\n  this.allowedValues = false;\n  this.groups = {}; //hold row groups\n\n  this.displayIndex = 0; //index in display pipeline\n}; //initialize group configuration\n\n\nGroupRows.prototype.initialize = function () {\n  var self = this,\n      groupBy = self.table.options.groupBy,\n      startOpen = self.table.options.groupStartOpen,\n      groupHeader = self.table.options.groupHeader;\n  this.allowedValues = self.table.options.groupValues;\n\n  if (Array.isArray(groupBy) && Array.isArray(groupHeader) && groupBy.length > groupHeader.length) {\n    console.warn(\"Error creating group headers, groupHeader array is shorter than groupBy array\");\n  }\n\n  self.headerGenerator = [function () {\n    return \"\";\n  }];\n  this.startOpen = [function () {\n    return false;\n  }]; //starting state of group\n\n  self.table.modules.localize.bind(\"groups|item\", function (langValue, lang) {\n    self.headerGenerator[0] = function (value, count, data) {\n      //header layout function\n      return (typeof value === \"undefined\" ? \"\" : value) + \"<span>(\" + count + \" \" + (count === 1 ? langValue : lang.groups.items) + \")</span>\";\n    };\n  });\n  this.groupIDLookups = [];\n\n  if (Array.isArray(groupBy) || groupBy) {\n    if (this.table.modExists(\"columnCalcs\") && this.table.options.columnCalcs != \"table\" && this.table.options.columnCalcs != \"both\") {\n      this.table.modules.columnCalcs.removeCalcs();\n    }\n  } else {\n    if (this.table.modExists(\"columnCalcs\") && this.table.options.columnCalcs != \"group\") {\n      var cols = this.table.columnManager.getRealColumns();\n      cols.forEach(function (col) {\n        if (col.definition.topCalc) {\n          self.table.modules.columnCalcs.initializeTopRow();\n        }\n\n        if (col.definition.bottomCalc) {\n          self.table.modules.columnCalcs.initializeBottomRow();\n        }\n      });\n    }\n  }\n\n  if (!Array.isArray(groupBy)) {\n    groupBy = [groupBy];\n  }\n\n  groupBy.forEach(function (group, i) {\n    var lookupFunc, column;\n\n    if (typeof group == \"function\") {\n      lookupFunc = group;\n    } else {\n      column = self.table.columnManager.getColumnByField(group);\n\n      if (column) {\n        lookupFunc = function lookupFunc(data) {\n          return column.getFieldValue(data);\n        };\n      } else {\n        lookupFunc = function lookupFunc(data) {\n          return data[group];\n        };\n      }\n    }\n\n    self.groupIDLookups.push({\n      field: typeof group === \"function\" ? false : group,\n      func: lookupFunc,\n      values: self.allowedValues ? self.allowedValues[i] : false\n    });\n  });\n\n  if (startOpen) {\n    if (!Array.isArray(startOpen)) {\n      startOpen = [startOpen];\n    }\n\n    startOpen.forEach(function (level) {\n      level = typeof level == \"function\" ? level : function () {\n        return true;\n      };\n    });\n    self.startOpen = startOpen;\n  }\n\n  if (groupHeader) {\n    self.headerGenerator = Array.isArray(groupHeader) ? groupHeader : [groupHeader];\n  }\n\n  this.initialized = true;\n};\n\nGroupRows.prototype.setDisplayIndex = function (index) {\n  this.displayIndex = index;\n};\n\nGroupRows.prototype.getDisplayIndex = function () {\n  return this.displayIndex;\n}; //return appropriate rows with group headers\n\n\nGroupRows.prototype.getRows = function (rows) {\n  if (this.groupIDLookups.length) {\n    this.table.options.dataGrouping.call(this.table);\n    this.generateGroups(rows);\n\n    if (this.table.options.dataGrouped) {\n      this.table.options.dataGrouped.call(this.table, this.getGroups(true));\n    }\n\n    return this.updateGroupRows();\n  } else {\n    return rows.slice(0);\n  }\n};\n\nGroupRows.prototype.getGroups = function (compoment) {\n  var groupComponents = [];\n  this.groupList.forEach(function (group) {\n    groupComponents.push(compoment ? group.getComponent() : group);\n  });\n  return groupComponents;\n};\n\nGroupRows.prototype.getChildGroups = function (group) {\n  var _this67 = this;\n\n  var groupComponents = [];\n\n  if (!group) {\n    group = this;\n  }\n\n  group.groupList.forEach(function (child) {\n    if (child.groupList.length) {\n      groupComponents = groupComponents.concat(_this67.getChildGroups(child));\n    } else {\n      groupComponents.push(child);\n    }\n  });\n  return groupComponents;\n};\n\nGroupRows.prototype.wipe = function () {\n  this.groupList.forEach(function (group) {\n    group.wipe();\n  });\n};\n\nGroupRows.prototype.pullGroupListData = function (groupList) {\n  var self = this;\n  var groupListData = [];\n  groupList.forEach(function (group) {\n    var groupHeader = {};\n    groupHeader.level = 0;\n    groupHeader.rowCount = 0;\n    groupHeader.headerContent = \"\";\n    var childData = [];\n\n    if (group.hasSubGroups) {\n      childData = self.pullGroupListData(group.groupList);\n      groupHeader.level = group.level;\n      groupHeader.rowCount = childData.length - group.groupList.length; // data length minus number of sub-headers\n\n      groupHeader.headerContent = group.generator(group.key, groupHeader.rowCount, group.rows, group);\n      groupListData.push(groupHeader);\n      groupListData = groupListData.concat(childData);\n    } else {\n      groupHeader.level = group.level;\n      groupHeader.headerContent = group.generator(group.key, group.rows.length, group.rows, group);\n      groupHeader.rowCount = group.getRows().length;\n      groupListData.push(groupHeader);\n      group.getRows().forEach(function (row) {\n        groupListData.push(row.getData(\"data\"));\n      });\n    }\n  });\n  return groupListData;\n};\n\nGroupRows.prototype.getGroupedData = function () {\n  return this.pullGroupListData(this.groupList);\n};\n\nGroupRows.prototype.getRowGroup = function (row) {\n  var match = false;\n  this.groupList.forEach(function (group) {\n    var result = group.getRowGroup(row);\n\n    if (result) {\n      match = result;\n    }\n  });\n  return match;\n};\n\nGroupRows.prototype.countGroups = function () {\n  return this.groupList.length;\n};\n\nGroupRows.prototype.generateGroups = function (rows) {\n  var self = this,\n      oldGroups = self.groups;\n  self.groups = {};\n  self.groupList = [];\n\n  if (this.allowedValues && this.allowedValues[0]) {\n    this.allowedValues[0].forEach(function (value) {\n      self.createGroup(value, 0, oldGroups);\n    });\n    rows.forEach(function (row) {\n      self.assignRowToExistingGroup(row, oldGroups);\n    });\n  } else {\n    rows.forEach(function (row) {\n      self.assignRowToGroup(row, oldGroups);\n    });\n  }\n};\n\nGroupRows.prototype.createGroup = function (groupID, level, oldGroups) {\n  var groupKey = level + \"_\" + groupID,\n      group;\n  oldGroups = oldGroups || [];\n  group = new Group(this, false, level, groupID, this.groupIDLookups[0].field, this.headerGenerator[0], oldGroups[groupKey]);\n  this.groups[groupKey] = group;\n  this.groupList.push(group);\n}; // GroupRows.prototype.assignRowToGroup = function(row, oldGroups){\n// \tvar groupID = this.groupIDLookups[0].func(row.getData()),\n// \tgroupKey = \"0_\" + groupID;\n// \tif(!this.groups[groupKey]){\n// \t\tthis.createGroup(groupID, 0, oldGroups);\n// \t}\n// \tthis.groups[groupKey].addRow(row);\n// };\n\n\nGroupRows.prototype.assignRowToExistingGroup = function (row, oldGroups) {\n  var groupID = this.groupIDLookups[0].func(row.getData()),\n      groupKey = \"0_\" + groupID;\n\n  if (this.groups[groupKey]) {\n    this.groups[groupKey].addRow(row);\n  }\n};\n\nGroupRows.prototype.assignRowToGroup = function (row, oldGroups) {\n  var groupID = this.groupIDLookups[0].func(row.getData()),\n      newGroupNeeded = !this.groups[\"0_\" + groupID];\n\n  if (newGroupNeeded) {\n    this.createGroup(groupID, 0, oldGroups);\n  }\n\n  this.groups[\"0_\" + groupID].addRow(row);\n  return !newGroupNeeded;\n};\n\nGroupRows.prototype.reassignRowToGroup = function (row) {\n  var oldRowGroup = row.getGroup(),\n      oldGroupPath = oldRowGroup.getPath(),\n      newGroupPath = this.getExpectedPath(row),\n      samePath = true; // figure out if new group path is the same as old group path\n\n  var samePath = oldGroupPath.length == newGroupPath.length && oldGroupPath.every(function (element, index) {\n    return element === newGroupPath[index];\n  }); // refresh if they new path and old path aren't the same (aka the row's groupings have changed)\n\n  if (!samePath) {\n    oldRowGroup.removeRow(row);\n    this.assignRowToGroup(row, self.groups);\n    this.table.rowManager.refreshActiveData(\"group\", false, true);\n  }\n};\n\nGroupRows.prototype.getExpectedPath = function (row) {\n  var groupPath = [],\n      rowData = row.getData();\n  this.groupIDLookups.forEach(function (groupId) {\n    groupPath.push(groupId.func(rowData));\n  });\n  return groupPath;\n};\n\nGroupRows.prototype.updateGroupRows = function (force) {\n  var self = this,\n      output = [],\n      oldRowCount;\n  self.groupList.forEach(function (group) {\n    output = output.concat(group.getHeadersAndRows());\n  }); //force update of table display\n\n  if (force) {\n    var displayIndex = self.table.rowManager.setDisplayRows(output, this.getDisplayIndex());\n\n    if (displayIndex !== true) {\n      this.setDisplayIndex(displayIndex);\n    }\n\n    self.table.rowManager.refreshActiveData(\"group\", true, true);\n  }\n\n  return output;\n};\n\nGroupRows.prototype.scrollHeaders = function (left) {\n  if (this.table.options.virtualDomHoz) {\n    left -= this.table.vdomHoz.vDomPadLeft;\n  }\n\n  left = left + \"px\";\n  this.groupList.forEach(function (group) {\n    group.scrollHeader(left);\n  });\n};\n\nGroupRows.prototype.removeGroup = function (group) {\n  var groupKey = group.level + \"_\" + group.key,\n      index;\n\n  if (this.groups[groupKey]) {\n    delete this.groups[groupKey];\n    index = this.groupList.indexOf(group);\n\n    if (index > -1) {\n      this.groupList.splice(index, 1);\n    }\n  }\n};\n\nTabulator.prototype.registerModule(\"groupRows\", GroupRows);\n\nvar History = function History(table) {\n  this.table = table; //hold Tabulator object\n\n  this.history = [];\n  this.index = -1;\n};\n\nHistory.prototype.clear = function () {\n  this.history = [];\n  this.index = -1;\n};\n\nHistory.prototype.action = function (type, component, data) {\n  this.history = this.history.slice(0, this.index + 1);\n  this.history.push({\n    type: type,\n    component: component,\n    data: data\n  });\n  this.index++;\n};\n\nHistory.prototype.getHistoryUndoSize = function () {\n  return this.index + 1;\n};\n\nHistory.prototype.getHistoryRedoSize = function () {\n  return this.history.length - (this.index + 1);\n};\n\nHistory.prototype.clearComponentHistory = function (component) {\n  var index = this.history.findIndex(function (item) {\n    return item.component === component;\n  });\n\n  if (index > -1) {\n    this.history.splice(index, 1);\n\n    if (index <= this.index) {\n      this.index--;\n    }\n\n    this.clearComponentHistory(component);\n  }\n};\n\nHistory.prototype.undo = function () {\n  if (this.index > -1) {\n    var action = this.history[this.index];\n    this.undoers[action.type].call(this, action);\n    this.index--;\n    this.table.options.historyUndo.call(this.table, action.type, action.component.getComponent(), action.data);\n    return true;\n  } else {\n    console.warn(\"History Undo Error - No more history to undo\");\n    return false;\n  }\n};\n\nHistory.prototype.redo = function () {\n  if (this.history.length - 1 > this.index) {\n    this.index++;\n    var action = this.history[this.index];\n    this.redoers[action.type].call(this, action);\n    this.table.options.historyRedo.call(this.table, action.type, action.component.getComponent(), action.data);\n    return true;\n  } else {\n    console.warn(\"History Redo Error - No more history to redo\");\n    return false;\n  }\n};\n\nHistory.prototype.undoers = {\n  cellEdit: function cellEdit(action) {\n    action.component.setValueProcessData(action.data.oldValue);\n  },\n  rowAdd: function rowAdd(action) {\n    action.component.deleteActual();\n  },\n  rowDelete: function rowDelete(action) {\n    var newRow = this.table.rowManager.addRowActual(action.data.data, action.data.pos, action.data.index);\n\n    if (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n      this.table.modules.groupRows.updateGroupRows(true);\n    }\n\n    this._rebindRow(action.component, newRow);\n  },\n  rowMove: function rowMove(action) {\n    this.table.rowManager.moveRowActual(action.component, this.table.rowManager.rows[action.data.posFrom], !action.data.after);\n    this.table.rowManager.redraw();\n  }\n};\nHistory.prototype.redoers = {\n  cellEdit: function cellEdit(action) {\n    action.component.setValueProcessData(action.data.newValue);\n  },\n  rowAdd: function rowAdd(action) {\n    var newRow = this.table.rowManager.addRowActual(action.data.data, action.data.pos, action.data.index);\n\n    if (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n      this.table.modules.groupRows.updateGroupRows(true);\n    }\n\n    this._rebindRow(action.component, newRow);\n  },\n  rowDelete: function rowDelete(action) {\n    action.component.deleteActual();\n  },\n  rowMove: function rowMove(action) {\n    this.table.rowManager.moveRowActual(action.component, this.table.rowManager.rows[action.data.posTo], action.data.after);\n    this.table.rowManager.redraw();\n  }\n}; //rebind rows to new element after deletion\n\nHistory.prototype._rebindRow = function (oldRow, newRow) {\n  this.history.forEach(function (action) {\n    if (action.component instanceof Row) {\n      if (action.component === oldRow) {\n        action.component = newRow;\n      }\n    } else if (action.component instanceof Cell) {\n      if (action.component.row === oldRow) {\n        var field = action.component.column.getField();\n\n        if (field) {\n          action.component = newRow.getCell(field);\n        }\n      }\n    }\n  });\n};\n\nTabulator.prototype.registerModule(\"history\", History);\n\nvar HtmlTableImport = function HtmlTableImport(table) {\n  this.table = table; //hold Tabulator object\n\n  this.fieldIndex = [];\n  this.hasIndex = false;\n};\n\nHtmlTableImport.prototype.parseTable = function () {\n  var self = this,\n      element = self.table.element,\n      options = self.table.options,\n      columns = options.columns,\n      headers = element.getElementsByTagName(\"th\"),\n      rows = element.getElementsByTagName(\"tbody\")[0],\n      data = [],\n      newTable;\n  self.hasIndex = false;\n  self.table.options.htmlImporting.call(this.table);\n  rows = rows ? rows.getElementsByTagName(\"tr\") : []; //check for tablator inline options\n\n  self._extractOptions(element, options);\n\n  if (headers.length) {\n    self._extractHeaders(headers, rows);\n  } else {\n    self._generateBlankHeaders(headers, rows);\n  } //iterate through table rows and build data set\n\n\n  for (var index = 0; index < rows.length; index++) {\n    var row = rows[index],\n        cells = row.getElementsByTagName(\"td\"),\n        item = {}; //create index if the dont exist in table\n\n    if (!self.hasIndex) {\n      item[options.index] = index;\n    }\n\n    for (var i = 0; i < cells.length; i++) {\n      var cell = cells[i];\n\n      if (typeof this.fieldIndex[i] !== \"undefined\") {\n        item[this.fieldIndex[i]] = cell.innerHTML;\n      }\n    } //add row data to item\n\n\n    data.push(item);\n  } //create new element\n\n\n  var newElement = document.createElement(\"div\"); //transfer attributes to new element\n\n  var attributes = element.attributes; // loop through attributes and apply them on div\n\n  for (var i in attributes) {\n    if (_typeof(attributes[i]) == \"object\") {\n      newElement.setAttribute(attributes[i].name, attributes[i].value);\n    }\n  } // replace table with div element\n\n\n  element.parentNode.replaceChild(newElement, element);\n  options.data = data;\n  self.table.options.htmlImported.call(this.table); // // newElement.tabulator(options);\n\n  this.table.element = newElement;\n}; //extract tabulator attribute options\n\n\nHtmlTableImport.prototype._extractOptions = function (element, options, defaultOptions) {\n  var attributes = element.attributes;\n  var optionsArr = defaultOptions ? Object.assign([], defaultOptions) : Object.keys(options);\n  var optionsList = {};\n  optionsArr.forEach(function (item) {\n    optionsList[item.toLowerCase()] = item;\n  });\n\n  for (var index in attributes) {\n    var attrib = attributes[index];\n    var name;\n\n    if (attrib && (typeof attrib === 'undefined' ? 'undefined' : _typeof(attrib)) == \"object\" && attrib.name && attrib.name.indexOf(\"tabulator-\") === 0) {\n      name = attrib.name.replace(\"tabulator-\", \"\");\n\n      if (typeof optionsList[name] !== \"undefined\") {\n        options[optionsList[name]] = this._attribValue(attrib.value);\n      }\n    }\n  }\n}; //get value of attribute\n\n\nHtmlTableImport.prototype._attribValue = function (value) {\n  if (value === \"true\") {\n    return true;\n  }\n\n  if (value === \"false\") {\n    return false;\n  }\n\n  return value;\n}; //find column if it has already been defined\n\n\nHtmlTableImport.prototype._findCol = function (title) {\n  var match = this.table.options.columns.find(function (column) {\n    return column.title === title;\n  });\n  return match || false;\n}; //extract column from headers\n\n\nHtmlTableImport.prototype._extractHeaders = function (headers, rows) {\n  for (var index = 0; index < headers.length; index++) {\n    var header = headers[index],\n        exists = false,\n        col = this._findCol(header.textContent),\n        width,\n        attributes;\n\n    if (col) {\n      exists = true;\n    } else {\n      col = {\n        title: header.textContent.trim()\n      };\n    }\n\n    if (!col.field) {\n      col.field = header.textContent.trim().toLowerCase().replace(\" \", \"_\");\n    }\n\n    width = header.getAttribute(\"width\");\n\n    if (width && !col.width) {\n      col.width = width;\n    } //check for tablator inline options\n\n\n    attributes = header.attributes; // //check for tablator inline options\n\n    this._extractOptions(header, col, Column.prototype.defaultOptionList);\n\n    this.fieldIndex[index] = col.field;\n\n    if (col.field == this.table.options.index) {\n      this.hasIndex = true;\n    }\n\n    if (!exists) {\n      this.table.options.columns.push(col);\n    }\n  }\n}; //generate blank headers\n\n\nHtmlTableImport.prototype._generateBlankHeaders = function (headers, rows) {\n  for (var index = 0; index < headers.length; index++) {\n    var header = headers[index],\n        col = {\n      title: \"\",\n      field: \"col\" + index\n    };\n    this.fieldIndex[index] = col.field;\n    var width = header.getAttribute(\"width\");\n\n    if (width) {\n      col.width = width;\n    }\n\n    this.table.options.columns.push(col);\n  }\n};\n\nTabulator.prototype.registerModule(\"htmlTableImport\", HtmlTableImport);\n\nvar Keybindings = function Keybindings(table) {\n  this.table = table; //hold Tabulator object\n\n  this.watchKeys = null;\n  this.pressedKeys = null;\n  this.keyupBinding = false;\n  this.keydownBinding = false;\n};\n\nKeybindings.prototype.initialize = function () {\n  var bindings = this.table.options.keybindings,\n      mergedBindings = {};\n  this.watchKeys = {};\n  this.pressedKeys = [];\n\n  if (bindings !== false) {\n    for (var key in this.bindings) {\n      mergedBindings[key] = this.bindings[key];\n    }\n\n    if (Object.keys(bindings).length) {\n      for (var _key in bindings) {\n        mergedBindings[_key] = bindings[_key];\n      }\n    }\n\n    this.mapBindings(mergedBindings);\n    this.bindEvents();\n  }\n};\n\nKeybindings.prototype.mapBindings = function (bindings) {\n  var _this68 = this;\n\n  var self = this;\n\n  var _loop2 = function _loop2(key) {\n    if (_this68.actions[key]) {\n      if (bindings[key]) {\n        if (_typeof(bindings[key]) !== \"object\") {\n          bindings[key] = [bindings[key]];\n        }\n\n        bindings[key].forEach(function (binding) {\n          self.mapBinding(key, binding);\n        });\n      }\n    } else {\n      console.warn(\"Key Binding Error - no such action:\", key);\n    }\n  };\n\n  for (var key in bindings) {\n    _loop2(key);\n  }\n};\n\nKeybindings.prototype.mapBinding = function (action, symbolsList) {\n  var self = this;\n  var binding = {\n    action: this.actions[action],\n    keys: [],\n    ctrl: false,\n    shift: false,\n    meta: false\n  };\n  var symbols = symbolsList.toString().toLowerCase().split(\" \").join(\"\").split(\"+\");\n  symbols.forEach(function (symbol) {\n    switch (symbol) {\n      case \"ctrl\":\n        binding.ctrl = true;\n        break;\n\n      case \"shift\":\n        binding.shift = true;\n        break;\n\n      case \"meta\":\n        binding.meta = true;\n        break;\n\n      default:\n        symbol = parseInt(symbol);\n        binding.keys.push(symbol);\n\n        if (!self.watchKeys[symbol]) {\n          self.watchKeys[symbol] = [];\n        }\n\n        self.watchKeys[symbol].push(binding);\n    }\n  });\n};\n\nKeybindings.prototype.bindEvents = function () {\n  var self = this;\n\n  this.keyupBinding = function (e) {\n    var code = e.keyCode;\n    var bindings = self.watchKeys[code];\n\n    if (bindings) {\n      self.pressedKeys.push(code);\n      bindings.forEach(function (binding) {\n        self.checkBinding(e, binding);\n      });\n    }\n  };\n\n  this.keydownBinding = function (e) {\n    var code = e.keyCode;\n    var bindings = self.watchKeys[code];\n\n    if (bindings) {\n      var index = self.pressedKeys.indexOf(code);\n\n      if (index > -1) {\n        self.pressedKeys.splice(index, 1);\n      }\n    }\n  };\n\n  this.table.element.addEventListener(\"keydown\", this.keyupBinding);\n  this.table.element.addEventListener(\"keyup\", this.keydownBinding);\n};\n\nKeybindings.prototype.clearBindings = function () {\n  if (this.keyupBinding) {\n    this.table.element.removeEventListener(\"keydown\", this.keyupBinding);\n  }\n\n  if (this.keydownBinding) {\n    this.table.element.removeEventListener(\"keyup\", this.keydownBinding);\n  }\n};\n\nKeybindings.prototype.checkBinding = function (e, binding) {\n  var self = this,\n      match = true;\n\n  if (e.ctrlKey == binding.ctrl && e.shiftKey == binding.shift && e.metaKey == binding.meta) {\n    binding.keys.forEach(function (key) {\n      var index = self.pressedKeys.indexOf(key);\n\n      if (index == -1) {\n        match = false;\n      }\n    });\n\n    if (match) {\n      binding.action.call(self, e);\n    }\n\n    return true;\n  }\n\n  return false;\n}; //default bindings\n\n\nKeybindings.prototype.bindings = {\n  navPrev: \"shift + 9\",\n  navNext: 9,\n  navUp: 38,\n  navDown: 40,\n  scrollPageUp: 33,\n  scrollPageDown: 34,\n  scrollToStart: 36,\n  scrollToEnd: 35,\n  undo: \"ctrl + 90\",\n  redo: \"ctrl + 89\",\n  copyToClipboard: \"ctrl + 67\"\n}; //default actions\n\nKeybindings.prototype.actions = {\n  keyBlock: function keyBlock(e) {\n    e.stopPropagation();\n    e.preventDefault();\n  },\n  scrollPageUp: function scrollPageUp(e) {\n    var rowManager = this.table.rowManager,\n        newPos = rowManager.scrollTop - rowManager.height,\n        scrollMax = rowManager.element.scrollHeight;\n    e.preventDefault();\n\n    if (rowManager.displayRowsCount) {\n      if (newPos >= 0) {\n        rowManager.element.scrollTop = newPos;\n      } else {\n        rowManager.scrollToRow(rowManager.getDisplayRows()[0]);\n      }\n    }\n\n    this.table.element.focus();\n  },\n  scrollPageDown: function scrollPageDown(e) {\n    var rowManager = this.table.rowManager,\n        newPos = rowManager.scrollTop + rowManager.height,\n        scrollMax = rowManager.element.scrollHeight;\n    e.preventDefault();\n\n    if (rowManager.displayRowsCount) {\n      if (newPos <= scrollMax) {\n        rowManager.element.scrollTop = newPos;\n      } else {\n        rowManager.scrollToRow(rowManager.getDisplayRows()[rowManager.displayRowsCount - 1]);\n      }\n    }\n\n    this.table.element.focus();\n  },\n  scrollToStart: function scrollToStart(e) {\n    var rowManager = this.table.rowManager;\n    e.preventDefault();\n\n    if (rowManager.displayRowsCount) {\n      rowManager.scrollToRow(rowManager.getDisplayRows()[0]);\n    }\n\n    this.table.element.focus();\n  },\n  scrollToEnd: function scrollToEnd(e) {\n    var rowManager = this.table.rowManager;\n    e.preventDefault();\n\n    if (rowManager.displayRowsCount) {\n      rowManager.scrollToRow(rowManager.getDisplayRows()[rowManager.displayRowsCount - 1]);\n    }\n\n    this.table.element.focus();\n  },\n  navPrev: function navPrev(e) {\n    var cell = false;\n\n    if (this.table.modExists(\"edit\")) {\n      cell = this.table.modules.edit.currentCell;\n\n      if (cell) {\n        e.preventDefault();\n        cell.nav().prev();\n      }\n    }\n  },\n  navNext: function navNext(e) {\n    var cell = false;\n    var newRow = this.table.options.tabEndNewRow;\n    var nav;\n\n    if (this.table.modExists(\"edit\")) {\n      cell = this.table.modules.edit.currentCell;\n\n      if (cell) {\n        e.preventDefault();\n        nav = cell.nav();\n\n        if (!nav.next()) {\n          if (newRow) {\n            cell.getElement().firstChild.blur();\n\n            if (newRow === true) {\n              newRow = this.table.addRow({});\n            } else {\n              if (typeof newRow == \"function\") {\n                newRow = this.table.addRow(newRow(cell.row.getComponent()));\n              } else {\n                newRow = this.table.addRow(Object.assign({}, newRow));\n              }\n            }\n\n            newRow.then(function () {\n              setTimeout(function () {\n                nav.next();\n              });\n            });\n          }\n        }\n      }\n    }\n  },\n  navLeft: function navLeft(e) {\n    var cell = false;\n\n    if (this.table.modExists(\"edit\")) {\n      cell = this.table.modules.edit.currentCell;\n\n      if (cell) {\n        e.preventDefault();\n        cell.nav().left();\n      }\n    }\n  },\n  navRight: function navRight(e) {\n    var cell = false;\n\n    if (this.table.modExists(\"edit\")) {\n      cell = this.table.modules.edit.currentCell;\n\n      if (cell) {\n        e.preventDefault();\n        cell.nav().right();\n      }\n    }\n  },\n  navUp: function navUp(e) {\n    var cell = false;\n\n    if (this.table.modExists(\"edit\")) {\n      cell = this.table.modules.edit.currentCell;\n\n      if (cell) {\n        e.preventDefault();\n        cell.nav().up();\n      }\n    }\n  },\n  navDown: function navDown(e) {\n    var cell = false;\n\n    if (this.table.modExists(\"edit\")) {\n      cell = this.table.modules.edit.currentCell;\n\n      if (cell) {\n        e.preventDefault();\n        cell.nav().down();\n      }\n    }\n  },\n  undo: function undo(e) {\n    var cell = false;\n\n    if (this.table.options.history && this.table.modExists(\"history\") && this.table.modExists(\"edit\")) {\n      cell = this.table.modules.edit.currentCell;\n\n      if (!cell) {\n        e.preventDefault();\n        this.table.modules.history.undo();\n      }\n    }\n  },\n  redo: function redo(e) {\n    var cell = false;\n\n    if (this.table.options.history && this.table.modExists(\"history\") && this.table.modExists(\"edit\")) {\n      cell = this.table.modules.edit.currentCell;\n\n      if (!cell) {\n        e.preventDefault();\n        this.table.modules.history.redo();\n      }\n    }\n  },\n  copyToClipboard: function copyToClipboard(e) {\n    if (!this.table.modules.edit.currentCell) {\n      if (this.table.modExists(\"clipboard\", true)) {\n        this.table.modules.clipboard.copy(false, true);\n      }\n    }\n  }\n};\nTabulator.prototype.registerModule(\"keybindings\", Keybindings);\n\nvar Menu = function Menu(table) {\n  this.table = table; //hold Tabulator object\n\n  this.menuEl = false;\n  this.blurEvent = this.hideMenu.bind(this);\n  this.escEvent = this.escMenu.bind(this);\n  this.nestedMenuBlock = false;\n};\n\nMenu.prototype.initializeColumnHeader = function (column) {\n  var _this69 = this;\n\n  var headerMenuEl;\n\n  if (column.definition.headerContextMenu) {\n    column.getElement().addEventListener(\"contextmenu\", this.LoadMenuEvent.bind(this, column, column.definition.headerContextMenu));\n    this.tapHold(column, column.definition.headerContextMenu);\n  } // if(column.definition.headerClickMenu){\n  // \tcolumn.getElement().addEventListener(\"click\", this.LoadMenuEvent.bind(this, column, column.definition.headerClickMenu));\n  // }\n\n\n  if (column.definition.headerMenu) {\n    headerMenuEl = document.createElement(\"span\");\n    headerMenuEl.classList.add(\"tabulator-header-menu-button\");\n    headerMenuEl.innerHTML = \"&vellip;\";\n    headerMenuEl.addEventListener(\"click\", function (e) {\n      var menu = typeof column.definition.headerMenu == \"function\" ? column.definition.headerMenu(column.getComponent(), e) : column.definition.headerMenu;\n      e.stopPropagation();\n      e.preventDefault();\n\n      _this69.loadMenu(e, column, menu);\n    });\n    column.titleElement.insertBefore(headerMenuEl, column.titleElement.firstChild);\n  }\n};\n\nMenu.prototype.LoadMenuEvent = function (component, menu, e) {\n  menu = typeof menu == \"function\" ? menu(component.getComponent(), e) : menu; // if(component instanceof Cell){\n  // \te.stopImmediatePropagation();\n  // }\n\n  this.loadMenu(e, component, menu);\n};\n\nMenu.prototype.tapHold = function (component, menu) {\n  var _this70 = this;\n\n  var element = component.getElement(),\n      tapHold = null,\n      loaded = false;\n  element.addEventListener(\"touchstart\", function (e) {\n    clearTimeout(tapHold);\n    loaded = false;\n    tapHold = setTimeout(function () {\n      clearTimeout(tapHold);\n      tapHold = null;\n      loaded = true;\n\n      _this70.LoadMenuEvent(component, menu, e);\n    }, 1000);\n  }, {\n    passive: true\n  });\n  element.addEventListener(\"touchend\", function (e) {\n    clearTimeout(tapHold);\n    tapHold = null;\n\n    if (loaded) {\n      e.preventDefault();\n    }\n  });\n};\n\nMenu.prototype.initializeCell = function (cell) {\n  if (cell.column.definition.contextMenu) {\n    cell.getElement().addEventListener(\"contextmenu\", this.LoadMenuEvent.bind(this, cell, cell.column.definition.contextMenu));\n    this.tapHold(cell, cell.column.definition.contextMenu);\n  }\n\n  if (cell.column.definition.clickMenu) {\n    cell.getElement().addEventListener(\"click\", this.LoadMenuEvent.bind(this, cell, cell.column.definition.clickMenu));\n  }\n};\n\nMenu.prototype.initializeRow = function (row) {\n  if (this.table.options.rowContextMenu) {\n    row.getElement().addEventListener(\"contextmenu\", this.LoadMenuEvent.bind(this, row, this.table.options.rowContextMenu));\n    this.tapHold(row, this.table.options.rowContextMenu);\n  }\n\n  if (this.table.options.rowClickMenu) {\n    row.getElement().addEventListener(\"click\", this.LoadMenuEvent.bind(this, row, this.table.options.rowClickMenu));\n  }\n};\n\nMenu.prototype.initializeGroup = function (group) {\n  if (this.table.options.groupContextMenu) {\n    group.getElement().addEventListener(\"contextmenu\", this.LoadMenuEvent.bind(this, group, this.table.options.groupContextMenu));\n    this.tapHold(group, this.table.options.groupContextMenu);\n  }\n\n  if (this.table.options.groupClickMenu) {\n    group.getElement().addEventListener(\"click\", this.LoadMenuEvent.bind(this, group, this.table.options.groupClickMenu));\n  }\n};\n\nMenu.prototype.loadMenu = function (e, component, menu) {\n  var _this71 = this;\n\n  var docHeight = Math.max(document.body.offsetHeight, window.innerHeight),\n      touch = !(e instanceof MouseEvent);\n\n  if (!touch) {\n    e.preventDefault();\n  } //abort if no menu set\n\n\n  if (!menu || !menu.length) {\n    return;\n  }\n\n  if (this.nestedMenuBlock) {\n    //abort if child menu already open\n    if (this.isOpen()) {\n      return;\n    }\n  } else {\n    this.nestedMenuBlock = setTimeout(function () {\n      _this71.nestedMenuBlock = false;\n    }, 100);\n  }\n\n  this.hideMenu();\n  this.menuEl = document.createElement(\"div\");\n  this.menuEl.classList.add(\"tabulator-menu\");\n  menu.forEach(function (item) {\n    var itemEl = document.createElement(\"div\");\n    var label = item.label;\n    var disabled = item.disabled;\n\n    if (item.separator) {\n      itemEl.classList.add(\"tabulator-menu-separator\");\n    } else {\n      itemEl.classList.add(\"tabulator-menu-item\");\n\n      if (typeof label == \"function\") {\n        label = label(component.getComponent());\n      }\n\n      if (label instanceof Node) {\n        itemEl.appendChild(label);\n      } else {\n        itemEl.innerHTML = label;\n      }\n\n      if (typeof disabled == \"function\") {\n        disabled = disabled(component.getComponent());\n      }\n\n      if (disabled) {\n        itemEl.classList.add(\"tabulator-menu-item-disabled\");\n        itemEl.addEventListener(\"click\", function (e) {\n          e.stopPropagation();\n        });\n      } else {\n        itemEl.addEventListener(\"click\", function (e) {\n          _this71.hideMenu();\n\n          item.action(e, component.getComponent());\n        });\n      }\n    }\n\n    _this71.menuEl.appendChild(itemEl);\n  });\n  this.menuEl.style.top = (touch ? e.touches[0].pageY : e.pageY) + \"px\";\n  this.menuEl.style.left = (touch ? e.touches[0].pageX : e.pageX) + \"px\";\n  setTimeout(function () {\n    _this71.table.rowManager.element.addEventListener(\"scroll\", _this71.blurEvent);\n\n    document.body.addEventListener(\"click\", _this71.blurEvent);\n    document.body.addEventListener(\"contextmenu\", _this71.blurEvent);\n    document.body.addEventListener(\"keydown\", _this71.escEvent);\n  }, 100);\n  document.body.appendChild(this.menuEl); //move menu to start on right edge if it is too close to the edge of the screen\n\n  if (e.pageX + this.menuEl.offsetWidth >= document.body.offsetWidth) {\n    this.menuEl.style.left = \"\";\n    this.menuEl.style.right = document.body.offsetWidth - e.pageX + \"px\";\n  } //move menu to start on bottom edge if it is too close to the edge of the screen\n\n\n  if (e.pageY + this.menuEl.offsetHeight >= docHeight) {\n    this.menuEl.style.top = \"\";\n    this.menuEl.style.bottom = docHeight - e.pageY + \"px\";\n  }\n};\n\nMenu.prototype.isOpen = function () {\n  return !!this.menuEl.parentNode;\n};\n\nMenu.prototype.escMenu = function (e) {\n  if (e.keyCode == 27) {\n    this.hideMenu();\n  }\n};\n\nMenu.prototype.hideMenu = function () {\n  if (this.menuEl.parentNode) {\n    this.menuEl.parentNode.removeChild(this.menuEl);\n  }\n\n  if (this.escEvent) {\n    document.body.removeEventListener(\"keydown\", this.escEvent);\n  }\n\n  if (this.blurEvent) {\n    document.body.removeEventListener(\"click\", this.blurEvent);\n    document.body.removeEventListener(\"contextmenu\", this.blurEvent);\n    this.table.rowManager.element.removeEventListener(\"scroll\", this.blurEvent);\n  }\n}; //default accessors\n\n\nMenu.prototype.menus = {};\nTabulator.prototype.registerModule(\"menu\", Menu);\n\nvar MoveColumns = function MoveColumns(table) {\n  this.table = table; //hold Tabulator object\n\n  this.placeholderElement = this.createPlaceholderElement();\n  this.hoverElement = false; //floating column header element\n\n  this.checkTimeout = false; //click check timeout holder\n\n  this.checkPeriod = 250; //period to wait on mousedown to consider this a move and not a click\n\n  this.moving = false; //currently moving column\n\n  this.toCol = false; //destination column\n\n  this.toColAfter = false; //position of moving column relative to the desitnation column\n\n  this.startX = 0; //starting position within header element\n\n  this.autoScrollMargin = 40; //auto scroll on edge when within margin\n\n  this.autoScrollStep = 5; //auto scroll distance in pixels\n\n  this.autoScrollTimeout = false; //auto scroll timeout\n\n  this.touchMove = false;\n  this.moveHover = this.moveHover.bind(this);\n  this.endMove = this.endMove.bind(this);\n};\n\nMoveColumns.prototype.createPlaceholderElement = function () {\n  var el = document.createElement(\"div\");\n  el.classList.add(\"tabulator-col\");\n  el.classList.add(\"tabulator-col-placeholder\");\n  return el;\n};\n\nMoveColumns.prototype.initializeColumn = function (column) {\n  var self = this,\n      config = {},\n      colEl;\n\n  if (!column.modules.frozen) {\n    colEl = column.getElement();\n\n    config.mousemove = function (e) {\n      if (column.parent === self.moving.parent) {\n        if ((self.touchMove ? e.touches[0].pageX : e.pageX) - Tabulator.prototype.helpers.elOffset(colEl).left + self.table.columnManager.element.scrollLeft > column.getWidth() / 2) {\n          if (self.toCol !== column || !self.toColAfter) {\n            colEl.parentNode.insertBefore(self.placeholderElement, colEl.nextSibling);\n            self.moveColumn(column, true);\n          }\n        } else {\n          if (self.toCol !== column || self.toColAfter) {\n            colEl.parentNode.insertBefore(self.placeholderElement, colEl);\n            self.moveColumn(column, false);\n          }\n        }\n      }\n    }.bind(self);\n\n    colEl.addEventListener(\"mousedown\", function (e) {\n      self.touchMove = false;\n\n      if (e.which === 1) {\n        self.checkTimeout = setTimeout(function () {\n          self.startMove(e, column);\n        }, self.checkPeriod);\n      }\n    });\n    colEl.addEventListener(\"mouseup\", function (e) {\n      if (e.which === 1) {\n        if (self.checkTimeout) {\n          clearTimeout(self.checkTimeout);\n        }\n      }\n    });\n    self.bindTouchEvents(column);\n  }\n\n  column.modules.moveColumn = config;\n};\n\nMoveColumns.prototype.bindTouchEvents = function (column) {\n  var self = this,\n      colEl = column.getElement(),\n      startXMove = false,\n      //shifting center position of the cell\n  dir = false,\n      currentCol,\n      nextCol,\n      prevCol,\n      nextColWidth,\n      prevColWidth,\n      nextColWidthLast,\n      prevColWidthLast;\n  colEl.addEventListener(\"touchstart\", function (e) {\n    self.checkTimeout = setTimeout(function () {\n      self.touchMove = true;\n      currentCol = column;\n      nextCol = column.nextColumn();\n      nextColWidth = nextCol ? nextCol.getWidth() / 2 : 0;\n      prevCol = column.prevColumn();\n      prevColWidth = prevCol ? prevCol.getWidth() / 2 : 0;\n      nextColWidthLast = 0;\n      prevColWidthLast = 0;\n      startXMove = false;\n      self.startMove(e, column);\n    }, self.checkPeriod);\n  }, {\n    passive: true\n  });\n  colEl.addEventListener(\"touchmove\", function (e) {\n    var halfCol, diff, moveToCol;\n\n    if (self.moving) {\n      self.moveHover(e);\n\n      if (!startXMove) {\n        startXMove = e.touches[0].pageX;\n      }\n\n      diff = e.touches[0].pageX - startXMove;\n\n      if (diff > 0) {\n        if (nextCol && diff - nextColWidthLast > nextColWidth) {\n          moveToCol = nextCol;\n\n          if (moveToCol !== column) {\n            startXMove = e.touches[0].pageX;\n            moveToCol.getElement().parentNode.insertBefore(self.placeholderElement, moveToCol.getElement().nextSibling);\n            self.moveColumn(moveToCol, true);\n          }\n        }\n      } else {\n        if (prevCol && -diff - prevColWidthLast > prevColWidth) {\n          moveToCol = prevCol;\n\n          if (moveToCol !== column) {\n            startXMove = e.touches[0].pageX;\n            moveToCol.getElement().parentNode.insertBefore(self.placeholderElement, moveToCol.getElement());\n            self.moveColumn(moveToCol, false);\n          }\n        }\n      }\n\n      if (moveToCol) {\n        currentCol = moveToCol;\n        nextCol = moveToCol.nextColumn();\n        nextColWidthLast = nextColWidth;\n        nextColWidth = nextCol ? nextCol.getWidth() / 2 : 0;\n        prevCol = moveToCol.prevColumn();\n        prevColWidthLast = prevColWidth;\n        prevColWidth = prevCol ? prevCol.getWidth() / 2 : 0;\n      }\n    }\n  }, {\n    passive: true\n  });\n  colEl.addEventListener(\"touchend\", function (e) {\n    if (self.checkTimeout) {\n      clearTimeout(self.checkTimeout);\n    }\n\n    if (self.moving) {\n      self.endMove(e);\n    }\n  });\n};\n\nMoveColumns.prototype.startMove = function (e, column) {\n  var element = column.getElement();\n  this.moving = column;\n  this.startX = (this.touchMove ? e.touches[0].pageX : e.pageX) - Tabulator.prototype.helpers.elOffset(element).left;\n  this.table.element.classList.add(\"tabulator-block-select\"); //create placeholder\n\n  this.placeholderElement.style.width = column.getWidth() + \"px\";\n  this.placeholderElement.style.height = column.getHeight() + \"px\";\n  element.parentNode.insertBefore(this.placeholderElement, element);\n  element.parentNode.removeChild(element); //create hover element\n\n  this.hoverElement = element.cloneNode(true);\n  this.hoverElement.classList.add(\"tabulator-moving\");\n  this.table.columnManager.getElement().appendChild(this.hoverElement);\n  this.hoverElement.style.left = \"0\";\n  this.hoverElement.style.bottom = \"0\";\n\n  if (!this.touchMove) {\n    this._bindMouseMove();\n\n    document.body.addEventListener(\"mousemove\", this.moveHover);\n    document.body.addEventListener(\"mouseup\", this.endMove);\n  }\n\n  this.moveHover(e);\n};\n\nMoveColumns.prototype._bindMouseMove = function () {\n  this.table.columnManager.columnsByIndex.forEach(function (column) {\n    if (column.modules.moveColumn.mousemove) {\n      column.getElement().addEventListener(\"mousemove\", column.modules.moveColumn.mousemove);\n    }\n  });\n};\n\nMoveColumns.prototype._unbindMouseMove = function () {\n  this.table.columnManager.columnsByIndex.forEach(function (column) {\n    if (column.modules.moveColumn.mousemove) {\n      column.getElement().removeEventListener(\"mousemove\", column.modules.moveColumn.mousemove);\n    }\n  });\n};\n\nMoveColumns.prototype.moveColumn = function (column, after) {\n  var movingCells = this.moving.getCells();\n  this.toCol = column;\n  this.toColAfter = after;\n\n  if (after) {\n    column.getCells().forEach(function (cell, i) {\n      var cellEl = cell.getElement();\n      cellEl.parentNode.insertBefore(movingCells[i].getElement(), cellEl.nextSibling);\n    });\n  } else {\n    column.getCells().forEach(function (cell, i) {\n      var cellEl = cell.getElement();\n      cellEl.parentNode.insertBefore(movingCells[i].getElement(), cellEl);\n    });\n  }\n};\n\nMoveColumns.prototype.endMove = function (e) {\n  if (e.which === 1 || this.touchMove) {\n    this._unbindMouseMove();\n\n    this.placeholderElement.parentNode.insertBefore(this.moving.getElement(), this.placeholderElement.nextSibling);\n    this.placeholderElement.parentNode.removeChild(this.placeholderElement);\n    this.hoverElement.parentNode.removeChild(this.hoverElement);\n    this.table.element.classList.remove(\"tabulator-block-select\");\n\n    if (this.toCol) {\n      this.table.columnManager.moveColumnActual(this.moving, this.toCol, this.toColAfter);\n    }\n\n    this.moving = false;\n    this.toCol = false;\n    this.toColAfter = false;\n\n    if (!this.touchMove) {\n      document.body.removeEventListener(\"mousemove\", this.moveHover);\n      document.body.removeEventListener(\"mouseup\", this.endMove);\n    }\n  }\n};\n\nMoveColumns.prototype.moveHover = function (e) {\n  var self = this,\n      columnHolder = self.table.columnManager.getElement(),\n      scrollLeft = columnHolder.scrollLeft,\n      xPos = (self.touchMove ? e.touches[0].pageX : e.pageX) - Tabulator.prototype.helpers.elOffset(columnHolder).left + scrollLeft,\n      scrollPos;\n  self.hoverElement.style.left = xPos - self.startX + \"px\";\n\n  if (xPos - scrollLeft < self.autoScrollMargin) {\n    if (!self.autoScrollTimeout) {\n      self.autoScrollTimeout = setTimeout(function () {\n        scrollPos = Math.max(0, scrollLeft - 5);\n        self.table.rowManager.getElement().scrollLeft = scrollPos;\n        self.autoScrollTimeout = false;\n      }, 1);\n    }\n  }\n\n  if (scrollLeft + columnHolder.clientWidth - xPos < self.autoScrollMargin) {\n    if (!self.autoScrollTimeout) {\n      self.autoScrollTimeout = setTimeout(function () {\n        scrollPos = Math.min(columnHolder.clientWidth, scrollLeft + 5);\n        self.table.rowManager.getElement().scrollLeft = scrollPos;\n        self.autoScrollTimeout = false;\n      }, 1);\n    }\n  }\n};\n\nTabulator.prototype.registerModule(\"moveColumn\", MoveColumns);\n\nvar MoveRows = function MoveRows(table) {\n  this.table = table; //hold Tabulator object\n\n  this.placeholderElement = this.createPlaceholderElement();\n  this.hoverElement = false; //floating row header element\n\n  this.checkTimeout = false; //click check timeout holder\n\n  this.checkPeriod = 150; //period to wait on mousedown to consider this a move and not a click\n\n  this.moving = false; //currently moving row\n\n  this.toRow = false; //destination row\n\n  this.toRowAfter = false; //position of moving row relative to the desitnation row\n\n  this.hasHandle = false; //row has handle instead of fully movable row\n\n  this.startY = 0; //starting Y position within header element\n\n  this.startX = 0; //starting X position within header element\n\n  this.moveHover = this.moveHover.bind(this);\n  this.endMove = this.endMove.bind(this);\n  this.tableRowDropEvent = false;\n  this.touchMove = false;\n  this.connection = false;\n  this.connectionSelectorsTables = false;\n  this.connectionSelectorsElements = false;\n  this.connectionElements = [];\n  this.connections = [];\n  this.connectedTable = false;\n  this.connectedRow = false;\n};\n\nMoveRows.prototype.createPlaceholderElement = function () {\n  var el = document.createElement(\"div\");\n  el.classList.add(\"tabulator-row\");\n  el.classList.add(\"tabulator-row-placeholder\");\n  return el;\n};\n\nMoveRows.prototype.initialize = function (handle) {\n  this.connectionSelectorsTables = this.table.options.movableRowsConnectedTables;\n  this.connectionSelectorsElements = this.table.options.movableRowsConnectedElements;\n  this.connection = this.connectionSelectorsTables || this.connectionSelectorsElements;\n};\n\nMoveRows.prototype.setHandle = function (handle) {\n  this.hasHandle = handle;\n};\n\nMoveRows.prototype.initializeGroupHeader = function (group) {\n  var self = this,\n      config = {},\n      rowEl; //inter table drag drop\n\n  config.mouseup = function (e) {\n    self.tableRowDrop(e, row);\n  }.bind(self); //same table drag drop\n\n\n  config.mousemove = function (e) {\n    if (e.pageY - Tabulator.prototype.helpers.elOffset(group.element).top + self.table.rowManager.element.scrollTop > group.getHeight() / 2) {\n      if (self.toRow !== group || !self.toRowAfter) {\n        var rowEl = group.getElement();\n        rowEl.parentNode.insertBefore(self.placeholderElement, rowEl.nextSibling);\n        self.moveRow(group, true);\n      }\n    } else {\n      if (self.toRow !== group || self.toRowAfter) {\n        var rowEl = group.getElement();\n\n        if (rowEl.previousSibling) {\n          rowEl.parentNode.insertBefore(self.placeholderElement, rowEl);\n          self.moveRow(group, false);\n        }\n      }\n    }\n  }.bind(self);\n\n  group.modules.moveRow = config;\n};\n\nMoveRows.prototype.initializeRow = function (row) {\n  var self = this,\n      config = {},\n      rowEl; //inter table drag drop\n\n  config.mouseup = function (e) {\n    self.tableRowDrop(e, row);\n  }.bind(self); //same table drag drop\n\n\n  config.mousemove = function (e) {\n    if (e.pageY - Tabulator.prototype.helpers.elOffset(row.element).top + self.table.rowManager.element.scrollTop > row.getHeight() / 2) {\n      if (self.toRow !== row || !self.toRowAfter) {\n        var rowEl = row.getElement();\n        rowEl.parentNode.insertBefore(self.placeholderElement, rowEl.nextSibling);\n        self.moveRow(row, true);\n      }\n    } else {\n      if (self.toRow !== row || self.toRowAfter) {\n        var rowEl = row.getElement();\n        rowEl.parentNode.insertBefore(self.placeholderElement, rowEl);\n        self.moveRow(row, false);\n      }\n    }\n  }.bind(self);\n\n  if (!this.hasHandle) {\n    rowEl = row.getElement();\n    rowEl.addEventListener(\"mousedown\", function (e) {\n      if (e.which === 1) {\n        self.checkTimeout = setTimeout(function () {\n          self.startMove(e, row);\n        }, self.checkPeriod);\n      }\n    });\n    rowEl.addEventListener(\"mouseup\", function (e) {\n      if (e.which === 1) {\n        if (self.checkTimeout) {\n          clearTimeout(self.checkTimeout);\n        }\n      }\n    });\n    this.bindTouchEvents(row, row.getElement());\n  }\n\n  row.modules.moveRow = config;\n};\n\nMoveRows.prototype.initializeCell = function (cell) {\n  var self = this,\n      cellEl = cell.getElement();\n  cellEl.addEventListener(\"mousedown\", function (e) {\n    if (e.which === 1) {\n      self.checkTimeout = setTimeout(function () {\n        self.startMove(e, cell.row);\n      }, self.checkPeriod);\n    }\n  });\n  cellEl.addEventListener(\"mouseup\", function (e) {\n    if (e.which === 1) {\n      if (self.checkTimeout) {\n        clearTimeout(self.checkTimeout);\n      }\n    }\n  });\n  this.bindTouchEvents(cell.row, cell.getElement());\n};\n\nMoveRows.prototype.bindTouchEvents = function (row, element) {\n  var self = this,\n      startYMove = false,\n      //shifting center position of the cell\n  dir = false,\n      currentRow,\n      nextRow,\n      prevRow,\n      nextRowHeight,\n      prevRowHeight,\n      nextRowHeightLast,\n      prevRowHeightLast;\n  element.addEventListener(\"touchstart\", function (e) {\n    self.checkTimeout = setTimeout(function () {\n      self.touchMove = true;\n      currentRow = row;\n      nextRow = row.nextRow();\n      nextRowHeight = nextRow ? nextRow.getHeight() / 2 : 0;\n      prevRow = row.prevRow();\n      prevRowHeight = prevRow ? prevRow.getHeight() / 2 : 0;\n      nextRowHeightLast = 0;\n      prevRowHeightLast = 0;\n      startYMove = false;\n      self.startMove(e, row);\n    }, self.checkPeriod);\n  }, {\n    passive: true\n  });\n  this.moving, this.toRow, this.toRowAfter;\n  element.addEventListener(\"touchmove\", function (e) {\n    var halfCol, diff, moveToRow;\n\n    if (self.moving) {\n      e.preventDefault();\n      self.moveHover(e);\n\n      if (!startYMove) {\n        startYMove = e.touches[0].pageY;\n      }\n\n      diff = e.touches[0].pageY - startYMove;\n\n      if (diff > 0) {\n        if (nextRow && diff - nextRowHeightLast > nextRowHeight) {\n          moveToRow = nextRow;\n\n          if (moveToRow !== row) {\n            startYMove = e.touches[0].pageY;\n            moveToRow.getElement().parentNode.insertBefore(self.placeholderElement, moveToRow.getElement().nextSibling);\n            self.moveRow(moveToRow, true);\n          }\n        }\n      } else {\n        if (prevRow && -diff - prevRowHeightLast > prevRowHeight) {\n          moveToRow = prevRow;\n\n          if (moveToRow !== row) {\n            startYMove = e.touches[0].pageY;\n            moveToRow.getElement().parentNode.insertBefore(self.placeholderElement, moveToRow.getElement());\n            self.moveRow(moveToRow, false);\n          }\n        }\n      }\n\n      if (moveToRow) {\n        currentRow = moveToRow;\n        nextRow = moveToRow.nextRow();\n        nextRowHeightLast = nextRowHeight;\n        nextRowHeight = nextRow ? nextRow.getHeight() / 2 : 0;\n        prevRow = moveToRow.prevRow();\n        prevRowHeightLast = prevRowHeight;\n        prevRowHeight = prevRow ? prevRow.getHeight() / 2 : 0;\n      }\n    }\n  });\n  element.addEventListener(\"touchend\", function (e) {\n    if (self.checkTimeout) {\n      clearTimeout(self.checkTimeout);\n    }\n\n    if (self.moving) {\n      self.endMove(e);\n      self.touchMove = false;\n    }\n  });\n};\n\nMoveRows.prototype._bindMouseMove = function () {\n  var self = this;\n  self.table.rowManager.getDisplayRows().forEach(function (row) {\n    if ((row.type === \"row\" || row.type === \"group\") && row.modules.moveRow.mousemove) {\n      row.getElement().addEventListener(\"mousemove\", row.modules.moveRow.mousemove);\n    }\n  });\n};\n\nMoveRows.prototype._unbindMouseMove = function () {\n  var self = this;\n  self.table.rowManager.getDisplayRows().forEach(function (row) {\n    if ((row.type === \"row\" || row.type === \"group\") && row.modules.moveRow.mousemove) {\n      row.getElement().removeEventListener(\"mousemove\", row.modules.moveRow.mousemove);\n    }\n  });\n};\n\nMoveRows.prototype.startMove = function (e, row) {\n  var element = row.getElement();\n  this.setStartPosition(e, row);\n  this.moving = row;\n  this.table.element.classList.add(\"tabulator-block-select\"); //create placeholder\n\n  this.placeholderElement.style.width = row.getWidth() + \"px\";\n  this.placeholderElement.style.height = row.getHeight() + \"px\";\n\n  if (!this.connection) {\n    element.parentNode.insertBefore(this.placeholderElement, element);\n    element.parentNode.removeChild(element);\n  } else {\n    this.table.element.classList.add(\"tabulator-movingrow-sending\");\n    this.connectToTables(row);\n  } //create hover element\n\n\n  this.hoverElement = element.cloneNode(true);\n  this.hoverElement.classList.add(\"tabulator-moving\");\n\n  if (this.connection) {\n    document.body.appendChild(this.hoverElement);\n    this.hoverElement.style.left = \"0\";\n    this.hoverElement.style.top = \"0\";\n    this.hoverElement.style.width = this.table.element.clientWidth + \"px\";\n    this.hoverElement.style.whiteSpace = \"nowrap\";\n    this.hoverElement.style.overflow = \"hidden\";\n    this.hoverElement.style.pointerEvents = \"none\";\n  } else {\n    this.table.rowManager.getTableElement().appendChild(this.hoverElement);\n    this.hoverElement.style.left = \"0\";\n    this.hoverElement.style.top = \"0\";\n\n    this._bindMouseMove();\n  }\n\n  document.body.addEventListener(\"mousemove\", this.moveHover);\n  document.body.addEventListener(\"mouseup\", this.endMove);\n  this.moveHover(e);\n};\n\nMoveRows.prototype.setStartPosition = function (e, row) {\n  var pageX = this.touchMove ? e.touches[0].pageX : e.pageX,\n      pageY = this.touchMove ? e.touches[0].pageY : e.pageY,\n      element,\n      position;\n  element = row.getElement();\n\n  if (this.connection) {\n    position = element.getBoundingClientRect();\n    this.startX = position.left - pageX + window.pageXOffset;\n    this.startY = position.top - pageY + window.pageYOffset;\n  } else {\n    this.startY = pageY - element.getBoundingClientRect().top;\n  }\n};\n\nMoveRows.prototype.endMove = function (e) {\n  if (!e || e.which === 1 || this.touchMove) {\n    this._unbindMouseMove();\n\n    if (!this.connection) {\n      this.placeholderElement.parentNode.insertBefore(this.moving.getElement(), this.placeholderElement.nextSibling);\n      this.placeholderElement.parentNode.removeChild(this.placeholderElement);\n    }\n\n    this.hoverElement.parentNode.removeChild(this.hoverElement);\n    this.table.element.classList.remove(\"tabulator-block-select\");\n\n    if (this.toRow) {\n      this.table.rowManager.moveRow(this.moving, this.toRow, this.toRowAfter);\n    }\n\n    this.moving = false;\n    this.toRow = false;\n    this.toRowAfter = false;\n    document.body.removeEventListener(\"mousemove\", this.moveHover);\n    document.body.removeEventListener(\"mouseup\", this.endMove);\n\n    if (this.connection) {\n      this.table.element.classList.remove(\"tabulator-movingrow-sending\");\n      this.disconnectFromTables();\n    }\n  }\n};\n\nMoveRows.prototype.moveRow = function (row, after) {\n  this.toRow = row;\n  this.toRowAfter = after;\n};\n\nMoveRows.prototype.moveHover = function (e) {\n  if (this.connection) {\n    this.moveHoverConnections.call(this, e);\n  } else {\n    this.moveHoverTable.call(this, e);\n  }\n};\n\nMoveRows.prototype.moveHoverTable = function (e) {\n  var rowHolder = this.table.rowManager.getElement(),\n      scrollTop = rowHolder.scrollTop,\n      yPos = (this.touchMove ? e.touches[0].pageY : e.pageY) - rowHolder.getBoundingClientRect().top + scrollTop,\n      scrollPos;\n  this.hoverElement.style.top = yPos - this.startY + \"px\";\n};\n\nMoveRows.prototype.moveHoverConnections = function (e) {\n  this.hoverElement.style.left = this.startX + (this.touchMove ? e.touches[0].pageX : e.pageX) + \"px\";\n  this.hoverElement.style.top = this.startY + (this.touchMove ? e.touches[0].pageY : e.pageY) + \"px\";\n};\n\nMoveRows.prototype.elementRowDrop = function (e, element, row) {\n  if (this.table.options.movableRowsElementDrop) {\n    this.table.options.movableRowsElementDrop(e, element, row ? row.getComponent() : false);\n  }\n}; //establish connection with other tables\n\n\nMoveRows.prototype.connectToTables = function (row) {\n  var _this72 = this;\n\n  var connectionTables;\n\n  if (this.connectionSelectorsTables) {\n    connectionTables = this.table.modules.comms.getConnections(this.connectionSelectorsTables);\n    this.table.options.movableRowsSendingStart.call(this.table, connectionTables);\n    this.table.modules.comms.send(this.connectionSelectorsTables, \"moveRow\", \"connect\", {\n      row: row\n    });\n  }\n\n  if (this.connectionSelectorsElements) {\n    this.connectionElements = [];\n\n    if (!Array.isArray(this.connectionSelectorsElements)) {\n      this.connectionSelectorsElements = [this.connectionSelectorsElements];\n    }\n\n    this.connectionSelectorsElements.forEach(function (query) {\n      if (typeof query === \"string\") {\n        _this72.connectionElements = _this72.connectionElements.concat(Array.prototype.slice.call(document.querySelectorAll(query)));\n      } else {\n        _this72.connectionElements.push(query);\n      }\n    });\n    this.connectionElements.forEach(function (element) {\n      var dropEvent = function dropEvent(e) {\n        _this72.elementRowDrop(e, element, _this72.moving);\n      };\n\n      element.addEventListener(\"mouseup\", dropEvent);\n      element.tabulatorElementDropEvent = dropEvent;\n      element.classList.add(\"tabulator-movingrow-receiving\");\n    });\n  }\n}; //disconnect from other tables\n\n\nMoveRows.prototype.disconnectFromTables = function () {\n  var connectionTables;\n\n  if (this.connectionSelectorsTables) {\n    connectionTables = this.table.modules.comms.getConnections(this.connectionSelectorsTables);\n    this.table.options.movableRowsSendingStop.call(this.table, connectionTables);\n    this.table.modules.comms.send(this.connectionSelectorsTables, \"moveRow\", \"disconnect\");\n  }\n\n  this.connectionElements.forEach(function (element) {\n    element.classList.remove(\"tabulator-movingrow-receiving\");\n    element.removeEventListener(\"mouseup\", element.tabulatorElementDropEvent);\n    delete element.tabulatorElementDropEvent;\n  });\n}; //accept incomming connection\n\n\nMoveRows.prototype.connect = function (table, row) {\n  var self = this;\n\n  if (!this.connectedTable) {\n    this.connectedTable = table;\n    this.connectedRow = row;\n    this.table.element.classList.add(\"tabulator-movingrow-receiving\");\n    self.table.rowManager.getDisplayRows().forEach(function (row) {\n      if (row.type === \"row\" && row.modules.moveRow && row.modules.moveRow.mouseup) {\n        row.getElement().addEventListener(\"mouseup\", row.modules.moveRow.mouseup);\n      }\n    });\n    self.tableRowDropEvent = self.tableRowDrop.bind(self);\n    self.table.element.addEventListener(\"mouseup\", self.tableRowDropEvent);\n    this.table.options.movableRowsReceivingStart.call(this.table, row, table);\n    return true;\n  } else {\n    console.warn(\"Move Row Error - Table cannot accept connection, already connected to table:\", this.connectedTable);\n    return false;\n  }\n}; //close incomming connection\n\n\nMoveRows.prototype.disconnect = function (table) {\n  var self = this;\n\n  if (table === this.connectedTable) {\n    this.connectedTable = false;\n    this.connectedRow = false;\n    this.table.element.classList.remove(\"tabulator-movingrow-receiving\");\n    self.table.rowManager.getDisplayRows().forEach(function (row) {\n      if (row.type === \"row\" && row.modules.moveRow && row.modules.moveRow.mouseup) {\n        row.getElement().removeEventListener(\"mouseup\", row.modules.moveRow.mouseup);\n      }\n    });\n    self.table.element.removeEventListener(\"mouseup\", self.tableRowDropEvent);\n    this.table.options.movableRowsReceivingStop.call(this.table, table);\n  } else {\n    console.warn(\"Move Row Error - trying to disconnect from non connected table\");\n  }\n};\n\nMoveRows.prototype.dropComplete = function (table, row, success) {\n  var sender = false;\n\n  if (success) {\n    switch (_typeof(this.table.options.movableRowsSender)) {\n      case \"string\":\n        sender = this.senders[this.table.options.movableRowsSender];\n        break;\n\n      case \"function\":\n        sender = this.table.options.movableRowsSender;\n        break;\n    }\n\n    if (sender) {\n      sender.call(this, this.moving.getComponent(), row ? row.getComponent() : undefined, table);\n    } else {\n      if (this.table.options.movableRowsSender) {\n        console.warn(\"Mover Row Error - no matching sender found:\", this.table.options.movableRowsSender);\n      }\n    }\n\n    this.table.options.movableRowsSent.call(this.table, this.moving.getComponent(), row ? row.getComponent() : undefined, table);\n  } else {\n    this.table.options.movableRowsSentFailed.call(this.table, this.moving.getComponent(), row ? row.getComponent() : undefined, table);\n  }\n\n  this.endMove();\n};\n\nMoveRows.prototype.tableRowDrop = function (e, row) {\n  var receiver = false,\n      success = false;\n  console.trace(\"drop\");\n  e.stopImmediatePropagation();\n\n  switch (_typeof(this.table.options.movableRowsReceiver)) {\n    case \"string\":\n      receiver = this.receivers[this.table.options.movableRowsReceiver];\n      break;\n\n    case \"function\":\n      receiver = this.table.options.movableRowsReceiver;\n      break;\n  }\n\n  if (receiver) {\n    success = receiver.call(this, this.connectedRow.getComponent(), row ? row.getComponent() : undefined, this.connectedTable);\n  } else {\n    console.warn(\"Mover Row Error - no matching receiver found:\", this.table.options.movableRowsReceiver);\n  }\n\n  if (success) {\n    this.table.options.movableRowsReceived.call(this.table, this.connectedRow.getComponent(), row ? row.getComponent() : undefined, this.connectedTable);\n  } else {\n    this.table.options.movableRowsReceivedFailed.call(this.table, this.connectedRow.getComponent(), row ? row.getComponent() : undefined, this.connectedTable);\n  }\n\n  this.table.modules.comms.send(this.connectedTable, \"moveRow\", \"dropcomplete\", {\n    row: row,\n    success: success\n  });\n};\n\nMoveRows.prototype.receivers = {\n  insert: function insert(fromRow, toRow, fromTable) {\n    this.table.addRow(fromRow.getData(), undefined, toRow);\n    return true;\n  },\n  add: function add(fromRow, toRow, fromTable) {\n    this.table.addRow(fromRow.getData());\n    return true;\n  },\n  update: function update(fromRow, toRow, fromTable) {\n    if (toRow) {\n      toRow.update(fromRow.getData());\n      return true;\n    }\n\n    return false;\n  },\n  replace: function replace(fromRow, toRow, fromTable) {\n    if (toRow) {\n      this.table.addRow(fromRow.getData(), undefined, toRow);\n      toRow.delete();\n      return true;\n    }\n\n    return false;\n  }\n};\nMoveRows.prototype.senders = {\n  delete: function _delete(fromRow, toRow, toTable) {\n    fromRow.delete();\n  }\n};\n\nMoveRows.prototype.commsReceived = function (table, action, data) {\n  switch (action) {\n    case \"connect\":\n      return this.connect(table, data.row);\n      break;\n\n    case \"disconnect\":\n      return this.disconnect(table);\n      break;\n\n    case \"dropcomplete\":\n      return this.dropComplete(table, data.row, data.success);\n      break;\n  }\n};\n\nTabulator.prototype.registerModule(\"moveRow\", MoveRows);\n\nvar Mutator = function Mutator(table) {\n  this.table = table; //hold Tabulator object\n\n  this.allowedTypes = [\"\", \"data\", \"edit\", \"clipboard\"]; //list of muatation types\n\n  this.enabled = true;\n}; //initialize column mutator\n\n\nMutator.prototype.initializeColumn = function (column) {\n  var self = this,\n      match = false,\n      config = {};\n  this.allowedTypes.forEach(function (type) {\n    var key = \"mutator\" + (type.charAt(0).toUpperCase() + type.slice(1)),\n        mutator;\n\n    if (column.definition[key]) {\n      mutator = self.lookupMutator(column.definition[key]);\n\n      if (mutator) {\n        match = true;\n        config[key] = {\n          mutator: mutator,\n          params: column.definition[key + \"Params\"] || {}\n        };\n      }\n    }\n  });\n\n  if (match) {\n    column.modules.mutate = config;\n  }\n};\n\nMutator.prototype.lookupMutator = function (value) {\n  var mutator = false; //set column mutator\n\n  switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n    case \"string\":\n      if (this.mutators[value]) {\n        mutator = this.mutators[value];\n      } else {\n        console.warn(\"Mutator Error - No such mutator found, ignoring: \", value);\n      }\n\n      break;\n\n    case \"function\":\n      mutator = value;\n      break;\n  }\n\n  return mutator;\n}; //apply mutator to row\n\n\nMutator.prototype.transformRow = function (data, type, updatedData) {\n  var self = this,\n      key = \"mutator\" + (type.charAt(0).toUpperCase() + type.slice(1)),\n      value;\n\n  if (this.enabled) {\n    self.table.columnManager.traverse(function (column) {\n      var mutator, params, component;\n\n      if (column.modules.mutate) {\n        mutator = column.modules.mutate[key] || column.modules.mutate.mutator || false;\n\n        if (mutator) {\n          value = column.getFieldValue(typeof updatedData !== \"undefined\" ? updatedData : data);\n\n          if (type == \"data\" || typeof value !== \"undefined\") {\n            component = column.getComponent();\n            params = typeof mutator.params === \"function\" ? mutator.params(value, data, type, component) : mutator.params;\n            column.setFieldValue(data, mutator.mutator(value, data, type, params, component));\n          }\n        }\n      }\n    });\n  }\n\n  return data;\n}; //apply mutator to new cell value\n\n\nMutator.prototype.transformCell = function (cell, value) {\n  var mutator = cell.column.modules.mutate.mutatorEdit || cell.column.modules.mutate.mutator || false,\n      tempData = {};\n\n  if (mutator) {\n    tempData = Object.assign(tempData, cell.row.getData());\n    cell.column.setFieldValue(tempData, value);\n    return mutator.mutator(value, tempData, \"edit\", mutator.params, cell.getComponent());\n  } else {\n    return value;\n  }\n};\n\nMutator.prototype.enable = function () {\n  this.enabled = true;\n};\n\nMutator.prototype.disable = function () {\n  this.enabled = false;\n}; //default mutators\n\n\nMutator.prototype.mutators = {};\nTabulator.prototype.registerModule(\"mutator\", Mutator);\n\nvar Page = function Page(table) {\n  this.table = table; //hold Tabulator object\n\n  this.mode = \"local\";\n  this.progressiveLoad = false;\n  this.size = 0;\n  this.page = 1;\n  this.count = 5;\n  this.max = 1;\n  this.displayIndex = 0; //index in display pipeline\n\n  this.initialLoad = true;\n  this.pageSizes = [];\n  this.dataReceivedNames = {};\n  this.dataSentNames = {};\n  this.createElements();\n};\n\nPage.prototype.createElements = function () {\n  var button;\n  this.element = document.createElement(\"span\");\n  this.element.classList.add(\"tabulator-paginator\");\n  this.pagesElement = document.createElement(\"span\");\n  this.pagesElement.classList.add(\"tabulator-pages\");\n  button = document.createElement(\"button\");\n  button.classList.add(\"tabulator-page\");\n  button.setAttribute(\"type\", \"button\");\n  button.setAttribute(\"role\", \"button\");\n  button.setAttribute(\"aria-label\", \"\");\n  button.setAttribute(\"title\", \"\");\n  this.firstBut = button.cloneNode(true);\n  this.firstBut.setAttribute(\"data-page\", \"first\");\n  this.prevBut = button.cloneNode(true);\n  this.prevBut.setAttribute(\"data-page\", \"prev\");\n  this.nextBut = button.cloneNode(true);\n  this.nextBut.setAttribute(\"data-page\", \"next\");\n  this.lastBut = button.cloneNode(true);\n  this.lastBut.setAttribute(\"data-page\", \"last\");\n\n  if (this.table.options.paginationSizeSelector) {\n    this.pageSizeSelect = document.createElement(\"select\");\n    this.pageSizeSelect.classList.add(\"tabulator-page-size\");\n  }\n};\n\nPage.prototype.generatePageSizeSelectList = function () {\n  var _this73 = this;\n\n  var pageSizes = [];\n\n  if (this.pageSizeSelect) {\n    if (Array.isArray(this.table.options.paginationSizeSelector)) {\n      pageSizes = this.table.options.paginationSizeSelector;\n      this.pageSizes = pageSizes;\n\n      if (this.pageSizes.indexOf(this.size) == -1) {\n        pageSizes.unshift(this.size);\n      }\n    } else {\n      if (this.pageSizes.indexOf(this.size) == -1) {\n        pageSizes = [];\n\n        for (var _i13 = 1; _i13 < 5; _i13++) {\n          pageSizes.push(this.size * _i13);\n        }\n\n        this.pageSizes = pageSizes;\n      } else {\n        pageSizes = this.pageSizes;\n      }\n    }\n\n    while (this.pageSizeSelect.firstChild) {\n      this.pageSizeSelect.removeChild(this.pageSizeSelect.firstChild);\n    }\n\n    pageSizes.forEach(function (item) {\n      var itemEl = document.createElement(\"option\");\n      itemEl.value = item;\n\n      if (item === true) {\n        _this73.table.modules.localize.bind(\"pagination|all\", function (value) {\n          itemEl.innerHTML = value;\n        });\n      } else {\n        itemEl.innerHTML = item;\n      }\n\n      _this73.pageSizeSelect.appendChild(itemEl);\n    });\n    this.pageSizeSelect.value = this.size;\n  }\n}; //setup pageination\n\n\nPage.prototype.initialize = function (hidden) {\n  var self = this,\n      pageSelectLabel,\n      testElRow,\n      testElCell; //update param names\n\n  this.dataSentNames = Object.assign({}, this.paginationDataSentNames);\n  this.dataSentNames = Object.assign(this.dataSentNames, this.table.options.paginationDataSent);\n  this.dataReceivedNames = Object.assign({}, this.paginationDataReceivedNames);\n  this.dataReceivedNames = Object.assign(this.dataReceivedNames, this.table.options.paginationDataReceived); //build pagination element\n  //bind localizations\n\n  self.table.modules.localize.bind(\"pagination|first\", function (value) {\n    self.firstBut.innerHTML = value;\n  });\n  self.table.modules.localize.bind(\"pagination|first_title\", function (value) {\n    self.firstBut.setAttribute(\"aria-label\", value);\n    self.firstBut.setAttribute(\"title\", value);\n  });\n  self.table.modules.localize.bind(\"pagination|prev\", function (value) {\n    self.prevBut.innerHTML = value;\n  });\n  self.table.modules.localize.bind(\"pagination|prev_title\", function (value) {\n    self.prevBut.setAttribute(\"aria-label\", value);\n    self.prevBut.setAttribute(\"title\", value);\n  });\n  self.table.modules.localize.bind(\"pagination|next\", function (value) {\n    self.nextBut.innerHTML = value;\n  });\n  self.table.modules.localize.bind(\"pagination|next_title\", function (value) {\n    self.nextBut.setAttribute(\"aria-label\", value);\n    self.nextBut.setAttribute(\"title\", value);\n  });\n  self.table.modules.localize.bind(\"pagination|last\", function (value) {\n    self.lastBut.innerHTML = value;\n  });\n  self.table.modules.localize.bind(\"pagination|last_title\", function (value) {\n    self.lastBut.setAttribute(\"aria-label\", value);\n    self.lastBut.setAttribute(\"title\", value);\n  }); //click bindings\n\n  self.firstBut.addEventListener(\"click\", function () {\n    self.setPage(1).then(function () {}).catch(function () {});\n  });\n  self.prevBut.addEventListener(\"click\", function () {\n    self.previousPage().then(function () {}).catch(function () {});\n  });\n  self.nextBut.addEventListener(\"click\", function () {\n    self.nextPage().then(function () {}).catch(function () {});\n  });\n  self.lastBut.addEventListener(\"click\", function () {\n    self.setPage(self.max).then(function () {}).catch(function () {});\n  });\n\n  if (self.table.options.paginationElement) {\n    self.element = self.table.options.paginationElement;\n  }\n\n  if (this.pageSizeSelect) {\n    pageSelectLabel = document.createElement(\"label\");\n    self.table.modules.localize.bind(\"pagination|page_size\", function (value) {\n      self.pageSizeSelect.setAttribute(\"aria-label\", value);\n      self.pageSizeSelect.setAttribute(\"title\", value);\n      pageSelectLabel.innerHTML = value;\n    });\n    self.element.appendChild(pageSelectLabel);\n    self.element.appendChild(self.pageSizeSelect);\n    self.pageSizeSelect.addEventListener(\"change\", function (e) {\n      self.setPageSize(self.pageSizeSelect.value == \"true\" ? true : self.pageSizeSelect.value);\n      self.setPage(1).then(function () {}).catch(function () {});\n    });\n  } //append to DOM\n\n\n  self.element.appendChild(self.firstBut);\n  self.element.appendChild(self.prevBut);\n  self.element.appendChild(self.pagesElement);\n  self.element.appendChild(self.nextBut);\n  self.element.appendChild(self.lastBut);\n\n  if (!self.table.options.paginationElement && !hidden) {\n    self.table.footerManager.append(self.element, self);\n  } //set default values\n\n\n  self.mode = self.table.options.pagination;\n\n  if (self.table.options.paginationSize) {\n    self.size = self.table.options.paginationSize;\n  } else {\n    testElRow = document.createElement(\"div\");\n    testElRow.classList.add(\"tabulator-row\");\n    testElRow.style.visibility = hidden;\n    testElCell = document.createElement(\"div\");\n    testElCell.classList.add(\"tabulator-cell\");\n    testElCell.innerHTML = \"Page Row Test\";\n    testElRow.appendChild(testElCell);\n    self.table.rowManager.getTableElement().appendChild(testElRow);\n    self.size = Math.floor(self.table.rowManager.getElement().clientHeight / testElRow.offsetHeight);\n    self.table.rowManager.getTableElement().removeChild(testElRow);\n  } // self.page = self.table.options.paginationInitialPage || 1;\n\n\n  self.count = self.table.options.paginationButtonCount;\n  self.generatePageSizeSelectList();\n};\n\nPage.prototype.initializeProgressive = function (mode) {\n  this.initialize(true);\n  this.mode = \"progressive_\" + mode;\n  this.progressiveLoad = true;\n};\n\nPage.prototype.setDisplayIndex = function (index) {\n  this.displayIndex = index;\n};\n\nPage.prototype.getDisplayIndex = function () {\n  return this.displayIndex;\n}; //calculate maximum page from number of rows\n\n\nPage.prototype.setMaxRows = function (rowCount) {\n  if (!rowCount) {\n    this.max = 1;\n  } else {\n    this.max = this.size === true ? 1 : Math.ceil(rowCount / this.size);\n  }\n\n  if (this.page > this.max) {\n    this.page = this.max;\n  }\n}; //reset to first page without triggering action\n\n\nPage.prototype.reset = function (force, columnsChanged) {\n  if (this.mode == \"local\" || force) {\n    this.page = 1;\n  }\n\n  if (columnsChanged) {\n    this.initialLoad = true;\n  }\n\n  return true;\n}; //set the maxmum page\n\n\nPage.prototype.setMaxPage = function (max) {\n  max = parseInt(max);\n  this.max = max || 1;\n\n  if (this.page > this.max) {\n    this.page = this.max;\n    this.trigger();\n  }\n}; //set current page number\n\n\nPage.prototype.setPage = function (page) {\n  var _this74 = this;\n\n  var self = this;\n\n  switch (page) {\n    case \"first\":\n      return this.setPage(1);\n      break;\n\n    case \"prev\":\n      return this.previousPage();\n      break;\n\n    case \"next\":\n      return this.nextPage();\n      break;\n\n    case \"last\":\n      return this.setPage(this.max);\n      break;\n  }\n\n  return new Promise(function (resolve, reject) {\n    page = parseInt(page);\n\n    if (page > 0 && page <= _this74.max) {\n      _this74.page = page;\n\n      _this74.trigger().then(function () {\n        resolve();\n      }).catch(function () {\n        reject();\n      });\n\n      if (self.table.options.persistence && self.table.modExists(\"persistence\", true) && self.table.modules.persistence.config.page) {\n        self.table.modules.persistence.save(\"page\");\n      }\n    } else {\n      console.warn(\"Pagination Error - Requested page is out of range of 1 - \" + _this74.max + \":\", page);\n      reject();\n    }\n  });\n};\n\nPage.prototype.setPageToRow = function (row) {\n  var _this75 = this;\n\n  return new Promise(function (resolve, reject) {\n    var rows = _this75.table.rowManager.getDisplayRows(_this75.displayIndex - 1);\n\n    var index = rows.indexOf(row);\n\n    if (index > -1) {\n      var page = _this75.size === true ? 1 : Math.ceil((index + 1) / _this75.size);\n\n      _this75.setPage(page).then(function () {\n        resolve();\n      }).catch(function () {\n        reject();\n      });\n    } else {\n      console.warn(\"Pagination Error - Requested row is not visible\");\n      reject();\n    }\n  });\n};\n\nPage.prototype.setPageSize = function (size) {\n  if (size !== true) {\n    size = parseInt(size);\n  }\n\n  if (size > 0) {\n    this.size = size;\n  }\n\n  if (this.pageSizeSelect) {\n    // this.pageSizeSelect.value = size;\n    this.generatePageSizeSelectList();\n  }\n\n  if (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.page) {\n    this.table.modules.persistence.save(\"page\");\n  }\n}; //setup the pagination buttons\n\n\nPage.prototype._setPageButtons = function () {\n  var self = this;\n  var leftSize = Math.floor((this.count - 1) / 2);\n  var rightSize = Math.ceil((this.count - 1) / 2);\n  var min = this.max - this.page + leftSize + 1 < this.count ? this.max - this.count + 1 : Math.max(this.page - leftSize, 1);\n  var max = this.page <= rightSize ? Math.min(this.count, this.max) : Math.min(this.page + rightSize, this.max);\n\n  while (self.pagesElement.firstChild) {\n    self.pagesElement.removeChild(self.pagesElement.firstChild);\n  }\n\n  if (self.page == 1) {\n    self.firstBut.disabled = true;\n    self.prevBut.disabled = true;\n  } else {\n    self.firstBut.disabled = false;\n    self.prevBut.disabled = false;\n  }\n\n  if (self.page == self.max) {\n    self.lastBut.disabled = true;\n    self.nextBut.disabled = true;\n  } else {\n    self.lastBut.disabled = false;\n    self.nextBut.disabled = false;\n  }\n\n  for (var _i14 = min; _i14 <= max; _i14++) {\n    if (_i14 > 0 && _i14 <= self.max) {\n      self.pagesElement.appendChild(self._generatePageButton(_i14));\n    }\n  }\n\n  this.footerRedraw();\n};\n\nPage.prototype._generatePageButton = function (page) {\n  var self = this,\n      button = document.createElement(\"button\");\n  button.classList.add(\"tabulator-page\");\n\n  if (page == self.page) {\n    button.classList.add(\"active\");\n  }\n\n  button.setAttribute(\"type\", \"button\");\n  button.setAttribute(\"role\", \"button\");\n  self.table.modules.localize.bind(\"pagination|page_title\", function (value) {\n    button.setAttribute(\"aria-label\", value + \" \" + page);\n    button.setAttribute(\"title\", value + \" \" + page);\n  });\n  button.setAttribute(\"data-page\", page);\n  button.textContent = page;\n  button.addEventListener(\"click\", function (e) {\n    self.setPage(page).then(function () {}).catch(function () {});\n  });\n  return button;\n}; //previous page\n\n\nPage.prototype.previousPage = function () {\n  var _this76 = this;\n\n  return new Promise(function (resolve, reject) {\n    if (_this76.page > 1) {\n      _this76.page--;\n\n      _this76.trigger().then(function () {\n        resolve();\n      }).catch(function () {\n        reject();\n      });\n\n      if (_this76.table.options.persistence && _this76.table.modExists(\"persistence\", true) && _this76.table.modules.persistence.config.page) {\n        _this76.table.modules.persistence.save(\"page\");\n      }\n    } else {\n      console.warn(\"Pagination Error - Previous page would be less than page 1:\", 0);\n      reject();\n    }\n  });\n}; //next page\n\n\nPage.prototype.nextPage = function () {\n  var _this77 = this;\n\n  return new Promise(function (resolve, reject) {\n    if (_this77.page < _this77.max) {\n      _this77.page++;\n\n      _this77.trigger().then(function () {\n        resolve();\n      }).catch(function () {\n        reject();\n      });\n\n      if (_this77.table.options.persistence && _this77.table.modExists(\"persistence\", true) && _this77.table.modules.persistence.config.page) {\n        _this77.table.modules.persistence.save(\"page\");\n      }\n    } else {\n      if (!_this77.progressiveLoad) {\n        console.warn(\"Pagination Error - Next page would be greater than maximum page of \" + _this77.max + \":\", _this77.max + 1);\n      }\n\n      reject();\n    }\n  });\n}; //return current page number\n\n\nPage.prototype.getPage = function () {\n  return this.page;\n}; //return max page number\n\n\nPage.prototype.getPageMax = function () {\n  return this.max;\n};\n\nPage.prototype.getPageSize = function (size) {\n  return this.size;\n};\n\nPage.prototype.getMode = function () {\n  return this.mode;\n}; //return appropriate rows for current page\n\n\nPage.prototype.getRows = function (data) {\n  var output, start, end;\n\n  if (this.mode == \"local\") {\n    output = [];\n\n    if (this.size === true) {\n      start = 0;\n      end = data.length;\n    } else {\n      start = this.size * (this.page - 1);\n      end = start + parseInt(this.size);\n    }\n\n    this._setPageButtons();\n\n    for (var _i15 = start; _i15 < end; _i15++) {\n      if (data[_i15]) {\n        output.push(data[_i15]);\n      }\n    }\n\n    return output;\n  } else {\n    this._setPageButtons();\n\n    return data.slice(0);\n  }\n};\n\nPage.prototype.trigger = function () {\n  var _this78 = this;\n\n  var left;\n  return new Promise(function (resolve, reject) {\n    switch (_this78.mode) {\n      case \"local\":\n        left = _this78.table.rowManager.scrollLeft;\n\n        _this78.table.rowManager.refreshActiveData(\"page\");\n\n        _this78.table.rowManager.scrollHorizontal(left);\n\n        _this78.table.options.pageLoaded.call(_this78.table, _this78.getPage());\n\n        resolve();\n        break;\n\n      case \"remote\":\n      case \"progressive_load\":\n      case \"progressive_scroll\":\n        _this78.table.modules.ajax.blockActiveRequest();\n\n        _this78._getRemotePage().then(function () {\n          resolve();\n        }).catch(function () {\n          reject();\n        });\n\n        break;\n\n      default:\n        console.warn(\"Pagination Error - no such pagination mode:\", _this78.mode);\n        reject();\n    }\n  });\n};\n\nPage.prototype._getRemotePage = function () {\n  var _this79 = this;\n\n  var self = this,\n      oldParams,\n      pageParams;\n  return new Promise(function (resolve, reject) {\n    if (!self.table.modExists(\"ajax\", true)) {\n      reject();\n    } //record old params and restore after request has been made\n\n\n    oldParams = Tabulator.prototype.helpers.deepClone(self.table.modules.ajax.getParams() || {});\n    pageParams = self.table.modules.ajax.getParams(); //configure request params\n\n    pageParams[_this79.dataSentNames.page] = self.page; //set page size if defined\n\n    if (_this79.size) {\n      pageParams[_this79.dataSentNames.size] = _this79.size;\n    } //set sort data if defined\n\n\n    if (_this79.table.options.ajaxSorting && _this79.table.modExists(\"sort\")) {\n      var sorters = self.table.modules.sort.getSort();\n      sorters.forEach(function (item) {\n        delete item.column;\n      });\n      pageParams[_this79.dataSentNames.sorters] = sorters;\n    } //set filter data if defined\n\n\n    if (_this79.table.options.ajaxFiltering && _this79.table.modExists(\"filter\")) {\n      var filters = self.table.modules.filter.getFilters(true, true);\n      pageParams[_this79.dataSentNames.filters] = filters;\n    }\n\n    self.table.modules.ajax.setParams(pageParams);\n    self.table.modules.ajax.sendRequest(_this79.progressiveLoad).then(function (data) {\n      self._parseRemoteData(data);\n\n      resolve();\n    }).catch(function (e) {\n      reject();\n    });\n    self.table.modules.ajax.setParams(oldParams);\n  });\n};\n\nPage.prototype._parseRemoteData = function (data) {\n  var self = this,\n      left,\n      data,\n      margin;\n\n  if (typeof data[this.dataReceivedNames.last_page] === \"undefined\") {\n    console.warn(\"Remote Pagination Error - Server response missing '\" + this.dataReceivedNames.last_page + \"' property\");\n  }\n\n  if (data[this.dataReceivedNames.data]) {\n    this.max = parseInt(data[this.dataReceivedNames.last_page]) || 1;\n\n    if (this.progressiveLoad) {\n      switch (this.mode) {\n        case \"progressive_load\":\n          if (this.page == 1) {\n            this.table.rowManager.setData(data[this.dataReceivedNames.data], false, this.initialLoad && this.page == 1);\n          } else {\n            this.table.rowManager.addRows(data[this.dataReceivedNames.data]);\n          }\n\n          if (this.page < this.max) {\n            setTimeout(function () {\n              self.nextPage().then(function () {}).catch(function () {});\n            }, self.table.options.ajaxProgressiveLoadDelay);\n          }\n\n          break;\n\n        case \"progressive_scroll\":\n          data = this.table.rowManager.getData().concat(data[this.dataReceivedNames.data]);\n          this.table.rowManager.setData(data, true, this.initialLoad && this.page == 1);\n          margin = this.table.options.ajaxProgressiveLoadScrollMargin || this.table.rowManager.element.clientHeight * 2;\n\n          if (self.table.rowManager.element.scrollHeight <= self.table.rowManager.element.clientHeight + margin) {\n            self.nextPage().then(function () {}).catch(function () {});\n          }\n\n          break;\n      }\n    } else {\n      left = this.table.rowManager.scrollLeft;\n      this.table.rowManager.setData(data[this.dataReceivedNames.data], false, this.initialLoad && this.page == 1);\n      this.table.rowManager.scrollHorizontal(left);\n      this.table.columnManager.scrollHorizontal(left);\n      this.table.options.pageLoaded.call(this.table, this.getPage());\n    }\n\n    this.initialLoad = false;\n  } else {\n    console.warn(\"Remote Pagination Error - Server response missing '\" + this.dataReceivedNames.data + \"' property\");\n  }\n}; //handle the footer element being redrawn\n\n\nPage.prototype.footerRedraw = function () {\n  var footer = this.table.footerManager.element;\n\n  if (Math.ceil(footer.clientWidth) - footer.scrollWidth < 0) {\n    this.pagesElement.style.display = 'none';\n  } else {\n    this.pagesElement.style.display = '';\n\n    if (Math.ceil(footer.clientWidth) - footer.scrollWidth < 0) {\n      this.pagesElement.style.display = 'none';\n    }\n  }\n}; //set the paramter names for pagination requests\n\n\nPage.prototype.paginationDataSentNames = {\n  \"page\": \"page\",\n  \"size\": \"size\",\n  \"sorters\": \"sorters\",\n  // \"sort_dir\":\"sort_dir\",\n  \"filters\": \"filters\" // \"filter_value\":\"filter_value\",\n  // \"filter_type\":\"filter_type\",\n\n}; //set the property names for pagination responses\n\nPage.prototype.paginationDataReceivedNames = {\n  \"current_page\": \"current_page\",\n  \"last_page\": \"last_page\",\n  \"data\": \"data\"\n};\nTabulator.prototype.registerModule(\"page\", Page);\n\nvar Persistence = function Persistence(table) {\n  this.table = table; //hold Tabulator object\n\n  this.mode = \"\";\n  this.id = \"\"; // this.persistProps = [\"field\", \"width\", \"visible\"];\n\n  this.defWatcherBlock = false;\n  this.config = {};\n  this.readFunc = false;\n  this.writeFunc = false;\n}; // Test for whether localStorage is available for use.\n\n\nPersistence.prototype.localStorageTest = function () {\n  var testKey = \"_tabulator_test\";\n\n  try {\n    window.localStorage.setItem(testKey, testKey);\n    window.localStorage.removeItem(testKey);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}; //setup parameters\n\n\nPersistence.prototype.initialize = function () {\n  //determine persistent layout storage type\n  var mode = this.table.options.persistenceMode,\n      id = this.table.options.persistenceID,\n      retreivedData;\n  this.mode = mode !== true ? mode : this.localStorageTest() ? \"local\" : \"cookie\";\n\n  if (this.table.options.persistenceReaderFunc) {\n    if (typeof this.table.options.persistenceReaderFunc === \"function\") {\n      this.readFunc = this.table.options.persistenceReaderFunc;\n    } else {\n      if (this.readers[this.table.options.persistenceReaderFunc]) {\n        this.readFunc = this.readers[this.table.options.persistenceReaderFunc];\n      } else {\n        console.warn(\"Persistence Read Error - invalid reader set\", this.table.options.persistenceReaderFunc);\n      }\n    }\n  } else {\n    if (this.readers[this.mode]) {\n      this.readFunc = this.readers[this.mode];\n    } else {\n      console.warn(\"Persistence Read Error - invalid reader set\", this.mode);\n    }\n  }\n\n  if (this.table.options.persistenceWriterFunc) {\n    if (typeof this.table.options.persistenceWriterFunc === \"function\") {\n      this.writeFunc = this.table.options.persistenceWriterFunc;\n    } else {\n      if (this.readers[this.table.options.persistenceWriterFunc]) {\n        this.writeFunc = this.readers[this.table.options.persistenceWriterFunc];\n      } else {\n        console.warn(\"Persistence Write Error - invalid reader set\", this.table.options.persistenceWriterFunc);\n      }\n    }\n  } else {\n    if (this.writers[this.mode]) {\n      this.writeFunc = this.writers[this.mode];\n    } else {\n      console.warn(\"Persistence Write Error - invalid writer set\", this.mode);\n    }\n  } //set storage tag\n\n\n  this.id = \"tabulator-\" + (id || this.table.element.getAttribute(\"id\") || \"\");\n  this.config = {\n    sort: this.table.options.persistence === true || this.table.options.persistence.sort,\n    filter: this.table.options.persistence === true || this.table.options.persistence.filter,\n    group: this.table.options.persistence === true || this.table.options.persistence.group,\n    page: this.table.options.persistence === true || this.table.options.persistence.page,\n    columns: this.table.options.persistence === true ? [\"title\", \"width\", \"visible\"] : this.table.options.persistence.columns\n  }; //load pagination data if needed\n\n  if (this.config.page) {\n    retreivedData = this.retreiveData(\"page\");\n\n    if (retreivedData) {\n      if (typeof retreivedData.paginationSize !== \"undefined\" && (this.config.page === true || this.config.page.size)) {\n        this.table.options.paginationSize = retreivedData.paginationSize;\n      }\n\n      if (typeof retreivedData.paginationInitialPage !== \"undefined\" && (this.config.page === true || this.config.page.page)) {\n        this.table.options.paginationInitialPage = retreivedData.paginationInitialPage;\n      }\n    }\n  } //load group data if needed\n\n\n  if (this.config.group) {\n    retreivedData = this.retreiveData(\"group\");\n\n    if (retreivedData) {\n      if (typeof retreivedData.groupBy !== \"undefined\" && (this.config.group === true || this.config.group.groupBy)) {\n        this.table.options.groupBy = retreivedData.groupBy;\n      }\n\n      if (typeof retreivedData.groupStartOpen !== \"undefined\" && (this.config.group === true || this.config.group.groupStartOpen)) {\n        this.table.options.groupStartOpen = retreivedData.groupStartOpen;\n      }\n\n      if (typeof retreivedData.groupHeader !== \"undefined\" && (this.config.group === true || this.config.group.groupHeader)) {\n        this.table.options.groupHeader = retreivedData.groupHeader;\n      }\n    }\n  }\n};\n\nPersistence.prototype.initializeColumn = function (column) {\n  var self = this,\n      def,\n      keys;\n\n  if (this.config.columns) {\n    this.defWatcherBlock = true;\n    def = column.getDefinition();\n    keys = this.config.columns === true ? Object.keys(def) : this.config.columns;\n    keys.forEach(function (key) {\n      var props = Object.getOwnPropertyDescriptor(def, key);\n      var value = def[key];\n\n      if (props) {\n        Object.defineProperty(def, key, {\n          set: function set(newValue) {\n            value = newValue;\n\n            if (!self.defWatcherBlock) {\n              self.save(\"columns\");\n            }\n\n            if (props.set) {\n              props.set(newValue);\n            }\n          },\n          get: function get() {\n            if (props.get) {\n              props.get();\n            }\n\n            return value;\n          }\n        });\n      }\n    });\n    this.defWatcherBlock = false;\n  }\n}; //load saved definitions\n\n\nPersistence.prototype.load = function (type, current) {\n  var data = this.retreiveData(type);\n\n  if (current) {\n    data = data ? this.mergeDefinition(current, data) : current;\n  }\n\n  return data;\n}; //retreive data from memory\n\n\nPersistence.prototype.retreiveData = function (type) {\n  return this.readFunc ? this.readFunc(this.id, type) : false;\n}; //merge old and new column definitions\n\n\nPersistence.prototype.mergeDefinition = function (oldCols, newCols) {\n  var self = this,\n      output = []; // oldCols = oldCols || [];\n\n  newCols = newCols || [];\n  newCols.forEach(function (column, to) {\n    var from = self._findColumn(oldCols, column),\n        keys;\n\n    if (from) {\n      if (self.config.columns === true || self.config.columns == undefined) {\n        keys = Object.keys(from);\n        keys.push(\"width\");\n      } else {\n        keys = self.config.columns;\n      }\n\n      keys.forEach(function (key) {\n        if (typeof column[key] !== \"undefined\") {\n          from[key] = column[key];\n        }\n      });\n\n      if (from.columns) {\n        from.columns = self.mergeDefinition(from.columns, column.columns);\n      }\n\n      output.push(from);\n    }\n  });\n  oldCols.forEach(function (column, i) {\n    var from = self._findColumn(newCols, column);\n\n    if (!from) {\n      if (output.length > i) {\n        output.splice(i, 0, column);\n      } else {\n        output.push(column);\n      }\n    }\n  });\n  return output;\n}; //find matching columns\n\n\nPersistence.prototype._findColumn = function (columns, subject) {\n  var type = subject.columns ? \"group\" : subject.field ? \"field\" : \"object\";\n  return columns.find(function (col) {\n    switch (type) {\n      case \"group\":\n        return col.title === subject.title && col.columns.length === subject.columns.length;\n        break;\n\n      case \"field\":\n        return col.field === subject.field;\n        break;\n\n      case \"object\":\n        return col === subject;\n        break;\n    }\n  });\n}; //save data\n\n\nPersistence.prototype.save = function (type) {\n  var data = {};\n\n  switch (type) {\n    case \"columns\":\n      data = this.parseColumns(this.table.columnManager.getColumns());\n      break;\n\n    case \"filter\":\n      data = this.table.modules.filter.getFilters();\n      break;\n\n    case \"sort\":\n      data = this.validateSorters(this.table.modules.sort.getSort());\n      break;\n\n    case \"group\":\n      data = this.getGroupConfig();\n      break;\n\n    case \"page\":\n      data = this.getPageConfig();\n      break;\n  }\n\n  if (this.writeFunc) {\n    this.writeFunc(this.id, type, data);\n  }\n}; //ensure sorters contain no function data\n\n\nPersistence.prototype.validateSorters = function (data) {\n  data.forEach(function (item) {\n    item.column = item.field;\n    delete item.field;\n  });\n  return data;\n};\n\nPersistence.prototype.getGroupConfig = function () {\n  var data = {};\n\n  if (this.config.group) {\n    if (this.config.group === true || this.config.group.groupBy) {\n      data.groupBy = this.table.options.groupBy;\n    }\n\n    if (this.config.group === true || this.config.group.groupStartOpen) {\n      data.groupStartOpen = this.table.options.groupStartOpen;\n    }\n\n    if (this.config.group === true || this.config.group.groupHeader) {\n      data.groupHeader = this.table.options.groupHeader;\n    }\n  }\n\n  return data;\n};\n\nPersistence.prototype.getPageConfig = function () {\n  var data = {};\n\n  if (this.config.page) {\n    if (this.config.page === true || this.config.page.size) {\n      data.paginationSize = this.table.modules.page.getPageSize();\n    }\n\n    if (this.config.page === true || this.config.page.page) {\n      data.paginationInitialPage = this.table.modules.page.getPage();\n    }\n  }\n\n  return data;\n}; //parse columns for data to store\n\n\nPersistence.prototype.parseColumns = function (columns) {\n  var self = this,\n      definitions = [];\n  columns.forEach(function (column) {\n    var defStore = {},\n        colDef = column.getDefinition(),\n        keys;\n\n    if (column.isGroup) {\n      defStore.title = colDef.title;\n      defStore.columns = self.parseColumns(column.getColumns());\n    } else {\n      defStore.field = column.getField();\n\n      if (self.config.columns === true || self.config.columns == undefined) {\n        keys = Object.keys(colDef);\n        keys.push(\"width\");\n      } else {\n        keys = self.config.columns;\n      }\n\n      keys.forEach(function (key) {\n        switch (key) {\n          case \"width\":\n            defStore.width = column.getWidth();\n            break;\n\n          case \"visible\":\n            defStore.visible = column.visible;\n            break;\n\n          default:\n            defStore[key] = colDef[key];\n        }\n      });\n    }\n\n    definitions.push(defStore);\n  });\n  return definitions;\n}; // read peristence information from storage\n\n\nPersistence.prototype.readers = {\n  local: function local(id, type) {\n    var data = localStorage.getItem(id + \"-\" + type);\n    return data ? JSON.parse(data) : false;\n  },\n  cookie: function cookie(id, type) {\n    var cookie = document.cookie,\n        key = id + \"-\" + type,\n        cookiePos = cookie.indexOf(key + \"=\"),\n        end,\n        data; //if cookie exists, decode and load column data into tabulator\n\n    if (cookiePos > -1) {\n      cookie = cookie.substr(cookiePos);\n      end = cookie.indexOf(\";\");\n\n      if (end > -1) {\n        cookie = cookie.substr(0, end);\n      }\n\n      data = cookie.replace(key + \"=\", \"\");\n    }\n\n    return data ? JSON.parse(data) : false;\n  }\n}; //write persistence information to storage\n\nPersistence.prototype.writers = {\n  local: function local(id, type, data) {\n    localStorage.setItem(id + \"-\" + type, JSON.stringify(data));\n  },\n  cookie: function cookie(id, type, data) {\n    var expireDate = new Date();\n    expireDate.setDate(expireDate.getDate() + 10000);\n    document.cookie = id + \"-\" + type + \"=\" + JSON.stringify(data) + \"; expires=\" + expireDate.toUTCString();\n  }\n};\nTabulator.prototype.registerModule(\"persistence\", Persistence);\n\nvar Print = function Print(table) {\n  this.table = table; //hold Tabulator object\n\n  this.element = false;\n  this.manualBlock = false;\n};\n\nPrint.prototype.initialize = function () {\n  window.addEventListener(\"beforeprint\", this.replaceTable.bind(this));\n  window.addEventListener(\"afterprint\", this.cleanup.bind(this));\n};\n\nPrint.prototype.replaceTable = function () {\n  if (!this.manualBlock) {\n    this.element = document.createElement(\"div\");\n    this.element.classList.add(\"tabulator-print-table\");\n    this.element.appendChild(this.table.modules.export.genereateTable(this.table.options.printConfig, this.table.options.printStyled, this.table.options.printRowRange, \"print\"));\n    this.table.element.style.display = \"none\";\n    this.table.element.parentNode.insertBefore(this.element, this.table.element);\n  }\n};\n\nPrint.prototype.cleanup = function () {\n  document.body.classList.remove(\"tabulator-print-fullscreen-hide\");\n\n  if (this.element && this.element.parentNode) {\n    this.element.parentNode.removeChild(this.element);\n    this.table.element.style.display = \"\";\n  }\n};\n\nPrint.prototype.printFullscreen = function (visible, style, config) {\n  var scrollX = window.scrollX,\n      scrollY = window.scrollY,\n      headerEl = document.createElement(\"div\"),\n      footerEl = document.createElement(\"div\"),\n      tableEl = this.table.modules.export.genereateTable(typeof config != \"undefined\" ? config : this.table.options.printConfig, typeof style != \"undefined\" ? style : this.table.options.printStyled, visible, \"print\"),\n      headerContent,\n      footerContent;\n  this.manualBlock = true;\n  this.element = document.createElement(\"div\");\n  this.element.classList.add(\"tabulator-print-fullscreen\");\n\n  if (this.table.options.printHeader) {\n    headerEl.classList.add(\"tabulator-print-header\");\n    headerContent = typeof this.table.options.printHeader == \"function\" ? this.table.options.printHeader.call(this.table) : this.table.options.printHeader;\n\n    if (typeof headerContent == \"string\") {\n      headerEl.innerHTML = headerContent;\n    } else {\n      headerEl.appendChild(headerContent);\n    }\n\n    this.element.appendChild(headerEl);\n  }\n\n  this.element.appendChild(tableEl);\n\n  if (this.table.options.printFooter) {\n    footerEl.classList.add(\"tabulator-print-footer\");\n    footerContent = typeof this.table.options.printFooter == \"function\" ? this.table.options.printFooter.call(this.table) : this.table.options.printFooter;\n\n    if (typeof footerContent == \"string\") {\n      footerEl.innerHTML = footerContent;\n    } else {\n      footerEl.appendChild(footerContent);\n    }\n\n    this.element.appendChild(footerEl);\n  }\n\n  document.body.classList.add(\"tabulator-print-fullscreen-hide\");\n  document.body.appendChild(this.element);\n\n  if (this.table.options.printFormatter) {\n    this.table.options.printFormatter(this.element, tableEl);\n  }\n\n  window.print();\n  this.cleanup();\n  window.scrollTo(scrollX, scrollY);\n  this.manualBlock = false;\n};\n\nTabulator.prototype.registerModule(\"print\", Print);\n\nvar ReactiveData = function ReactiveData(table) {\n  this.table = table; //hold Tabulator object\n\n  this.data = false;\n  this.blocked = false; //block reactivity while performing update\n\n  this.origFuncs = {}; // hold original data array functions to allow replacement after data is done with\n\n  this.currentVersion = 0;\n};\n\nReactiveData.prototype.watchData = function (data) {\n  var self = this,\n      pushFunc,\n      version;\n  this.currentVersion++;\n  version = this.currentVersion;\n  self.unwatchData();\n  self.data = data; //override array push function\n\n  self.origFuncs.push = data.push;\n  Object.defineProperty(self.data, \"push\", {\n    enumerable: false,\n    configurable: true,\n    value: function value() {\n      var args = Array.from(arguments);\n\n      if (!self.blocked && version === self.currentVersion) {\n        args.forEach(function (arg) {\n          self.table.rowManager.addRowActual(arg, false);\n        });\n      }\n\n      return self.origFuncs.push.apply(data, arguments);\n    }\n  }); //override array unshift function\n\n  self.origFuncs.unshift = data.unshift;\n  Object.defineProperty(self.data, \"unshift\", {\n    enumerable: false,\n    configurable: true,\n    value: function value() {\n      var args = Array.from(arguments);\n\n      if (!self.blocked && version === self.currentVersion) {\n        args.forEach(function (arg) {\n          self.table.rowManager.addRowActual(arg, true);\n        });\n      }\n\n      return self.origFuncs.unshift.apply(data, arguments);\n    }\n  }); //override array shift function\n\n  self.origFuncs.shift = data.shift;\n  Object.defineProperty(self.data, \"shift\", {\n    enumerable: false,\n    configurable: true,\n    value: function value() {\n      var row;\n\n      if (!self.blocked && version === self.currentVersion) {\n        if (self.data.length) {\n          row = self.table.rowManager.getRowFromDataObject(self.data[0]);\n\n          if (row) {\n            row.deleteActual();\n          }\n        }\n      }\n\n      return self.origFuncs.shift.call(data);\n    }\n  }); //override array pop function\n\n  self.origFuncs.pop = data.pop;\n  Object.defineProperty(self.data, \"pop\", {\n    enumerable: false,\n    configurable: true,\n    value: function value() {\n      var row;\n\n      if (!self.blocked && version === self.currentVersion) {\n        if (self.data.length) {\n          row = self.table.rowManager.getRowFromDataObject(self.data[self.data.length - 1]);\n\n          if (row) {\n            row.deleteActual();\n          }\n        }\n      }\n\n      return self.origFuncs.pop.call(data);\n    }\n  }); //override array splice function\n\n  self.origFuncs.splice = data.splice;\n  Object.defineProperty(self.data, \"splice\", {\n    enumerable: false,\n    configurable: true,\n    value: function value() {\n      var args = Array.from(arguments),\n          start = args[0] < 0 ? data.length + args[0] : args[0],\n          end = args[1],\n          newRows = args[2] ? args.slice(2) : false,\n          startRow;\n\n      if (!self.blocked && version === self.currentVersion) {\n        //add new rows\n        if (newRows) {\n          startRow = data[start] ? self.table.rowManager.getRowFromDataObject(data[start]) : false;\n\n          if (startRow) {\n            newRows.forEach(function (rowData) {\n              self.table.rowManager.addRowActual(rowData, true, startRow, true);\n            });\n          } else {\n            newRows = newRows.slice().reverse();\n            newRows.forEach(function (rowData) {\n              self.table.rowManager.addRowActual(rowData, true, false, true);\n            });\n          }\n        } //delete removed rows\n\n\n        if (end !== 0) {\n          var oldRows = data.slice(start, typeof args[1] === \"undefined\" ? args[1] : start + end);\n          oldRows.forEach(function (rowData, i) {\n            var row = self.table.rowManager.getRowFromDataObject(rowData);\n\n            if (row) {\n              row.deleteActual(i !== oldRows.length - 1);\n            }\n          });\n        }\n\n        if (newRows || end !== 0) {\n          self.table.rowManager.reRenderInPosition();\n        }\n      }\n\n      return self.origFuncs.splice.apply(data, arguments);\n    }\n  });\n};\n\nReactiveData.prototype.unwatchData = function () {\n  if (this.data !== false) {\n    for (var key in this.origFuncs) {\n      Object.defineProperty(this.data, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: this.origFuncs.key\n      });\n    }\n  }\n};\n\nReactiveData.prototype.watchRow = function (row) {\n  var data = row.getData();\n  this.blocked = true;\n\n  for (var key in data) {\n    this.watchKey(row, data, key);\n  }\n\n  if (this.table.options.dataTree) {\n    this.watchTreeChildren(row);\n  }\n\n  this.blocked = false;\n};\n\nReactiveData.prototype.watchTreeChildren = function (row) {\n  var self = this,\n      childField = row.getData()[this.table.options.dataTreeChildField],\n      origFuncs = {};\n\n  function rebuildTree() {\n    self.table.modules.dataTree.initializeRow(row);\n    self.table.modules.dataTree.layoutRow(row);\n    self.table.rowManager.refreshActiveData(\"tree\", false, true);\n  }\n\n  if (childField) {\n    origFuncs.push = childField.push;\n    Object.defineProperty(childField, \"push\", {\n      enumerable: false,\n      configurable: true,\n      value: function value() {\n        var result = origFuncs.push.apply(childField, arguments);\n        rebuildTree();\n        return result;\n      }\n    });\n    origFuncs.unshift = childField.unshift;\n    Object.defineProperty(childField, \"unshift\", {\n      enumerable: false,\n      configurable: true,\n      value: function value() {\n        var result = origFuncs.unshift.apply(childField, arguments);\n        rebuildTree();\n        return result;\n      }\n    });\n    origFuncs.shift = childField.shift;\n    Object.defineProperty(childField, \"shift\", {\n      enumerable: false,\n      configurable: true,\n      value: function value() {\n        var result = origFuncs.shift.call(childField);\n        rebuildTree();\n        return result;\n      }\n    });\n    origFuncs.pop = childField.pop;\n    Object.defineProperty(childField, \"pop\", {\n      enumerable: false,\n      configurable: true,\n      value: function value() {\n        var result = origFuncs.pop.call(childField);\n        rebuildTree();\n        return result;\n      }\n    });\n    origFuncs.splice = childField.splice;\n    Object.defineProperty(childField, \"splice\", {\n      enumerable: false,\n      configurable: true,\n      value: function value() {\n        var result = origFuncs.splice.apply(childField, arguments);\n        rebuildTree();\n        return result;\n      }\n    });\n  }\n};\n\nReactiveData.prototype.watchKey = function (row, data, key) {\n  var self = this,\n      props = Object.getOwnPropertyDescriptor(data, key),\n      value = data[key],\n      version = this.currentVersion;\n  Object.defineProperty(data, key, {\n    set: function set(newValue) {\n      value = newValue;\n\n      if (!self.blocked && version === self.currentVersion) {\n        var update = {};\n        update[key] = newValue;\n        row.updateData(update);\n      }\n\n      if (props.set) {\n        props.set(newValue);\n      }\n    },\n    get: function get() {\n      if (props.get) {\n        props.get();\n      }\n\n      return value;\n    }\n  });\n};\n\nReactiveData.prototype.unwatchRow = function (row) {\n  var data = row.getData();\n\n  for (var key in data) {\n    Object.defineProperty(data, key, {\n      value: data[key]\n    });\n  }\n};\n\nReactiveData.prototype.block = function () {\n  this.blocked = true;\n};\n\nReactiveData.prototype.unblock = function () {\n  this.blocked = false;\n};\n\nTabulator.prototype.registerModule(\"reactiveData\", ReactiveData);\n\nvar ResizeColumns = function ResizeColumns(table) {\n  this.table = table; //hold Tabulator object\n\n  this.startColumn = false;\n  this.startX = false;\n  this.startWidth = false;\n  this.handle = null;\n  this.prevHandle = null;\n};\n\nResizeColumns.prototype.initializeColumn = function (type, column, element) {\n  var self = this,\n      variableHeight = false,\n      mode = this.table.options.resizableColumns; //set column resize mode\n\n  if (type === \"header\") {\n    variableHeight = column.definition.formatter == \"textarea\" || column.definition.variableHeight;\n    column.modules.resize = {\n      variableHeight: variableHeight\n    };\n  }\n\n  if (mode === true || mode == type) {\n    var handle = document.createElement('div');\n    handle.className = \"tabulator-col-resize-handle\";\n    var prevHandle = document.createElement('div');\n    prevHandle.className = \"tabulator-col-resize-handle prev\";\n    handle.addEventListener(\"click\", function (e) {\n      e.stopPropagation();\n    });\n\n    var handleDown = function handleDown(e) {\n      var nearestColumn = column.getLastColumn();\n\n      if (nearestColumn && self._checkResizability(nearestColumn)) {\n        self.startColumn = column;\n\n        self._mouseDown(e, nearestColumn, handle);\n      }\n    };\n\n    handle.addEventListener(\"mousedown\", handleDown);\n    handle.addEventListener(\"touchstart\", handleDown, {\n      passive: true\n    }); //reszie column on  double click\n\n    handle.addEventListener(\"dblclick\", function (e) {\n      var col = column.getLastColumn();\n\n      if (col && self._checkResizability(col)) {\n        e.stopPropagation();\n        col.reinitializeWidth(true);\n      }\n    });\n    prevHandle.addEventListener(\"click\", function (e) {\n      e.stopPropagation();\n    });\n\n    var prevHandleDown = function prevHandleDown(e) {\n      var nearestColumn, colIndex, prevColumn;\n      nearestColumn = column.getFirstColumn();\n\n      if (nearestColumn) {\n        colIndex = self.table.columnManager.findColumnIndex(nearestColumn);\n        prevColumn = colIndex > 0 ? self.table.columnManager.getColumnByIndex(colIndex - 1) : false;\n\n        if (prevColumn && self._checkResizability(prevColumn)) {\n          self.startColumn = column;\n\n          self._mouseDown(e, prevColumn, prevHandle);\n        }\n      }\n    };\n\n    prevHandle.addEventListener(\"mousedown\", prevHandleDown);\n    prevHandle.addEventListener(\"touchstart\", prevHandleDown, {\n      passive: true\n    }); //resize column on double click\n\n    prevHandle.addEventListener(\"dblclick\", function (e) {\n      var nearestColumn, colIndex, prevColumn;\n      nearestColumn = column.getFirstColumn();\n\n      if (nearestColumn) {\n        colIndex = self.table.columnManager.findColumnIndex(nearestColumn);\n        prevColumn = colIndex > 0 ? self.table.columnManager.getColumnByIndex(colIndex - 1) : false;\n\n        if (prevColumn && self._checkResizability(prevColumn)) {\n          e.stopPropagation();\n          prevColumn.reinitializeWidth(true);\n        }\n      }\n    });\n    element.appendChild(handle);\n    element.appendChild(prevHandle);\n  }\n};\n\nResizeColumns.prototype._checkResizability = function (column) {\n  return typeof column.definition.resizable != \"undefined\" ? column.definition.resizable : this.table.options.resizableColumns;\n};\n\nResizeColumns.prototype._mouseDown = function (e, column, handle) {\n  var self = this;\n  self.table.element.classList.add(\"tabulator-block-select\");\n\n  function mouseMove(e) {\n    // self.table.columnManager.tempScrollBlock();\n    if (self.table.rtl) {\n      column.setWidth(self.startWidth - ((typeof e.screenX === \"undefined\" ? e.touches[0].screenX : e.screenX) - self.startX));\n    } else {\n      column.setWidth(self.startWidth + ((typeof e.screenX === \"undefined\" ? e.touches[0].screenX : e.screenX) - self.startX));\n    }\n\n    if (self.table.options.virtualDomHoz) {\n      self.table.vdomHoz.reinitialize(true);\n    }\n\n    if (!self.table.browserSlow && column.modules.resize && column.modules.resize.variableHeight) {\n      column.checkCellHeights();\n    }\n  }\n\n  function mouseUp(e) {\n    //block editor from taking action while resizing is taking place\n    if (self.startColumn.modules.edit) {\n      self.startColumn.modules.edit.blocked = false;\n    }\n\n    if (self.table.browserSlow && column.modules.resize && column.modules.resize.variableHeight) {\n      column.checkCellHeights();\n    }\n\n    document.body.removeEventListener(\"mouseup\", mouseUp);\n    document.body.removeEventListener(\"mousemove\", mouseMove);\n    handle.removeEventListener(\"touchmove\", mouseMove);\n    handle.removeEventListener(\"touchend\", mouseUp);\n    self.table.element.classList.remove(\"tabulator-block-select\");\n\n    if (self.table.options.persistence && self.table.modExists(\"persistence\", true) && self.table.modules.persistence.config.columns) {\n      self.table.modules.persistence.save(\"columns\");\n    }\n\n    self.table.options.columnResized.call(self.table, column.getComponent());\n  }\n\n  e.stopPropagation(); //prevent resize from interfereing with movable columns\n  //block editor from taking action while resizing is taking place\n\n  if (self.startColumn.modules.edit) {\n    self.startColumn.modules.edit.blocked = true;\n  }\n\n  self.startX = typeof e.screenX === \"undefined\" ? e.touches[0].screenX : e.screenX;\n  self.startWidth = column.getWidth();\n  document.body.addEventListener(\"mousemove\", mouseMove);\n  document.body.addEventListener(\"mouseup\", mouseUp);\n  handle.addEventListener(\"touchmove\", mouseMove, {\n    passive: true\n  });\n  handle.addEventListener(\"touchend\", mouseUp);\n};\n\nTabulator.prototype.registerModule(\"resizeColumns\", ResizeColumns);\n\nvar ResizeRows = function ResizeRows(table) {\n  this.table = table; //hold Tabulator object\n\n  this.startColumn = false;\n  this.startY = false;\n  this.startHeight = false;\n  this.handle = null;\n  this.prevHandle = null;\n};\n\nResizeRows.prototype.initializeRow = function (row) {\n  var self = this,\n      rowEl = row.getElement();\n  var handle = document.createElement('div');\n  handle.className = \"tabulator-row-resize-handle\";\n  var prevHandle = document.createElement('div');\n  prevHandle.className = \"tabulator-row-resize-handle prev\";\n  handle.addEventListener(\"click\", function (e) {\n    e.stopPropagation();\n  });\n\n  var handleDown = function handleDown(e) {\n    self.startRow = row;\n\n    self._mouseDown(e, row, handle);\n  };\n\n  handle.addEventListener(\"mousedown\", handleDown);\n  handle.addEventListener(\"touchstart\", handleDown, {\n    passive: true\n  });\n  prevHandle.addEventListener(\"click\", function (e) {\n    e.stopPropagation();\n  });\n\n  var prevHandleDown = function prevHandleDown(e) {\n    var prevRow = self.table.rowManager.prevDisplayRow(row);\n\n    if (prevRow) {\n      self.startRow = prevRow;\n\n      self._mouseDown(e, prevRow, prevHandle);\n    }\n  };\n\n  prevHandle.addEventListener(\"mousedown\", prevHandleDown);\n  prevHandle.addEventListener(\"touchstart\", prevHandleDown, {\n    passive: true\n  });\n  rowEl.appendChild(handle);\n  rowEl.appendChild(prevHandle);\n};\n\nResizeRows.prototype._mouseDown = function (e, row, handle) {\n  var self = this;\n  self.table.element.classList.add(\"tabulator-block-select\");\n\n  function mouseMove(e) {\n    row.setHeight(self.startHeight + ((typeof e.screenY === \"undefined\" ? e.touches[0].screenY : e.screenY) - self.startY));\n  }\n\n  function mouseUp(e) {\n    // //block editor from taking action while resizing is taking place\n    // if(self.startColumn.modules.edit){\n    // \tself.startColumn.modules.edit.blocked = false;\n    // }\n    document.body.removeEventListener(\"mouseup\", mouseMove);\n    document.body.removeEventListener(\"mousemove\", mouseMove);\n    handle.removeEventListener(\"touchmove\", mouseMove);\n    handle.removeEventListener(\"touchend\", mouseUp);\n    self.table.element.classList.remove(\"tabulator-block-select\");\n    self.table.options.rowResized.call(this.table, row.getComponent());\n  }\n\n  e.stopPropagation(); //prevent resize from interfereing with movable columns\n  //block editor from taking action while resizing is taking place\n  // if(self.startColumn.modules.edit){\n  // \tself.startColumn.modules.edit.blocked = true;\n  // }\n\n  self.startY = typeof e.screenY === \"undefined\" ? e.touches[0].screenY : e.screenY;\n  self.startHeight = row.getHeight();\n  document.body.addEventListener(\"mousemove\", mouseMove);\n  document.body.addEventListener(\"mouseup\", mouseUp);\n  handle.addEventListener(\"touchmove\", mouseMove, {\n    passive: true\n  });\n  handle.addEventListener(\"touchend\", mouseUp);\n};\n\nTabulator.prototype.registerModule(\"resizeRows\", ResizeRows);\n\nvar ResizeTable = function ResizeTable(table) {\n  this.table = table; //hold Tabulator object\n\n  this.binding = false;\n  this.observer = false;\n  this.containerObserver = false;\n  this.tableHeight = 0;\n  this.tableWidth = 0;\n  this.containerHeight = 0;\n  this.containerWidth = 0;\n  this.autoResize = false;\n};\n\nResizeTable.prototype.initialize = function (row) {\n  var _this80 = this;\n\n  var table = this.table,\n      tableStyle;\n  this.tableHeight = table.element.clientHeight;\n  this.tableWidth = table.element.clientWidth;\n\n  if (table.element.parentNode) {\n    this.containerHeight = table.element.parentNode.clientHeight;\n    this.containerWidth = table.element.parentNode.clientWidth;\n  }\n\n  if (typeof ResizeObserver !== \"undefined\" && table.rowManager.getRenderMode() === \"virtual\") {\n    this.autoResize = true;\n    this.observer = new ResizeObserver(function (entry) {\n      if (!table.browserMobile || table.browserMobile && !table.modules.edit.currentCell) {\n        var nodeHeight = Math.floor(entry[0].contentRect.height);\n        var nodeWidth = Math.floor(entry[0].contentRect.width);\n\n        if (_this80.tableHeight != nodeHeight || _this80.tableWidth != nodeWidth) {\n          _this80.tableHeight = nodeHeight;\n          _this80.tableWidth = nodeWidth;\n\n          if (table.element.parentNode) {\n            _this80.containerHeight = table.element.parentNode.clientHeight;\n            _this80.containerWidth = table.element.parentNode.clientWidth;\n          }\n\n          if (table.options.virtualDomHoz) {\n            table.vdomHoz.reinitialize(true);\n          }\n\n          table.redraw();\n        }\n      }\n    });\n    this.observer.observe(table.element);\n    tableStyle = window.getComputedStyle(table.element);\n\n    if (this.table.element.parentNode && !this.table.rowManager.fixedHeight && (tableStyle.getPropertyValue(\"max-height\") || tableStyle.getPropertyValue(\"min-height\"))) {\n      this.containerObserver = new ResizeObserver(function (entry) {\n        if (!table.browserMobile || table.browserMobile && !table.modules.edit.currentCell) {\n          var nodeHeight = Math.floor(entry[0].contentRect.height);\n          var nodeWidth = Math.floor(entry[0].contentRect.width);\n\n          if (_this80.containerHeight != nodeHeight || _this80.containerWidth != nodeWidth) {\n            _this80.containerHeight = nodeHeight;\n            _this80.containerWidth = nodeWidth;\n            _this80.tableHeight = table.element.clientHeight;\n            _this80.tableWidth = table.element.clientWidth;\n          }\n\n          if (table.options.virtualDomHoz) {\n            table.vdomHoz.reinitialize(true);\n          }\n\n          table.redraw();\n        }\n      });\n      this.containerObserver.observe(this.table.element.parentNode);\n    }\n  } else {\n    this.binding = function () {\n      if (!table.browserMobile || table.browserMobile && !table.modules.edit.currentCell) {\n        if (table.options.virtualDomHoz) {\n          table.vdomHoz.reinitialize(true);\n        }\n\n        table.redraw();\n      }\n    };\n\n    window.addEventListener(\"resize\", this.binding);\n  }\n};\n\nResizeTable.prototype.clearBindings = function (row) {\n  if (this.binding) {\n    window.removeEventListener(\"resize\", this.binding);\n  }\n\n  if (this.observer) {\n    this.observer.unobserve(this.table.element);\n  }\n\n  if (this.containerObserver) {\n    this.containerObserver.unobserve(this.table.element.parentNode);\n  }\n};\n\nTabulator.prototype.registerModule(\"resizeTable\", ResizeTable);\n\nvar ResponsiveLayout = function ResponsiveLayout(table) {\n  this.table = table; //hold Tabulator object\n\n  this.columns = [];\n  this.hiddenColumns = [];\n  this.mode = \"\";\n  this.index = 0;\n  this.collapseFormatter = [];\n  this.collapseStartOpen = true;\n  this.collapseHandleColumn = false;\n}; //generate resposive columns list\n\n\nResponsiveLayout.prototype.initialize = function () {\n  var self = this,\n      columns = [];\n  this.mode = this.table.options.responsiveLayout;\n  this.collapseFormatter = this.table.options.responsiveLayoutCollapseFormatter || this.formatCollapsedData;\n  this.collapseStartOpen = this.table.options.responsiveLayoutCollapseStartOpen;\n  this.hiddenColumns = []; //detemine level of responsivity for each column\n\n  this.table.columnManager.columnsByIndex.forEach(function (column, i) {\n    if (column.modules.responsive) {\n      if (column.modules.responsive.order && column.modules.responsive.visible) {\n        column.modules.responsive.index = i;\n        columns.push(column);\n\n        if (!column.visible && self.mode === \"collapse\") {\n          self.hiddenColumns.push(column);\n        }\n      }\n    }\n  }); //sort list by responsivity\n\n  columns = columns.reverse();\n  columns = columns.sort(function (a, b) {\n    var diff = b.modules.responsive.order - a.modules.responsive.order;\n    return diff || b.modules.responsive.index - a.modules.responsive.index;\n  });\n  this.columns = columns;\n\n  if (this.mode === \"collapse\") {\n    this.generateCollapsedContent();\n  } //assign collapse column\n\n\n  for (var _iterator = this.table.columnManager.columnsByIndex, _isArray = Array.isArray(_iterator), _i16 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i16 >= _iterator.length) break;\n      _ref = _iterator[_i16++];\n    } else {\n      _i16 = _iterator.next();\n      if (_i16.done) break;\n      _ref = _i16.value;\n    }\n\n    var col = _ref;\n\n    if (col.definition.formatter == \"responsiveCollapse\") {\n      this.collapseHandleColumn = col;\n      break;\n    }\n  }\n\n  if (this.collapseHandleColumn) {\n    if (this.hiddenColumns.length) {\n      this.collapseHandleColumn.show();\n    } else {\n      this.collapseHandleColumn.hide();\n    }\n  }\n}; //define layout information\n\n\nResponsiveLayout.prototype.initializeColumn = function (column) {\n  var def = column.getDefinition();\n  column.modules.responsive = {\n    order: typeof def.responsive === \"undefined\" ? 1 : def.responsive,\n    visible: def.visible === false ? false : true\n  };\n};\n\nResponsiveLayout.prototype.initializeRow = function (row) {\n  var el;\n\n  if (row.type !== \"calc\") {\n    el = document.createElement(\"div\");\n    el.classList.add(\"tabulator-responsive-collapse\");\n    row.modules.responsiveLayout = {\n      element: el,\n      open: this.collapseStartOpen\n    };\n\n    if (!this.collapseStartOpen) {\n      el.style.display = 'none';\n    }\n  }\n};\n\nResponsiveLayout.prototype.layoutRow = function (row) {\n  var rowEl = row.getElement();\n\n  if (row.modules.responsiveLayout) {\n    rowEl.appendChild(row.modules.responsiveLayout.element);\n    this.generateCollapsedRowContent(row);\n  }\n}; //update column visibility\n\n\nResponsiveLayout.prototype.updateColumnVisibility = function (column, visible) {\n  var index;\n\n  if (column.modules.responsive) {\n    column.modules.responsive.visible = visible;\n    this.initialize();\n  }\n};\n\nResponsiveLayout.prototype.hideColumn = function (column) {\n  var colCount = this.hiddenColumns.length;\n  column.hide(false, true);\n\n  if (this.mode === \"collapse\") {\n    this.hiddenColumns.unshift(column);\n    this.generateCollapsedContent();\n\n    if (this.collapseHandleColumn && !colCount) {\n      this.collapseHandleColumn.show();\n    }\n  }\n};\n\nResponsiveLayout.prototype.showColumn = function (column) {\n  var index;\n  column.show(false, true); //set column width to prevent calculation loops on uninitialized columns\n\n  column.setWidth(column.getWidth());\n\n  if (this.mode === \"collapse\") {\n    index = this.hiddenColumns.indexOf(column);\n\n    if (index > -1) {\n      this.hiddenColumns.splice(index, 1);\n    }\n\n    this.generateCollapsedContent();\n\n    if (this.collapseHandleColumn && !this.hiddenColumns.length) {\n      this.collapseHandleColumn.hide();\n    }\n  }\n}; //redraw columns to fit space\n\n\nResponsiveLayout.prototype.update = function () {\n  var self = this,\n      working = true;\n\n  while (working) {\n    var width = self.table.modules.layout.getMode() == \"fitColumns\" ? self.table.columnManager.getFlexBaseWidth() : self.table.columnManager.getWidth();\n    var diff = (self.table.options.headerVisible ? self.table.columnManager.element.clientWidth : self.table.element.clientWidth) - width;\n\n    if (diff < 0) {\n      //table is too wide\n      var column = self.columns[self.index];\n\n      if (column) {\n        self.hideColumn(column);\n        self.index++;\n      } else {\n        working = false;\n      }\n    } else {\n      //table has spare space\n      var _column = self.columns[self.index - 1];\n\n      if (_column) {\n        if (diff > 0) {\n          if (diff >= _column.getWidth()) {\n            self.showColumn(_column);\n            self.index--;\n          } else {\n            working = false;\n          }\n        } else {\n          working = false;\n        }\n      } else {\n        working = false;\n      }\n    }\n\n    if (!self.table.rowManager.activeRowsCount) {\n      self.table.rowManager.renderEmptyScroll();\n    }\n  }\n};\n\nResponsiveLayout.prototype.generateCollapsedContent = function () {\n  var self = this,\n      rows = this.table.rowManager.getDisplayRows();\n  rows.forEach(function (row) {\n    self.generateCollapsedRowContent(row);\n  });\n};\n\nResponsiveLayout.prototype.generateCollapsedRowContent = function (row) {\n  var el, contents;\n\n  if (row.modules.responsiveLayout) {\n    el = row.modules.responsiveLayout.element;\n\n    while (el.firstChild) {\n      el.removeChild(el.firstChild);\n    }\n\n    contents = this.collapseFormatter(this.generateCollapsedRowData(row));\n\n    if (contents) {\n      el.appendChild(contents);\n    }\n  }\n};\n\nResponsiveLayout.prototype.generateCollapsedRowData = function (row) {\n  var self = this,\n      data = row.getData(),\n      output = [],\n      mockCellComponent;\n  this.hiddenColumns.forEach(function (column) {\n    var value = column.getFieldValue(data);\n\n    if (column.definition.title && column.field) {\n      if (column.modules.format && self.table.options.responsiveLayoutCollapseUseFormatters) {\n        mockCellComponent = {\n          value: false,\n          data: {},\n          getValue: function getValue() {\n            return value;\n          },\n          getData: function getData() {\n            return data;\n          },\n          getElement: function getElement() {\n            return document.createElement(\"div\");\n          },\n          getRow: function getRow() {\n            return row.getComponent();\n          },\n          getColumn: function getColumn() {\n            return column.getComponent();\n          }\n        };\n        output.push({\n          title: column.definition.title,\n          value: column.modules.format.formatter.call(self.table.modules.format, mockCellComponent, column.modules.format.params)\n        });\n      } else {\n        output.push({\n          title: column.definition.title,\n          value: value\n        });\n      }\n    }\n  });\n  return output;\n};\n\nResponsiveLayout.prototype.formatCollapsedData = function (data) {\n  var list = document.createElement(\"table\"),\n      listContents = \"\";\n  data.forEach(function (item) {\n    var div = document.createElement(\"div\");\n\n    if (item.value instanceof Node) {\n      div.appendChild(item.value);\n      item.value = div.innerHTML;\n    }\n\n    listContents += \"<tr><td><strong>\" + item.title + \"</strong></td><td>\" + item.value + \"</td></tr>\";\n  });\n  list.innerHTML = listContents;\n  return Object.keys(data).length ? list : \"\";\n};\n\nTabulator.prototype.registerModule(\"responsiveLayout\", ResponsiveLayout);\n\nvar SelectRow = function SelectRow(table) {\n  this.table = table; //hold Tabulator object\n\n  this.selecting = false; //flag selecting in progress\n\n  this.lastClickedRow = false; //last clicked row\n\n  this.selectPrev = []; //hold previously selected element for drag drop selection\n\n  this.selectedRows = []; //hold selected rows\n\n  this.headerCheckboxElement = null; // hold header select element\n};\n\nSelectRow.prototype.clearSelectionData = function (silent) {\n  this.selecting = false;\n  this.lastClickedRow = false;\n  this.selectPrev = [];\n  this.selectedRows = [];\n\n  if (!silent) {\n    this._rowSelectionChanged();\n  }\n};\n\nSelectRow.prototype.initializeRow = function (row) {\n  var self = this,\n      element = row.getElement(); // trigger end of row selection\n\n  var endSelect = function endSelect() {\n    setTimeout(function () {\n      self.selecting = false;\n    }, 50);\n    document.body.removeEventListener(\"mouseup\", endSelect);\n  };\n\n  row.modules.select = {\n    selected: false\n  }; //set row selection class\n\n  if (self.table.options.selectableCheck.call(this.table, row.getComponent())) {\n    element.classList.add(\"tabulator-selectable\");\n    element.classList.remove(\"tabulator-unselectable\");\n\n    if (self.table.options.selectable && self.table.options.selectable != \"highlight\") {\n      if (self.table.options.selectableRangeMode === \"click\") {\n        element.addEventListener(\"click\", function (e) {\n          if (e.shiftKey) {\n            self.table._clearSelection();\n\n            self.lastClickedRow = self.lastClickedRow || row;\n            var lastClickedRowIdx = self.table.rowManager.getDisplayRowIndex(self.lastClickedRow);\n            var rowIdx = self.table.rowManager.getDisplayRowIndex(row);\n            var fromRowIdx = lastClickedRowIdx <= rowIdx ? lastClickedRowIdx : rowIdx;\n            var toRowIdx = lastClickedRowIdx >= rowIdx ? lastClickedRowIdx : rowIdx;\n            var rows = self.table.rowManager.getDisplayRows().slice(0);\n            var toggledRows = rows.splice(fromRowIdx, toRowIdx - fromRowIdx + 1);\n\n            if (e.ctrlKey || e.metaKey) {\n              toggledRows.forEach(function (toggledRow) {\n                if (toggledRow !== self.lastClickedRow) {\n                  if (self.table.options.selectable !== true && !self.isRowSelected(row)) {\n                    if (self.selectedRows.length < self.table.options.selectable) {\n                      self.toggleRow(toggledRow);\n                    }\n                  } else {\n                    self.toggleRow(toggledRow);\n                  }\n                }\n              });\n              self.lastClickedRow = row;\n            } else {\n              self.deselectRows(undefined, true);\n\n              if (self.table.options.selectable !== true) {\n                if (toggledRows.length > self.table.options.selectable) {\n                  toggledRows = toggledRows.slice(0, self.table.options.selectable);\n                }\n              }\n\n              self.selectRows(toggledRows);\n            }\n\n            self.table._clearSelection();\n          } else if (e.ctrlKey || e.metaKey) {\n            self.toggleRow(row);\n            self.lastClickedRow = row;\n          } else {\n            self.deselectRows(undefined, true);\n            self.selectRows(row);\n            self.lastClickedRow = row;\n          }\n        });\n      } else {\n        element.addEventListener(\"click\", function (e) {\n          if (!self.table.modExists(\"edit\") || !self.table.modules.edit.getCurrentCell()) {\n            self.table._clearSelection();\n          }\n\n          if (!self.selecting) {\n            self.toggleRow(row);\n          }\n        });\n        element.addEventListener(\"mousedown\", function (e) {\n          if (e.shiftKey) {\n            self.table._clearSelection();\n\n            self.selecting = true;\n            self.selectPrev = [];\n            document.body.addEventListener(\"mouseup\", endSelect);\n            document.body.addEventListener(\"keyup\", endSelect);\n            self.toggleRow(row);\n            return false;\n          }\n        });\n        element.addEventListener(\"mouseenter\", function (e) {\n          if (self.selecting) {\n            self.table._clearSelection();\n\n            self.toggleRow(row);\n\n            if (self.selectPrev[1] == row) {\n              self.toggleRow(self.selectPrev[0]);\n            }\n          }\n        });\n        element.addEventListener(\"mouseout\", function (e) {\n          if (self.selecting) {\n            self.table._clearSelection();\n\n            self.selectPrev.unshift(row);\n          }\n        });\n      }\n    }\n  } else {\n    element.classList.add(\"tabulator-unselectable\");\n    element.classList.remove(\"tabulator-selectable\");\n  }\n}; //toggle row selection\n\n\nSelectRow.prototype.toggleRow = function (row) {\n  if (this.table.options.selectableCheck.call(this.table, row.getComponent())) {\n    if (row.modules.select && row.modules.select.selected) {\n      this._deselectRow(row);\n    } else {\n      this._selectRow(row);\n    }\n  }\n}; //select a number of rows\n\n\nSelectRow.prototype.selectRows = function (rows) {\n  var _this81 = this;\n\n  var rowMatch;\n\n  switch (typeof rows === 'undefined' ? 'undefined' : _typeof(rows)) {\n    case \"undefined\":\n      this.table.rowManager.rows.forEach(function (row) {\n        _this81._selectRow(row, true, true);\n      });\n\n      this._rowSelectionChanged();\n\n      break;\n\n    case \"string\":\n      rowMatch = this.table.rowManager.findRow(rows);\n\n      if (rowMatch) {\n        this._selectRow(rowMatch, true, true);\n      } else {\n        this.table.rowManager.getRows(rows).forEach(function (row) {\n          _this81._selectRow(row, true, true);\n        });\n      }\n\n      this._rowSelectionChanged();\n\n      break;\n\n    default:\n      if (Array.isArray(rows)) {\n        rows.forEach(function (row) {\n          _this81._selectRow(row, true, true);\n        });\n\n        this._rowSelectionChanged();\n      } else {\n        this._selectRow(rows, false, true);\n      }\n\n      break;\n  }\n}; //select an individual row\n\n\nSelectRow.prototype._selectRow = function (rowInfo, silent, force) {\n  var index; //handle max row count\n\n  if (!isNaN(this.table.options.selectable) && this.table.options.selectable !== true && !force) {\n    if (this.selectedRows.length >= this.table.options.selectable) {\n      if (this.table.options.selectableRollingSelection) {\n        this._deselectRow(this.selectedRows[0]);\n      } else {\n        return false;\n      }\n    }\n  }\n\n  var row = this.table.rowManager.findRow(rowInfo);\n\n  if (row) {\n    if (this.selectedRows.indexOf(row) == -1) {\n      if (!row.modules.select) {\n        row.modules.select = {};\n      }\n\n      row.modules.select.selected = true;\n\n      if (row.modules.select.checkboxEl) {\n        row.modules.select.checkboxEl.checked = true;\n      }\n\n      row.getElement().classList.add(\"tabulator-selected\");\n      this.selectedRows.push(row);\n\n      if (this.table.options.dataTreeSelectPropagate) {\n        this.childRowSelection(row, true);\n      }\n\n      if (!silent) {\n        this.table.options.rowSelected.call(this.table, row.getComponent());\n      }\n\n      this._rowSelectionChanged(silent);\n    }\n  } else {\n    if (!silent) {\n      console.warn(\"Selection Error - No such row found, ignoring selection:\" + rowInfo);\n    }\n  }\n};\n\nSelectRow.prototype.isRowSelected = function (row) {\n  return this.selectedRows.indexOf(row) !== -1;\n}; //deselect a number of rows\n\n\nSelectRow.prototype.deselectRows = function (rows, silent) {\n  var self = this,\n      rowCount;\n\n  if (typeof rows == \"undefined\") {\n    rowCount = self.selectedRows.length;\n\n    for (var _i17 = 0; _i17 < rowCount; _i17++) {\n      self._deselectRow(self.selectedRows[0], true);\n    }\n\n    self._rowSelectionChanged(silent);\n  } else {\n    if (Array.isArray(rows)) {\n      rows.forEach(function (row) {\n        self._deselectRow(row, true);\n      });\n\n      self._rowSelectionChanged(silent);\n    } else {\n      self._deselectRow(rows, silent);\n    }\n  }\n}; //deselect an individual row\n\n\nSelectRow.prototype._deselectRow = function (rowInfo, silent) {\n  var self = this,\n      row = self.table.rowManager.findRow(rowInfo),\n      index;\n\n  if (row) {\n    index = self.selectedRows.findIndex(function (selectedRow) {\n      return selectedRow == row;\n    });\n\n    if (index > -1) {\n      if (!row.modules.select) {\n        row.modules.select = {};\n      }\n\n      row.modules.select.selected = false;\n\n      if (row.modules.select.checkboxEl) {\n        row.modules.select.checkboxEl.checked = false;\n      }\n\n      row.getElement().classList.remove(\"tabulator-selected\");\n      self.selectedRows.splice(index, 1);\n\n      if (this.table.options.dataTreeSelectPropagate) {\n        this.childRowSelection(row, false);\n      }\n\n      if (!silent) {\n        self.table.options.rowDeselected.call(this.table, row.getComponent());\n      }\n\n      self._rowSelectionChanged(silent);\n    }\n  } else {\n    if (!silent) {\n      console.warn(\"Deselection Error - No such row found, ignoring selection:\" + rowInfo);\n    }\n  }\n};\n\nSelectRow.prototype.getSelectedData = function () {\n  var data = [];\n  this.selectedRows.forEach(function (row) {\n    data.push(row.getData());\n  });\n  return data;\n};\n\nSelectRow.prototype.getSelectedRows = function () {\n  var rows = [];\n  this.selectedRows.forEach(function (row) {\n    rows.push(row.getComponent());\n  });\n  return rows;\n};\n\nSelectRow.prototype._rowSelectionChanged = function (silent) {\n  if (this.headerCheckboxElement) {\n    if (this.selectedRows.length === 0) {\n      this.headerCheckboxElement.checked = false;\n      this.headerCheckboxElement.indeterminate = false;\n    } else if (this.table.rowManager.rows.length === this.selectedRows.length) {\n      this.headerCheckboxElement.checked = true;\n      this.headerCheckboxElement.indeterminate = false;\n    } else {\n      this.headerCheckboxElement.indeterminate = true;\n      this.headerCheckboxElement.checked = false;\n    }\n  }\n\n  if (!silent) {\n    this.table.options.rowSelectionChanged.call(this.table, this.getSelectedData(), this.getSelectedRows());\n  }\n};\n\nSelectRow.prototype.registerRowSelectCheckbox = function (row, element) {\n  if (!row._row.modules.select) {\n    row._row.modules.select = {};\n  }\n\n  row._row.modules.select.checkboxEl = element;\n};\n\nSelectRow.prototype.registerHeaderSelectCheckbox = function (element) {\n  this.headerCheckboxElement = element;\n};\n\nSelectRow.prototype.childRowSelection = function (row, select) {\n  var children = this.table.modules.dataTree.getChildren(row);\n\n  if (select) {\n    for (var _iterator2 = children, _isArray2 = Array.isArray(_iterator2), _i18 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i18 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i18++];\n      } else {\n        _i18 = _iterator2.next();\n        if (_i18.done) break;\n        _ref2 = _i18.value;\n      }\n\n      var child = _ref2;\n\n      this._selectRow(child, true);\n    }\n  } else {\n    for (var _iterator3 = children, _isArray3 = Array.isArray(_iterator3), _i19 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i19 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i19++];\n      } else {\n        _i19 = _iterator3.next();\n        if (_i19.done) break;\n        _ref3 = _i19.value;\n      }\n\n      var _child = _ref3;\n\n      this._deselectRow(_child, true);\n    }\n  }\n};\n\nTabulator.prototype.registerModule(\"selectRow\", SelectRow);\n\nvar Sort = function Sort(table) {\n  this.table = table; //hold Tabulator object\n\n  this.sortList = []; //holder current sort\n\n  this.changed = false; //has the sort changed since last render\n}; //initialize column header for sorting\n\n\nSort.prototype.initializeColumn = function (column, content) {\n  var self = this,\n      sorter = false,\n      colEl,\n      arrowEl;\n\n  switch (_typeof(column.definition.sorter)) {\n    case \"string\":\n      if (self.sorters[column.definition.sorter]) {\n        sorter = self.sorters[column.definition.sorter];\n      } else {\n        console.warn(\"Sort Error - No such sorter found: \", column.definition.sorter);\n      }\n\n      break;\n\n    case \"function\":\n      sorter = column.definition.sorter;\n      break;\n  }\n\n  column.modules.sort = {\n    sorter: sorter,\n    dir: \"none\",\n    params: column.definition.sorterParams || {},\n    startingDir: column.definition.headerSortStartingDir || \"asc\",\n    tristate: typeof column.definition.headerSortTristate !== \"undefined\" ? column.definition.headerSortTristate : this.table.options.headerSortTristate\n  };\n\n  if (typeof column.definition.headerSort === \"undefined\" ? this.table.options.headerSort !== false : column.definition.headerSort !== false) {\n    colEl = column.getElement();\n    colEl.classList.add(\"tabulator-sortable\");\n    arrowEl = document.createElement(\"div\");\n    arrowEl.classList.add(\"tabulator-col-sorter\");\n\n    if (_typeof(this.table.options.headerSortElement) == \"object\") {\n      arrowEl.appendChild(this.table.options.headerSortElement);\n    } else {\n      arrowEl.innerHTML = this.table.options.headerSortElement;\n    } //create sorter arrow\n\n\n    content.appendChild(arrowEl);\n    column.modules.sort.element = arrowEl; //sort on click\n\n    colEl.addEventListener(\"click\", function (e) {\n      var dir = \"\",\n          sorters = [],\n          match = false;\n\n      if (column.modules.sort) {\n        if (column.modules.sort.tristate) {\n          if (column.modules.sort.dir == \"none\") {\n            dir = column.modules.sort.startingDir;\n          } else {\n            if (column.modules.sort.dir == column.modules.sort.startingDir) {\n              dir = column.modules.sort.dir == \"asc\" ? \"desc\" : \"asc\";\n            } else {\n              dir = \"none\";\n            }\n          }\n        } else {\n          switch (column.modules.sort.dir) {\n            case \"asc\":\n              dir = \"desc\";\n              break;\n\n            case \"desc\":\n              dir = \"asc\";\n              break;\n\n            default:\n              dir = column.modules.sort.startingDir;\n          }\n        }\n\n        if (self.table.options.columnHeaderSortMulti && (e.shiftKey || e.ctrlKey)) {\n          sorters = self.getSort();\n          match = sorters.findIndex(function (sorter) {\n            return sorter.field === column.getField();\n          });\n\n          if (match > -1) {\n            sorters[match].dir = dir;\n\n            if (match != sorters.length - 1) {\n              match = sorters.splice(match, 1)[0];\n\n              if (dir != \"none\") {\n                sorters.push(match);\n              }\n            }\n          } else {\n            if (dir != \"none\") {\n              sorters.push({\n                column: column,\n                dir: dir\n              });\n            }\n          } //add to existing sort\n\n\n          self.setSort(sorters);\n        } else {\n          if (dir == \"none\") {\n            self.clear();\n          } else {\n            //sort by column only\n            self.setSort(column, dir);\n          }\n        }\n\n        self.table.rowManager.sorterRefresh(!self.sortList.length);\n      }\n    });\n  }\n}; //check if the sorters have changed since last use\n\n\nSort.prototype.hasChanged = function () {\n  var changed = this.changed;\n  this.changed = false;\n  return changed;\n}; //return current sorters\n\n\nSort.prototype.getSort = function () {\n  var self = this,\n      sorters = [];\n  self.sortList.forEach(function (item) {\n    if (item.column) {\n      sorters.push({\n        column: item.column.getComponent(),\n        field: item.column.getField(),\n        dir: item.dir\n      });\n    }\n  });\n  return sorters;\n}; //change sort list and trigger sort\n\n\nSort.prototype.setSort = function (sortList, dir) {\n  var self = this,\n      newSortList = [];\n\n  if (!Array.isArray(sortList)) {\n    sortList = [{\n      column: sortList,\n      dir: dir\n    }];\n  }\n\n  sortList.forEach(function (item) {\n    var column;\n    column = self.table.columnManager.findColumn(item.column);\n\n    if (column) {\n      item.column = column;\n      newSortList.push(item);\n      self.changed = true;\n    } else {\n      console.warn(\"Sort Warning - Sort field does not exist and is being ignored: \", item.column);\n    }\n  });\n  self.sortList = newSortList;\n\n  if (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.sort) {\n    this.table.modules.persistence.save(\"sort\");\n  }\n}; //clear sorters\n\n\nSort.prototype.clear = function () {\n  this.setSort([]);\n}; //find appropriate sorter for column\n\n\nSort.prototype.findSorter = function (column) {\n  var row = this.table.rowManager.activeRows[0],\n      sorter = \"string\",\n      field,\n      value;\n\n  if (row) {\n    row = row.getData();\n    field = column.getField();\n\n    if (field) {\n      value = column.getFieldValue(row);\n\n      switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n        case \"undefined\":\n          sorter = \"string\";\n          break;\n\n        case \"boolean\":\n          sorter = \"boolean\";\n          break;\n\n        default:\n          if (!isNaN(value) && value !== \"\") {\n            sorter = \"number\";\n          } else {\n            if (value.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)) {\n              sorter = \"alphanum\";\n            }\n          }\n\n          break;\n      }\n    }\n  }\n\n  return this.sorters[sorter];\n}; //work through sort list sorting data\n\n\nSort.prototype.sort = function (data) {\n  var self = this,\n      sortList = this.table.options.sortOrderReverse ? self.sortList.slice().reverse() : self.sortList,\n      sortListActual = [],\n      rowComponents = [],\n      lastSort;\n\n  if (self.table.options.dataSorting) {\n    self.table.options.dataSorting.call(self.table, self.getSort());\n  }\n\n  self.clearColumnHeaders();\n\n  if (!self.table.options.ajaxSorting) {\n    //build list of valid sorters and trigger column specific callbacks before sort begins\n    sortList.forEach(function (item, i) {\n      var sortObj = item.column.modules.sort;\n\n      if (item.column && sortObj) {\n        //if no sorter has been defined, take a guess\n        if (!sortObj.sorter) {\n          sortObj.sorter = self.findSorter(item.column);\n        }\n\n        item.params = typeof sortObj.params === \"function\" ? sortObj.params(item.column.getComponent(), item.dir) : sortObj.params;\n        sortListActual.push(item);\n      }\n\n      self.setColumnHeader(item.column, item.dir);\n    }); //sort data\n\n    if (sortListActual.length) {\n      self._sortItems(data, sortListActual);\n    }\n  } else {\n    sortList.forEach(function (item, i) {\n      self.setColumnHeader(item.column, item.dir);\n    });\n  }\n\n  if (self.table.options.dataSorted) {\n    data.forEach(function (row) {\n      rowComponents.push(row.getComponent());\n    });\n    self.table.options.dataSorted.call(self.table, self.getSort(), rowComponents);\n  }\n}; //clear sort arrows on columns\n\n\nSort.prototype.clearColumnHeaders = function () {\n  this.table.columnManager.getRealColumns().forEach(function (column) {\n    if (column.modules.sort) {\n      column.modules.sort.dir = \"none\";\n      column.getElement().setAttribute(\"aria-sort\", \"none\");\n    }\n  });\n}; //set the column header sort direction\n\n\nSort.prototype.setColumnHeader = function (column, dir) {\n  column.modules.sort.dir = dir;\n  column.getElement().setAttribute(\"aria-sort\", dir);\n}; //sort each item in sort list\n\n\nSort.prototype._sortItems = function (data, sortList) {\n  var _this82 = this;\n\n  var sorterCount = sortList.length - 1;\n  data.sort(function (a, b) {\n    var result;\n\n    for (var i = sorterCount; i >= 0; i--) {\n      var sortItem = sortList[i];\n      result = _this82._sortRow(a, b, sortItem.column, sortItem.dir, sortItem.params);\n\n      if (result !== 0) {\n        break;\n      }\n    }\n\n    return result;\n  });\n}; //process individual rows for a sort function on active data\n\n\nSort.prototype._sortRow = function (a, b, column, dir, params) {\n  var el1Comp, el2Comp, colComp; //switch elements depending on search direction\n\n  var el1 = dir == \"asc\" ? a : b;\n  var el2 = dir == \"asc\" ? b : a;\n  a = column.getFieldValue(el1.getData());\n  b = column.getFieldValue(el2.getData());\n  a = typeof a !== \"undefined\" ? a : \"\";\n  b = typeof b !== \"undefined\" ? b : \"\";\n  el1Comp = el1.getComponent();\n  el2Comp = el2.getComponent();\n  return column.modules.sort.sorter.call(this, a, b, el1Comp, el2Comp, column.getComponent(), dir, params);\n}; //default data sorters\n\n\nSort.prototype.sorters = {\n  //sort numbers\n  number: function number(a, b, aRow, bRow, column, dir, params) {\n    var alignEmptyValues = params.alignEmptyValues;\n    var decimal = params.decimalSeparator || \".\";\n    var thousand = params.thousandSeparator || \",\";\n    var emptyAlign = 0;\n    a = parseFloat(String(a).split(thousand).join(\"\").split(decimal).join(\".\"));\n    b = parseFloat(String(b).split(thousand).join(\"\").split(decimal).join(\".\")); //handle non numeric values\n\n    if (isNaN(a)) {\n      emptyAlign = isNaN(b) ? 0 : -1;\n    } else if (isNaN(b)) {\n      emptyAlign = 1;\n    } else {\n      //compare valid values\n      return a - b;\n    } //fix empty values in position\n\n\n    if (alignEmptyValues === \"top\" && dir === \"desc\" || alignEmptyValues === \"bottom\" && dir === \"asc\") {\n      emptyAlign *= -1;\n    }\n\n    return emptyAlign;\n  },\n  //sort strings\n  string: function string(a, b, aRow, bRow, column, dir, params) {\n    var alignEmptyValues = params.alignEmptyValues;\n    var emptyAlign = 0;\n    var locale; //handle empty values\n\n    if (!a) {\n      emptyAlign = !b ? 0 : -1;\n    } else if (!b) {\n      emptyAlign = 1;\n    } else {\n      //compare valid values\n      switch (_typeof(params.locale)) {\n        case \"boolean\":\n          if (params.locale) {\n            locale = this.table.modules.localize.getLocale();\n          }\n\n          break;\n\n        case \"string\":\n          locale = params.locale;\n          break;\n      }\n\n      return String(a).toLowerCase().localeCompare(String(b).toLowerCase(), locale);\n    } //fix empty values in position\n\n\n    if (alignEmptyValues === \"top\" && dir === \"desc\" || alignEmptyValues === \"bottom\" && dir === \"asc\") {\n      emptyAlign *= -1;\n    }\n\n    return emptyAlign;\n  },\n  //sort date\n  date: function date(a, b, aRow, bRow, column, dir, params) {\n    if (!params.format) {\n      params.format = \"DD/MM/YYYY\";\n    }\n\n    return this.sorters.datetime.call(this, a, b, aRow, bRow, column, dir, params);\n  },\n  //sort HH:mm formatted times\n  time: function time(a, b, aRow, bRow, column, dir, params) {\n    if (!params.format) {\n      params.format = \"HH:mm\";\n    }\n\n    return this.sorters.datetime.call(this, a, b, aRow, bRow, column, dir, params);\n  },\n  //sort datetime\n  datetime: function datetime(a, b, aRow, bRow, column, dir, params) {\n    var format = params.format || \"DD/MM/YYYY HH:mm:ss\",\n        alignEmptyValues = params.alignEmptyValues,\n        emptyAlign = 0;\n\n    if (typeof moment != \"undefined\") {\n      a = moment(a, format);\n      b = moment(b, format);\n\n      if (!a.isValid()) {\n        emptyAlign = !b.isValid() ? 0 : -1;\n      } else if (!b.isValid()) {\n        emptyAlign = 1;\n      } else {\n        //compare valid values\n        return a - b;\n      } //fix empty values in position\n\n\n      if (alignEmptyValues === \"top\" && dir === \"desc\" || alignEmptyValues === \"bottom\" && dir === \"asc\") {\n        emptyAlign *= -1;\n      }\n\n      return emptyAlign;\n    } else {\n      console.error(\"Sort Error - 'datetime' sorter is dependant on moment.js\");\n    }\n  },\n  //sort booleans\n  boolean: function boolean(a, b, aRow, bRow, column, dir, params) {\n    var el1 = a === true || a === \"true\" || a === \"True\" || a === 1 ? 1 : 0;\n    var el2 = b === true || b === \"true\" || b === \"True\" || b === 1 ? 1 : 0;\n    return el1 - el2;\n  },\n  //sort if element contains any data\n  array: function array(a, b, aRow, bRow, column, dir, params) {\n    var el1 = 0;\n    var el2 = 0;\n    var type = params.type || \"length\";\n    var alignEmptyValues = params.alignEmptyValues;\n    var emptyAlign = 0;\n\n    function calc(value) {\n      switch (type) {\n        case \"length\":\n          return value.length;\n          break;\n\n        case \"sum\":\n          return value.reduce(function (c, d) {\n            return c + d;\n          });\n          break;\n\n        case \"max\":\n          return Math.max.apply(null, value);\n          break;\n\n        case \"min\":\n          return Math.min.apply(null, value);\n          break;\n\n        case \"avg\":\n          return value.reduce(function (c, d) {\n            return c + d;\n          }) / value.length;\n          break;\n      }\n    } //handle non array values\n\n\n    if (!Array.isArray(a)) {\n      alignEmptyValues = !Array.isArray(b) ? 0 : -1;\n    } else if (!Array.isArray(b)) {\n      alignEmptyValues = 1;\n    } else {\n      //compare valid values\n      el1 = a ? calc(a) : 0;\n      el2 = b ? calc(b) : 0;\n      return el1 - el2;\n    } //fix empty values in position\n\n\n    if (alignEmptyValues === \"top\" && dir === \"desc\" || alignEmptyValues === \"bottom\" && dir === \"asc\") {\n      emptyAlign *= -1;\n    }\n\n    return emptyAlign;\n  },\n  //sort if element contains any data\n  exists: function exists(a, b, aRow, bRow, column, dir, params) {\n    var el1 = typeof a == \"undefined\" ? 0 : 1;\n    var el2 = typeof b == \"undefined\" ? 0 : 1;\n    return el1 - el2;\n  },\n  //sort alpha numeric strings\n  alphanum: function alphanum(as, bs, aRow, bRow, column, dir, params) {\n    var a,\n        b,\n        a1,\n        b1,\n        i = 0,\n        L,\n        rx = /(\\d+)|(\\D+)/g,\n        rd = /\\d/;\n    var alignEmptyValues = params.alignEmptyValues;\n    var emptyAlign = 0; //handle empty values\n\n    if (!as && as !== 0) {\n      emptyAlign = !bs && bs !== 0 ? 0 : -1;\n    } else if (!bs && bs !== 0) {\n      emptyAlign = 1;\n    } else {\n      if (isFinite(as) && isFinite(bs)) return as - bs;\n      a = String(as).toLowerCase();\n      b = String(bs).toLowerCase();\n      if (a === b) return 0;\n      if (!(rd.test(a) && rd.test(b))) return a > b ? 1 : -1;\n      a = a.match(rx);\n      b = b.match(rx);\n      L = a.length > b.length ? b.length : a.length;\n\n      while (i < L) {\n        a1 = a[i];\n        b1 = b[i++];\n\n        if (a1 !== b1) {\n          if (isFinite(a1) && isFinite(b1)) {\n            if (a1.charAt(0) === \"0\") a1 = \".\" + a1;\n            if (b1.charAt(0) === \"0\") b1 = \".\" + b1;\n            return a1 - b1;\n          } else return a1 > b1 ? 1 : -1;\n        }\n      }\n\n      return a.length > b.length;\n    } //fix empty values in position\n\n\n    if (alignEmptyValues === \"top\" && dir === \"desc\" || alignEmptyValues === \"bottom\" && dir === \"asc\") {\n      emptyAlign *= -1;\n    }\n\n    return emptyAlign;\n  }\n};\nTabulator.prototype.registerModule(\"sort\", Sort);\n\nvar Validate = function Validate(table) {\n  this.table = table;\n  this.invalidCells = [];\n}; //validate\n\n\nValidate.prototype.initializeColumn = function (column) {\n  var self = this,\n      config = [],\n      validator;\n\n  if (column.definition.validator) {\n    if (Array.isArray(column.definition.validator)) {\n      column.definition.validator.forEach(function (item) {\n        validator = self._extractValidator(item);\n\n        if (validator) {\n          config.push(validator);\n        }\n      });\n    } else {\n      validator = this._extractValidator(column.definition.validator);\n\n      if (validator) {\n        config.push(validator);\n      }\n    }\n\n    column.modules.validate = config.length ? config : false;\n  }\n};\n\nValidate.prototype._extractValidator = function (value) {\n  var type, params, pos;\n\n  switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n    case \"string\":\n      pos = value.indexOf(':');\n\n      if (pos > -1) {\n        type = value.substring(0, pos);\n        params = value.substring(pos + 1);\n      } else {\n        type = value;\n      }\n\n      return this._buildValidator(type, params);\n      break;\n\n    case \"function\":\n      return this._buildValidator(value);\n      break;\n\n    case \"object\":\n      return this._buildValidator(value.type, value.parameters);\n      break;\n  }\n};\n\nValidate.prototype._buildValidator = function (type, params) {\n  var func = typeof type == \"function\" ? type : this.validators[type];\n\n  if (!func) {\n    console.warn(\"Validator Setup Error - No matching validator found:\", type);\n    return false;\n  } else {\n    return {\n      type: typeof type == \"function\" ? \"function\" : type,\n      func: func,\n      params: params\n    };\n  }\n};\n\nValidate.prototype.validate = function (validators, cell, value) {\n  var self = this,\n      valid = [],\n      invalidIndex = this.invalidCells.indexOf(cell);\n\n  if (validators) {\n    validators.forEach(function (item) {\n      if (!item.func.call(self, cell.getComponent(), value, item.params)) {\n        valid.push({\n          type: item.type,\n          parameters: item.params\n        });\n      }\n    });\n  }\n\n  valid = valid.length ? valid : true;\n\n  if (!cell.modules.validate) {\n    cell.modules.validate = {};\n  }\n\n  if (valid === true) {\n    cell.modules.validate.invalid = false;\n    cell.getElement().classList.remove(\"tabulator-validation-fail\");\n\n    if (invalidIndex > -1) {\n      this.invalidCells.splice(invalidIndex, 1);\n    }\n  } else {\n    cell.modules.validate.invalid = true;\n\n    if (this.table.options.validationMode !== \"manual\") {\n      cell.getElement().classList.add(\"tabulator-validation-fail\");\n    }\n\n    if (invalidIndex == -1) {\n      this.invalidCells.push(cell);\n    }\n  }\n\n  return valid;\n};\n\nValidate.prototype.getInvalidCells = function () {\n  var output = [];\n  this.invalidCells.forEach(function (cell) {\n    output.push(cell.getComponent());\n  });\n  return output;\n};\n\nValidate.prototype.clearValidation = function (cell) {\n  var invalidIndex;\n\n  if (cell.modules.validate && cell.modules.validate.invalid) {\n    cell.getElement().classList.remove(\"tabulator-validation-fail\");\n    cell.modules.validate.invalid = false;\n    invalidIndex = this.invalidCells.indexOf(cell);\n\n    if (invalidIndex > -1) {\n      this.invalidCells.splice(invalidIndex, 1);\n    }\n  }\n};\n\nValidate.prototype.validators = {\n  //is integer\n  integer: function integer(cell, value, parameters) {\n    if (value === \"\" || value === null || typeof value === \"undefined\") {\n      return true;\n    }\n\n    value = Number(value);\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n  },\n  //is float\n  float: function float(cell, value, parameters) {\n    if (value === \"\" || value === null || typeof value === \"undefined\") {\n      return true;\n    }\n\n    value = Number(value);\n    return typeof value === 'number' && isFinite(value) && value % 1 !== 0;\n  },\n  //must be a number\n  numeric: function numeric(cell, value, parameters) {\n    if (value === \"\" || value === null || typeof value === \"undefined\") {\n      return true;\n    }\n\n    return !isNaN(value);\n  },\n  //must be a string\n  string: function string(cell, value, parameters) {\n    if (value === \"\" || value === null || typeof value === \"undefined\") {\n      return true;\n    }\n\n    return isNaN(value);\n  },\n  //maximum value\n  max: function max(cell, value, parameters) {\n    if (value === \"\" || value === null || typeof value === \"undefined\") {\n      return true;\n    }\n\n    return parseFloat(value) <= parameters;\n  },\n  //minimum value\n  min: function min(cell, value, parameters) {\n    if (value === \"\" || value === null || typeof value === \"undefined\") {\n      return true;\n    }\n\n    return parseFloat(value) >= parameters;\n  },\n  //starts with  value\n  starts: function starts(cell, value, parameters) {\n    if (value === \"\" || value === null || typeof value === \"undefined\") {\n      return true;\n    }\n\n    return String(value).toLowerCase().startsWith(String(parameters).toLowerCase());\n  },\n  //ends with  value\n  ends: function ends(cell, value, parameters) {\n    if (value === \"\" || value === null || typeof value === \"undefined\") {\n      return true;\n    }\n\n    return String(value).toLowerCase().endsWith(String(parameters).toLowerCase());\n  },\n  //minimum string length\n  minLength: function minLength(cell, value, parameters) {\n    if (value === \"\" || value === null || typeof value === \"undefined\") {\n      return true;\n    }\n\n    return String(value).length >= parameters;\n  },\n  //maximum string length\n  maxLength: function maxLength(cell, value, parameters) {\n    if (value === \"\" || value === null || typeof value === \"undefined\") {\n      return true;\n    }\n\n    return String(value).length <= parameters;\n  },\n  //in provided value list\n  in: function _in(cell, value, parameters) {\n    if (value === \"\" || value === null || typeof value === \"undefined\") {\n      return true;\n    }\n\n    if (typeof parameters == \"string\") {\n      parameters = parameters.split(\"|\");\n    }\n\n    return value === \"\" || parameters.indexOf(value) > -1;\n  },\n  //must match provided regex\n  regex: function regex(cell, value, parameters) {\n    if (value === \"\" || value === null || typeof value === \"undefined\") {\n      return true;\n    }\n\n    var reg = new RegExp(parameters);\n    return reg.test(value);\n  },\n  //value must be unique in this column\n  unique: function unique(cell, value, parameters) {\n    if (value === \"\" || value === null || typeof value === \"undefined\") {\n      return true;\n    }\n\n    var unique = true;\n    var cellData = cell.getData();\n\n    var column = cell.getColumn()._getSelf();\n\n    this.table.rowManager.rows.forEach(function (row) {\n      var data = row.getData();\n\n      if (data !== cellData) {\n        if (value == column.getFieldValue(data)) {\n          unique = false;\n        }\n      }\n    });\n    return unique;\n  },\n  //must have a value\n  required: function required(cell, value, parameters) {\n    return value !== \"\" && value !== null && typeof value !== \"undefined\";\n  }\n};\nTabulator.prototype.registerModule(\"validate\", Validate);\nexport default Tabulator;","map":null,"metadata":{},"sourceType":"module"}