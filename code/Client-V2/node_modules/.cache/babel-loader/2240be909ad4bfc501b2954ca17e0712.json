{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2016 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport React from 'react';\nimport window from 'global/window';\nimport XYPlot from './plot/xy-plot';\nimport { getDOMNode } from './utils/react-utils';\nvar CONTAINER_REF = 'container'; // As a performance enhancement, we want to only listen once\n\nvar resizeSubscribers = [];\nvar DEBOUNCE_DURATION = 100;\nvar timeoutId = null;\n/**\n * Calls each subscriber, debounced to the\n */\n\nfunction debounceEmitResize() {\n  window.clearTimeout(timeoutId);\n  timeoutId = window.setTimeout(emitResize, DEBOUNCE_DURATION);\n}\n/**\n * Calls each subscriber once syncronously.\n */\n\n\nfunction emitResize() {\n  resizeSubscribers.forEach(function (cb) {\n    return cb();\n  });\n}\n/**\n * Add the given callback to the list of subscribers to be caled when the\n * window resizes. Returns a function that, when called, removes the given\n * callback from the list of subscribers. This function is also resposible for\n * adding and removing the resize listener on `window`.\n *\n * @param {Function} cb - Subscriber callback function\n * @returns {Function} Unsubscribe function\n */\n\n\nfunction subscribeToDebouncedResize(cb) {\n  resizeSubscribers.push(cb); // if we go from zero to one Flexible components instances, add the listener\n\n  if (resizeSubscribers.length === 1) {\n    window.addEventListener('resize', debounceEmitResize);\n  }\n\n  return function unsubscribe() {\n    removeSubscriber(cb); // if we have no Flexible components, remove the listener\n\n    if (resizeSubscribers.length === 0) {\n      window.clearTimeout(timeoutId);\n      window.removeEventListener('resize', debounceEmitResize);\n    }\n  };\n}\n/**\n * Helper for removing the given callback from the list of subscribers.\n *\n * @param {Function} cb - Subscriber callback function\n */\n\n\nfunction removeSubscriber(cb) {\n  var index = resizeSubscribers.indexOf(cb);\n\n  if (index > -1) {\n    resizeSubscribers.splice(index, 1);\n  }\n}\n/**\n * Helper for getting a display name for the child component\n * @param {*} Component React class for the child component.\n * @returns {String} The child components name\n */\n\n\nfunction getDisplayName(Component) {\n  return Component.displayName || Component.name || 'Component';\n}\n/**\n * Add the ability to stretch the visualization on window resize.\n * @param {*} Component React class for the child component.\n * @returns {*} Flexible component.\n */\n\n\nfunction makeFlexible(Component, isWidthFlexible, isHeightFlexible) {\n  var ResultClass = function (_React$Component) {\n    _inherits(ResultClass, _React$Component);\n\n    _createClass(ResultClass, null, [{\n      key: 'propTypes',\n      get: function get() {\n        var _Component$propTypes = Component.propTypes,\n            height = _Component$propTypes.height,\n            width = _Component$propTypes.width,\n            otherPropTypes = _objectWithoutProperties(_Component$propTypes, ['height', 'width']); // eslint-disable-line no-unused-vars\n\n\n        return otherPropTypes;\n      }\n    }]);\n\n    function ResultClass(props) {\n      _classCallCheck(this, ResultClass);\n\n      var _this = _possibleConstructorReturn(this, (ResultClass.__proto__ || Object.getPrototypeOf(ResultClass)).call(this, props));\n\n      _this._onResize = function () {\n        var containerElement = getDOMNode(_this[CONTAINER_REF]);\n        var offsetHeight = containerElement.offsetHeight,\n            offsetWidth = containerElement.offsetWidth;\n        var newHeight = _this.state.height === offsetHeight ? {} : {\n          height: offsetHeight\n        };\n        var newWidth = _this.state.width === offsetWidth ? {} : {\n          width: offsetWidth\n        };\n\n        _this.setState(_extends({}, newHeight, newWidth));\n      };\n\n      _this.state = {\n        height: 0,\n        width: 0\n      };\n      return _this;\n    }\n    /**\n     * Get the width of the container and assign the width.\n     * @private\n     */\n\n\n    _createClass(ResultClass, [{\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        this._onResize();\n\n        this.cancelSubscription = subscribeToDebouncedResize(this._onResize);\n      }\n    }, {\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps() {\n        this._onResize();\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        this.cancelSubscription();\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this2 = this;\n\n        var _state = this.state,\n            height = _state.height,\n            width = _state.width;\n\n        var props = _extends({}, this.props, {\n          animation: height === 0 && width === 0 ? null : this.props.animation\n        });\n\n        var updatedDimensions = _extends({}, isHeightFlexible ? {\n          height: height\n        } : {}, isWidthFlexible ? {\n          width: width\n        } : {});\n\n        return React.createElement('div', {\n          ref: function ref(_ref) {\n            return _this2[CONTAINER_REF] = _ref;\n          },\n          style: {\n            width: '100%',\n            height: '100%'\n          }\n        }, React.createElement(Component, _extends({}, updatedDimensions, props)));\n      }\n    }]);\n\n    return ResultClass;\n  }(React.Component);\n\n  ResultClass.displayName = 'Flexible' + getDisplayName(Component);\n  return ResultClass;\n}\n\nexport function makeHeightFlexible(component) {\n  return makeFlexible(component, false, true);\n}\nexport function makeVisFlexible(component) {\n  return makeFlexible(component, true, true);\n}\nexport function makeWidthFlexible(component) {\n  return makeFlexible(component, true, false);\n}\nexport var FlexibleWidthXYPlot = makeWidthFlexible(XYPlot);\nexport var FlexibleHeightXYPlot = makeHeightFlexible(XYPlot);\nexport var FlexibleXYPlot = makeVisFlexible(XYPlot);","map":null,"metadata":{},"sourceType":"module"}