{"ast":null,"code":"var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: translateSeconds,\n    other: translate\n  },\n  xSeconds: {\n    one: translateSeconds,\n    other: translate\n  },\n  halfAMinute: 'pusė minutės',\n  lessThanXMinutes: {\n    one: translateSingular,\n    other: translate\n  },\n  xMinutes: {\n    one: translateSingular,\n    other: translate\n  },\n  aboutXHours: {\n    one: translateSingular,\n    other: translate\n  },\n  xHours: {\n    one: translateSingular,\n    other: translate\n  },\n  xDays: {\n    one: translateSingular,\n    other: translate\n  },\n  aboutWeeks: {\n    one: translateSingular,\n    other: translate\n  },\n  xWeeks: {\n    one: translateSingular,\n    other: translate\n  },\n  aboutXMonths: {\n    one: translateSingular,\n    other: translate\n  },\n  xMonths: {\n    one: translateSingular,\n    other: translate\n  },\n  aboutXYears: {\n    one: translateSingular,\n    other: translate\n  },\n  xYears: {\n    one: translateSingular,\n    other: translate\n  },\n  overXYears: {\n    one: translateSingular,\n    other: translate\n  },\n  almostXYears: {\n    one: translateSingular,\n    other: translate\n  }\n};\nvar translations = {\n  xseconds_other: 'sekundė_sekundžių_sekundes',\n  xminutes_one: 'minutė_minutės_minutę',\n  xminutes_other: 'minutės_minučių_minutes',\n  xhours_one: 'valanda_valandos_valandą',\n  xhours_other: 'valandos_valandų_valandas',\n  xdays_one: 'diena_dienos_dieną',\n  xdays_other: 'dienos_dienų_dienas',\n  xweeks_one: 'savaitė_savaitės_savaitę',\n  xweeks_other: 'savaitės_savaičių_savaites',\n  xmonths_one: 'mėnuo_mėnesio_mėnesį',\n  xmonths_other: 'mėnesiai_mėnesių_mėnesius',\n  xyears_one: 'metai_metų_metus',\n  xyears_other: 'metai_metų_metus',\n  about: 'apie',\n  over: 'daugiau nei',\n  almost: 'beveik',\n  lessthan: 'mažiau nei'\n};\n\nfunction translateSeconds(number, addSuffix, key, isFuture) {\n  if (!addSuffix) {\n    return 'kelios sekundės';\n  } else {\n    return isFuture ? 'kelių sekundžių' : 'kelias sekundes';\n  }\n}\n\nfunction translateSingular(number, addSuffix, key, isFuture) {\n  return !addSuffix ? forms(key)[0] : isFuture ? forms(key)[1] : forms(key)[2];\n}\n\nfunction special(number) {\n  return number % 10 === 0 || number > 10 && number < 20;\n}\n\nfunction forms(key) {\n  return translations[key].split('_');\n}\n\nfunction translate(number, addSuffix, key, isFuture) {\n  var result = number + ' ';\n\n  if (number === 1) {\n    return result + translateSingular(number, addSuffix, key[0], isFuture);\n  } else if (!addSuffix) {\n    return result + (special(number) ? forms(key)[1] : forms(key)[0]);\n  } else {\n    if (isFuture) {\n      return result + forms(key)[1];\n    } else {\n      return result + (special(number) ? forms(key)[1] : forms(key)[2]);\n    }\n  }\n}\n\nexport default function formatDistance(token, count, options) {\n  options = options || {};\n  var adverb = token.match(/about|over|almost|lessthan/i);\n  var unit = token.replace(adverb, '');\n  var result;\n\n  if (typeof formatDistanceLocale[token] === 'string') {\n    result = formatDistanceLocale[token];\n  } else if (count === 1) {\n    result = formatDistanceLocale[token].one(count, options.addSuffix, unit.toLowerCase() + '_one');\n  } else {\n    result = formatDistanceLocale[token].other(count, options.addSuffix, unit.toLowerCase() + '_other');\n  }\n\n  if (adverb) {\n    result = translations[adverb[0].toLowerCase()] + ' ' + result;\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return 'po ' + result;\n    } else {\n      return 'prieš ' + result;\n    }\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}