{"ast":null,"code":"import _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\Technician\\\\TechnicianEditorDialog.jsx\";\nimport React, { Component } from \"react\";\nimport { Dialog, Button, Grid, InputLabel, FormControl, MenuItem, Select, DialogActions, FormHelperText, Icon, IconButton } from \"@material-ui/core\";\nimport MaterialTable, { MTableToolbar, Chip, MTableBody, MTableHeader } from 'material-table';\nimport { ValidatorForm, TextValidator, TextField } from \"react-material-ui-form-validator\";\nimport { getAllQualification, getAllHealthOrg, saveItem, getItemById } from \"./TechnicianService\";\nimport { searchByPage as searchByPageHealthOrg } from \"../EQAHealthOrg/EQAHealthOrgService\";\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Draggable from 'react-draggable';\nimport Paper from '@material-ui/core/Paper';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { el } from \"date-fns/locale\";\nimport EQAHealthOrgSearchDialog from './EQAHealthOrgSearchDialog';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../../../styles/views/_style.scss';\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n});\n\nfunction PaperComponent(props) {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    handle: \"#draggable-dialog-title\",\n    cancel: '[class*=\"MuiDialogContent-root\"]',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  })));\n}\n\nvar TechnicianEditorDialog = /*#__PURE__*/function (_Component) {\n  _inherits(TechnicianEditorDialog, _Component);\n\n  var _super = _createSuper(TechnicianEditorDialog);\n\n  function TechnicianEditorDialog(props) {\n    var _this;\n\n    _classCallCheck(this, TechnicianEditorDialog);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      firstName: '',\n      lastName: '',\n      displayName: '',\n      gender: '',\n      qualification: '',\n      healthOrg: [],\n      birthDate: null,\n      phoneNumber: '',\n      idNumber: '',\n      email: '',\n      isView: false,\n      address: [],\n      listQualification: [],\n      listHealthOrg: [],\n      shouldOpenSearchDialog: false,\n      shouldOpenConfirmationDialog: false,\n      shouldOpenSearchEQAHealthOrgSearchDialog: false\n    };\n    _this.listGender = [{\n      id: 1,\n      name: 'Nam'\n    }, {\n      id: 2,\n      name: 'Nữ'\n    }, {\n      id: 3,\n      name: 'Không xác định'\n    }];\n\n    _this.handleDateChange = function (date, name) {\n      _this.setState({\n        [name]: date\n      });\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"firstName\") {\n        var lastName = _this.state.lastName;\n        var displayName = event.target.value.trim() + \" \" + (lastName ? lastName : '');\n\n        _this.setState({\n          firstName: event.target.value,\n          displayName: displayName\n        });\n\n        return;\n      } else if (source === \"lastName\") {\n        var firstName = _this.state.firstName;\n\n        var _displayName = firstName.trim() + \" \" + (event.target.value.trim() ? event.target.value.trim() : '');\n\n        _this.setState({\n          lastName: event.target.value,\n          displayName: _displayName\n        });\n\n        return;\n      }\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.handleFormSubmit = function () {\n      _this.setState({\n        hasErrorEQAHealthOrg: false,\n        hasErrorQualification: false\n      });\n\n      var healthOrg = _this.state.healthOrg;\n      var t = _this.props.t;\n\n      if (!_this.state.healthOrg || _this.state.healthOrg <= 0) {\n        _this.setState({\n          hasErrorEQAHealthOrg: true\n        });\n\n        return;\n      } else if (!_this.state.qualification || _this.state.qualification <= 0) {\n        _this.setState({\n          hasErrorQualification: true\n        });\n\n        return;\n      } else {\n        var _this$state = _this.state,\n            qualification = _this$state.qualification,\n            id = _this$state.id;\n        var listQualification = _this.state.listQualification;\n\n        _this.setState({\n          isView: true\n        });\n\n        var objQualification = listQualification.find(function (item) {\n          return item.id == qualification;\n        });\n\n        _this.setState({\n          qualification: objQualification\n        }, function () {\n          var _this2 = this;\n\n          if (id) {\n            saveItem(_objectSpread({}, this.state)).then(function (response) {\n              if (response.data != null && response.status == 200) {\n                _this2.state.qualification = response.data.qualification.id;\n\n                _this2.setState(_objectSpread(_objectSpread({}, _this2.state), {}, {\n                  isView: false\n                }));\n\n                toast.success(t('mess_edit'));\n              }\n            });\n          } else {\n            saveItem(_objectSpread({}, this.state)).then(function (response) {\n              if (response.data != null && response.status == 200) {\n                _this2.state.id = response.data.id;\n                _this2.state.qualification = response.data.qualification.id;\n\n                _this2.setState(_objectSpread(_objectSpread({}, _this2.state), {}, {\n                  isView: false\n                }));\n\n                toast.success(t('mess_add'));\n              }\n            });\n          }\n        });\n      }\n    };\n\n    _this.handleSearchDialogClose = function () {\n      _this.setState({\n        shouldOpenSearchDialog: false\n      });\n    };\n\n    _this.handleSearchEQAHealthOrgDialogClose = function () {\n      _this.setState({\n        shouldOpenSearchEQAHealthOrgSearchDialog: false\n      });\n    };\n\n    _this.handleSelectEQAHealthOrg = function (item) {\n      _this.setState({\n        healthOrg: item\n      });\n\n      _this.handleSearchEQAHealthOrgDialogClose();\n    };\n\n    getAllQualification().then(function (result) {\n      var listQualification = result.data;\n\n      _this.setState({\n        listQualification: listQualification\n      });\n    }); // getAllHealthOrg().then((result) => {\n    //   let listHealthOrg = result.data;\n    //   this.setState({ listHealthOrg: listHealthOrg });\n    // });\n\n    return _this;\n  }\n\n  _createClass(TechnicianEditorDialog, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item;\n      this.setState(_objectSpread({}, this.props.item), function () {\n        var qualification = this.state.qualification;\n\n        if (qualification != null && qualification.id != null) {\n          this.setState({\n            qualification: qualification.id\n          });\n        }\n      });\n    }\n  }, {\n    key: \"deleteTechnicianDetail\",\n    value: function deleteTechnicianDetail(eQASampleSetDetail) {\n      var index = null;\n      var details = this.state.details;\n\n      if (details != null && details.length > 0) {\n        details.forEach(function (element) {\n          if (element != null && element.sample != null && eQASampleSetDetail.sample != null && element.sample.id == eQASampleSetDetail.sample.id) {\n            if (index == null) {\n              index = 0;\n            } else {\n              index++;\n            }\n          }\n        });\n        details.splice(index, 1);\n        this.setState({\n          details\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          handleClose = _this$props2.handleClose,\n          handleOKEditClose = _this$props2.handleOKEditClose,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n;\n      var searchObject = {\n        pageIndex: 1,\n        pageSize: 100000,\n        text: \"\"\n      };\n      var _this$state2 = this.state,\n          id = _this$state2.id,\n          firstName = _this$state2.firstName,\n          lastName = _this$state2.lastName,\n          displayName = _this$state2.displayName,\n          qualification = _this$state2.qualification,\n          gender = _this$state2.gender,\n          listQualification = _this$state2.listQualification,\n          healthOrg = _this$state2.healthOrg,\n          listHealthOrg = _this$state2.listHealthOrg,\n          birthDate = _this$state2.birthDate,\n          phoneNumber = _this$state2.phoneNumber,\n          idNumber = _this$state2.idNumber,\n          email = _this$state2.email,\n          address = _this$state2.address,\n          isView = _this$state2.isView,\n          hasErrorEQAHealthOrg = _this$state2.hasErrorEQAHealthOrg,\n          hasErrorQualification = _this$state2.hasErrorQualification,\n          shouldOpenSearchEQAHealthOrgSearchDialog = _this$state2.shouldOpenSearchEQAHealthOrgSearchDialog;\n      return /*#__PURE__*/React.createElement(Dialog, {\n        open: open,\n        PaperComponent: PaperComponent,\n        maxWidth: 'md',\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(DialogTitle, {\n        style: {\n          cursor: 'move'\n        },\n        id: \"draggable-dialog-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"mb-20 styleColor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 9\n        }\n      }, \" \", (id ? t(\"update\") : t(\"Add\")) + \" \" + t(\"Technician.title\"), \" \"), /*#__PURE__*/React.createElement(IconButton, {\n        style: {\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\"\n        },\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        color: \"error\",\n        title: t(\"close\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 112\n        }\n      }, \"close\"))), /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        style: {\n          overflowY: \"auto\",\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DialogContent, {\n        dividers: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        className: \"\",\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(AsynchronousAutocomplete, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 28\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 51\n          }\n        }, \" * \"), t(\"EQAHealthOrg.title\")),\n        size: \"small\",\n        searchFunction: searchByPageHealthOrg,\n        searchObject: searchObject,\n        defaultValue: healthOrg,\n        value: healthOrg,\n        displayLable: 'name',\n        valueTextValidator: healthOrg,\n        onSelect: this.handleSelectEQAHealthOrg,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        fullWidth: true,\n        error: hasErrorQualification,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"qualification-simple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 63\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 86\n        }\n      }, \" * \"), t('Qualification.title'))), /*#__PURE__*/React.createElement(Select, {\n        value: qualification ? qualification : '',\n        onChange: this.handleChange,\n        inputProps: {\n          name: \"qualification\",\n          id: \"qualification-simple\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 19\n        }\n      }, listQualification.map(function (item) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: item.id,\n          value: item.id,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 30\n          }\n        }, item.name);\n      })), hasErrorQualification && /*#__PURE__*/React.createElement(FormHelperText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 45\n        }\n      }, t(\"general.errorMessages_required\")))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 mb-16\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 26\n          }\n        }, t(\"general.phoneNumber\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"phoneNumber\",\n        value: phoneNumber,\n        validators: ['isNumber'],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        className: \"\",\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 26\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 49\n          }\n        }, \" * \"), t(\"general.firstName\")),\n        onChange: function onChange(value) {\n          return _this3.handleChange(value, 'firstName');\n        },\n        type: \"text\",\n        name: \"firstName\",\n        value: firstName,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 26\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 49\n          }\n        }, \" * \"), t(\"general.lastName\")),\n        onChange: function onChange(value) {\n          return _this3.handleChange(value, 'lastName');\n        },\n        type: \"text\",\n        name: \"lastName\",\n        value: lastName,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        disabled: true,\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 26\n          }\n        }, t(\"general.displayName\")),\n        type: \"text\",\n        name: \"displayName\",\n        value: displayName,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        fullWidth: true,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"gender-simple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 56\n        }\n      }, t('general.gender'))), /*#__PURE__*/React.createElement(Select, {\n        value: gender ? gender : '',\n        onChange: this.handleChange,\n        inputProps: {\n          name: \"gender\",\n          id: \"gender-simple\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 19\n        }\n      }, this.listGender.map(function (item) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: item.id,\n          value: item.id,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 30\n          }\n        }, item.name);\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 26\n          }\n        }, t(\"general.idNumber\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"idNumber\",\n        value: idNumber,\n        validators: ['isNumber'],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 26\n          }\n        }, t(\"general.email\")),\n        onChange: this.handleChange,\n        placeholder: \"example@gmail.com\",\n        type: \"email\",\n        name: \"email\",\n        value: email,\n        validators: ['isEmail'],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        fullWidth: true,\n        margin: \"none\",\n        id: \"mui-pickers-date\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 28\n          }\n        }, t('general.birthDate')),\n        inputVariant: \"standard\",\n        type: \"text\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        value: birthDate,\n        onChange: function onChange(date) {\n          return _this3.handleDateChange(date, \"birthDate\");\n        },\n        inputVariant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 19\n        }\n      }))))), /*#__PURE__*/React.createElement(DialogActions, {\n        spacing: 4,\n        className: \"flex flex-end flex-middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: function onClick() {\n          return _this3.props.handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 15\n        }\n      }, t('Cancel')), /*#__PURE__*/React.createElement(Button, {\n        disabled: isView,\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 15\n        }\n      }, t('Save')))));\n    }\n  }]);\n\n  return TechnicianEditorDialog;\n}(Component);\n\nexport default TechnicianEditorDialog;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/Technician/TechnicianEditorDialog.jsx"],"names":["React","Component","Dialog","Button","Grid","InputLabel","FormControl","MenuItem","Select","DialogActions","FormHelperText","Icon","IconButton","MaterialTable","MTableToolbar","Chip","MTableBody","MTableHeader","ValidatorForm","TextValidator","TextField","getAllQualification","getAllHealthOrg","saveItem","getItemById","searchByPage","searchByPageHealthOrg","AsynchronousAutocomplete","DialogContent","DialogTitle","Draggable","Paper","MuiPickersUtilsProvider","KeyboardDatePicker","DateFnsUtils","el","EQAHealthOrgSearchDialog","toast","configure","autoClose","draggable","limit","PaperComponent","props","TechnicianEditorDialog","state","firstName","lastName","displayName","gender","qualification","healthOrg","birthDate","phoneNumber","idNumber","email","isView","address","listQualification","listHealthOrg","shouldOpenSearchDialog","shouldOpenConfirmationDialog","shouldOpenSearchEQAHealthOrgSearchDialog","listGender","id","name","handleDateChange","date","setState","handleChange","event","source","persist","isActive","target","checked","value","trim","handleFormSubmit","hasErrorEQAHealthOrg","hasErrorQualification","t","objQualification","find","item","then","response","data","status","success","handleSearchDialogClose","handleSearchEQAHealthOrgDialogClose","handleSelectEQAHealthOrg","result","open","handleClose","eQASampleSetDetail","index","details","length","forEach","element","sample","splice","handleOKEditClose","i18n","searchObject","pageIndex","pageSize","text","cursor","position","right","top","overflowY","display","flexDirection","color","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  InputLabel,\r\n  FormControl,\r\n  MenuItem,\r\n  Select,\r\n  DialogActions,\r\n  FormHelperText, Icon, IconButton\r\n} from \"@material-ui/core\";\r\n\r\nimport MaterialTable, { MTableToolbar, Chip, MTableBody, MTableHeader } from 'material-table';\r\nimport { ValidatorForm, TextValidator, TextField } from \"react-material-ui-form-validator\";\r\nimport { getAllQualification, getAllHealthOrg, saveItem, getItemById } from \"./TechnicianService\";\r\nimport { searchByPage as searchByPageHealthOrg } from \"../EQAHealthOrg/EQAHealthOrgService\";\r\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Draggable from 'react-draggable';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { el } from \"date-fns/locale\";\r\nimport EQAHealthOrgSearchDialog from './EQAHealthOrgSearchDialog';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../../styles/views/_style.scss';\r\n\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit:3\r\n});\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\nclass TechnicianEditorDialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    getAllQualification().then((result) => {\r\n      let listQualification = result.data;\r\n      this.setState({ listQualification: listQualification });\r\n    });\r\n    // getAllHealthOrg().then((result) => {\r\n    //   let listHealthOrg = result.data;\r\n    //   this.setState({ listHealthOrg: listHealthOrg });\r\n    // });\r\n  }\r\n\r\n  state = {\r\n    firstName: '',\r\n    lastName: '',\r\n    displayName: '',\r\n    gender: '',\r\n    qualification: '',\r\n    healthOrg:[],\r\n    birthDate: null,\r\n    phoneNumber:'',\r\n    idNumber:'',\r\n    email:'',\r\n    isView: false,\r\n    address:[],\r\n    listQualification: [],\r\n    listHealthOrg: [],\r\n    shouldOpenSearchDialog: false,\r\n    shouldOpenConfirmationDialog: false,\r\n    shouldOpenSearchEQAHealthOrgSearchDialog: false,\r\n  };\r\n\r\n  listGender = [\r\n    { id: 1, name: 'Nam' },\r\n    { id: 2, name: 'Nữ' },\r\n    { id: 3, name: 'Không xác định' }\r\n  ]\r\n\r\n  handleDateChange = (date, name) => {\r\n    this.setState({\r\n      [name]: date\r\n    });\r\n  };\r\n\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n    if (source === \"firstName\") {\r\n      let { lastName } = this.state;\r\n      let displayName = event.target.value.trim() + \" \" + (lastName ? lastName : '');\r\n      this.setState({ firstName: event.target.value, displayName: displayName });\r\n      return;\r\n    }\r\n    else if (source === \"lastName\") {\r\n      let { firstName } = this.state;\r\n      let displayName = firstName.trim() + \" \" + (event.target.value.trim() ? event.target.value.trim() : '');\r\n      this.setState({ lastName: event.target.value, displayName: displayName });\r\n      return;\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleFormSubmit = () => {\r\n    this.setState({ hasErrorEQAHealthOrg: false, hasErrorQualification: false});\r\n    let {healthOrg} = this.state;\r\n    let { t } = this.props;\r\n    if (!this.state.healthOrg || this.state.healthOrg <= 0) {\r\n      this.setState({ hasErrorEQAHealthOrg: true });\r\n      return;\r\n    }\r\n    else if (!this.state.qualification || this.state.qualification <= 0) {\r\n      this.setState({ hasErrorQualification: true });\r\n      return;\r\n    }else{\r\n      let { qualification, id } = this.state;\r\n      let { listQualification } = this.state;\r\n      this.setState({isView: true});\r\n      let objQualification = listQualification.find(item => item.id == qualification);\r\n      this.setState({ qualification: objQualification }, function () {\r\n        if (id) {\r\n          saveItem({\r\n            ...this.state\r\n          }).then((response) => {\r\n            if(response.data != null && response.status == 200){\r\n              this.state.qualification = response.data.qualification.id\r\n              this.setState({...this.state, isView: false})\r\n              toast.success(t('mess_edit'));\r\n            }\r\n          });\r\n        }\r\n        else {\r\n          saveItem({\r\n            ...this.state\r\n          }).then((response) => {\r\n            if(response.data != null && response.status == 200){\r\n              this.state.id = response.data.id\r\n              this.state.qualification = response.data.qualification.id\r\n              this.setState({...this.state, isView: false})\r\n              toast.success(t('mess_add'));\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n    }\r\n  };\r\n\r\n  componentWillMount() {\r\n    let { open, handleClose, item } = this.props;\r\n    this.setState({\r\n      ...this.props.item\r\n    }, function () {\r\n      let { qualification } = this.state;\r\n      if (qualification != null && qualification.id != null) {\r\n        this.setState({ qualification: qualification.id });\r\n      }\r\n    });\r\n  }\r\n\r\n  handleSearchDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenSearchDialog: false\r\n    });\r\n  };\r\n\r\n  deleteTechnicianDetail(eQASampleSetDetail) {\r\n    let index = null;\r\n    let { details } = this.state;\r\n    if (details != null && details.length > 0) {\r\n      details.forEach(element => {\r\n        if (element != null && element.sample != null && eQASampleSetDetail.sample != null && element.sample.id == eQASampleSetDetail.sample.id) {\r\n          if (index == null) {\r\n            index = 0;\r\n          }\r\n          else {\r\n            index++;\r\n          }\r\n        }\r\n      });\r\n\r\n      details.splice(index, 1);\r\n      this.setState({ details });\r\n    }\r\n  };\r\n  \r\n  handleSearchEQAHealthOrgDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenSearchEQAHealthOrgSearchDialog: false\r\n    });\r\n  };\r\n  handleSelectEQAHealthOrg = (item) => {\r\n    this.setState({ healthOrg: item });\r\n    this.handleSearchEQAHealthOrgDialogClose();\r\n  }\r\n\r\n  render() {\r\n    let { open, handleClose, handleOKEditClose, t, i18n } = this.props;\r\n    let searchObject = { pageIndex: 1, pageSize: 100000, text:\"\" };\r\n    let {\r\n      id,\r\n      firstName,\r\n      lastName,\r\n      displayName,\r\n      qualification,\r\n      gender,\r\n      listQualification,\r\n      healthOrg,\r\n      listHealthOrg,\r\n      birthDate,\r\n      phoneNumber,\r\n      idNumber,\r\n      email,\r\n      address,\r\n      isView,\r\n      hasErrorEQAHealthOrg,\r\n      hasErrorQualification,\r\n      shouldOpenSearchEQAHealthOrgSearchDialog\r\n    } = this.state;\r\n\r\n    return (\r\n      <Dialog  open={open} PaperComponent={PaperComponent} maxWidth={'md'} fullWidth={true} >\r\n        <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\r\n        <span className=\"mb-20 styleColor\"> {(id ? t(\"update\") : t(\"Add\")) + \" \" + t(\"Technician.title\")} </span>\r\n        <IconButton style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }} onClick={() => handleClose()}><Icon color=\"error\"\r\n              title={t(\"close\")}>\r\n              close\r\n            </Icon>\r\n            </IconButton>\r\n        </DialogTitle>\r\n        \r\n        <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit} style={{\r\n            overflowY: \"auto\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\"\r\n          }}>\r\n          <DialogContent dividers>\r\n          <Grid className=\"\" container spacing={2}>\r\n              <Grid item lg={6} md={6} sm={12} xs={12}>\r\n                <AsynchronousAutocomplete \r\n                    label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EQAHealthOrg.title\")}\r\n                      </span>}\r\n                    size=\"small\"\r\n                    searchFunction={searchByPageHealthOrg}\r\n                    searchObject={searchObject}\r\n                    defaultValue={healthOrg}\r\n                    value={healthOrg}\r\n                    displayLable={'name'}\r\n                    valueTextValidator={healthOrg}\r\n                    onSelect={this.handleSelectEQAHealthOrg}\r\n                    validators={[\"required\"]}\r\n                    errorMessages={[t(\"general.errorMessages_required\")]}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                  />\r\n              </Grid> \r\n              <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <FormControl fullWidth={true} error={hasErrorQualification} variant=\"outlined\" size=\"small\">\r\n                  <InputLabel htmlFor=\"qualification-simple\">{<span className=\"font\"><span style={{ color: \"red\" }}> * </span>{t('Qualification.title')}</span>}</InputLabel>\r\n                  <Select\r\n                    value={qualification ? qualification : ''}\r\n                    onChange={this.handleChange}\r\n                    inputProps={{\r\n                      name: \"qualification\",\r\n                      id: \"qualification-simple\"\r\n                    }}\r\n                  >\r\n                    {listQualification.map(item => {\r\n                      return <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>;\r\n                    })}\r\n                  </Select>\r\n                  {hasErrorQualification && <FormHelperText>{t(\"general.errorMessages_required\")}</FormHelperText>}\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 mb-16\"\r\n                  label={<span className=\"font\">{t(\"general.phoneNumber\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"phoneNumber\"\r\n                  value={phoneNumber}\r\n                  validators={['isNumber']}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className=\"\" container spacing={2}>\r\n              <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"general.firstName\")}\r\n                      </span>}\r\n                  onChange={value => this.handleChange(value, 'firstName')}\r\n                  type=\"text\"\r\n                  name=\"firstName\"\r\n                  value={firstName}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"general.lastName\")}\r\n                      </span>}\r\n                  onChange={value => this.handleChange(value, 'lastName')}\r\n                  type=\"text\"\r\n                  name=\"lastName\"\r\n                  value={lastName}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <TextValidator\r\n                  disabled={true}\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\">{t(\"general.displayName\")}</span>}\r\n                  type=\"text\"\r\n                  name=\"displayName\"\r\n                  value={displayName}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <FormControl fullWidth={true} variant=\"outlined\" size=\"small\">\r\n                  <InputLabel htmlFor=\"gender-simple\">{<span className=\"font\">{t('general.gender')}</span>}</InputLabel>\r\n                  <Select\r\n                    value={gender ? gender : ''}\r\n                    onChange={this.handleChange}\r\n                    inputProps={{\r\n                      name: \"gender\",\r\n                      id: \"gender-simple\"\r\n                    }}\r\n                  >\r\n                    {this.listGender.map(item => {\r\n                      return <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>;\r\n                    })}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n          \r\n              <Grid item lg={6} md={6} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\">{t(\"general.idNumber\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"idNumber\"\r\n                  value={idNumber}\r\n                  validators={['isNumber']}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\">{t(\"general.email\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  placeholder='example@gmail.com'\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  validators={['isEmail']}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <KeyboardDatePicker\r\n                    fullWidth\r\n                    margin=\"none\"\r\n                    id=\"mui-pickers-date\"\r\n                    label={<span className=\"font\">{t('general.birthDate')}</span>}\r\n                    inputVariant=\"standard\"\r\n                    type=\"text\"\r\n                    autoOk={false}\r\n                    format=\"dd/MM/yyyy\"\r\n                    value={birthDate}\r\n                    onChange={date => this.handleDateChange(date, \"birthDate\")}\r\n                    inputVariant=\"outlined\"\r\n                    size=\"small\"\r\n                  />\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n            </Grid>\r\n \t        </DialogContent>\r\n            \r\n            <DialogActions spacing={4} className=\"flex flex-end flex-middle\">\r\n              <Button \r\n                variant=\"contained\" \r\n                color=\"secondary\" \r\n                onClick={() => this.props.handleClose()}>\r\n                  {t('Cancel')}\r\n              </Button>\r\n              <Button\r\n                disabled = {isView}\r\n                variant=\"contained\"    \r\n                color=\"primary\" \r\n                type=\"submit\">\r\n                  {t('Save')}\r\n              </Button>\r\n            </DialogActions>\r\n          </ValidatorForm> \r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TechnicianEditorDialog;\r\n"]},"metadata":{},"sourceType":"module"}