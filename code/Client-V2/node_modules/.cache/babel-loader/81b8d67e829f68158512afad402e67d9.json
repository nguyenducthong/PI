{"ast":null,"code":"import _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\ReferenceResults\\\\ReferenceResultsDialog.jsx\";\nimport { InputAdornment, Input, Grid, Icon, IconButton, Button, MenuItem, Select, Dialog, DialogActions, TextField, Table, TableHead, TableRow, FormControlLabel, Paper, TableContainer, Checkbox, TableCell, FormControl, TableBody } from \"@material-ui/core\";\nimport shortid from \"shortid\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\nimport { searchByPage as getAllEQARound } from \"../EQARound/EQARoundService\"; // import { getListHealthOrgEQARoundByEQARoundIdAndUser } from \"../EQAResultReportConclusion/EQAResultReportConclusionServices\";\n\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport { exportToExcel, getEQASample, getListGroupReferenceResultByRoundId, getListReferenceResultByRoundId, updateReferenceResultConclusion } from \"./ReferenceResultsServices\";\nimport { Helmet } from \"react-helmet\";\nimport { saveAs } from 'file-saver';\nimport { toast } from \"react-toastify\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Draggable from 'react-draggable';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { getCurrentUser } from \"../User/UserService\";\nimport { updateResultReportConclusionBySampleTube } from \"../EQAResultReportConclusion/EQAResultReportConclusionServices\";\nimport { getEQASampleTubeResultConclusionDtoByHealthOrgEQARoundId } from \"../EQAResultReportConclusion/EQAResultReportConclusionServices\";\nimport { getAllResultByHealthOrgManagementEQARoundId, getResultReportById, getItemById } from \"../ResultsOfTheUnits/ResultsOfTheUnitsService\";\nimport '../../../styles/views/_style.scss';\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n});\n\nfunction PaperComponent(props) {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    handle: \"#draggable-dialog-title\",\n    cancel: '[class*=\"MuiDialogContent-root\"]',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  })));\n}\n\nvar ReferenceResultsDialog = /*#__PURE__*/function (_React$Component) {\n  _inherits(ReferenceResultsDialog, _React$Component);\n\n  var _super = _createSuper(ReferenceResultsDialog);\n\n  function ReferenceResultsDialog(props) {\n    var _this;\n\n    _classCallCheck(this, ReferenceResultsDialog);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      sampleTubeResultConclusionList: [],\n      listEQARound: [],\n      currentRound: null,\n      healthOrgEQARoundList: [],\n      currentHealthOrgEQARound: null,\n      shouldOpenConfirmationDialog: false,\n      isFinalResult: false,\n      shouldOpenEQAResultReportDialog: false,\n      listSample: [],\n      isCheckUpdate: false,\n      shouldView: false\n    };\n\n    _this.handleConfirmUpdateResult = function () {\n      var t = _this.props.t;\n      var _this$state = _this.state,\n          sampleTubeResultConclusionList = _this$state.sampleTubeResultConclusionList,\n          currentHealthOrgEQARound = _this$state.currentHealthOrgEQARound;\n\n      if (sampleTubeResultConclusionList.length === 0) {\n        toast.warn(t(\"EQAResultReportConclusion.no_data\"));\n      } else {\n        updateResultReportConclusionBySampleTube(sampleTubeResultConclusionList, currentHealthOrgEQARound.id).then(function (res) {\n          toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\n        }).catch(function (err) {\n          toast.error(t(\"EQAResultReportConclusion.update_result_error\"));\n        });\n      }\n\n      _this.setState({\n        shouldOpenConfirmationDialog: false\n      });\n    };\n\n    _this.handleOKEditClose = function () {\n      _this.setState({\n        shouldOpenEQAResultReportDialog: false,\n        shouldOpenConfirmationDialog: false,\n        shouldOpenConfirmationEditDialog: false\n      }, function () {\n        _this.handleSelectHealthOrg(_this.state.currentHealthOrgEQARound);\n      }); // this.setPage(0);\n\n    };\n\n    _this.handleRowDataResultCellChange = function (event, index, item) {\n      var resultConclusionLists = _this.state.resultConclusionLists;\n\n      if (resultConclusionLists == null) {\n        resultConclusionLists = [];\n      }\n\n      var p = resultConclusionLists[index];\n\n      if (p == null) {\n        p = {};\n      }\n\n      p.referenceResult = event.target.value;\n      p.roundID = _this.state.roundId;\n      p.sampleID = item.id;\n      p.typeMethod = 5;\n      resultConclusionLists.splice(index, 1, p);\n\n      _this.setState({\n        resultConclusionLists\n      }, function () {});\n    };\n\n    _this.exportToExcel = function () {\n      var t = _this.props.t;\n      var searchObject = {};\n\n      if (_this.state.currentRound == null || _this.state.currentRound.id == \"\") {\n        toast.warn(t(\"EQASampleSet.please_select_eqa_round\"));\n        return;\n      }\n\n      exportToExcel(_this.state.currentRound ? _this.state.currentRound.id : \"\").then(function (res) {\n        var blob = new Blob([res.data], {\n          type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n        });\n        saveAs(blob, 'EQAResultReport.xlsx');\n      }).catch(function (err) {});\n    };\n\n    _this.handleFormSubmit = function () {\n      var t = _this.props.t;\n      var _this$state2 = _this.state,\n          resultConclusionLists = _this$state2.resultConclusionLists,\n          listResultByReagent = _this$state2.listResultByReagent;\n\n      if (resultConclusionLists != null && resultConclusionLists.length > 0) {\n        updateReferenceResultConclusion(resultConclusionLists).then(function (data) {\n          if (listResultByReagent != null && listResultByReagent.length > 0) {\n            updateReferenceResultConclusion(listResultByReagent).then(function (res) {\n              _this.props.handleOKEditClose();\n\n              toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\n            });\n          } else {\n            _this.props.handleOKEditClose();\n\n            toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\n          }\n        });\n      } else {\n        if (listResultByReagent != null && listResultByReagent.length > 0) {\n          updateReferenceResultConclusion(listResultByReagent).then(function (res) {\n            _this.props.handleOKEditClose();\n\n            toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\n          });\n        }\n      }\n    };\n\n    _this.handleRowDataResultChange = function (event, index, item) {\n      var isCheck = false;\n      var referenceResult = {};\n      var _this$state3 = _this.state,\n          listResultByReagent = _this$state3.listResultByReagent,\n          listGroupReferenceResult = _this$state3.listGroupReferenceResult,\n          listReferenceResult = _this$state3.listReferenceResult;\n\n      if (listResultByReagent == null || listResultByReagent.length == 0) {\n        listResultByReagent = [];\n      }\n\n      if (listResultByReagent != null && listResultByReagent.length > 0) {\n        listResultByReagent.forEach(function (el) {\n          if (el.referenceResultID == item.id) {\n            isCheck = true;\n          }\n        });\n      }\n\n      if (isCheck) {\n        if (item.id == null) {\n          var p = {};\n\n          if (item.id != null) {\n            p.referenceResultID = item.id;\n          }\n\n          p.officialResult = event.target.value;\n          referenceResult.officialResult = event.target.value;\n          p.roundID = _this.state.roundId;\n          p.sampleID = item.sampleId;\n          referenceResult.sample = item.sample;\n          referenceResult.round = _this.state.currentRound;\n\n          if (item.typeMethod != null) {\n            p.typeMethod = item.typeMethod;\n            referenceResult.typeMethod = item.typeMethod;\n          } else {\n            p.typeMethod = 1;\n          }\n\n          if (item.reagent != null && item.reagent.id != null) {\n            p.reagentID = item.reagent.id;\n            referenceResult.reagent = item.reagent;\n          } else {\n            p.reagentID = listGroupReferenceResult[index].reagent.id;\n            referenceResult.reagent = listGroupReferenceResult[index].reagent;\n          }\n\n          p.priority = 2;\n          referenceResult.priority = 2;\n          listResultByReagent.push(p);\n          listReferenceResult.push(referenceResult);\n\n          if (listReferenceResult != null && listReferenceResult.length > 0) {\n            listReferenceResult.sort(function (a, b) {\n              return a.reagent.name > b.reagent.name ? 1 : -1;\n            });\n          }\n        }\n      } else {\n        var _p = {};\n\n        if (item.id != null) {\n          _p.referenceResultID = item.id;\n        }\n\n        _p.officialResult = event.target.value; // referenceResult.officialResult = event.target.value//them\n\n        _p.roundID = _this.state.roundId;\n        _p.sampleID = item.sampleId; // referenceResult.sample = item.sample//them\n        // referenceResult.round = this.state.currentRound//them\n\n        if (item.typeMethod != null) {\n          _p.typeMethod = item.typeMethod;\n          referenceResult.typeMethod = item.typeMethod;\n        } else {\n          _p.typeMethod = 1;\n        }\n\n        if (item.reagent != null && item.reagent.id != null) {\n          _p.reagentID = item.reagent.id; // referenceResult.reagent = item.reagent//them\n        } else {\n          _p.reagentID = listGroupReferenceResult[index].reagent.id; // referenceResult.reagent = listGroupReferenceResult[index].reagent//them\n        }\n\n        _p.priority = 2;\n        listResultByReagent.push(_p); // listReferenceResult.push(referenceResult)\n\n        listReferenceResult.forEach(function (e) {\n          if (e.id == item.id) {\n            e.priority = 2;\n            e.officialResult = event.target.value;\n          }\n        });\n      }\n\n      _this.setState({\n        listResultByReagent,\n        listReferenceResult\n      }, function () {});\n    };\n\n    return _this;\n  }\n\n  _createClass(ReferenceResultsDialog, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {}\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          roundId = _this$props.roundId,\n          resultConclusionLists = _this$props.resultConclusionLists,\n          listGroupReferenceResult = _this$props.listGroupReferenceResult,\n          listSample = _this$props.listSample,\n          listReferenceResult = _this$props.listReferenceResult; //this.setState({ roundId: roundId, resultConclusionLists: resultConclusionLists, listGroupReferenceResult: listGroupReferenceResult, listReferenceResult: listReferenceResult, listSample: listSample })\n\n      this.setState(_objectSpread({}, this.props), function () {// console.log(this.state)\n      });\n    }\n  }, {\n    key: \"renderRowHead\",\n    value: function renderRowHead() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          onSelectEvent = _this$props2.onSelectEvent,\n          handleDelete = _this$props2.handleDelete,\n          handleClick = _this$props2.handleClick;\n      var listGroupReferenceResult = this.state.listGroupReferenceResult;\n      var titleCell = null;\n\n      if (listGroupReferenceResult != null && listGroupReferenceResult.length > 0) {\n        listGroupReferenceResult.forEach(function (item) {\n          if (!titleCell) {\n            titleCell = /*#__PURE__*/React.createElement(TableCell, {\n              key: shortid.generate(),\n              className: \"px-0\",\n              align: \"left\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 23\n              }\n            }, _this2.getTypeMethodName(item.typeMethod));\n          } else {\n            titleCell += /*#__PURE__*/React.createElement(TableCell, {\n              key: shortid.generate(),\n              className: \"px-0\",\n              align: \"left\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 24\n              }\n            }, _this2.getTypeMethodName(item.typeMethod));\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 7\n        }\n      }, listGroupReferenceResult.map(function (item, index) {\n        return _this2.renderColHeadFirst(item);\n      }));\n    }\n  }, {\n    key: \"getTypeMethodName\",\n    value: function getTypeMethodName(text, type) {\n      var t = this.props.t;\n\n      if (type == 1) {\n        return text;\n      } else if (type == 2) {\n        return text;\n      } else if (type == 3) {\n        return text;\n      } else if (type == 4) {\n        return text;\n      } else if (type == 5) {\n        return t('ReferenceResults.conclusion');\n      }\n    }\n  }, {\n    key: \"renderColHeadFirst\",\n    value: function renderColHeadFirst(item) {\n      if (item.reagent != null) {\n        item.title = this.getTypeMethodName(item.reagent.name, item.typeMethod);\n      } else {\n        item.title = this.getTypeMethodName(\"\", item.typeMethod);\n      } //item.title = this.getTypeMethodName(item.reagent.name,item.typeMethod);\n\n\n      return this.renderHeadCells(item);\n    }\n  }, {\n    key: \"renderHeadCells\",\n    value: function renderHeadCells(item) {\n      if (item == null) {\n        item = {};\n      } // if(item.)\n\n\n      var titleCell = /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff',\n          borderRightStyle: \"solid\",\n          textAlign: \"center\",\n          width: \"300px\"\n        },\n        key: shortid.generate(),\n        className: \"px-0\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }\n      }, item.title);\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 7\n        }\n      }, titleCell);\n    }\n  }, {\n    key: \"renderResultDetails\",\n    value: function renderResultDetails(sample, index) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 9\n        }\n      }, this.renderSample(sample, index)));\n    }\n  }, {\n    key: \"renderSample\",\n    value: function renderSample(item, index) {\n      var _this3 = this;\n\n      var resultConclusionLists = this.state.resultConclusionLists;\n      var t = this.props.t;\n      var sttCell = /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 19\n        }\n      }, index + 1);\n      var titleCell = /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        align: \"center\",\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }\n      }, item ? item.code : '');\n      var resultTableAll = /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 26\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Select, {\n        style: {\n          textAlign: \"left\"\n        },\n        value: resultConclusionLists[index] ? resultConclusionLists[index].referenceResult : null,\n        onChange: function onChange(result) {\n          return _this3.handleRowDataResultCellChange(result, index, item);\n        },\n        inputProps: {\n          name: \"result\",\n          id: \"result-simple\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: -3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-light-gray px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 32\n        }\n      }, t('result.noEvaluate'))), /*#__PURE__*/React.createElement(MenuItem, {\n        value: -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4  px-8 py-2 \",\n        style: {\n          backgroundColor: \"#3366FF\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 32\n        }\n      }, t(\"EQAResultReportElisa.Result.negative\"))), /*#__PURE__*/React.createElement(MenuItem, {\n        value: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }\n      }, t(\"EQAResultReportElisa.Result.indertermine\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4  text-white px-8 py-2 \",\n        style: {\n          backgroundColor: \"#f44336\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 31\n        }\n      }, t('result.positive'))))));\n      var _this$state4 = this.state,\n          listReferenceResult = _this$state4.listReferenceResult,\n          listGroupReferenceResult = _this$state4.listGroupReferenceResult;\n      var listData = [];\n      var cellContentByMethod = [];\n      listReferenceResult.forEach(function (result) {\n        var content = null;\n\n        if (result != null && result.sample != null && item && item.id == result.sample.id) {\n          content = result;\n          cellContentByMethod.push(content);\n        }\n      });\n\n      if (cellContentByMethod.length == listGroupReferenceResult.length) {\n        listData = cellContentByMethod;\n      }\n\n      if (cellContentByMethod.length < listGroupReferenceResult.length) {\n        listGroupReferenceResult.forEach(function (e) {\n          var p = null;\n          cellContentByMethod.forEach(function (el) {\n            if (e.reagent.id == el.reagent.id) {\n              p = el;\n            }\n          });\n          listData.push(p);\n        }); // for(let i= cellContentByMethod.length -1; i <listGroupReferenceResult.length-1;i++  ){\n        //   cellContentByMethod.push(null)\n        // }\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 7\n        }\n      }, titleCell, listData.map(function (cell, index) {\n        return _this3.renderCells(cell, index, item);\n      }), resultTableAll);\n    }\n  }, {\n    key: \"renderCells\",\n    value: function renderCells(item, index, sample) {\n      var _this4 = this;\n\n      var _this$props3 = this.props,\n          t = _this$props3.t,\n          i18n = _this$props3.i18n;\n\n      if (item == null) {\n        item = {};\n      }\n\n      item.sampleId = sample.id;\n      item.sample = sample;\n      var resultTable = /*#__PURE__*/React.createElement(TableCell, {\n        key: shortid.generate(),\n        style: {\n          width: \"auto\"\n        },\n        className: \"px-0\",\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        disabled: item.referenceResult ? true : false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Select, {\n        style: {\n          textAlign: \"left\"\n        },\n        value: item.referenceResult ? item.referenceResult : item.officialResult,\n        onChange: function onChange(result) {\n          return _this4.handleRowDataResultChange(result, index, item);\n        },\n        inputProps: {\n          name: \"result\",\n          id: \"result-simple\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: -3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-light-gray px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 32\n        }\n      }, t('result.noEvaluate'))), /*#__PURE__*/React.createElement(MenuItem, {\n        value: -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4  px-8 py-2 \",\n        style: {\n          backgroundColor: \"#3366FF\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 32\n        }\n      }, t(\"EQAResultReportElisa.Result.negative\"))), /*#__PURE__*/React.createElement(MenuItem, {\n        value: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }\n      }, t(\"EQAResultReportElisa.Result.indertermine\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4  text-white px-8 py-2 \",\n        style: {\n          backgroundColor: \"#f44336\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 31\n        }\n      }, t('result.positive'))))));\n      var contentCell = /*#__PURE__*/React.createElement(TableCell, {\n        key: shortid.generate(),\n        style: {\n          width: \"auto\"\n        },\n        className: \"px-0\",\n        align: \"center\",\n        style: {\n          borderRightStyle: \"solid\",\n          borderRightColor: \"white\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 23\n        }\n      }, item.referenceResult == 1 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4  text-white px-8 py-2 \",\n        style: {\n          backgroundColor: \"#f44336\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }\n      }, t('result.positive')) : /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-light-gray px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }\n      }, item.referenceResult == -2 ? t('result.none') : item.referenceResult == -1 ? t('result.negative') : item.referenceResult == 0 ? t('result.indertermine') : item.referenceResult == -3 ? t('result.noEvaluate') : \"\"));\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 7\n        }\n      }, resultTable);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var _this$props4 = this.props,\n          t = _this$props4.t,\n          i18n = _this$props4.i18n,\n          handleClose = _this$props4.handleClose,\n          open = _this$props4.open;\n      var _this$state5 = this.state,\n          listEQARound = _this$state5.listEQARound,\n          currentRound = _this$state5.currentRound,\n          sampleTubeResultConclusionList = _this$state5.sampleTubeResultConclusionList,\n          healthOrgEQARoundList = _this$state5.healthOrgEQARoundList,\n          listGroupReferenceResult = _this$state5.listGroupReferenceResult,\n          shouldOpenConfirmationDialog = _this$state5.shouldOpenConfirmationDialog,\n          isFinalResult = _this$state5.isFinalResult,\n          listSample = _this$state5.listSample,\n          listResult = _this$state5.listResult,\n          listReferenceResult = _this$state5.listReferenceResult;\n      return /*#__PURE__*/React.createElement(Dialog, {\n        onClose: handleClose,\n        open: open,\n        PaperComponent: PaperComponent,\n        maxWidth: 'lg',\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DialogTitle, {\n        style: {\n          cursor: 'move'\n        },\n        id: \"draggable-dialog-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"mb-20 styleColor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }\n      }, t(\"SaveUpdate\")), /*#__PURE__*/React.createElement(IconButton, {\n        style: {\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\"\n        },\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        color: \"error\",\n        title: t(\"close\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 116\n        }\n      }, \"close\"))), /*#__PURE__*/React.createElement(DialogContent, {\n        dividers: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 15\n        }\n      }, this.state.listSample.length == 0 && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 56\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 17\n        }\n      }, this.state.listSample && this.state.listSample.length != 0 && /*#__PURE__*/React.createElement(Paper, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 85\n        }\n      }, /*#__PURE__*/React.createElement(TableContainer, {\n        style: {\n          maxHeight: 1000\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        style: {\n          width: \"125%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TableHead, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff',\n          borderRightStyle: \"solid\"\n        },\n        rowSpan: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 29\n        }\n      }, t('ResultsOfTheUnits.set')), /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff',\n          textAlign: \"center\",\n          textTransform: \"uppercase\",\n          borderRightStyle: \"solid\"\n        },\n        colSpan: listGroupReferenceResult.length + 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 29\n        }\n      }, t('EqaResult.reagentName'))), /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 27\n        }\n      }, listGroupReferenceResult && this.renderRowHead(), /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff',\n          borderRightStyle: \"solid\"\n        },\n        rowSpan: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 29\n        }\n      }, t('EQAResultReportConclusion.final_conclusion')))), /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 25\n        }\n      }, listSample && listSample.map(function (sample, index) {\n        return _this5.renderResultDetails(sample, index);\n      }))))))), /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        title: t(\"confirm\"),\n        open: shouldOpenConfirmationDialog,\n        onConfirmDialogClose: this.handleDialogClose,\n        onYesClick: this.handleConfirmUpdateResult,\n        text: t(\"EQAResultReportConclusion.confirm_update_result\"),\n        Yes: t(\"general.Yes\"),\n        No: t(\"general.No\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(DialogActions, {\n        spacing: 4,\n        className: \"flex flex-end flex-middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        type: \"button\",\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 13\n        }\n      }, \" \", t('Cancel')), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 13\n        }\n      }, t('Save')))));\n    }\n  }]);\n\n  return ReferenceResultsDialog;\n}(React.Component);\n\nexport default ReferenceResultsDialog;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/ReferenceResults/ReferenceResultsDialog.jsx"],"names":["InputAdornment","Input","Grid","Icon","IconButton","Button","MenuItem","Select","Dialog","DialogActions","TextField","Table","TableHead","TableRow","FormControlLabel","Paper","TableContainer","Checkbox","TableCell","FormControl","TableBody","shortid","createMuiTheme","React","Component","ReactDOM","MaterialTable","MTableToolbar","useTranslation","withTranslation","Trans","searchByPage","getAllEQARound","Breadcrumb","ConfirmationDialog","exportToExcel","getEQASample","getListGroupReferenceResultByRoundId","getListReferenceResultByRoundId","updateReferenceResultConclusion","Helmet","saveAs","toast","Autocomplete","ValidatorForm","TextValidator","DialogContent","DialogTitle","Draggable","getCurrentUser","updateResultReportConclusionBySampleTube","getEQASampleTubeResultConclusionDtoByHealthOrgEQARoundId","getAllResultByHealthOrgManagementEQARoundId","getResultReportById","getItemById","configure","autoClose","draggable","limit","PaperComponent","props","ReferenceResultsDialog","state","sampleTubeResultConclusionList","listEQARound","currentRound","healthOrgEQARoundList","currentHealthOrgEQARound","shouldOpenConfirmationDialog","isFinalResult","shouldOpenEQAResultReportDialog","listSample","isCheckUpdate","shouldView","handleConfirmUpdateResult","t","length","warn","id","then","res","success","catch","err","error","setState","handleOKEditClose","shouldOpenConfirmationEditDialog","handleSelectHealthOrg","handleRowDataResultCellChange","event","index","item","resultConclusionLists","p","referenceResult","target","value","roundID","roundId","sampleID","typeMethod","splice","searchObject","blob","Blob","data","type","handleFormSubmit","listResultByReagent","handleRowDataResultChange","isCheck","listGroupReferenceResult","listReferenceResult","forEach","el","referenceResultID","officialResult","sampleId","sample","round","reagent","reagentID","priority","push","sort","a","b","name","e","onSelectEvent","handleDelete","handleClick","titleCell","generate","getTypeMethodName","map","renderColHeadFirst","text","title","renderHeadCells","backgroundColor","color","borderRightStyle","textAlign","width","renderSample","sttCell","code","resultTableAll","result","listData","cellContentByMethod","content","cell","renderCells","i18n","resultTable","contentCell","borderRightColor","handleClose","open","listResult","cursor","position","right","top","maxHeight","textTransform","renderRowHead","renderResultDetails","handleDialogClose"],"mappings":"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","sourcesContent":["import {\r\n  InputAdornment,\r\n  Input,\r\n  Grid, Icon, IconButton,\r\n  Button, MenuItem,\r\n  Select, Dialog, DialogActions,\r\n  TextField, Table, TableHead, TableRow,\r\n  FormControlLabel, Paper, TableContainer,\r\n  Checkbox, TableCell, FormControl, TableBody\r\n} from \"@material-ui/core\";\r\nimport shortid from \"shortid\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\r\nimport { searchByPage as getAllEQARound } from \"../EQARound/EQARoundService\";\r\n// import { getListHealthOrgEQARoundByEQARoundIdAndUser } from \"../EQAResultReportConclusion/EQAResultReportConclusionServices\";\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport { exportToExcel, getEQASample, getListGroupReferenceResultByRoundId, getListReferenceResultByRoundId, updateReferenceResultConclusion } from \"./ReferenceResultsServices\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { saveAs } from 'file-saver';\r\nimport { toast } from \"react-toastify\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Draggable from 'react-draggable';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { getCurrentUser } from \"../User/UserService\"\r\nimport { updateResultReportConclusionBySampleTube } from \"../EQAResultReportConclusion/EQAResultReportConclusionServices\";\r\nimport { getEQASampleTubeResultConclusionDtoByHealthOrgEQARoundId } from \"../EQAResultReportConclusion/EQAResultReportConclusionServices\";\r\nimport { getAllResultByHealthOrgManagementEQARoundId, getResultReportById, getItemById } from \"../ResultsOfTheUnits/ResultsOfTheUnitsService\";\r\nimport '../../../styles/views/_style.scss';\r\n\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit: 3\r\n});\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\nclass ReferenceResultsDialog extends React.Component {\r\n  state = {\r\n    sampleTubeResultConclusionList: [],\r\n    listEQARound: [],\r\n    currentRound: null,\r\n    healthOrgEQARoundList: [],\r\n    currentHealthOrgEQARound: null,\r\n    shouldOpenConfirmationDialog: false,\r\n    isFinalResult: false,\r\n    shouldOpenEQAResultReportDialog: false,\r\n    listSample: [],\r\n    isCheckUpdate: false,\r\n    shouldView: false\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentWillMount() {\r\n\r\n\r\n  }\r\n  componentDidMount() {\r\n    let { roundId, resultConclusionLists, listGroupReferenceResult, listSample, listReferenceResult } = this.props\r\n    //this.setState({ roundId: roundId, resultConclusionLists: resultConclusionLists, listGroupReferenceResult: listGroupReferenceResult, listReferenceResult: listReferenceResult, listSample: listSample })\r\n    this.setState({...this.props}, ()=>{\r\n      // console.log(this.state)\r\n    })\r\n\r\n  }\r\n\r\n\r\n  handleConfirmUpdateResult = () => {\r\n    const { t } = this.props;\r\n    const {\r\n      sampleTubeResultConclusionList,\r\n      currentHealthOrgEQARound\r\n    } = this.state;\r\n\r\n    if (sampleTubeResultConclusionList.length === 0) {\r\n      toast.warn(t(\"EQAResultReportConclusion.no_data\"));\r\n    } else {\r\n      updateResultReportConclusionBySampleTube(\r\n        sampleTubeResultConclusionList,\r\n        currentHealthOrgEQARound.id\r\n      )\r\n        .then(res => {\r\n          toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\r\n        })\r\n        .catch(err => {\r\n          toast.error(t(\"EQAResultReportConclusion.update_result_error\"));\r\n        });\r\n    }\r\n    this.setState({\r\n      shouldOpenConfirmationDialog: false\r\n    });\r\n  };\r\n\r\n  handleOKEditClose = () => {\r\n    this.setState({\r\n      shouldOpenEQAResultReportDialog: false,\r\n      shouldOpenConfirmationDialog: false,\r\n      shouldOpenConfirmationEditDialog: false,\r\n    }, () => {\r\n      this.handleSelectHealthOrg(this.state.currentHealthOrgEQARound)\r\n    });\r\n    // this.setPage(0);\r\n  };\r\n\r\n  renderRowHead() {\r\n    let { onSelectEvent, handleDelete, handleClick } = this.props;\r\n    let { listGroupReferenceResult } = this.state;\r\n    let titleCell = null;\r\n    if (listGroupReferenceResult != null && listGroupReferenceResult.length > 0) {\r\n      listGroupReferenceResult.forEach(item => {\r\n        if (!titleCell) {\r\n          titleCell = <TableCell key={shortid.generate()} className=\"px-0\" align=\"left\">\r\n            {this.getTypeMethodName(item.typeMethod)}\r\n          </TableCell>\r\n        } else {\r\n          titleCell += <TableCell key={shortid.generate()} className=\"px-0\" align=\"left\" >\r\n            {this.getTypeMethodName(item.typeMethod)}\r\n          </TableCell>\r\n        }\r\n      });\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {listGroupReferenceResult.map((item, index) => this.renderColHeadFirst(item))}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  getTypeMethodName(text, type) {\r\n    let { t } = this.props;\r\n    if (type == 1) {\r\n      return text;\r\n    } else if (type == 2) {\r\n      return text;\r\n    } else if (type == 3) {\r\n      return text;\r\n    } else if (type == 4) {\r\n      return text;\r\n    } else if (type == 5) {\r\n      return t('ReferenceResults.conclusion');\r\n    }\r\n  }\r\n  renderColHeadFirst(item) {\r\n    if (item.reagent != null) {\r\n      item.title = this.getTypeMethodName(item.reagent.name, item.typeMethod);\r\n    } else {\r\n      item.title = this.getTypeMethodName(\"\", item.typeMethod);\r\n    }\r\n    //item.title = this.getTypeMethodName(item.reagent.name,item.typeMethod);\r\n    return (\r\n      this.renderHeadCells(item)\r\n    )\r\n  }\r\n  renderHeadCells(item) {\r\n    if (item == null) {\r\n      item = {};\r\n    }\r\n    // if(item.)\r\n    let titleCell = <TableCell style={{\r\n      backgroundColor: '#358600',\r\n      color: '#fff', borderRightStyle: \"solid\", textAlign: \"center\", width: \"300px\"\r\n    }}\r\n      key={shortid.generate()}\r\n      className=\"px-0\" align=\"left\" >\r\n      {item.title}\r\n    </TableCell>\r\n    return (\r\n      <React.Fragment>\r\n        {titleCell}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  renderResultDetails(sample, index) {\r\n    return (\r\n      <React.Fragment>\r\n        <TableRow>\r\n          {this.renderSample(sample, index)}\r\n        </TableRow>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  renderSample(item, index) {\r\n\r\n    let { resultConclusionLists } = this.state\r\n    let { t } = this.props\r\n    let sttCell = <TableCell className=\"px-0\" align=\"center\">\r\n      {index + 1}\r\n    </TableCell>\r\n    let titleCell = <TableCell className=\"px-0\" align=\"center\" style={{ textAlign: \"center\" }}>\r\n      {item ? item.code : ''}\r\n    </TableCell>\r\n    let resultTableAll = <TableCell className=\"px-0\" align=\"center\">\r\n      <FormControl className=\"w-100\">\r\n        <Select\r\n          style={{ textAlign: \"left\" }}\r\n          value={resultConclusionLists[index] ? resultConclusionLists[index].referenceResult : null}\r\n          onChange={(result) => this.handleRowDataResultCellChange(result, index, item)}\r\n          inputProps={{\r\n            name: \"result\",\r\n            id: \"result-simple\"\r\n          }}\r\n        >\r\n          <MenuItem value={-3}><small className=\"border-radius-4 bg-light-gray px-8 py-2 \">{t('result.noEvaluate')}</small></MenuItem>\r\n          <MenuItem value={-1}><small className=\"border-radius-4  px-8 py-2 \" style={{ backgroundColor: \"#3366FF\" }}>{t(\"EQAResultReportElisa.Result.negative\")}</small></MenuItem>\r\n          <MenuItem value={0}>{t(\"EQAResultReportElisa.Result.indertermine\")}</MenuItem>\r\n          <MenuItem value={1}><small className=\"border-radius-4  text-white px-8 py-2 \" style={{ backgroundColor: \"#f44336\" }}>\r\n\r\n            {t('result.positive')}\r\n\r\n          </small></MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </TableCell>\r\n    let { listReferenceResult, listGroupReferenceResult } = this.state;\r\n    let listData = []\r\n    let cellContentByMethod = [];\r\n    listReferenceResult.forEach(result => {\r\n      let content = null;\r\n      if (result != null && result.sample != null && item && item.id == result.sample.id) {\r\n        content = result\r\n        cellContentByMethod.push(content);\r\n      }\r\n\r\n    });\r\n    if (cellContentByMethod.length == listGroupReferenceResult.length) {\r\n      listData = cellContentByMethod\r\n    }\r\n    if (cellContentByMethod.length < listGroupReferenceResult.length) {\r\n      listGroupReferenceResult.forEach(e => {\r\n        let p = null;\r\n        cellContentByMethod.forEach(el => {\r\n          if (e.reagent.id == el.reagent.id) {\r\n            p = el\r\n          }\r\n        })\r\n        listData.push(p)\r\n      })\r\n      // for(let i= cellContentByMethod.length -1; i <listGroupReferenceResult.length-1;i++  ){\r\n      //   cellContentByMethod.push(null)\r\n      // }\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        {/* {sttCell} */}\r\n        {titleCell}\r\n        {listData.map((cell, index) => this.renderCells(cell, index, item))}\r\n        {resultTableAll}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  renderCells(item, index, sample) {\r\n    let { t, i18n } = this.props;\r\n    if (item == null) {\r\n      item = {};\r\n    }\r\n    item.sampleId = sample.id\r\n    item.sample = sample\r\n    let resultTable = <TableCell key={shortid.generate()} style={{ width: \"auto\" }} className=\"px-0\" align=\"center\">\r\n      <FormControl className=\"w-100\" disabled={item.referenceResult ? true : false}>\r\n        <Select\r\n          style={{ textAlign: \"left\" }}\r\n          value={item.referenceResult ? item.referenceResult : item.officialResult}\r\n          onChange={(result) => this.handleRowDataResultChange(result, index, item)}\r\n          inputProps={{\r\n            name: \"result\",\r\n            id: \"result-simple\"\r\n          }}\r\n        >\r\n          <MenuItem value={-3}><small className=\"border-radius-4 bg-light-gray px-8 py-2 \">{t('result.noEvaluate')}</small></MenuItem>\r\n          <MenuItem value={-1}><small className=\"border-radius-4  px-8 py-2 \" style={{ backgroundColor: \"#3366FF\" }}>{t(\"EQAResultReportElisa.Result.negative\")}</small></MenuItem>\r\n          <MenuItem value={0}>{t(\"EQAResultReportElisa.Result.indertermine\")}</MenuItem>\r\n          <MenuItem value={1}><small className=\"border-radius-4  text-white px-8 py-2 \" style={{ backgroundColor: \"#f44336\" }}>\r\n\r\n            {t('result.positive')}\r\n\r\n          </small></MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </TableCell>\r\n    let contentCell = <TableCell key={shortid.generate()} style={{ width: \"auto\" }} className=\"px-0\" align=\"center\" style={{ borderRightStyle: \"solid\", borderRightColor: \"white\" }}>\r\n      {\r\n        item.referenceResult == 1 ? (\r\n          <small className=\"border-radius-4  text-white px-8 py-2 \" style={{ backgroundColor: \"#f44336\" }}>\r\n\r\n            {t('result.positive')}\r\n\r\n          </small>\r\n        ) : (\r\n            <small className=\"border-radius-4 bg-light-gray px-8 py-2 \">\r\n              {\r\n                item.referenceResult == -2 ? (\r\n                  t('result.none')\r\n                ) : (\r\n                    item.referenceResult == -1 ? (\r\n                      t('result.negative')\r\n                    ) : (\r\n                        item.referenceResult == 0 ? (\r\n                          t('result.indertermine')\r\n                        ) : (\r\n                            item.referenceResult == -3 ? (\r\n                              t('result.noEvaluate')\r\n                            ) : (\r\n                                \"\"\r\n                              )\r\n                          )\r\n                      )\r\n                  )\r\n              }\r\n            </small>\r\n          )\r\n      }\r\n    </TableCell>\r\n    return (\r\n      <React.Fragment>\r\n        {/* {contentCell} */}\r\n        { resultTable}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  handleRowDataResultCellChange = (event, index, item) => {\r\n    let { resultConclusionLists } = this.state\r\n    if (resultConclusionLists == null) {\r\n      resultConclusionLists = []\r\n    }\r\n    let p = resultConclusionLists[index]\r\n    if (p == null) {\r\n      p = {}\r\n    }\r\n    p.referenceResult = event.target.value\r\n    p.roundID = this.state.roundId\r\n    p.sampleID = item.id\r\n    p.typeMethod = 5\r\n    resultConclusionLists.splice(index, 1, p)\r\n    this.setState({ resultConclusionLists }, () => {\r\n\r\n    })\r\n  }\r\n  exportToExcel = () => {\r\n    const { t } = this.props;\r\n    let searchObject = {}\r\n    if (this.state.currentRound == null || this.state.currentRound.id == \"\") {\r\n      toast.warn(t(\"EQASampleSet.please_select_eqa_round\"))\r\n      return\r\n    }\r\n    exportToExcel(this.state.currentRound ? this.state.currentRound.id : \"\").then((res) => {\r\n      let blob = new Blob([res.data], {\r\n        type:\r\n          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n      })\r\n      saveAs(blob, 'EQAResultReport.xlsx')\r\n    })\r\n      .catch((err) => {\r\n      })\r\n  }\r\n\r\n  handleFormSubmit = () => {\r\n    const { t } = this.props;\r\n    let { resultConclusionLists, listResultByReagent } = this.state\r\n    if (resultConclusionLists != null && resultConclusionLists.length > 0) {\r\n      updateReferenceResultConclusion(resultConclusionLists).then((data) => {\r\n        if (listResultByReagent != null && listResultByReagent.length > 0) {\r\n          updateReferenceResultConclusion(listResultByReagent).then((res) => {\r\n            this.props.handleOKEditClose();\r\n            toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\r\n          })\r\n        } else {\r\n          this.props.handleOKEditClose();\r\n          toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\r\n        }\r\n\r\n      })\r\n    } else {\r\n      if (listResultByReagent != null && listResultByReagent.length > 0) {\r\n        updateReferenceResultConclusion(listResultByReagent).then((res) => {\r\n          this.props.handleOKEditClose();\r\n          toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\r\n        })\r\n      }\r\n    }\r\n\r\n  }\r\n  handleRowDataResultChange = (event, index, item) => {\r\n    let isCheck = false\r\n    let referenceResult = {}\r\n    let { listResultByReagent, listGroupReferenceResult, listReferenceResult } = this.state\r\n    if (listResultByReagent == null || listResultByReagent.length == 0) {\r\n      listResultByReagent = []\r\n    }\r\n    if (listResultByReagent != null && listResultByReagent.length > 0) {\r\n      listResultByReagent.forEach(el => {\r\n        if (el.referenceResultID == item.id) {\r\n          isCheck = true\r\n        }\r\n      })\r\n    }\r\n    if (isCheck) {\r\n      if (item.id == null) {\r\n        let p = {}\r\n        if (item.id != null) {\r\n          p.referenceResultID = item.id\r\n        }\r\n\r\n        p.officialResult = event.target.value\r\n        referenceResult.officialResult = event.target.value\r\n        p.roundID = this.state.roundId\r\n        p.sampleID = item.sampleId\r\n        referenceResult.sample = item.sample\r\n        referenceResult.round = this.state.currentRound\r\n        if (item.typeMethod != null) {\r\n          p.typeMethod = item.typeMethod\r\n          referenceResult.typeMethod = item.typeMethod\r\n        } else {\r\n          p.typeMethod = 1;\r\n        }\r\n        if (item.reagent != null && item.reagent.id != null) {\r\n          p.reagentID = item.reagent.id\r\n          referenceResult.reagent = item.reagent\r\n        } else {\r\n          p.reagentID = listGroupReferenceResult[index].reagent.id\r\n          referenceResult.reagent = listGroupReferenceResult[index].reagent\r\n        }\r\n\r\n        p.priority = 2\r\n        referenceResult.priority = 2\r\n        listResultByReagent.push(p)\r\n        listReferenceResult.push(referenceResult)\r\n        if (listReferenceResult != null && listReferenceResult.length > 0) {\r\n          listReferenceResult.sort((a, b) => (a.reagent.name > b.reagent.name) ? 1 : -1);\r\n        }\r\n      }\r\n    } else {\r\n      let p = {}\r\n      if (item.id != null) {\r\n        p.referenceResultID = item.id\r\n      }\r\n\r\n      p.officialResult = event.target.value\r\n      // referenceResult.officialResult = event.target.value//them\r\n      p.roundID = this.state.roundId\r\n      p.sampleID = item.sampleId\r\n      // referenceResult.sample = item.sample//them\r\n      // referenceResult.round = this.state.currentRound//them\r\n      if (item.typeMethod != null) {\r\n        p.typeMethod = item.typeMethod\r\n        referenceResult.typeMethod = item.typeMethod\r\n      } else {\r\n        p.typeMethod = 1;\r\n      }\r\n      if (item.reagent != null && item.reagent.id != null) {\r\n        p.reagentID = item.reagent.id\r\n        // referenceResult.reagent = item.reagent//them\r\n      } else {\r\n        p.reagentID = listGroupReferenceResult[index].reagent.id\r\n        // referenceResult.reagent = listGroupReferenceResult[index].reagent//them\r\n      }\r\n\r\n      p.priority = 2\r\n      listResultByReagent.push(p)\r\n      // listReferenceResult.push(referenceResult)\r\n      listReferenceResult.forEach(e => {\r\n        if (e.id == item.id) {\r\n          e.priority = 2\r\n          e.officialResult = event.target.value;\r\n        }\r\n      })\r\n    }\r\n\r\n    this.setState({ listResultByReagent, listReferenceResult }, () => {\r\n\r\n    })\r\n  }\r\n  render() {\r\n    const { t, i18n, handleClose, open } = this.props;\r\n\r\n    const {\r\n      listEQARound,\r\n      currentRound,\r\n      sampleTubeResultConclusionList,\r\n      healthOrgEQARoundList,\r\n      listGroupReferenceResult,\r\n      shouldOpenConfirmationDialog,\r\n      isFinalResult, listSample, listResult, listReferenceResult\r\n    } = this.state;\r\n\r\n    return (\r\n      <Dialog onClose={handleClose} open={open} PaperComponent={PaperComponent} maxWidth={'lg'} fullWidth={true} >\r\n        <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit}>\r\n          <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\r\n            <span className=\"mb-20 styleColor\">{t(\"SaveUpdate\")}</span>\r\n            <IconButton style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }} onClick={() => handleClose()}><Icon color=\"error\"\r\n              title={t(\"close\")}>\r\n              close\r\n            </Icon>\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent dividers>\r\n            <Grid container spacing={2}>\r\n\r\n\r\n              <Grid item xs={12}>\r\n                {this.state.listSample.length == 0 && (<div>\r\n                  {/* <h3>{t(\"EQAResultReportConclusion.no_data\")}</h3> */}\r\n                </div>)}\r\n                <div>\r\n                  {(this.state.listSample && this.state.listSample.length != 0) && (<Paper>\r\n                    <TableContainer style={{ maxHeight: 1000 }}>\r\n                      <Table stickyHeader aria-label=\"sticky table\" style={{ width: \"125%\" }}>\r\n                        <TableHead style={{\r\n                          backgroundColor: '#358600',\r\n                          color: '#fff'\r\n                        }}>\r\n\r\n                          <TableRow>\r\n                            {/* <TableCell \r\n                              style ={{backgroundColor: '#358600',\r\n                                color:'#fff',}}\r\n                                rowSpan={2} width=\"50px\" align=\"center\" className=\"p-0\">{t('ResultsOfTheUnits.STT')}</TableCell> */}\r\n                            <TableCell style={{\r\n                              backgroundColor: '#358600',\r\n                              color: '#fff', borderRightStyle: \"solid\"\r\n                            }}\r\n                              rowSpan={2}>{t('ResultsOfTheUnits.set')}</TableCell>\r\n                            <TableCell style={{\r\n                              backgroundColor: '#358600',\r\n                              color: '#fff', textAlign: \"center\", textTransform: \"uppercase\", borderRightStyle: \"solid\"\r\n                            }}\r\n                              colSpan={listGroupReferenceResult.length + 1}>{t('EqaResult.reagentName')}</TableCell>\r\n                          </TableRow>\r\n                          <TableRow>\r\n                            {\r\n                              (listGroupReferenceResult && this.renderRowHead())\r\n                            }\r\n                            <TableCell style={{\r\n                              backgroundColor: '#358600',\r\n                              color: '#fff', borderRightStyle: \"solid\"\r\n                            }}\r\n                              rowSpan={2}>{t('EQAResultReportConclusion.final_conclusion')}</TableCell>\r\n                          </TableRow>\r\n\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                          {\r\n                            (listSample && listSample.map((sample, index) => this.renderResultDetails(sample, index)))\r\n                          }\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </Paper>)}\r\n                </div>\r\n\r\n              </Grid>\r\n              <ConfirmationDialog\r\n                title={t(\"confirm\")}\r\n                open={shouldOpenConfirmationDialog}\r\n                onConfirmDialogClose={this.handleDialogClose}\r\n                onYesClick={this.handleConfirmUpdateResult}\r\n                text={t(\"EQAResultReportConclusion.confirm_update_result\")}\r\n                Yes={t(\"general.Yes\")}\r\n                No={t(\"general.No\")}\r\n              />\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions spacing={4} className=\"flex flex-end flex-middle\">\r\n            <Button variant=\"contained\" color=\"secondary\" type=\"button\" onClick={() => handleClose()}> {t('Cancel')}</Button>\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\" >\r\n              {t('Save')}\r\n            </Button>\r\n\r\n          </DialogActions>\r\n        </ValidatorForm>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\nexport default ReferenceResultsDialog;\r\n"]},"metadata":{},"sourceType":"module"}