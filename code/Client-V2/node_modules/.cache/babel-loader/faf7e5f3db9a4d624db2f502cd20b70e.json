{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { voronoi } from 'd3-voronoi';\nimport { getAttributeFunctor } from '../utils/scales-utils';\n\nvar NOOP = function NOOP(f) {\n  return f;\n}; // Find the index of the node at coordinates of a touch point\n\n\nfunction getNodeIndex(evt) {\n  var _evt$nativeEvent = evt.nativeEvent,\n      pageX = _evt$nativeEvent.pageX,\n      pageY = _evt$nativeEvent.pageY;\n  var target = document.elementFromPoint(pageX, pageY);\n\n  if (!target) {\n    return -1;\n  }\n\n  var parentNode = target.parentNode;\n  return Array.prototype.indexOf.call(parentNode.childNodes, target);\n}\n\nfunction getExtent(_ref) {\n  var innerWidth = _ref.innerWidth,\n      innerHeight = _ref.innerHeight,\n      marginLeft = _ref.marginLeft,\n      marginTop = _ref.marginTop;\n  return [[marginLeft, marginTop], [innerWidth + marginLeft, innerHeight + marginTop]];\n}\n\nfunction Voronoi(props) {\n  var className = props.className,\n      extent = props.extent,\n      nodes = props.nodes,\n      onBlur = props.onBlur,\n      _onClick = props.onClick,\n      _onMouseUp = props.onMouseUp,\n      _onMouseDown = props.onMouseDown,\n      onHover = props.onHover,\n      polygonStyle = props.polygonStyle,\n      style = props.style,\n      x = props.x,\n      y = props.y; // Create a voronoi with each node center points\n\n  var voronoiInstance = voronoi().x(x || getAttributeFunctor(props, 'x')).y(y || getAttributeFunctor(props, 'y')).extent(extent || getExtent(props)); // Create an array of polygons corresponding to the cells in voronoi\n\n  var polygons = voronoiInstance.polygons(nodes); // Create helper function to handle special logic for touch events\n\n  var handleTouchEvent = function handleTouchEvent(handler) {\n    return function (evt) {\n      evt.preventDefault();\n      var index = getNodeIndex(evt);\n\n      if (index > -1 && index < polygons.length) {\n        var d = polygons[index];\n        handler(d.data);\n      }\n    };\n  };\n\n  return React.createElement('g', {\n    className: className + ' rv-voronoi',\n    style: style // Because of the nature of how touch events, and more specifically touchmove\n    // and how it differs from mouseover, we must manage touch events on the parent\n    ,\n    onTouchEnd: handleTouchEvent(_onMouseUp),\n    onTouchStart: handleTouchEvent(_onMouseDown),\n    onTouchMove: handleTouchEvent(onHover),\n    onTouchCancel: handleTouchEvent(onBlur)\n  }, polygons.map(function (d, i) {\n    return React.createElement('path', {\n      className: 'rv-voronoi__cell ' + (d.data && d.data.className || ''),\n      d: 'M' + d.join('L') + 'Z',\n      onClick: function onClick() {\n        return _onClick(d.data);\n      },\n      onMouseUp: function onMouseUp() {\n        return _onMouseUp(d.data);\n      },\n      onMouseDown: function onMouseDown() {\n        return _onMouseDown(d.data);\n      },\n      onMouseOver: function onMouseOver() {\n        return onHover(d.data);\n      },\n      onMouseOut: function onMouseOut() {\n        return onBlur(d.data);\n      },\n      fill: 'none',\n      style: _extends({\n        pointerEvents: 'all'\n      }, polygonStyle, d.data && d.data.style),\n      key: i\n    });\n  }));\n}\n\nVoronoi.requiresSVG = true;\nVoronoi.displayName = 'Voronoi';\nVoronoi.defaultProps = {\n  className: '',\n  onBlur: NOOP,\n  onClick: NOOP,\n  onHover: NOOP,\n  onMouseDown: NOOP,\n  onMouseUp: NOOP\n};\nVoronoi.propTypes = {\n  className: PropTypes.string,\n  extent: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  nodes: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  onHover: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  x: PropTypes.func,\n  y: PropTypes.func\n};\nexport default Voronoi;","map":null,"metadata":{},"sourceType":"module"}