{"ast":null,"code":"import _createForOfIteratorHelper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\EQAResultReportConclusion\\\\EQAResultReportConclusionTable.jsx\";\nimport { InputAdornment, Input, Grid, Button, Select, TextField, Table, TableHead, TableRow, FormControlLabel, Paper, TableContainer, Checkbox, TableCell, FormControl, TableBody } from \"@material-ui/core\";\nimport shortid from \"shortid\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\nimport { searchByPage as getAllEQARound } from \"../EQARound/EQARoundService\";\nimport { getListHealthOrgEQARoundByEQARoundIdAndUser, listHealthOrgEQARoundByEQARoundId, getHealthOrgEQARound } from \"./EQAResultReportConclusionServices\";\nimport EQAResultReportConclusionDialog from \"./EQAResultReportConclusionDialog\";\nimport EQAResultReportDialog from \"./EQAResultReportDialog\";\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport { Helmet } from \"react-helmet\";\nimport { toast } from \"react-toastify\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { getCurrentUser, getListHealthOrgByUser } from \"../User/UserService\";\nimport { updateResultReportConclusionBySampleTube } from \"./EQAResultReportConclusionServices\";\nimport { getEQASampleTubeResultConclusionDtoByHealthOrgEQARoundId } from \"./EQAResultReportConclusionServices\";\nimport { getAllResultByHealthOrgEQARoundId, getResultReportById, getItemById } from \"../ResultsOfTheUnits/ResultsOfTheUnitsService\";\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n});\n\nvar EQARound = /*#__PURE__*/function (_React$Component) {\n  _inherits(EQARound, _React$Component);\n\n  var _super = _createSuper(EQARound);\n\n  function EQARound(props) {\n    var _this;\n\n    _classCallCheck(this, EQARound);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      sampleTubeResultConclusionList: [],\n      listEQARound: [],\n      currentRound: null,\n      healthOrgEQARoundList: [],\n      currentHealthOrgEQARound: null,\n      shouldOpenConfirmationDialog: false,\n      isFinalResult: false,\n      shouldOpenEQAResultReportDialog: false,\n      shouldEQAResultReportDialog: false,\n      listSample: [],\n      isCheckUpdate: false\n    };\n\n    _this.handleOpenConfirmationDialog = function () {\n      var t = _this.props.t;\n      var isCheckUpdate = _this.state.isCheckUpdate;\n\n      if (isCheckUpdate) {\n        toast.warning(t(\"EQAResultReportFastTest.warningEdit\"));\n        return;\n      } else {\n        if (_this.state.currentHealthOrgEQARound == null) {\n          toast.warning(t(\"EQAResultReportConclusion.select_health_org\"));\n          return;\n        }\n\n        if (_this.state.listSample.length == 0) {\n          toast.warning(t(\"EQAResultReportConclusion.no_data\"));\n          return;\n        }\n\n        if (_this.state.isManagementUnit && _this.state.isCheckManagementUnit || !_this.state.isRoleAdmin) {\n          _this.setState({\n            shouldOpenEQAResultReportDialog: true\n          });\n\n          return;\n        }\n\n        if (_this.state.isManagementUnit && !_this.state.isCheckManagementUnit || _this.state.isRoleAdmin) {\n          _this.setState({\n            shouldEQAResultReportDialog: true\n          });\n\n          return;\n        }\n      }\n    };\n\n    _this.handleDialogClose = function () {\n      _this.setState({\n        shouldOpenConfirmationDialog: false,\n        shouldOpenEQAResultReportDialog: false,\n        shouldEQAResultReportDialog: false\n      }, function () {\n        _this.handleSelectHealthOrg(_this.state.currentHealthOrgEQARound);\n      });\n    };\n\n    _this.handleSelectEQARound = function (value) {\n      if (value != null && value != \"\") {\n        if (_this.state.healthOrgId != null && _this.state.isManagementUnit) {\n          getHealthOrgEQARound(_this.state.healthOrgId, value.id).then(function (res) {\n            _this.setState({\n              currentHealthOrgEQARound: res.data\n            }, function () {\n              _this.handleSelectHealthOrg(_this.state.currentHealthOrgEQARound);\n            });\n          });\n          listHealthOrgEQARoundByEQARoundId(value.id).then(function (res) {\n            _this.setState({\n              // currentHealthOrgEQARound: null,\n              sampleTubeResultConclusionList: [],\n              currentRound: value,\n              healthOrgEQARoundList: res.data,\n              listSample: []\n            });\n          });\n        }\n\n        if (_this.state.isRoleAdmin && !_this.state.isManagementUnit) {\n          listHealthOrgEQARoundByEQARoundId(value.id).then(function (res) {\n            _this.setState({\n              currentHealthOrgEQARound: null,\n              sampleTubeResultConclusionList: [],\n              currentRound: value,\n              healthOrgEQARoundList: res.data,\n              listSample: []\n            });\n          });\n        }\n\n        if (!_this.state.isRoleAdmin && !_this.state.isManagementUnit) {\n          getListHealthOrgEQARoundByEQARoundIdAndUser(value.id).then(function (res) {\n            _this.setState({\n              currentHealthOrgEQARound: null,\n              sampleTubeResultConclusionList: [],\n              currentRound: value,\n              healthOrgEQARoundList: res.data,\n              listSample: [],\n              currentHealthOrgEQARound: res.data[0]\n            }, function () {\n              _this.handleSelectHealthOrg(_this.state.currentHealthOrgEQARound);\n            });\n          });\n        }\n      } else {\n        _this.setState({\n          currentRound: null,\n          currentHealthOrgEQARound: null,\n          healthOrgEQARoundList: [],\n          sampleTubeResultConclusionList: [],\n          listSample: []\n        });\n      }\n    };\n\n    _this.handleSelectHealthOrg = function (value) {\n      if (value != null && value != \"\") {\n        getEQASampleTubeResultConclusionDtoByHealthOrgEQARoundId(value.id).then(function (res) {\n          //      console.log(res.data);\n          _this.setState({\n            sampleTubeResultConclusionList: res.data,\n            currentHealthOrgEQARound: value\n          }, function () {\n            var currentHealthOrgEQARound = _this.state.currentHealthOrgEQARound;\n\n            if (currentHealthOrgEQARound && currentHealthOrgEQARound.id) {\n              getItemById(currentHealthOrgEQARound.id).then(function (data) {\n                if (data.data.healthOrg.isManagementUnit) {\n                  _this.setState({\n                    isCheckManagementUnit: true\n                  });\n                } // console.log(data.data)\n\n\n                _this.setState({\n                  healthOrgRound: data.data\n                }, function () {\n                  var _this2 = this;\n\n                  var _this$state = this.state,\n                      healthOrgRound = _this$state.healthOrgRound,\n                      details = _this$state.details;\n                  details = [];\n                  getAllResultByHealthOrgEQARoundId(healthOrgRound.id).then(function (result) {\n                    if (result.data === null || result.data.length === 0) {\n                      var listSample = _this2.state.listSample;\n                      listSample = [];\n\n                      _this2.setState({\n                        listSample\n                      });\n\n                      return;\n                    }\n\n                    if (result != null && result.data != null) {\n                      if (result.data != null && result.data.length > 0) {\n                        result.data.forEach(function (el) {\n                          if (el.typeMethod === 5) {\n                            if (el.isFinalResult) {\n                              _this2.setState({\n                                isCheckUpdate: true\n                              });\n                            } else {\n                              _this2.setState({\n                                isCheckUpdate: false\n                              });\n                            }\n                          } else {\n                            _this2.setState({\n                              isCheckUpdate: false\n                            });\n                          }\n                        });\n                        getCurrentUser().then(function (cur) {\n                          cur.data.roles.forEach(function (el) {\n                            if (el.name == \"ROLE_ADMIN\" || el.authority == \"ROLE_ADMIN\") {\n                              _this2.setState({\n                                isCheckUpdate: false\n                              });\n                            }\n                          });\n                        });\n                      }\n\n                      _this2.setState({\n                        listResult: result.data\n                      }, function () {\n                        var sampleSet = healthOrgRound.sampleSet,\n                            listSample = healthOrgRound.listSample;\n                        listSample = [];\n\n                        if (sampleSet != null && sampleSet.details != null && sampleSet.details.length > 0) {\n                          sampleSet.details.sort(function (a, b) {\n                            return a.orderNumber > b.orderNumber ? 1 : a.orderNumber === b.orderNumber ? a.sampleTube.code > b.sampleTube.code ? 1 : -1 : -1;\n                          });\n                          sampleSet.details.forEach(function (sampleSetDetail) {\n                            var eQASet = {};\n                            var hor = {};\n                            hor.tubeID = sampleSetDetail.sample.id;\n                            hor.tubeCode = sampleSetDetail.code;\n                            eQASet.id = sampleSetDetail.sample.id;\n                            eQASet.code = sampleSetDetail.code;\n                            listSample.push(eQASet);\n                          }); // console.log(listSample)\n\n                          this.setState({\n                            listSample: listSample\n                          });\n                        }\n                      });\n                    }\n                  });\n                });\n              });\n            }\n          });\n        });\n      } else {\n        _this.setState({\n          currentHealthOrgEQARound: null\n        });\n      }\n    };\n\n    _this.handleChangeResult = function (result, id) {\n      var sampleTubeResultConclusionList = _this.state.sampleTubeResultConclusionList;\n\n      var _iterator = _createForOfIteratorHelper(sampleTubeResultConclusionList),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var dto = _step.value;\n\n          if (dto.tubeID === id) {\n            dto.result = result;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      _this.setState({\n        sampleTubeResultConclusionList\n      });\n    };\n\n    _this.handleChangeNote = function (note, id) {\n      var sampleTubeResultConclusionList = _this.state.sampleTubeResultConclusionList;\n\n      var _iterator2 = _createForOfIteratorHelper(sampleTubeResultConclusionList),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var dto = _step2.value;\n\n          if (dto.tubeID === id) {\n            dto.note = note;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      _this.setState({\n        sampleTubeResultConclusionList\n      });\n    };\n\n    _this.handleConfirmUpdateResult = function () {\n      var t = _this.props.t;\n      var _this$state2 = _this.state,\n          sampleTubeResultConclusionList = _this$state2.sampleTubeResultConclusionList,\n          currentHealthOrgEQARound = _this$state2.currentHealthOrgEQARound;\n\n      if (sampleTubeResultConclusionList.length === 0) {\n        toast.warn(t(\"EQAResultReportConclusion.no_data\"));\n      } else {\n        updateResultReportConclusionBySampleTube(sampleTubeResultConclusionList, currentHealthOrgEQARound.id).then(function (res) {\n          toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\n        }).catch(function (err) {\n          toast.error(t(\"EQAResultReportConclusion.update_result_error\"));\n        });\n      }\n\n      _this.setState({\n        shouldOpenConfirmationDialog: false\n      });\n    };\n\n    _this.resultValue = function (rowDataID) {\n      var item = _this.state.sampleTubeResultConclusionList.find(function (dto) {\n        return dto.tubeID === rowDataID;\n      });\n\n      if (typeof item != \"undefined\") {\n        return item.result != null ? item.result : \"\";\n      }\n\n      return \"\";\n    };\n\n    _this.noteValue = function (rowDataID) {\n      var item = _this.state.sampleTubeResultConclusionList.find(function (dto) {\n        return dto.tubeID === rowDataID;\n      });\n\n      if (typeof item != \"undefined\") {\n        return item.note != null ? item.note : \"\";\n      }\n\n      return \"\";\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"isFinalResult\") {\n        _this.setState({\n          isFinalResult: event.target.checked\n        });\n      }\n    };\n\n    _this.handleOKEditClose = function () {\n      _this.setState({\n        shouldOpenEQAResultReportDialog: false,\n        shouldOpenConfirmationDialog: false,\n        shouldOpenConfirmationEditDialog: false,\n        shouldEQAResultReportDialog: false\n      }, function () {\n        _this.handleSelectHealthOrg(_this.state.currentHealthOrgEQARound);\n      }); // this.setPage(0);\n\n    };\n\n    return _this;\n  }\n\n  _createClass(EQARound, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this3 = this;\n\n      getCurrentUser().then(function (res) {\n        getListHealthOrgByUser(res.data.id).then(function (_ref) {\n          var data = _ref.data;\n          var checkManagementUnit = false;\n          var checkRoleAdmin = false;\n          data.forEach(function (item) {\n            if (item.isManagementUnit) {\n              checkManagementUnit = true;\n\n              _this3.setState({\n                healthOrgId: item ? item.id : null\n              });\n            }\n          });\n          res.data.roles.forEach(function (el) {\n            if (el.name == \"ROLE_ADMIN\" || el.authority == \"ROLE_ADMIN\") {\n              checkRoleAdmin = true;\n            }\n          });\n\n          if (checkRoleAdmin) {\n            _this3.setState({\n              isRoleAdmin: true,\n              isView: true\n            });\n          }\n\n          if (!checkRoleAdmin) {\n            _this3.setState({\n              isRoleAdmin: false,\n              isView: false\n            });\n          }\n\n          if (checkManagementUnit && checkRoleAdmin) {\n            _this3.setState({\n              isManagementUnit: true,\n              isRoleAdmin: true\n            });\n          }\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this4 = this;\n\n      var searchObject = {\n        pageIndex: 0,\n        pageSize: 1000000\n      };\n      getAllEQARound(searchObject).then(function (res) {\n        _this4.setState({\n          listEQARound: res.data.content\n        });\n      }, function () {});\n    }\n  }, {\n    key: \"renderRowHead\",\n    value: function renderRowHead() {\n      var _this5 = this;\n\n      var _this$props = this.props,\n          onSelectEvent = _this$props.onSelectEvent,\n          handleDelete = _this$props.handleDelete,\n          handleClick = _this$props.handleClick;\n      var listResult = this.state.listResult;\n      var titleCell = null;\n\n      if (listResult != null && listResult.length > 0) {\n        listResult.forEach(function (item) {\n          if (!titleCell) {\n            titleCell = /*#__PURE__*/React.createElement(TableCell, {\n              key: shortid.generate(),\n              className: \"px-0\",\n              align: \"left\",\n              __self: _this5,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 23\n              }\n            }, _this5.getTypeMethodName(item.typeMethod));\n          } else {\n            titleCell += /*#__PURE__*/React.createElement(TableCell, {\n              key: shortid.generate(),\n              className: \"px-0\",\n              align: \"left\",\n              __self: _this5,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 384,\n                columnNumber: 24\n              }\n            }, _this5.getTypeMethodName(item.typeMethod));\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 7\n        }\n      }, listResult.map(function (item, index) {\n        return _this5.renderColHeadFirst(item);\n      }));\n    }\n  }, {\n    key: \"getTypeMethodName\",\n    value: function getTypeMethodName(text, type) {\n      var t = this.props.t;\n\n      if (type == 1) {\n        return text;\n      } else if (type == 2) {\n        return text;\n      } else if (type == 3) {\n        return text;\n      } else if (type == 4) {\n        return text;\n      } else if (type == 5) {\n        return t('EQAResultReportConclusion.final_conclusion');\n      }\n    }\n  }, {\n    key: \"renderColHeadFirst\",\n    value: function renderColHeadFirst(item) {\n      if (item.reagent != null) {\n        item.title = this.getTypeMethodName(item.reagent.name, item.typeMethod);\n      } else {\n        item.title = this.getTypeMethodName(\"\", item.typeMethod);\n      } //item.title = this.getTypeMethodName(item.reagent.name,item.typeMethod);\n\n\n      return this.renderHeadCells(item);\n    }\n  }, {\n    key: \"renderHeadCells\",\n    value: function renderHeadCells(item) {\n      // console.log(item)\n      if (item == null) {\n        item = {};\n      } // if(item.)\n\n\n      var titleCell = /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff'\n        },\n        key: shortid.generate(),\n        className: \"px-0\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 21\n        }\n      }, item.title);\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 7\n        }\n      }, titleCell);\n    }\n  }, {\n    key: \"renderResultDetails\",\n    value: function renderResultDetails(sample, index) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 9\n        }\n      }, this.renderSample(sample, index)));\n    }\n  }, {\n    key: \"renderSample\",\n    value: function renderSample(item, index) {\n      var _this6 = this;\n\n      // console.log(item);\n      var sttCell = /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 19\n        }\n      }, index + 1);\n      var titleCell = /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 21\n        }\n      }, item ? item.code : '');\n      var listResult = this.state.listResult;\n      var cellContentByMethod = [];\n      listResult.forEach(function (result) {\n        var content = null;\n\n        if (result != null && result.details != null && result.details.length > 0 && item) {\n          result.details.forEach(function (resultDetail) {\n            if (resultDetail.sampleTube != null && resultDetail.sampleTube.eqaSample != null && item.id == resultDetail.sampleTube.eqaSample.id) {\n              content = resultDetail;\n            }\n          });\n        }\n\n        cellContentByMethod.push(content);\n      });\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 7\n        }\n      }, sttCell, titleCell, cellContentByMethod.map(function (cell, index) {\n        return _this6.renderCells(cell);\n      }));\n    }\n  }, {\n    key: \"renderCells\",\n    value: function renderCells(item) {\n      var _this$props2 = this.props,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n;\n\n      if (item == null) {\n        item = {};\n      }\n\n      var contentCell = /*#__PURE__*/React.createElement(TableCell, {\n        key: shortid.generate(),\n        className: \"px-0\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 23\n        }\n      }, item.result == 1 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-primary text-white px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 11\n        }\n      }, t('result.positive')) : /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-light-gray px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 13\n        }\n      }, item.result == -2 ? t('result.none') : item.result == -1 ? t('result.negative') : item.result == 0 ? t('result.indertermine') : item.result == 2 ? t('EQAResultReportElisa.Result.confirms') : ''));\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 7\n        }\n      }, contentCell);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this7 = this;\n\n      var _this$props3 = this.props,\n          t = _this$props3.t,\n          i18n = _this$props3.i18n;\n      var _this$state3 = this.state,\n          listEQARound = _this$state3.listEQARound,\n          currentRound = _this$state3.currentRound,\n          sampleTubeResultConclusionList = _this$state3.sampleTubeResultConclusionList,\n          healthOrgEQARoundList = _this$state3.healthOrgEQARoundList,\n          currentHealthOrgEQARound = _this$state3.currentHealthOrgEQARound,\n          shouldOpenConfirmationDialog = _this$state3.shouldOpenConfirmationDialog,\n          isFinalResult = _this$state3.isFinalResult,\n          listSample = _this$state3.listSample,\n          listResult = _this$state3.listResult;\n      var columns = [{\n        title: t(\"SampleManagement.tube_code\"),\n        field: \"tubeCode\",\n        width: \"150\"\n      }, {\n        title: t(\"ReportResult.result\"),\n        field: \"result\",\n        align: \"left\",\n        width: \"150\",\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(FormControl, {\n            className: \"w-100\",\n            disabled: true,\n            __self: _this7,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(Select, {\n            native: true,\n            value: _this7.resultValue(rowData.tubeID),\n            onChange: function onChange(event) {\n              return _this7.handleChangeResult(event.target.value, rowData.tubeID);\n            },\n            inputProps: {\n              name: \"result\"\n            },\n            __self: _this7,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"option\", {\n            value: -2,\n            __self: _this7,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 15\n            }\n          }, t(\"result.none\")), /*#__PURE__*/React.createElement(\"option\", {\n            value: -1,\n            __self: _this7,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 15\n            }\n          }, t(\"result.negative\")), /*#__PURE__*/React.createElement(\"option\", {\n            value: 0,\n            __self: _this7,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 15\n            }\n          }, t(\"result.indertermine\")), /*#__PURE__*/React.createElement(\"option\", {\n            value: 1,\n            __self: _this7,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 15\n            }\n          }, t(\"result.positive\"))));\n        }\n      } // {\n      //   title: t(\"EQAResultReportConclusion.note\"),\n      //   field: \"note\",\n      //   align: \"left\",\n      //   width: \"450\",\n      //   render: rowData => {\n      //     return (\n      //       <TextField\n      //         style={{ width: \"50%\" }}\n      //         label={t(\"EQAResultReportConclusion.note\")}\n      //         variant=\"outlined\"\n      //         value={this.noteValue(rowData.tubeID)}\n      //         onChange={event =>\n      //           this.handleChangeNote(event.target.value, rowData.tubeID)\n      //         }\n      //       />\n      //     );\n      //   }\n      // }\n      ];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"m-sm-30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mb-sm-30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Helmet, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"title\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 13\n        }\n      }, t(\"EQAResultReportConclusion.title2\"), \" | \", t(\"web_site\"))), /*#__PURE__*/React.createElement(Breadcrumb, {\n        routeSegments: [{\n          name: t(\"EQAResultReportConclusion.title2\")\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 11\n        }\n      })), this.state.shouldOpenEQAResultReportDialog && /*#__PURE__*/React.createElement(EQAResultReportConclusionDialog, {\n        t: t,\n        i18n: i18n,\n        handleClose: this.handleDialogClose,\n        open: this.state.shouldOpenEQAResultReportDialog,\n        handleOKEditClose: this.handleOKEditClose,\n        sampleTubeResultConclusionList: this.state.sampleTubeResultConclusionList,\n        currentHealthOrgEQARound: this.state.currentHealthOrgEQARound,\n        currentHealthOrg: this.state.currentHealthOrgEQARound.healthOrg,\n        item: this.state.item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 17\n        }\n      }), this.state.shouldEQAResultReportDialog && /*#__PURE__*/React.createElement(EQAResultReportDialog, {\n        t: t,\n        i18n: i18n,\n        handleClose: this.handleDialogClose,\n        open: this.state.shouldEQAResultReportDialog,\n        handleOKEditClose: this.handleOKEditClose,\n        sampleTubeResultConclusionList: this.state.sampleTubeResultConclusionList,\n        currentHealthOrgEQARound: this.state.currentHealthOrgEQARound,\n        currentHealthOrg: this.state.currentHealthOrgEQARound.healthOrg,\n        item: this.state.item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Autocomplete, {\n        size: \"small\",\n        id: \"combo-box\",\n        options: listEQARound,\n        className: \"flex-end\",\n        getOptionLabel: function getOptionLabel(option) {\n          return option.code != null && typeof option.code != \"undefined\" ? option.code : \"\";\n        },\n        onChange: function onChange(event, newValue) {\n          return _this7.handleSelectEQARound(newValue);\n        },\n        value: currentRound,\n        renderInput: function renderInput(params) {\n          return /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n            label: t(\"EQAResultReportConclusion.select_eqa_round\"),\n            variant: \"outlined\",\n            __self: _this7,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 645,\n              columnNumber: 17\n            }\n          }));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Autocomplete, {\n        size: \"small\",\n        id: \"combo-box-2\",\n        options: healthOrgEQARoundList,\n        className: \"flex-end\",\n        disableClearable: true,\n        getOptionLabel: function getOptionLabel(option) {\n          var _option$healthOrg, _option$healthOrg2, _option$healthOrg3;\n\n          return ((_option$healthOrg = option.healthOrg) === null || _option$healthOrg === void 0 ? void 0 : _option$healthOrg.name) != null && typeof ((_option$healthOrg2 = option.healthOrg) === null || _option$healthOrg2 === void 0 ? void 0 : _option$healthOrg2.name) != \"undefined\" ? (_option$healthOrg3 = option.healthOrg) === null || _option$healthOrg3 === void 0 ? void 0 : _option$healthOrg3.name : \"\";\n        },\n        onChange: function onChange(event, newValue) {\n          return _this7.handleSelectHealthOrg(newValue);\n        },\n        onOpen: function onOpen() {\n          if (currentRound == null || currentRound == \"\") {\n            toast.warn(t(\"EQAResultReportConclusion.select_eqa_round_first_warning\"));\n          } else if (healthOrgEQARoundList.length === 0) {\n            toast.warn(t(\"EQAResultReportConclusion.no_health_org_available\"));\n          }\n        },\n        value: currentHealthOrgEQARound,\n        renderInput: function renderInput(params) {\n          return /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n            label: t(\"EQAResultReportConclusion.select_health_org\"),\n            variant: \"outlined\",\n            __self: _this7,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 684,\n              columnNumber: 17\n            }\n          }));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: this.handleOpenConfirmationDialog,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 13\n        }\n      }, t(\"EQAResultReportConclusion.update_result\"))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 11\n        }\n      }, this.state.listSample.length == 0 && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 50\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 13\n        }\n      }, t(\"EQAResultReportConclusion.no_data\"))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 11\n        }\n      }, this.state.listSample && this.state.listSample.length != 0 && /*#__PURE__*/React.createElement(Paper, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(TableContainer, {\n        style: {\n          maxHeight: 1000\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TableHead, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff'\n        },\n        rowSpan: 2,\n        width: \"50px\",\n        align: \"center\",\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 29\n        }\n      }, t('ResultsOfTheUnits.STT')), /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff'\n        },\n        rowSpan: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 29\n        }\n      }, t('ResultsOfTheUnits.set')), listResult && this.renderRowHead())), /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 25\n        }\n      }, listSample && listSample.map(function (sample, index) {\n        return _this7.renderResultDetails(sample, index);\n      }))))))), /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        title: t(\"confirm\"),\n        open: shouldOpenConfirmationDialog,\n        onConfirmDialogClose: this.handleDialogClose,\n        onYesClick: this.handleConfirmUpdateResult,\n        text: t(\"EQAResultReportConclusion.confirm_update_result\"),\n        Yes: t(\"general.Yes\"),\n        No: t(\"general.No\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return EQARound;\n}(React.Component);\n\nexport default EQARound;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/EQAResultReportConclusion/EQAResultReportConclusionTable.jsx"],"names":["InputAdornment","Input","Grid","Button","Select","TextField","Table","TableHead","TableRow","FormControlLabel","Paper","TableContainer","Checkbox","TableCell","FormControl","TableBody","shortid","createMuiTheme","React","Component","ReactDOM","MaterialTable","MTableToolbar","useTranslation","withTranslation","Trans","searchByPage","getAllEQARound","getListHealthOrgEQARoundByEQARoundIdAndUser","listHealthOrgEQARoundByEQARoundId","getHealthOrgEQARound","EQAResultReportConclusionDialog","EQAResultReportDialog","Breadcrumb","ConfirmationDialog","Helmet","toast","Autocomplete","getCurrentUser","getListHealthOrgByUser","updateResultReportConclusionBySampleTube","getEQASampleTubeResultConclusionDtoByHealthOrgEQARoundId","getAllResultByHealthOrgEQARoundId","getResultReportById","getItemById","configure","autoClose","draggable","limit","EQARound","props","state","sampleTubeResultConclusionList","listEQARound","currentRound","healthOrgEQARoundList","currentHealthOrgEQARound","shouldOpenConfirmationDialog","isFinalResult","shouldOpenEQAResultReportDialog","shouldEQAResultReportDialog","listSample","isCheckUpdate","handleOpenConfirmationDialog","t","warning","length","isManagementUnit","isCheckManagementUnit","isRoleAdmin","setState","handleDialogClose","handleSelectHealthOrg","handleSelectEQARound","value","healthOrgId","id","then","res","data","healthOrg","healthOrgRound","details","result","forEach","el","typeMethod","cur","roles","name","authority","listResult","sampleSet","sort","a","b","orderNumber","sampleTube","code","sampleSetDetail","eQASet","hor","tubeID","sample","tubeCode","push","handleChangeResult","dto","handleChangeNote","note","handleConfirmUpdateResult","warn","success","catch","err","error","resultValue","rowDataID","item","find","noteValue","handleChange","event","source","persist","isActive","target","checked","handleOKEditClose","shouldOpenConfirmationEditDialog","checkManagementUnit","checkRoleAdmin","isView","searchObject","pageIndex","pageSize","content","onSelectEvent","handleDelete","handleClick","titleCell","generate","getTypeMethodName","map","index","renderColHeadFirst","text","type","reagent","title","renderHeadCells","backgroundColor","color","renderSample","sttCell","cellContentByMethod","resultDetail","eqaSample","cell","renderCells","i18n","contentCell","columns","field","width","align","render","rowData","option","newValue","params","maxHeight","renderRowHead","renderResultDetails"],"mappings":"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","sourcesContent":["import {\n  InputAdornment,\n  Input,\n  Grid,\n  Button,\n  Select,\n  TextField,Table,TableHead,TableRow,\n  FormControlLabel,Paper,TableContainer,\n  Checkbox,TableCell ,FormControl,TableBody\n} from \"@material-ui/core\";\nimport shortid from \"shortid\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\nimport { searchByPage as getAllEQARound } from \"../EQARound/EQARoundService\";\nimport { getListHealthOrgEQARoundByEQARoundIdAndUser,listHealthOrgEQARoundByEQARoundId,getHealthOrgEQARound } from \"./EQAResultReportConclusionServices\";\nimport EQAResultReportConclusionDialog from \"./EQAResultReportConclusionDialog\"\nimport EQAResultReportDialog from \"./EQAResultReportDialog\"\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport { Helmet } from \"react-helmet\";\nimport { toast } from \"react-toastify\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport {getCurrentUser,getListHealthOrgByUser} from \"../User/UserService\"\nimport { updateResultReportConclusionBySampleTube } from \"./EQAResultReportConclusionServices\";\nimport { getEQASampleTubeResultConclusionDtoByHealthOrgEQARoundId } from \"./EQAResultReportConclusionServices\";\nimport { getAllResultByHealthOrgEQARoundId, getResultReportById,getItemById } from \"../ResultsOfTheUnits/ResultsOfTheUnitsService\";\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit:3\n});\nclass EQARound extends React.Component {\n  state = {\n    sampleTubeResultConclusionList: [],\n    listEQARound: [],\n    currentRound: null,\n    healthOrgEQARoundList: [],\n    currentHealthOrgEQARound: null,\n    shouldOpenConfirmationDialog: false,\n    isFinalResult:false,\n    shouldOpenEQAResultReportDialog:false,\n    shouldEQAResultReportDialog:false,\n    listSample : [],\n    isCheckUpdate:false,\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentWillMount (){\n    getCurrentUser().then(res=>{\n      getListHealthOrgByUser(res.data.id).then(({data})=>{\n        let checkManagementUnit = false\n        let checkRoleAdmin = false\n        data.forEach(item =>{\n          if(item.isManagementUnit){\n            checkManagementUnit = true\n            this.setState({healthOrgId:item ? item.id :null})\n          }\n        })\n        res.data.roles.forEach(el =>{\n          if(el.name == \"ROLE_ADMIN\" || el.authority == \"ROLE_ADMIN\"){\n            checkRoleAdmin = true\n          }\n        })\n        if(checkRoleAdmin){\n          this.setState({isRoleAdmin:true,isView: true})\n        }\n        if(!checkRoleAdmin){\n          this.setState({isRoleAdmin:false,isView: false})\n        }\n        if(checkManagementUnit && checkRoleAdmin){\n          this.setState({isManagementUnit:true,isRoleAdmin:true})\n        }\n\n      })\n    })\n  }\n  componentDidMount() {\n    const searchObject = { pageIndex: 0, pageSize: 1000000 };\n    getAllEQARound(searchObject).then(res => {\n      this.setState({ listEQARound: res.data.content });\n    },()=>{\n      \n    });\n  }\n\n  handleOpenConfirmationDialog = () => {\n    const { t } = this.props;\n    let { isCheckUpdate } = this.state;\n   \n    if(isCheckUpdate){\n      toast.warning(t(\"EQAResultReportFastTest.warningEdit\"));\n      return\n    }else{\n    if(this.state.currentHealthOrgEQARound == null){\n      toast.warning(t(\"EQAResultReportConclusion.select_health_org\"));\n        return\n    }\n    \n    if(this.state.listSample.length == 0){\n      toast.warning(t(\"EQAResultReportConclusion.no_data\"));\n      return\n    }\n    if((this.state.isManagementUnit && this.state.isCheckManagementUnit) || !this.state.isRoleAdmin){\n      this.setState({\n        shouldOpenEQAResultReportDialog: true\n      });\n      return\n    }\n\n    if((this.state.isManagementUnit && !this.state.isCheckManagementUnit) || this.state.isRoleAdmin){\n      this.setState({\n        shouldEQAResultReportDialog: true\n      });\n      return\n    }\n    \n  }\n  };\n\n  handleDialogClose = () => {\n    this.setState({\n      shouldOpenConfirmationDialog: false,\n      shouldOpenEQAResultReportDialog:false,\n      shouldEQAResultReportDialog:false,\n    },()=>{\n      this.handleSelectHealthOrg(this.state.currentHealthOrgEQARound)\n    });\n  };\n\n  handleSelectEQARound = value => {\n    if (value != null && value != \"\") {\n      if(this.state.healthOrgId != null && this.state.isManagementUnit){\n        getHealthOrgEQARound(this.state.healthOrgId,value.id).then(res=>{\n          this.setState({currentHealthOrgEQARound:res.data},()=>{\n            this.handleSelectHealthOrg(this.state.currentHealthOrgEQARound)\n          })\n        })\n        listHealthOrgEQARoundByEQARoundId(value.id).then(res => {\n          this.setState({\n            // currentHealthOrgEQARound: null,\n            sampleTubeResultConclusionList: [],\n            currentRound: value,\n            healthOrgEQARoundList: res.data,\n            listSample: []\n          });\n        });\n      }\n      if(this.state.isRoleAdmin && !this.state.isManagementUnit){\n        listHealthOrgEQARoundByEQARoundId(value.id).then(res => {\n          this.setState({\n            currentHealthOrgEQARound: null,\n            sampleTubeResultConclusionList: [],\n            currentRound: value,\n            healthOrgEQARoundList: res.data,\n            listSample: []\n          });\n        });\n      }\n      \n      if(!this.state.isRoleAdmin && !this.state.isManagementUnit){\n        getListHealthOrgEQARoundByEQARoundIdAndUser(value.id).then(res => {\n          this.setState({\n            currentHealthOrgEQARound: null,\n            sampleTubeResultConclusionList: [],\n            currentRound: value,\n            healthOrgEQARoundList: res.data,\n            listSample: [],\n            currentHealthOrgEQARound:res.data[0]\n          },()=>{\n            this.handleSelectHealthOrg(this.state.currentHealthOrgEQARound)\n          });\n        });\n      }\n      \n    } else {\n      this.setState({\n        currentRound: null,\n        currentHealthOrgEQARound: null,\n        healthOrgEQARoundList: [],\n        sampleTubeResultConclusionList: [],\n        listSample: []\n        \n      });\n    }\n  };\n\n  handleSelectHealthOrg = value => {\n    if (value != null && value != \"\") {\n      getEQASampleTubeResultConclusionDtoByHealthOrgEQARoundId(value.id).then(\n        res => {\n    //      console.log(res.data);\n          this.setState({\n            sampleTubeResultConclusionList: res.data,\n            currentHealthOrgEQARound: value,\n            \n          },()=>{\n            let {currentHealthOrgEQARound} = this.state\n            if (currentHealthOrgEQARound && currentHealthOrgEQARound.id) {\n              getItemById(currentHealthOrgEQARound.id).then((data) => {\n                if(data.data.healthOrg.isManagementUnit ){\n                  this.setState({isCheckManagementUnit:true})\n                }\n                // console.log(data.data)\n                this.setState({ healthOrgRound:data.data }, function () {\n                  let { healthOrgRound, details } = this.state;\n                  details = [];\n                  getAllResultByHealthOrgEQARoundId(healthOrgRound.id).then((result) => {\n                    if(result.data === null || result.data.length ===0){\n                      let {listSample } = this.state;\n                      listSample = []\n                      this.setState({listSample})\n                      return\n                    }\n                    if (result != null && result.data != null) {\n                          if(result.data != null && result.data.length >0){\n                            result.data.forEach(el =>{\n                            if(el.typeMethod === 5){\n                              if(el.isFinalResult){\n                                this.setState({isCheckUpdate:true})\n                              }else{\n                                this.setState({isCheckUpdate:false})\n                              }\n                            }else{\n                              this.setState({isCheckUpdate:false})\n                            }\n                          });\n                          getCurrentUser().then(cur =>{\n                            cur.data.roles.forEach(el =>{\n                              if(el.name == \"ROLE_ADMIN\" || el.authority == \"ROLE_ADMIN\"){\n                                this.setState({isCheckUpdate : false});\n                              }\n                            })\n                          });\n                        }\n                        this.setState({\n                          listResult: result.data\n                        }, function () {\n                          let { sampleSet, listSample } = healthOrgRound;\n                          listSample = [];\n                          if (sampleSet != null && sampleSet.details != null && sampleSet.details.length > 0) {\n                            sampleSet.details.sort((a, b) => (a.orderNumber > b.orderNumber) ? 1 : (a.orderNumber === b.orderNumber) ? ((a.sampleTube.code > b.sampleTube.code) ? 1 : -1) : -1);\n                            sampleSet.details.forEach(sampleSetDetail => {\n                              let eQASet = {};\n                              let hor ={}\n                              hor.tubeID = sampleSetDetail.sample.id;\n                              hor.tubeCode = sampleSetDetail.code\n                              eQASet.id = sampleSetDetail.sample.id;\n                              eQASet.code = sampleSetDetail.code;\n                              listSample.push(eQASet);\n                            });\n                           // console.log(listSample)\n                            this.setState({\n                              listSample: listSample\n                            });\n                          }\n                        });\n                      }\n                        });\n                });\n            });\n                \n              }\n          });\n        }\n      );\n    } else {\n      this.setState({\n        currentHealthOrgEQARound: null\n      });\n    }\n  };\n\n  handleChangeResult = (result, id) => {\n    let { sampleTubeResultConclusionList } = this.state;\n    for (let dto of sampleTubeResultConclusionList) {\n      if (dto.tubeID === id) {\n        dto.result = result;\n      }\n    }\n    this.setState({\n      sampleTubeResultConclusionList\n    });\n  };\n\n  handleChangeNote = (note, id) => {\n    let { sampleTubeResultConclusionList } = this.state;\n    for (let dto of sampleTubeResultConclusionList) {\n      if (dto.tubeID === id) {\n        dto.note = note;\n      }\n    }\n    this.setState({\n      sampleTubeResultConclusionList\n    });\n  };\n\n  handleConfirmUpdateResult = () => {\n    const { t } = this.props;\n    const {\n      sampleTubeResultConclusionList,\n      currentHealthOrgEQARound\n    } = this.state;\n\n    if (sampleTubeResultConclusionList.length === 0) {\n      toast.warn(t(\"EQAResultReportConclusion.no_data\"));\n    } else {\n      updateResultReportConclusionBySampleTube(\n        sampleTubeResultConclusionList,\n        currentHealthOrgEQARound.id\n      )\n        .then(res => {\n          toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\n        })\n        .catch(err => {\n          toast.error(t(\"EQAResultReportConclusion.update_result_error\"));\n        });\n    }\n    this.setState({\n      shouldOpenConfirmationDialog: false\n    });\n  };\n\n  resultValue = rowDataID => {\n    const item = this.state.sampleTubeResultConclusionList.find(\n      dto => dto.tubeID === rowDataID\n    );\n    if (typeof item != \"undefined\") {\n      return item.result != null ? item.result : \"\";\n    }\n    return \"\";\n  };\n\n  noteValue = rowDataID => {\n    const item = this.state.sampleTubeResultConclusionList.find(\n      dto => dto.tubeID === rowDataID\n    );\n    if (typeof item != \"undefined\") {\n      return item.note != null ? item.note : \"\";\n    }\n    return \"\";\n  };\n \n  handleChange = (event, source) => {\n    event.persist();\n    if (source === \"switch\") {\n      this.setState({ isActive: event.target.checked });\n      return;\n    }\n    if(source === \"isFinalResult\"){\n      this.setState({isFinalResult:event.target.checked})\n    }\n\n  };\n\n  handleOKEditClose = () => {\n    this.setState({\n      shouldOpenEQAResultReportDialog: false,\n      shouldOpenConfirmationDialog: false,\n      shouldOpenConfirmationEditDialog:false,\n      shouldEQAResultReportDialog:false,\n    },()=>{\n      this.handleSelectHealthOrg(this.state.currentHealthOrgEQARound)\n    });\n    // this.setPage(0);\n  };\n\n  renderRowHead() {\n    let { onSelectEvent, handleDelete, handleClick } = this.props;\n    let { listResult } = this.state;\n    let titleCell = null;\n    if (listResult != null && listResult.length > 0) {\n      listResult.forEach(item => {\n        if (!titleCell) {\n          titleCell = <TableCell key={shortid.generate()} className=\"px-0\" align=\"left\">\n            {this.getTypeMethodName(item.typeMethod)}\n          </TableCell>\n        } else {\n          titleCell += <TableCell key={shortid.generate()} className=\"px-0\" align=\"left\">\n            {this.getTypeMethodName(item.typeMethod)}\n          </TableCell>\n        }\n      });\n    }\n\n    return (\n      <React.Fragment>\n        {listResult.map((item, index) => this.renderColHeadFirst(item))}\n      </React.Fragment>\n    )\n  }\n  getTypeMethodName(text,type) {\n    let { t } = this.props;\n    if (type == 1) {\n      return text;\n    } else if (type == 2) {\n      return text;\n    } else if (type == 3) {\n      return text;\n    } else if (type == 4) {\n      return text;\n    } else if (type == 5) {\n      return t('EQAResultReportConclusion.final_conclusion');\n    }\n  }\n  renderColHeadFirst(item) {\n    if(item.reagent != null){\n      item.title = this.getTypeMethodName(item.reagent.name,item.typeMethod);\n    }else{\n      item.title = this.getTypeMethodName(\"\",item.typeMethod);\n    }\n    //item.title = this.getTypeMethodName(item.reagent.name,item.typeMethod);\n    return (\n      this.renderHeadCells(item)\n    )\n  }\n  renderHeadCells(item) {\n    // console.log(item)\n    if (item == null) {\n      item = {};\n    }\n    // if(item.)\n    let titleCell = <TableCell style ={{backgroundColor: '#358600',\n    color:'#fff',}}\n     key={shortid.generate()} \n     className=\"px-0\" align=\"left\" >\n      {item.title}\n    </TableCell>\n    return (\n      <React.Fragment>\n        {titleCell}\n      </React.Fragment>\n    )\n  }\n  renderResultDetails(sample, index) {\n    return (\n      <React.Fragment>\n        <TableRow>\n          {this.renderSample(sample, index)}\n        </TableRow>\n      </React.Fragment>\n    )\n  }\n  renderSample(item, index) {\n    // console.log(item);\n\n    let sttCell = <TableCell className=\"px-0\" align=\"center\">\n      {index + 1}\n    </TableCell>\n    let titleCell = <TableCell className=\"px-0\" align=\"left\">\n      { item ? item.code : ''}\n    </TableCell>\n\n    let { listResult } = this.state;\n    let cellContentByMethod = [];\n    listResult.forEach(result => {\n      let content = null;\n      if (result != null && result.details != null && result.details.length > 0 && item) {\n        result.details.forEach(resultDetail => {\n          if (resultDetail.sampleTube != null && resultDetail.sampleTube.eqaSample != null\n            && item.id == resultDetail.sampleTube.eqaSample.id) {\n            content = resultDetail;\n          }\n        });\n      }\n      cellContentByMethod.push(content);\n    });\n\n    return (\n      <React.Fragment>\n        {sttCell}\n        {titleCell}\n        {cellContentByMethod.map((cell, index) => this.renderCells(cell))}\n      </React.Fragment>\n    )\n  }\n\n  renderCells(item) {\n    let { t, i18n } = this.props;\n    if (item == null) {\n      item = {};\n    }\n    let contentCell = <TableCell key={shortid.generate()} className=\"px-0\" align=\"left\">\n      {\n        item.result == 1 ? (\n          <small className=\"border-radius-4 bg-primary text-white px-8 py-2 \">\n            \n              {t('result.positive')}\n            \n          </small>\n        ) : (\n            <small className=\"border-radius-4 bg-light-gray px-8 py-2 \">\n                {\n                  item.result == -2 ? (\n                    t('result.none')\n                  ) : (\n                      item.result == -1 ? (\n                        t('result.negative')\n                      ) : (\n                          item.result == 0 ? (\n                            t('result.indertermine')\n                          ) : (item.result == 2 ? (\n                            t('EQAResultReportElisa.Result.confirms')\n                          ):(\n                              ''\n                            ))\n                        )\n                    )\n                }\n            </small>\n          )\n      }\n    </TableCell>\n    return (\n      <React.Fragment>\n        {contentCell}\n      </React.Fragment>\n    )\n  }\n\n  render() {\n    const { t, i18n } = this.props;\n\n    const {\n      listEQARound,\n      currentRound,\n      sampleTubeResultConclusionList,\n      healthOrgEQARoundList,\n      currentHealthOrgEQARound,\n      shouldOpenConfirmationDialog,\n      isFinalResult,listSample,listResult\n    } = this.state;\n\n    let columns = [\n      {\n        title: t(\"SampleManagement.tube_code\"),\n        field: \"tubeCode\",\n        width: \"150\"\n      },\n      {\n        title: t(\"ReportResult.result\"),\n        field: \"result\",\n        align: \"left\",\n        width: \"150\",\n        render: rowData => {\n          return (\n            <FormControl className=\"w-100\" disabled={true}>\n            <Select\n              native\n              value={this.resultValue(rowData.tubeID)}\n              onChange={event =>\n                this.handleChangeResult(event.target.value, rowData.tubeID)\n              }\n              inputProps={{\n                name: \"result\"\n              }}\n            >\n              {/* <option value={\"\"}>{t(\"ReportResult.select_result\")}</option> */}\n              <option value={-2}>{t(\"result.none\")}</option>\n              <option value={-1}>{t(\"result.negative\")}</option>\n              <option value={0}>{t(\"result.indertermine\")}</option>\n              <option value={1}>{t(\"result.positive\")}</option>\n            </Select>\n            </FormControl>\n          );\n        }\n      },\n      // {\n      //   title: t(\"EQAResultReportConclusion.note\"),\n      //   field: \"note\",\n      //   align: \"left\",\n      //   width: \"450\",\n      //   render: rowData => {\n      //     return (\n      //       <TextField\n      //         style={{ width: \"50%\" }}\n      //         label={t(\"EQAResultReportConclusion.note\")}\n      //         variant=\"outlined\"\n      //         value={this.noteValue(rowData.tubeID)}\n      //         onChange={event =>\n      //           this.handleChangeNote(event.target.value, rowData.tubeID)\n      //         }\n      //       />\n      //     );\n      //   }\n      // }\n    ];\n\n    return (\n      <div className=\"m-sm-30\">\n        <div className=\"mb-sm-30\">\n          <Helmet>\n            <title>\n              {t(\"EQAResultReportConclusion.title2\")} | {t(\"web_site\")}\n            </title>\n          </Helmet>\n          <Breadcrumb\n            routeSegments={[{ name: t(\"EQAResultReportConclusion.title2\") }]}\n          />\n        </div>\n        {this.state.shouldOpenEQAResultReportDialog && (\n                <EQAResultReportConclusionDialog t={t} i18n={i18n}\n                  handleClose={this.handleDialogClose}\n                  open={this.state.shouldOpenEQAResultReportDialog}\n                  handleOKEditClose={this.handleOKEditClose}\n                  sampleTubeResultConclusionList ={this.state.sampleTubeResultConclusionList}\n                  currentHealthOrgEQARound ={this.state.currentHealthOrgEQARound}\n                  currentHealthOrg = {this.state.currentHealthOrgEQARound.healthOrg}\n                  item={this.state.item}\n                />\n              )}\n              {this.state.shouldEQAResultReportDialog && (\n                <EQAResultReportDialog t={t} i18n={i18n}\n                  handleClose={this.handleDialogClose}\n                  open={this.state.shouldEQAResultReportDialog}\n                  handleOKEditClose={this.handleOKEditClose}\n                  sampleTubeResultConclusionList ={this.state.sampleTubeResultConclusionList}\n                  currentHealthOrgEQARound ={this.state.currentHealthOrgEQARound}\n                  currentHealthOrg = {this.state.currentHealthOrgEQARound.healthOrg}\n                  item={this.state.item}\n                />\n              )}\n        <Grid container spacing={3}>\n          <Grid item lg={4} md={4} sm={12} xs={12}>\n            <Autocomplete\n              size=\"small\"\n              id=\"combo-box\"\n              options={listEQARound}\n              className=\"flex-end\"\n              getOptionLabel={option =>\n                option.code != null && typeof option.code != \"undefined\"\n                  ? option.code\n                  : \"\"\n              }\n              onChange={(event, newValue) =>\n                this.handleSelectEQARound(newValue)\n              }\n              value={currentRound}\n              renderInput={params => (\n                <TextField\n                  {...params}\n                  label={t(\"EQAResultReportConclusion.select_eqa_round\")}\n                  variant=\"outlined\"\n                />\n              )}\n            />\n          </Grid>\n          <Grid item lg={4} md={4} sm={12} xs={12}>\n            <Autocomplete\n              size=\"small\"\n              id=\"combo-box-2\"\n              options={healthOrgEQARoundList}\n              className=\"flex-end\"\n              disableClearable\n              getOptionLabel={option =>\n                option.healthOrg?.name != null &&\n                typeof option.healthOrg?.name != \"undefined\"\n                  ? option.healthOrg?.name\n                  : \"\"\n              }\n              onChange={(event, newValue) =>\n                this.handleSelectHealthOrg(newValue)\n              }\n              onOpen={() => {\n                if (currentRound == null || currentRound == \"\") {\n                  toast.warn(\n                    t(\n                      \"EQAResultReportConclusion.select_eqa_round_first_warning\"\n                    )\n                  );\n                } else if (healthOrgEQARoundList.length === 0) {\n                  toast.warn(\n                    t(\"EQAResultReportConclusion.no_health_org_available\")\n                  );\n                }\n              }}\n              value={currentHealthOrgEQARound}\n              renderInput={params => (\n                <TextField\n                  {...params}\n                  label={t(\"EQAResultReportConclusion.select_health_org\")}\n                  variant=\"outlined\"\n                />\n              )}\n            />\n          </Grid>\n          <Grid item lg={4} md={4} sm={12} xs={12}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.handleOpenConfirmationDialog}\n            >\n              {t(\"EQAResultReportConclusion.update_result\")}\n            </Button>\n          </Grid>\n          \n          \n          <Grid item xs={12}>\n          {this.state.listSample.length == 0 && (<div>\n            <h3>{t(\"EQAResultReportConclusion.no_data\")}</h3>\n          </div>)}\n          <div>\n          {(this.state.listSample && this.state.listSample.length != 0) && (<Paper>\n                    <TableContainer style={{ maxHeight: 1000 }}>\n                      <Table stickyHeader aria-label=\"sticky table\">\n                        <TableHead style ={{backgroundColor: '#358600',\n                            color:'#fff',}}>\n                  \n                            {/* <TableRow>\n                            <TableCell \n                            style ={{backgroundColor: '#358600',\n                              color:'#fff',}}\n                              rowSpan={2} width=\"50px\" align=\"center\" className=\"p-0\">{t('ResultsOfTheUnits.STT')}</TableCell>\n                            <TableCell style ={{backgroundColor: '#358600',\n                                color:'#fff',}} \n                              rowSpan={2}>{t('ResultsOfTheUnits.set')}</TableCell>\n                              <TableCell style ={{backgroundColor: '#358600',\n                                color:'#fff',textAlign:\"center\",textTransform:\"uppercase\"}} \n                                colSpan={listResult.length}>{t('EqaResult.reagentName')}</TableCell>\n                          </TableRow> */}\n                          <TableRow>\n                            <TableCell \n                            style ={{backgroundColor: '#358600',\n                              color:'#fff',}}\n                              rowSpan={2} width=\"50px\" align=\"center\" className=\"p-0\">{t('ResultsOfTheUnits.STT')}</TableCell>\n                            <TableCell style ={{backgroundColor: '#358600',\n                                color:'#fff',}} \n                              rowSpan={2}>{t('ResultsOfTheUnits.set')}</TableCell>\n                            {\n                              (listResult && this.renderRowHead())\n                            }\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {\n                            (listSample && listSample.map((sample, index) => this.renderResultDetails(sample, index)))\n                          }\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                  </Paper>)}\n                </div>\n          \n            {/* <MaterialTable\n              title={t(\"EQAResultReportConclusion.title\")}\n              data={sampleTubeResultConclusionList}\n              columns={columns}\n              \n              options={{\n                selection: false,\n                actionsColumnIndex: -1,\n                paging: false,\n                search: false\n              }}\n              components={{\n                Toolbar: props => <MTableToolbar {...props} />\n              }}\n            /> */}\n          </Grid>\n          <ConfirmationDialog\n            title={t(\"confirm\")}\n            open={shouldOpenConfirmationDialog}\n            onConfirmDialogClose={this.handleDialogClose}\n            onYesClick={this.handleConfirmUpdateResult}\n            text={t(\"EQAResultReportConclusion.confirm_update_result\")}\n            Yes={t(\"general.Yes\")}\n            No={t(\"general.No\")}\n          />\n        </Grid>\n      </div>\n    );\n  }\n}\nexport default EQARound;\n"]},"metadata":{},"sourceType":"module"}