{"ast":null,"code":"import _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _createForOfIteratorHelper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\HealthOrgRegisterForm\\\\EQAHealthOrgRegisterDialog.jsx\";\nimport React, { Component } from \"react\";\nimport { Dialog, Button, Grid, FormControlLabel, Switch, InputAdornment, TablePagination, IconButton, Icon } from \"@material-ui/core\";\nimport { getByPage, deleteItem, saveItem, handleCancelRegistration, reRegisterEQARound, getItemById, searchByPage, handleCancelRegistrationFromDialog } from \"./HealthOrgRegisterFormService\";\nimport { ValidatorForm, TextValidator, TextField } from \"react-material-ui-form-validator\";\nimport MaterialTable, { MTableToolbar, Chip, MTableBody, MTableHeader } from \"material-table\";\nimport EQARoundSearchDialog from \"./EQARoundSearchDialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport { getHealthOrgByUserId, getCurrentUser, registerEQARound } from \"./HealthOrgRegisterFormService\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Input from \"@material-ui/core/Input\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { forEach } from \"lodash\";\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport '../../../styles/views/_style.scss';\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n});\n\nfunction MaterialButton(props) {\n  var item = props.item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    size: \"small\",\n    onClick: function onClick() {\n      return props.onSelect(item, 1);\n    },\n    title: \"Xo\\xE1 \\u0111\\u01A1n v\\u1ECB n\\xE0y kh\\u1ECFi danh s\\xE1ch \\u0111\\u0103ng k\\xFD\",\n    disabled: typeof item.hasRegister === \"undefined\" ? true : !item.hasRegister,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    fontSize: \"small\",\n    color: typeof item.hasRegister === \"undefined\" || !item.hasRegister ? \"disabled\" : \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, \"cancel\")));\n}\n\nfunction PaperComponent(props) {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    handle: \"#draggable-dialog-title\",\n    cancel: '[class*=\"MuiDialogContent-root\"]',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  })));\n}\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    },\n    formControl: {\n      margin: theme.spacing.unit,\n      minWidth: 120\n    },\n    selectEmpty: {\n      marginTop: theme.spacing.unit * 2\n    }\n  };\n};\n\nvar EQAHealthOrgRegisterDialog = /*#__PURE__*/function (_Component) {\n  _inherits(EQAHealthOrgRegisterDialog, _Component);\n\n  var _super = _createSuper(EQAHealthOrgRegisterDialog);\n\n  function EQAHealthOrgRegisterDialog() {\n    var _this;\n\n    _classCallCheck(this, EQAHealthOrgRegisterDialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      status: 0,\n      healthOrg: null,\n      shouldOpenSearchDialog: false,\n      shouldOpenConfirmationDialog: false,\n      shouldOpenHealthOrgSearchMultipleDialog: false,\n      listHealthOrgs: [],\n      selectedHealthOrg: [],\n      totalElements: 0,\n      sampleSet: {},\n      feeStatus: 0,\n      status: 0,\n      selectedItem: {}\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.handleFormSubmit = function () {\n      var t = _this.props.t;\n      var _this$state = _this.state,\n          round = _this$state.round,\n          sampleSet = _this$state.sampleSet,\n          hasRegister = _this$state.hasRegister,\n          feeStatus = _this$state.feeStatus,\n          status = _this$state.status;\n      var healthOrgRoundRegisterList = [];\n\n      var _iterator = _createForOfIteratorHelper(_this.state.selectedHealthOrg),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var healthOrg = _step.value;\n\n          if (!healthOrg.hasRegister) {\n            healthOrgRoundRegisterList.push({\n              healthOrg,\n              round,\n              sampleSet,\n              hasRegister,\n              feeStatus,\n              status\n            });\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      registerEQARound([].concat(healthOrgRoundRegisterList)).then(function (response) {\n        if (response.data.errorCode == 1) {\n          //đơn vị đã đăng ký\n          toast.warning(response.data.message);\n        } else {\n          toast.info(t(\"EQAHealthOrgRoundRegister.notify.addSuccess\"));\n\n          _this.props.handleClose();\n        }\n      });\n    };\n\n    _this.handleRoundSearchDialogClose = function () {\n      _this.setState({\n        shouldOpenRoundSearchDialog: false\n      });\n    };\n\n    _this.handleSelectRound = function (item) {\n      _this.setState({\n        round: item\n      });\n\n      _this.handleRoundSearchDialogClose();\n    };\n\n    _this.handleHealthOrgSearchDialogClose = function () {\n      _this.setState({\n        shouldOpenHealthOrgSearchDialog: false\n      });\n    };\n\n    _this.handleSelectHealthOrg = function (item) {\n      _this.setState({\n        healthOrg: item\n      });\n\n      _this.handleHealthOrgSearchDialogClose();\n    };\n\n    _this.handleSampleSetSearchDialogClose = function () {\n      _this.setState({\n        shouldOpenSampleSetSearchDialog: false\n      });\n    };\n\n    _this.handleSelectSampleSet = function (item) {\n      _this.setState({\n        sampleSet: item\n      });\n\n      _this.handleSampleSetSearchDialogClose();\n    };\n\n    _this.handleDateChange = function (date, name) {\n      _this.setState({\n        [name]: date\n      });\n    };\n\n    _this.handleDialogClose = function () {\n      _this.setState({\n        shouldOpenHealthOrgSearchMultipleDialog: false,\n        shouldOpenConfirmationDialog: false\n      });\n    };\n\n    _this.handleDelete = function (rowData) {\n      var listHealthOrgs = _this.state.listHealthOrgs;\n\n      if (listHealthOrgs != null && listHealthOrgs.length > 0) {\n        for (var index = 0; index < listHealthOrgs.length; index++) {\n          if (listHealthOrgs && listHealthOrgs[index].id == rowData.id) {\n            listHealthOrgs.splice(index, 1);\n            break;\n          }\n        }\n      }\n\n      _this.setState({\n        listHealthOrgs\n      }, function () {});\n    };\n\n    _this.handleOpenConfirmationDialog = function (rowData) {\n      _this.setState({\n        shouldOpenConfirmationDialog: true,\n        selectedItem: rowData\n      });\n    };\n\n    _this.handleConfirmationResponse = function () {\n      var t = _this.props.t;\n      var selectedItem = _this.state.selectedItem;\n      handleCancelRegistrationFromDialog(selectedItem.id, _this.state.round.id).then(function () {\n        var _this$state2 = _this.state,\n            listHealthOrgs = _this$state2.listHealthOrgs,\n            selectedHealthOrg = _this$state2.selectedHealthOrg;\n        listHealthOrgs.forEach(function (healthOrg) {\n          if (healthOrg.id === selectedItem.id) {\n            healthOrg.hasRegister = false;\n            healthOrg.tableData.checked = false;\n          }\n        });\n        selectedHealthOrg = selectedHealthOrg.filter(function (item) {\n          return item.id != selectedItem.id;\n        });\n\n        _this.setState({\n          selectedHealthOrg,\n          listHealthOrgs,\n          shouldOpenConfirmationDialog: false\n        });\n      }).catch(function () {\n        toast.error(t(\"EQAHealthOrgRoundRegister.notify.error\"));\n\n        _this.handleDialogClose();\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(EQAHealthOrgRegisterDialog, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item;\n      this.setState({\n        round: this.props.item\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    // updatePageData = () => {\n    //   var searchObject = {};\n    //   searchObject.text = \"\";\n    //   if (this.props.round != null) {\n    //     searchObject.roundId = this.props.round.id;\n    //   }\n    //   searchObject.pageIndex = 1;\n    //   searchObject.pageSize = 1000000;\n    //   searchByPage(searchObject, 1, 1000000).then(({ data }) => {\n    //     return data.content;\n    //   })\n    // };\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var searchObject = {};\n      searchObject.text = \"\";\n\n      if (this.props.round != null) {\n        searchObject.roundId = this.props.round.id;\n      }\n\n      searchObject.pageIndex = 1;\n      searchObject.pageSize = 1000000;\n      searchByPage(searchObject).then(function (_ref) {\n        var data = _ref.data;\n        var registeredList = data.content;\n        getHealthOrgByUserId(0).then(function (_ref2) {\n          var data = _ref2.data;\n          var roundTab2 = [];\n\n          for (var i = 0; i < (registeredList === null || registeredList === void 0 ? void 0 : registeredList.length); i++) {\n            var childItemList = registeredList[i];\n            roundTab2.push(childItemList);\n          }\n\n          if (data.length === 1) {\n            var _listHealthOrgs = data;\n\n            for (var _i = 0; _i < _listHealthOrgs.length; _i++) {\n              var heItem = _listHealthOrgs[_i];\n\n              for (var _i2 = 0; _i2 < roundTab2.length; _i2++) {\n                var heOrgRound = roundTab2[_i2];\n\n                if (_this2.state.round.id === heOrgRound.round.id) {\n                  if (heItem.id == heOrgRound.healthOrg.id) {\n                    if (heOrgRound.status !== -1) {\n                      heItem.hasRegister = true;\n                    }\n                  }\n                }\n              }\n            }\n\n            _this2.setState({\n              listHealthOrgs: data.map(function (healthOrg) {\n                return healthOrg ? _objectSpread(_objectSpread({}, healthOrg), {}, {\n                  tableData: {\n                    checked: true\n                  }\n                }) : healthOrg;\n              })\n            }, function () {\n              var selectedHealthOrg = _this2.state.selectedHealthOrg;\n              selectedHealthOrg = _this2.state.listHealthOrgs;\n\n              _this2.setState({\n                selectedHealthOrg\n              });\n            });\n\n            return;\n          }\n\n          var childListHealthOrgsId = [];\n          var listHealthOrgs = data;\n\n          for (var _i3 = 0; _i3 < listHealthOrgs.length; _i3++) {\n            var _heItem = listHealthOrgs[_i3];\n\n            for (var _i4 = 0; _i4 < roundTab2.length; _i4++) {\n              var _heOrgRound = roundTab2[_i4];\n\n              if (_this2.state.round.id === _heOrgRound.round.id) {\n                if (_heItem.id == _heOrgRound.healthOrg.id) {\n                  if (_heOrgRound.status !== -1) {\n                    _heItem.hasRegister = true;\n                  }\n                }\n              }\n            }\n          }\n\n          _this2.setState({\n            listHealthOrgs: listHealthOrgs.map(function (healthOrg) {\n              return healthOrg.hasRegister ? _objectSpread(_objectSpread({}, healthOrg), {}, {\n                tableData: {\n                  checked: true\n                }\n              }) : healthOrg;\n            })\n          });\n        });\n      });\n    } // handleSelectHealthOrg = item => {\n    //   const data = item.map(row => ({ ...row, tableData: { checked: false } }));\n    //   this.setState({ selectedHealthOrg: data });\n    //   this.handleDialogClose();\n    // };\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state3 = this.state,\n          shouldOpenHealthOrgSearchDialog = _this$state3.shouldOpenHealthOrgSearchDialog,\n          shouldOpenRoundSearchDialog = _this$state3.shouldOpenRoundSearchDialog,\n          shouldOpenSampleSetSearchDialog = _this$state3.shouldOpenSampleSetSearchDialog,\n          shouldOpenHealthOrgSearchMultipleDialog = _this$state3.shouldOpenHealthOrgSearchMultipleDialog,\n          healthOrg = _this$state3.healthOrg,\n          round = _this$state3.round,\n          sampleSet = _this$state3.sampleSet,\n          status = _this$state3.status,\n          feeStatus = _this$state3.feeStatus,\n          hasRegister = _this$state3.hasRegister,\n          listHealthOrgs = _this$state3.listHealthOrgs,\n          selectedHealthOrg = _this$state3.selectedHealthOrg;\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          handleClose = _this$props2.handleClose,\n          handleOKEditClose = _this$props2.handleOKEditClose,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n,\n          item = _this$props2.item,\n          isView = _this$props2.isView; //const currentSelectedHealthOrg = listHealthOrgs.slice();\n\n      var columns = [{\n        title: t(\"Name\"),\n        field: \"name\",\n        width: \"150\"\n      }, {\n        title: t(\"Code\"),\n        field: \"code\",\n        align: \"left\",\n        width: \"150\"\n      }, {\n        title: t(\"HealthOrgRegisterForm.unregister\"),\n        field: \"custom\",\n        align: \"left\",\n        width: \"250\",\n        cellStyle: {\n          whiteSpace: \"nowrap\"\n        },\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(MaterialButton, {\n            item: rowData,\n            onSelect: function onSelect(rowData, method) {\n              if (method === 1) {\n                _this3.handleOpenConfirmationDialog(rowData);\n              } else {\n                alert(\"Call Selected Here:\" + rowData.id);\n              }\n            },\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 11\n            }\n          });\n        }\n      }, {\n        title: t(\"Status\"),\n        field: \"hasRegister\",\n        width: \"150\",\n        render: function render(rowData) {\n          return rowData.hasRegister == true ? /*#__PURE__*/React.createElement(\"small\", {\n            className: \"border-radius-4 bg-primary text-white px-8 py-2 \",\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 13\n            }\n          }, t(\"HealthOrgRegisterForm.IsRegister.Yes\")) : /*#__PURE__*/React.createElement(\"small\", {\n            className: \"border-radius-4 bg-dark px-8 py-2 \",\n            style: {\n              backgroundColor: \"#f44336\"\n            },\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 13\n            }\n          }, t(\"HealthOrgRegisterForm.IsRegister.No\"));\n        }\n      }];\n      return /*#__PURE__*/React.createElement(Dialog, {\n        scroll: \"paper\",\n        open: open,\n        PaperComponent: PaperComponent,\n        maxWidth: \"md\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(DialogTitle, {\n        style: {\n          cursor: \"move\"\n        },\n        id: \"draggable-dialog-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"styleColor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 12\n        }\n      }, t(\"HealthOrgRegisterForm.title\")), /*#__PURE__*/React.createElement(IconButton, {\n        style: {\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\"\n        },\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        color: \"error\",\n        title: t(\"close\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 114\n        }\n      }, \"close\"))), /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        style: {\n          overflowY: \"auto\",\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DialogContent, {\n        dividers: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        className: \"mb-16\",\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        md: 12,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        label: t(\"EQAHealthOrgRoundRegister.RoundName\"),\n        placeholder: t(\"EQAHealthOrgRoundRegister.RoundName\"),\n        id: \"round\",\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100 mb-16 mr-16 stylePlaceholder\",\n        value: round != null ? round.name : \"\",\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 17\n        }\n      })), shouldOpenRoundSearchDialog && /*#__PURE__*/React.createElement(EQARoundSearchDialog, {\n        open: this.state.shouldOpenRoundSearchDialog,\n        handleSelect: this.handleSelectRound,\n        selectedItem: round != null ? round : {},\n        handleClose: this.handleRoundSearchDialogClose,\n        t: t,\n        i18n: i18n,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 17\n        }\n      }), this.state.shouldOpenConfirmationDialog && /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        title: t(\"confirm\"),\n        open: this.state.shouldOpenConfirmationDialog,\n        onConfirmDialogClose: this.handleDialogClose,\n        onYesClick: this.handleConfirmationResponse,\n        Yes: t(\"general.Yes\"),\n        No: t(\"general.No\"),\n        text: t(\"HealthOrgRegisterForm.unregister_confirmation\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"fieldset\", {\n        style: {\n          width: \"100%\",\n          padding: \"0\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MaterialTable, {\n        title: t(\"HealthOrgRegisterForm.title_table\"),\n        columns: columns,\n        data: listHealthOrgs,\n        options: {\n          selection: true,\n          actionsColumnIndex: -1,\n          paging: false,\n          search: false,\n          rowStyle: function rowStyle(rowData, index) {\n            return {\n              backgroundColor: index % 2 === 1 ? '#EEE' : '#FFF'\n            };\n          },\n          headerStyle: {\n            backgroundColor: '#358600',\n            color: '#fff'\n          },\n          padding: 'dense',\n          toolbar: false\n        },\n        onSelectionChange: function onSelectionChange(rows) {\n          _this3.setState({\n            selectedHealthOrg: rows\n          });\n        },\n        localization: {\n          body: {\n            emptyDataSourceMessage: \"\".concat(t(\"general.emptyDataMessageTable\"))\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 21\n        }\n      }))))), /*#__PURE__*/React.createElement(DialogActions, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"mb-16 mr-8 align-bottom\",\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 13\n        }\n      }, t(\"general.close\")), listHealthOrgs.length > 0 && /*#__PURE__*/React.createElement(Button, {\n        className: \"mb-16 mr-16 align-bottom\",\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 15\n        }\n      }, t(\"general.confirm\")))));\n    }\n  }]);\n\n  return EQAHealthOrgRegisterDialog;\n}(Component);\n\nexport default EQAHealthOrgRegisterDialog;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/HealthOrgRegisterForm/EQAHealthOrgRegisterDialog.jsx"],"names":["React","Component","Dialog","Button","Grid","FormControlLabel","Switch","InputAdornment","TablePagination","IconButton","Icon","getByPage","deleteItem","saveItem","handleCancelRegistration","reRegisterEQARound","getItemById","searchByPage","handleCancelRegistrationFromDialog","ValidatorForm","TextValidator","TextField","MaterialTable","MTableToolbar","Chip","MTableBody","MTableHeader","EQARoundSearchDialog","DialogContent","getHealthOrgByUserId","getCurrentUser","registerEQARound","DialogTitle","Draggable","Paper","Input","InputLabel","MenuItem","FormControl","Select","DialogActions","toast","forEach","Breadcrumb","ConfirmationDialog","configure","autoClose","draggable","limit","MaterialButton","props","item","onSelect","hasRegister","PaperComponent","styles","theme","root","display","flexWrap","formControl","margin","spacing","unit","minWidth","selectEmpty","marginTop","EQAHealthOrgRegisterDialog","state","status","healthOrg","shouldOpenSearchDialog","shouldOpenConfirmationDialog","shouldOpenHealthOrgSearchMultipleDialog","listHealthOrgs","selectedHealthOrg","totalElements","sampleSet","feeStatus","selectedItem","handleChange","event","source","persist","setState","target","name","value","handleFormSubmit","t","round","healthOrgRoundRegisterList","push","then","response","data","errorCode","warning","message","info","handleClose","handleRoundSearchDialogClose","shouldOpenRoundSearchDialog","handleSelectRound","handleHealthOrgSearchDialogClose","shouldOpenHealthOrgSearchDialog","handleSelectHealthOrg","handleSampleSetSearchDialogClose","shouldOpenSampleSetSearchDialog","handleSelectSampleSet","handleDateChange","date","handleDialogClose","handleDelete","rowData","length","index","id","splice","handleOpenConfirmationDialog","handleConfirmationResponse","tableData","checked","filter","catch","error","open","searchObject","text","roundId","pageIndex","pageSize","registeredList","content","roundTab2","i","childItemList","heItem","heOrgRound","map","childListHealthOrgsId","handleOKEditClose","i18n","isView","columns","title","field","width","align","cellStyle","whiteSpace","render","method","alert","backgroundColor","cursor","position","right","top","overflowY","flexDirection","padding","selection","actionsColumnIndex","paging","search","rowStyle","headerStyle","color","toolbar","rows","body","emptyDataSourceMessage"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  FormControlLabel,\r\n  Switch,\r\n  InputAdornment,\r\n  TablePagination,\r\n  IconButton,\r\n  Icon\r\n} from \"@material-ui/core\";\r\nimport {\r\n  getByPage,\r\n  deleteItem,\r\n  saveItem,\r\n  handleCancelRegistration,\r\n  reRegisterEQARound,\r\n  getItemById,\r\n  searchByPage,\r\n  handleCancelRegistrationFromDialog\r\n} from \"./HealthOrgRegisterFormService\";\r\nimport {\r\n  ValidatorForm,\r\n  TextValidator,\r\n  TextField\r\n} from \"react-material-ui-form-validator\";\r\nimport MaterialTable, {\r\n  MTableToolbar,\r\n  Chip,\r\n  MTableBody,\r\n  MTableHeader\r\n} from \"material-table\";\r\nimport EQARoundSearchDialog from \"./EQARoundSearchDialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {\r\n  getHealthOrgByUserId,\r\n  getCurrentUser,\r\n  registerEQARound\r\n} from \"./HealthOrgRegisterFormService\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { forEach } from \"lodash\";\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport '../../../styles/views/_style.scss';\r\n\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit:3\r\n});\r\n\r\nfunction MaterialButton(props) {\r\n  const item = props.item;\r\n  return (\r\n    <div>\r\n      <IconButton size=\"small\"\r\n        onClick={() => props.onSelect(item, 1)}\r\n        title=\"Xoá đơn vị này khỏi danh sách đăng ký\"\r\n        disabled={\r\n          typeof item.hasRegister === \"undefined\" ? true : !item.hasRegister\r\n        }\r\n      >\r\n        <Icon fontSize=\"small\"\r\n          color={\r\n            typeof item.hasRegister === \"undefined\" || !item.hasRegister\r\n              ? \"disabled\"\r\n              : \"error\"\r\n          }\r\n        >\r\n          cancel\r\n        </Icon>\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#draggable-dialog-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\nconst styles = theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\"\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing.unit,\r\n    minWidth: 120\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing.unit * 2\r\n  }\r\n});\r\nclass EQAHealthOrgRegisterDialog extends Component {\r\n  state = {\r\n    status: 0,\r\n    healthOrg: null,\r\n    shouldOpenSearchDialog: false,\r\n    shouldOpenConfirmationDialog: false,\r\n    shouldOpenHealthOrgSearchMultipleDialog: false,\r\n    listHealthOrgs: [],\r\n    selectedHealthOrg: [],\r\n    totalElements: 0,\r\n    sampleSet: {},\r\n    feeStatus: 0,\r\n    status: 0,\r\n    selectedItem: {}\r\n  };\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleFormSubmit = () => {\r\n    let { t } = this.props;\r\n    let { round, sampleSet, hasRegister, feeStatus, status } = this.state;\r\n    let healthOrgRoundRegisterList = [];\r\n    for (let healthOrg of this.state.selectedHealthOrg) {\r\n      if (!healthOrg.hasRegister) {\r\n        healthOrgRoundRegisterList.push({\r\n          healthOrg,\r\n          round,\r\n          sampleSet,\r\n          hasRegister,\r\n          feeStatus,\r\n          status\r\n        });\r\n      }\r\n    }\r\n    registerEQARound([...healthOrgRoundRegisterList]).then(response => {\r\n      if (response.data.errorCode == 1) {\r\n        //đơn vị đã đăng ký\r\n        toast.warning(response.data.message);\r\n      } else {\r\n        toast.info(t(\"EQAHealthOrgRoundRegister.notify.addSuccess\"));\r\n        this.props.handleClose();\r\n      }\r\n    });\r\n  };\r\n  handleRoundSearchDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenRoundSearchDialog: false\r\n    });\r\n  };\r\n  handleSelectRound = item => {\r\n    this.setState({ round: item });\r\n    this.handleRoundSearchDialogClose();\r\n  };\r\n  componentWillMount() {\r\n    let { open, handleClose, item } = this.props;\r\n    this.setState({ round: this.props.item });\r\n  }\r\n  handleHealthOrgSearchDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenHealthOrgSearchDialog: false\r\n    });\r\n  };\r\n  handleSelectHealthOrg = item => {\r\n    this.setState({ healthOrg: item });\r\n    this.handleHealthOrgSearchDialogClose();\r\n  };\r\n\r\n  handleSampleSetSearchDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenSampleSetSearchDialog: false\r\n    });\r\n  };\r\n  handleSelectSampleSet = item => {\r\n    this.setState({ sampleSet: item });\r\n    this.handleSampleSetSearchDialogClose();\r\n  };\r\n  handleDateChange = (date, name) => {\r\n    this.setState({\r\n      [name]: date\r\n    });\r\n  };\r\n  handleDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenHealthOrgSearchMultipleDialog: false,\r\n      shouldOpenConfirmationDialog: false\r\n    });\r\n  };\r\n  // updatePageData = () => {\r\n\r\n  //   var searchObject = {};\r\n  //   searchObject.text = \"\";\r\n  //   if (this.props.round != null) {\r\n  //     searchObject.roundId = this.props.round.id;\r\n  //   }\r\n  //   searchObject.pageIndex = 1;\r\n  //   searchObject.pageSize = 1000000;\r\n  //   searchByPage(searchObject, 1, 1000000).then(({ data }) => {\r\n  //     return data.content;\r\n  //   })\r\n  // };\r\n  componentDidMount() {\r\n    let searchObject = {};\r\n    searchObject.text = \"\";\r\n    if (this.props.round != null) {\r\n      searchObject.roundId = this.props.round.id;\r\n    }\r\n    searchObject.pageIndex = 1;\r\n    searchObject.pageSize = 1000000;\r\n    searchByPage(searchObject).then(({ data }) => {\r\n      let registeredList = data.content;\r\n        getHealthOrgByUserId(0).then(({ data }) => {\r\n          let roundTab2 = [];\r\n          for (let i = 0; i < registeredList?.length; i++) {\r\n            let childItemList = registeredList[i];\r\n            roundTab2.push(childItemList);\r\n          }\r\n        if(data.length ===1 ){\r\n            let listHealthOrgs = data;\r\n            for (let i = 0; i < listHealthOrgs.length; i++) {\r\n              let heItem = listHealthOrgs[i];\r\n              for (let i = 0; i < roundTab2.length; i++) {\r\n                let heOrgRound = roundTab2[i];\r\n                if (this.state.round.id === heOrgRound.round.id) {\r\n                  if (heItem.id == heOrgRound.healthOrg.id) {\r\n                    if (heOrgRound.status !== -1) {\r\n                      heItem.hasRegister = true;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            this.setState({\r\n                  listHealthOrgs:data.map(healthOrg =>\r\n                    healthOrg\r\n                      ? { ...healthOrg, tableData: { checked: true } }\r\n                      : healthOrg\r\n                  )\r\n                },()=>{\r\n                  let {selectedHealthOrg} = this.state\r\n                  selectedHealthOrg =this.state.listHealthOrgs\r\n                  this.setState({selectedHealthOrg})\r\n                })\r\n                return\r\n          }\r\n          let childListHealthOrgsId = [];\r\n          let listHealthOrgs = data;\r\n          for (let i = 0; i < listHealthOrgs.length; i++) {\r\n            let heItem = listHealthOrgs[i];\r\n            for (let i = 0; i < roundTab2.length; i++) {\r\n              let heOrgRound = roundTab2[i];\r\n              if (this.state.round.id === heOrgRound.round.id) {\r\n                if (heItem.id == heOrgRound.healthOrg.id) {\r\n                  if (heOrgRound.status !== -1) {\r\n                    heItem.hasRegister = true;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          this.setState({\r\n            listHealthOrgs: listHealthOrgs.map(healthOrg =>\r\n              healthOrg.hasRegister\r\n                ? { ...healthOrg, tableData: { checked: true } }\r\n                : healthOrg\r\n            )\r\n          });\r\n        });\r\n    });\r\n  }\r\n  // handleSelectHealthOrg = item => {\r\n  //   const data = item.map(row => ({ ...row, tableData: { checked: false } }));\r\n  //   this.setState({ selectedHealthOrg: data });\r\n  //   this.handleDialogClose();\r\n  // };\r\n  handleDelete = rowData => {\r\n    let { listHealthOrgs } = this.state;\r\n    if (listHealthOrgs != null && listHealthOrgs.length > 0) {\r\n      for (let index = 0; index < listHealthOrgs.length; index++) {\r\n        if (listHealthOrgs && listHealthOrgs[index].id == rowData.id) {\r\n          listHealthOrgs.splice(index, 1);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ listHealthOrgs }, function() {});\r\n  };\r\n  handleOpenConfirmationDialog = rowData => {\r\n    this.setState({\r\n      shouldOpenConfirmationDialog: true,\r\n      selectedItem: rowData\r\n    });\r\n  };\r\n\r\n  handleConfirmationResponse = () => {\r\n    let { t } = this.props;\r\n    const { selectedItem } = this.state;\r\n    handleCancelRegistrationFromDialog(\r\n      selectedItem.id,\r\n      this.state.round.id\r\n    ).then(() => {\r\n      let { listHealthOrgs, selectedHealthOrg } = this.state;\r\n      listHealthOrgs.forEach(healthOrg => {\r\n        if (healthOrg.id === selectedItem.id) {\r\n          healthOrg.hasRegister = false;\r\n          healthOrg.tableData.checked = false;\r\n        }\r\n      });\r\n      selectedHealthOrg = selectedHealthOrg.filter(\r\n        item => item.id != selectedItem.id\r\n      );\r\n      this.setState({\r\n        selectedHealthOrg,\r\n        listHealthOrgs,\r\n        shouldOpenConfirmationDialog: false\r\n      });\r\n    }).catch(()=>{\r\n      toast.error(t(\"EQAHealthOrgRoundRegister.notify.error\"));\r\n      this.handleDialogClose();\r\n    });\r\n  };\r\n  render() {\r\n    let {\r\n      shouldOpenHealthOrgSearchDialog,\r\n      shouldOpenRoundSearchDialog,\r\n      shouldOpenSampleSetSearchDialog,\r\n      shouldOpenHealthOrgSearchMultipleDialog,\r\n      healthOrg,\r\n      round,\r\n      sampleSet,\r\n      status,\r\n      feeStatus,\r\n      hasRegister,\r\n      listHealthOrgs,\r\n      selectedHealthOrg\r\n    } = this.state;\r\n    let {\r\n      open,\r\n      handleClose,\r\n      handleOKEditClose,\r\n      t,\r\n      i18n,\r\n      item,\r\n      isView\r\n    } = this.props;\r\n    //const currentSelectedHealthOrg = listHealthOrgs.slice();\r\n    let columns = [\r\n      { title: t(\"Name\"), field: \"name\", width: \"150\" },\r\n      { title: t(\"Code\"), field: \"code\", align: \"left\", width: \"150\" },\r\n      {\r\n        title: t(\"HealthOrgRegisterForm.unregister\"),\r\n        field: \"custom\",\r\n        align: \"left\",\r\n        width: \"250\",\r\n        cellStyle: { whiteSpace: \"nowrap\" },\r\n        render: rowData => (\r\n          <MaterialButton\r\n            item={rowData}\r\n            onSelect={(rowData, method) => {\r\n              if (method === 1) {\r\n                this.handleOpenConfirmationDialog(rowData);\r\n              } else {\r\n                alert(\"Call Selected Here:\" + rowData.id);\r\n              }\r\n            }}\r\n          />\r\n        )\r\n      },\r\n      {\r\n        title: t(\"Status\"),\r\n        field: \"hasRegister\",\r\n        width: \"150\",\r\n        render: rowData =>\r\n          rowData.hasRegister == true ? (\r\n            <small className=\"border-radius-4 bg-primary text-white px-8 py-2 \">\r\n              {t(\"HealthOrgRegisterForm.IsRegister.Yes\")}\r\n            </small>\r\n          ) : (\r\n            <small className=\"border-radius-4 bg-dark px-8 py-2 \" style={{ backgroundColor: \"#f44336\" }}>\r\n              {t(\"HealthOrgRegisterForm.IsRegister.No\")}\r\n            </small>\r\n          )\r\n      }\r\n    ];\r\n    return (\r\n      <Dialog\r\n        scroll={\"paper\"}\r\n        open={open}\r\n        PaperComponent={PaperComponent}\r\n        maxWidth={\"md\"}\r\n        fullWidth={true}\r\n      >\r\n        <DialogTitle style={{ cursor: \"move\" }} id=\"draggable-dialog-title\">\r\n          {<span className=\"styleColor\">{t(\"HealthOrgRegisterForm.title\")}</span>}\r\n          <IconButton style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }} onClick={() => handleClose()}><Icon color=\"error\"\r\n              title={t(\"close\")}>\r\n              close\r\n            </Icon>\r\n            </IconButton>\r\n        </DialogTitle>\r\n        <ValidatorForm\r\n          ref=\"form\"\r\n          onSubmit={this.handleFormSubmit}\r\n          style={{\r\n            overflowY: \"auto\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\"\r\n          }}\r\n        >\r\n          <DialogContent dividers>\r\n            <Grid className=\"mb-16\" container spacing={2}>\r\n              <Grid item md={12} sm={12} xs={12}>\r\n                <TextValidator\r\n                  label={t(\"EQAHealthOrgRoundRegister.RoundName\")}\r\n                  placeholder={t(\"EQAHealthOrgRoundRegister.RoundName\")}\r\n                  id=\"round\"\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                  className=\"w-100 mb-16 mr-16 stylePlaceholder\"\r\n                  value={round != null ? round.name : \"\"}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  disabled={true}\r\n                />\r\n              </Grid>\r\n              {shouldOpenRoundSearchDialog && (\r\n                <EQARoundSearchDialog\r\n                  open={this.state.shouldOpenRoundSearchDialog}\r\n                  handleSelect={this.handleSelectRound}\r\n                  selectedItem={round != null ? round : {}}\r\n                  handleClose={this.handleRoundSearchDialogClose}\r\n                  t={t}\r\n                  i18n={i18n}\r\n                />\r\n              )}\r\n              {this.state.shouldOpenConfirmationDialog && (\r\n                <ConfirmationDialog\r\n                  title={t(\"confirm\")}\r\n                  open={this.state.shouldOpenConfirmationDialog}\r\n                  onConfirmDialogClose={this.handleDialogClose}\r\n                  onYesClick={this.handleConfirmationResponse}\r\n                  Yes={t(\"general.Yes\")}\r\n                  No={t(\"general.No\")}\r\n                  text={t(\"HealthOrgRegisterForm.unregister_confirmation\")}\r\n                />\r\n              )}\r\n              <fieldset style={{ width: \"100%\", padding:\"0\" }}>\r\n                  <Grid item xs={12}>\r\n                    <MaterialTable\r\n                      title={t(\"HealthOrgRegisterForm.title_table\")}\r\n                      columns={columns}\r\n                      data={listHealthOrgs}\r\n                      options={{\r\n                        selection: true,\r\n                        actionsColumnIndex: -1,\r\n                        paging: false,\r\n                        search: false,\r\n                        rowStyle: (rowData, index) => ({\r\n                          backgroundColor: (index % 2 === 1) ? '#EEE' : '#FFF',\r\n                        }), \r\n                        headerStyle: {\r\n                          backgroundColor: '#358600',\r\n                          color:'#fff',\r\n                        },\r\n                        padding: 'dense',\r\n                        toolbar: false\r\n                      }}\r\n                      onSelectionChange={rows => {\r\n                        this.setState({\r\n                          selectedHealthOrg: rows\r\n                        });\r\n                      }}\r\n                      localization={{\r\n                        body: {\r\n                          emptyDataSourceMessage: `${t(\r\n                            \"general.emptyDataMessageTable\"\r\n                          )}`,\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n              </fieldset>\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button\r\n              className=\"mb-16 mr-8 align-bottom\"\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={() => handleClose()}\r\n            >\r\n              {t(\"general.close\")}\r\n            </Button>\r\n            {listHealthOrgs.length > 0 && (\r\n              <Button\r\n                className=\"mb-16 mr-16 align-bottom\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n              >\r\n                {t(\"general.confirm\")}\r\n              </Button>\r\n            )}\r\n          </DialogActions>\r\n        </ValidatorForm>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\nexport default EQAHealthOrgRegisterDialog;\r\n"]},"metadata":{},"sourceType":"module"}