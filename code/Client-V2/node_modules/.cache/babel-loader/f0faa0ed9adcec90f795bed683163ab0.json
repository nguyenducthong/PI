{"ast":null,"code":"import _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\EQAHealthOrg\\\\EQAHealthOrgEditorDialog.jsx\";\nimport React, { Component } from \"react\";\nimport { Dialog, Button, Grid, DialogActions, FormControlLabel, InputAdornment, Checkbox, FormHelperText, Icon, IconButton } from \"@material-ui/core\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport { ValidatorForm, TextValidator, TextField, SelectValidator } from \"react-material-ui-form-validator\";\nimport { getByPage, deleteItem, saveItem, getItemById, checkCode, checkEmail } from \"./EQAHealthOrgService\";\nimport { getAllTestPurposes } from \"../TestPurpose/TestPurposeService\";\nimport { getAllEQAhealthOrgLevels } from \"../HealthOrgLevel/HealthOrgLevelService\";\nimport { searchByPage } from \"../EQAHealthOrgType/EQAHealthOrgTypeService\";\nimport { getAllQualifications, getQualificationById } from '../Qualification/QualificationService';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Input from \"@material-ui/core/Input\";\nimport AdministrativeUnitsPopup from './AdministrativeUnitSearchDialog';\nimport { searchByPage as getAllHealthOrgType } from \"../EQAHealthOrgType/EQAHealthOrgTypeService\";\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Draggable from 'react-draggable';\nimport Paper from '@material-ui/core/Paper';\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\nimport { MuiPickersUtilsProvider, DateTimePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport EQAPlanningSearchDialog from './EQAPlanningSearchDialog';\nimport EQAPOrgTypeSearchDialog from './EQAPOrgTypeSearchDialog';\nimport EQAHealthOrg from \"./EQAHealthOrg\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getAll } from \"../AllocationSampleSet/AllocationSampleSetService\";\nimport '../../../styles/views/_loadding.scss';\nimport clsx from 'clsx';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport '../../../styles/views/_style.scss';\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n});\n\nfunction PaperComponent(props) {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    handle: \"#draggable-dialog-title\",\n    cancel: '[class*=\"MuiDialogContent-root\"]',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  })));\n}\n\nvar EQAHealthOrgEditorDialog = /*#__PURE__*/function (_Component) {\n  _inherits(EQAHealthOrgEditorDialog, _Component);\n\n  var _super = _createSuper(EQAHealthOrgEditorDialog);\n\n  function EQAHealthOrgEditorDialog() {\n    var _this;\n\n    _classCallCheck(this, EQAHealthOrgEditorDialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      name: \"\",\n      taxCodeOfTheUnit: \"\",\n      code: \"\",\n      specifyTestPurpose: \"\",\n      specifyLevel: \"\",\n      positiveAffirmativeRight: true,\n      shouldOpenSearchDialog: false,\n      shouldOpenConfirmationDialog: false,\n      qualificationSelect: [],\n      qualification: {},\n      officerPosion: \"\",\n      unitCodeOfProgramPEQAS: \"\",\n      testpurposeSelect: [],\n      testPurpose1: {},\n      testPurpose2: {},\n      testPurpose3: {},\n      testPurpose4: {},\n      levelHealOrg: [],\n      healthOrgTypeSelect: [],\n      healthOrgType: [],\n      administrativeUnit: \"\",\n      fax: \"\",\n      isView: false,\n      shouldOpenAdministrativeUnitsPopup: false,\n      level: {},\n      sampleReceiptDate: new Date(),\n      sampleRecipient: \"\",\n      specifySampleStatus: \"\",\n      specifyQualification: \"\",\n      isManualSetCode: false,\n      hasErrorLever: false,\n      levelId: \"\",\n      loading: false\n    };\n\n    _this.handleDateChange = function (date) {\n      _this.setState({\n        sampleReceiptDate: date\n      });\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"isManagementUnit\") {\n        _this.setState({\n          isManagementUnit: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"positiveAffirmativeRight\") {\n        _this.setState({\n          positiveAffirmativeRight: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"isManualSetCode\") {\n        _this.setState({\n          isManualSetCode: event.target.checked\n        });\n\n        return;\n      }\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.handleChangeAdministrativeUnitPopupClose = function () {\n      _this.setState({\n        shouldOpenAdministrativeUnitsPopup: false\n      }, function () {});\n    };\n\n    _this.handleSelectAdministrativeUnit = function (administrativeUnit) {\n      if (administrativeUnit && administrativeUnit.id) {\n        _this.setState({\n          administrativeUnit\n        });\n\n        _this.handleChangeAdministrativeUnitPopupClose();\n      }\n    };\n\n    _this.handleChangeQualification = function (event, source) {\n      var qualificationSelect = _this.state.qualificationSelect;\n\n      _this.setState({\n        qualification: qualificationSelect.find(function (item) {\n          return item.id == event.target.value;\n        }),\n        qualificationId: event.target.value\n      });\n    };\n\n    _this.handleChangetestpurpose1 = function (event, source) {\n      var testpurposeSelect = _this.state.testpurposeSelect;\n\n      _this.setState({\n        testPurpose1: testpurposeSelect.find(function (item) {\n          return item.id == event.target.value;\n        }),\n        testPurpose1Id: event.target.value\n      });\n    };\n\n    _this.handleChangetestpurpose2 = function (event, source) {\n      var testpurposeSelect = _this.state.testpurposeSelect;\n\n      _this.setState({\n        testPurpose2: testpurposeSelect.find(function (item) {\n          return item.id == event.target.value;\n        }),\n        testPurpose2Id: event.target.value\n      });\n    };\n\n    _this.handleChangetestpurpose3 = function (event, source) {\n      var testpurposeSelect = _this.state.testpurposeSelect;\n\n      _this.setState({\n        testPurpose3: testpurposeSelect.find(function (item) {\n          return item.id == event.target.value;\n        }),\n        testPurpose3Id: event.target.value\n      });\n    };\n\n    _this.handleChangetestpurpose4 = function (event, source) {\n      var testpurposeSelect = _this.state.testpurposeSelect;\n\n      _this.setState({\n        testPurpose4: testpurposeSelect.find(function (item) {\n          return item.id == event.target.value;\n        }),\n        testPurpose4Id: event.target.value\n      });\n    };\n\n    _this.handleChangelevel = function (event, source) {\n      var levelHealOrg = _this.state.levelHealOrg;\n\n      _this.setState({\n        level: levelHealOrg.find(function (item) {\n          return item.id == event.target.value;\n        }),\n        levelId: event.target.value,\n        hasErrorLever: false\n      });\n    };\n\n    _this.handleChangeType = function (event, source) {\n      var healthOrgTypeSelect = _this.state.healthOrgTypeSelect;\n\n      _this.setState({\n        healthOrgType: healthOrgTypeSelect.find(function (item) {\n          return item.id == event.target.value;\n        }),\n        healthOrgTypeId: event.target.value\n      });\n    };\n\n    _this.handleFormSubmit = function () {\n      var _this$state = _this.state,\n          id = _this$state.id,\n          code = _this$state.code,\n          isManualSetCode = _this$state.isManualSetCode,\n          email = _this$state.email,\n          hasErrorLever = _this$state.hasErrorLever,\n          levelId = _this$state.levelId;\n      var t = _this.props.t;\n\n      _this.setState({\n        loading: true\n      });\n\n      if (levelId == \"\") {\n        _this.setState({\n          hasErrorLever: true,\n          loading: false\n        });\n\n        return;\n      }\n\n      if (email != null) {\n        checkEmail(id, email).then(function (res) {\n          if (res.data) {\n            toast.warning(t(\"sign_up.duplicate_email\"));\n\n            _this.setState({\n              loading: false\n            });\n\n            return;\n          } else {\n            if (isManualSetCode) {\n              checkCode(id, code).then(function (result) {\n                if (result.data) {\n                  toast.warning(t(\"EQAHealthOrg.duplicateCode\"));\n\n                  _this.setState({\n                    loading: false\n                  });\n                } else {\n                  if (id) {\n                    saveItem(_objectSpread({}, _this.state)).then(function () {\n                      toast.success(t('mess_edit'));\n\n                      _this.setState({\n                        loading: false\n                      });\n                    });\n                  } else {\n                    saveItem(_objectSpread({}, _this.state)).then(function (response) {\n                      if (response.data != null && response.status == 200) {\n                        _this.state.id = response.data.id;\n                        toast.success(t('mess_add'));\n\n                        _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n                          loading: false\n                        }));\n                      }\n                    });\n                  }\n                }\n              });\n            } else {\n              if (id) {\n                saveItem(_objectSpread({}, _this.state)).then(function () {\n                  // this.props.handleOKEditClose();\n                  _this.setState({\n                    loading: false\n                  });\n\n                  toast.success(t('mess_edit'));\n                });\n              } else {\n                saveItem(_objectSpread({}, _this.state)).then(function (response) {\n                  if (response.data != null && response.status == 200) {\n                    _this.state.id = response.data.id;\n                    toast.success(t('mess_add'));\n\n                    _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n                      loading: false\n                    }));\n                  }\n                });\n              }\n            }\n          }\n        });\n      } else {\n        if (isManualSetCode) {\n          checkCode(id, code).then(function (result) {\n            if (result.data) {\n              toast.warning(t(\"EQAHealthOrg.duplicateCode\"));\n\n              _this.setState({\n                loading: false\n              });\n            } else {\n              if (id) {\n                saveItem(_objectSpread({}, _this.state)).then(function () {\n                  // this.props.handleOKEditClose();\n                  toast.success(t('mess_edit'));\n\n                  _this.setState({\n                    loading: false\n                  });\n                });\n              } else {\n                saveItem(_objectSpread({}, _this.state)).then(function (response) {\n                  if (response.data != null && response.status == 200) {\n                    _this.state.id = response.data.id;\n                    toast.success(t('mess_add'));\n\n                    _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n                      loading: false\n                    }));\n                  }\n                });\n              }\n            }\n          });\n        } else {\n          if (id) {\n            saveItem(_objectSpread({}, _this.state)).then(function () {\n              // this.props.handleOKEditClose();\n              toast.success(t('mess_edit'));\n\n              _this.setState({\n                loading: false\n              });\n            });\n          } else {\n            saveItem(_objectSpread({}, _this.state)).then(function (response) {\n              if (response.data != null && response.status == 200) {\n                _this.state.id = response.data.id;\n                toast.success(t('mess_add'));\n\n                _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n                  loading: false\n                }));\n              }\n            });\n          }\n        }\n      }\n    };\n\n    _this.handleSearchDialogClose = function () {\n      _this.setState({\n        shouldOpenSearchDialog: false\n      });\n    };\n\n    _this.handleSearchOrgTypeDialogClose = function () {\n      _this.setState({\n        shouldOpenSearchOrgTypeDialog: false\n      });\n    };\n\n    _this.handleSelectHealthOrgType = function (item) {\n      _this.setState({\n        healthOrgType: item\n      });\n\n      _this.handleSearchOrgTypeDialogClose();\n    };\n\n    _this.handleSelectAdministrativeUnitType = function (item) {\n      _this.setState({\n        administrativeUnit: item\n      });\n\n      _this.handleSearchDialogClose();\n    };\n\n    return _this;\n  }\n\n  _createClass(EQAHealthOrgEditorDialog, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item,\n          isHealthOrg = _this$props.isHealthOrg;\n      this.setState(_objectSpread(_objectSpread({}, this.props.item), {}, {\n        isHealthOrg: isHealthOrg\n      }), function () {\n        var _this$state2 = this.state,\n            qualification = _this$state2.qualification,\n            testPurpose1 = _this$state2.testPurpose1,\n            testPurpose2 = _this$state2.testPurpose2,\n            testPurpose3 = _this$state2.testPurpose3,\n            testPurpose4 = _this$state2.testPurpose4,\n            level = _this$state2.level,\n            healthOrgType = _this$state2.healthOrgType;\n\n        if (healthOrgType != null && healthOrgType.id != null) {\n          this.setState({\n            healthOrgTypeId: healthOrgType.id\n          });\n        }\n\n        if (qualification != null && qualification.id != null) {\n          this.setState({\n            qualificationId: qualification.id\n          });\n        }\n\n        if (testPurpose1 != null && testPurpose1.id != null) {\n          this.setState({\n            testPurpose1Id: testPurpose1.id\n          });\n        }\n\n        if (testPurpose2 != null && testPurpose2.id != null) {\n          this.setState({\n            testPurpose2Id: testPurpose2.id\n          });\n        }\n\n        if (testPurpose3 != null && testPurpose3.id != null) {\n          this.setState({\n            testPurpose3Id: testPurpose3.id\n          });\n        }\n\n        if (testPurpose4 != null && testPurpose4.id != null) {\n          this.setState({\n            testPurpose4Id: testPurpose4.id\n          });\n        }\n\n        if (level != null && level.id != null) {\n          this.setState({\n            levelId: level.id\n          });\n        }\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      getAllQualifications().then(function (data) {\n        var qualificationSelect = data.data;\n\n        _this2.setState({\n          qualificationSelect: qualificationSelect\n        });\n      });\n      getAllTestPurposes().then(function (data) {\n        var testpurposeSelect = data.data;\n\n        _this2.setState({\n          testpurposeSelect: testpurposeSelect\n        });\n      });\n      getAllEQAhealthOrgLevels().then(function (data) {\n        var levelHealOrg = data.data;\n\n        _this2.setState({\n          levelHealOrg: levelHealOrg\n        });\n      });\n      ValidatorForm.addValidationRule(\"isLengthNumber\", function (value) {\n        if (value.length > 10) {\n          return false;\n        }\n\n        return true;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state3 = this.state,\n          id = _this$state3.id,\n          name = _this$state3.name,\n          publishDate = _this$state3.publishDate,\n          code = _this$state3.code,\n          description = _this$state3.description,\n          isManualSetCode = _this$state3.isManualSetCode,\n          address = _this$state3.address,\n          isView = _this$state3.isView,\n          contactName = _this$state3.contactName,\n          levelId = _this$state3.levelId,\n          shouldOpenAdministrativeUnitsPopup = _this$state3.shouldOpenAdministrativeUnitsPopup,\n          contactPhone = _this$state3.contactPhone,\n          levelHealOrg = _this$state3.levelHealOrg,\n          shouldOpenSearchOrgTypeDialog = _this$state3.shouldOpenSearchOrgTypeDialog,\n          shouldOpenConfirmationDialog = _this$state3.shouldOpenConfirmationDialog,\n          isManagementUnit = _this$state3.isManagementUnit,\n          shouldOpenSearchDialog = _this$state3.shouldOpenSearchDialog,\n          sampleReceiptDate = _this$state3.sampleReceiptDate,\n          administrativeUnit = _this$state3.administrativeUnit,\n          testPurpose1Id = _this$state3.testPurpose1Id,\n          testPurpose2Id = _this$state3.testPurpose2Id,\n          testPurpose3Id = _this$state3.testPurpose3Id,\n          testPurpose4Id = _this$state3.testPurpose4Id,\n          email = _this$state3.email,\n          qualificationId = _this$state3.qualificationId,\n          qualificationSelect = _this$state3.qualificationSelect,\n          testpurposeSelect = _this$state3.testpurposeSelect,\n          specifyQualification = _this$state3.specifyQualification,\n          officerPosion = _this$state3.officerPosion,\n          unitCodeOfProgramPEQAS = _this$state3.unitCodeOfProgramPEQAS,\n          fax = _this$state3.fax,\n          sampleStatus = _this$state3.sampleStatus,\n          healthOrgTypeSelect = _this$state3.healthOrgTypeSelect,\n          healthOrgType = _this$state3.healthOrgType,\n          healthOrgTypeId = _this$state3.healthOrgTypeId,\n          technician = _this$state3.technician,\n          specifyTechnician = _this$state3.specifyTechnician,\n          positiveAffirmativeRight = _this$state3.positiveAffirmativeRight,\n          sampleRecipient = _this$state3.sampleRecipient,\n          specifySampleStatus = _this$state3.specifySampleStatus,\n          specifyTestPurpose = _this$state3.specifyTestPurpose,\n          specifyLevel = _this$state3.specifyLevel,\n          taxCodeOfTheUnit = _this$state3.taxCodeOfTheUnit,\n          hasErrorLever = _this$state3.hasErrorLever,\n          loading = _this$state3.loading;\n      var searchObject = {\n        pageIndex: 0,\n        pageSize: 1000000\n      };\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          handleClose = _this$props2.handleClose,\n          handleOKEditClose = _this$props2.handleOKEditClose,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n,\n          isHealthOrg = _this$props2.isHealthOrg;\n      return /*#__PURE__*/React.createElement(Dialog, {\n        open: open,\n        PaperComponent: PaperComponent,\n        maxWidth: \"lg\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: clsx(\"wrapperButton\", !loading && 'hidden'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 8\n        }\n      }, /*#__PURE__*/React.createElement(CircularProgress, {\n        className: \"buttonProgress\",\n        size: 24,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(DialogTitle, {\n        style: {\n          cursor: 'move'\n        },\n        id: \"draggable-dialog-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"mb-20 styleColor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 9\n        }\n      }, \" \", (id ? t(\"update\") : t(\"Add\")) + \" \" + t(\"EQAHealthOrg.title\"), \" \"), /*#__PURE__*/React.createElement(IconButton, {\n        style: {\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\"\n        },\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        color: \"error\",\n        title: t(\"close\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 112\n        }\n      }, \"close\"))), /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        style: {\n          overflowY: \"auto\",\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DialogContent, {\n        dividers: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        className: \"\",\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(AsynchronousAutocomplete, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EQAHealthOrg.HealthOrgType\")),\n        size: \"small\",\n        searchFunction: getAllHealthOrgType,\n        searchObject: searchObject,\n        defaultValue: healthOrgType,\n        value: healthOrgType,\n        displayLable: 'name',\n        valueTextValidator: healthOrgType,\n        onSelect: this.handleSelectHealthOrgType,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.taxCodeOfTheUnit\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"taxCodeOfTheUnit\",\n        value: taxCodeOfTheUnit,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.unitCodeOfProgramPEQAS\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"unitCodeOfProgramPEQAS\",\n        value: unitCodeOfProgramPEQAS,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EQAHealthOrg.Name\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"name\",\n        value: name,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 17\n        }\n      })), !isHealthOrg && /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormControlLabel, {\n        variant: \"outlined\",\n        size: \"small\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 26\n          }\n        }, t('EQAHealthOrg.isManualSetCode')),\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          checked: isManualSetCode,\n          onChange: function onChange(isManualSetCode) {\n            return _this3.handleChange(isManualSetCode, \"isManualSetCode\");\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 28\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.Code\")),\n        onChange: this.handleChange,\n        disabled: !isManualSetCode,\n        type: \"text\",\n        name: \"code\",\n        value: code,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControlLabel, {\n        variant: \"outlined\",\n        size: \"small\",\n        disabled: isHealthOrg,\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            fontSize: \"115%\"\n          },\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 26\n          }\n        }, t('EQAHealthOrg.positiveAffirmativeRight')),\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          checked: positiveAffirmativeRight,\n          onChange: function onChange(positiveAffirmativeRight) {\n            return _this3.handleChange(positiveAffirmativeRight, \"positiveAffirmativeRight\");\n          } // this.handleChange(isFinalResult, 'isFinalResult')\n          ,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 28\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EQAHealthOrg.AdministrativeUnit\")),\n        name: \"administrativeUnit\",\n        value: administrativeUnit ? administrativeUnit.name : \"\",\n        InputProps: {\n          endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n            position: \"end\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            size: 'small',\n            disabled: isView,\n            className: \"align-bottom\",\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: function onClick() {\n              return _this3.setState({\n                shouldOpenAdministrativeUnitsPopup: true\n              });\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 25\n            }\n          }, t('Select')))\n        },\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 17\n        }\n      }), shouldOpenAdministrativeUnitsPopup && /*#__PURE__*/React.createElement(AdministrativeUnitsPopup, {\n        open: shouldOpenAdministrativeUnitsPopup,\n        handleSelect: this.handleSelectAdministrativeUnit,\n        item: administrativeUnit,\n        handleClose: this.handleChangeAdministrativeUnitPopupClose,\n        t: t,\n        i18n: i18n,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EQAHealthOrg.Address\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"address\",\n        value: address,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.fax\")),\n        onChange: this.handleChange,\n        type: \"fax\",\n        name: \"fax\",\n        value: fax,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.ContactName\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"contactName\",\n        value: contactName,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 628,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.officerPosion\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"officerPosion\",\n        value: officerPosion,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.contactPhone\")),\n        onChange: this.handleChange,\n        type: \"number\",\n        name: \"contactPhone\",\n        value: contactPhone,\n        variant: \"outlined\",\n        size: \"small\" // validators={[ \"matchRegexp:^[0-9]*$\", \"isLengthNumber\"]}\n        // errorMessages={[ t(\"general.errorMessages_phone_number_invalid\"),\n        // t(\"general.errorMessages_phone_number_invalid\")]}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EQAHealthOrg.email\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"email\",\n        value: email,\n        validators: [\"required\", \"isEmail\"],\n        errorMessages: [t(\"general.errorMessages_required\"), t(\"general.errorMessages_email_valid\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 674,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"qualification\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 56\n        }\n      }, t(\"EQAHealthOrg.qualification\"))), /*#__PURE__*/React.createElement(Select, {\n        value: qualificationId,\n        onChange: function onChange(event) {\n          return _this3.handleChangeQualification(event);\n        },\n        inputProps: {\n          name: \"qualification\",\n          id: \"qualification\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 19\n        }\n      }, qualificationSelect.map(function (type) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: type.id,\n          value: type.id,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 687,\n            columnNumber: 23\n          }\n        }, type.name);\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.specifyQualification\") + \"(\" + t(\"if\") + \")\"),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"specifyQualification\",\n        value: specifyQualification,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        error: hasErrorLever,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"levelHealOrg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 54\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 21\n        }\n      }, \" * \"), t(\"EQAHealthOrg.levelHealOrg\"))), /*#__PURE__*/React.createElement(Select, {\n        value: levelId,\n        onChange: function onChange(event) {\n          return _this3.handleChangelevel(event);\n        },\n        inputProps: {\n          name: \"level\",\n          id: \"level\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 728,\n          columnNumber: 19\n        }\n      }, levelHealOrg.map(function (type) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: type.id,\n          value: type.id,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 736,\n            columnNumber: 21\n          }\n        }, type.name);\n      })), hasErrorLever && /*#__PURE__*/React.createElement(FormHelperText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 37\n        }\n      }, t(\"general.errorMessages_required\")))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 749,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.specifyLevel\")),\n        name: \"specifyLevel\",\n        onChange: this.handleChange,\n        value: specifyLevel,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 747,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 758,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"testurpose\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 53\n        }\n      }, t(\"EQAHealthOrg.testurpose1\"))), /*#__PURE__*/React.createElement(Select, {\n        value: testPurpose1Id,\n        onChange: function onChange(event) {\n          return _this3.handleChangetestpurpose1(event);\n        },\n        inputProps: {\n          name: \"testPurpose1\",\n          id: \"testPurpose1\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 762,\n          columnNumber: 19\n        }\n      }, testpurposeSelect.map(function (type) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: type.id,\n          value: type.id,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 770,\n            columnNumber: 23\n          }\n        }, type.name);\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 779,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"testurpose\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 781,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 781,\n          columnNumber: 53\n        }\n      }, t(\"EQAHealthOrg.testurpose2\"))), /*#__PURE__*/React.createElement(Select, {\n        value: testPurpose2Id,\n        onChange: function onChange(event) {\n          return _this3.handleChangetestpurpose2(event);\n        },\n        inputProps: {\n          name: \"testPurpose2\",\n          id: \"testPurpose2\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 782,\n          columnNumber: 19\n        }\n      }, testpurposeSelect.map(function (type) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: type.id,\n          value: type.id,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 23\n          }\n        }, type.name);\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 799,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 800,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"testurpose\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 53\n        }\n      }, t(\"EQAHealthOrg.testurpose3\"))), /*#__PURE__*/React.createElement(Select, {\n        value: testPurpose3Id,\n        onChange: function onChange(event) {\n          return _this3.handleChangetestpurpose3(event);\n        },\n        inputProps: {\n          name: \"testPurpose3\",\n          id: \"testPurpose3\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 19\n        }\n      }, testpurposeSelect.map(function (type) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: type.id,\n          value: type.id,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 812,\n            columnNumber: 23\n          }\n        }, type.name);\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 820,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 821,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"testurpose\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 53\n        }\n      }, t(\"EQAHealthOrg.testurpose4\"))), /*#__PURE__*/React.createElement(Select, {\n        value: testPurpose4Id,\n        onChange: function onChange(event) {\n          return _this3.handleChangetestpurpose4(event);\n        },\n        inputProps: {\n          name: \"testPurpose4\",\n          id: \"testPurpose4\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 824,\n          columnNumber: 19\n        }\n      }, testpurposeSelect.map(function (type) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: type.id,\n          value: type.id,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 833,\n            columnNumber: 23\n          }\n        }, type.name);\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 841,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 844,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.specifyTestPurpose\")),\n        name: \"specifyTestPurpose\",\n        onChange: this.handleChange,\n        value: specifyTestPurpose,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 842,\n          columnNumber: 17\n        }\n      })))), /*#__PURE__*/React.createElement(DialogActions, {\n        spacing: 4,\n        className: \"flex flex-end flex-middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 855,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 856,\n          columnNumber: 13\n        }\n      }, t('Cancel')), !isView && /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 862,\n          columnNumber: 26\n        }\n      }, t('Save')))));\n    }\n  }]);\n\n  return EQAHealthOrgEditorDialog;\n}(Component);\n\nexport default EQAHealthOrgEditorDialog;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/EQAHealthOrg/EQAHealthOrgEditorDialog.jsx"],"names":["React","Component","Dialog","Button","Grid","DialogActions","FormControlLabel","InputAdornment","Checkbox","FormHelperText","Icon","IconButton","KeyboardDatePicker","ValidatorForm","TextValidator","TextField","SelectValidator","getByPage","deleteItem","saveItem","getItemById","checkCode","checkEmail","getAllTestPurposes","getAllEQAhealthOrgLevels","searchByPage","getAllQualifications","getQualificationById","FormControl","Select","MenuItem","InputLabel","Input","AdministrativeUnitsPopup","getAllHealthOrgType","DialogContent","DialogTitle","Draggable","Paper","AsynchronousAutocomplete","MuiPickersUtilsProvider","DateTimePicker","DateFnsUtils","EQAPlanningSearchDialog","EQAPOrgTypeSearchDialog","EQAHealthOrg","toast","getAll","clsx","CircularProgress","configure","autoClose","draggable","limit","PaperComponent","props","EQAHealthOrgEditorDialog","state","name","taxCodeOfTheUnit","code","specifyTestPurpose","specifyLevel","positiveAffirmativeRight","shouldOpenSearchDialog","shouldOpenConfirmationDialog","qualificationSelect","qualification","officerPosion","unitCodeOfProgramPEQAS","testpurposeSelect","testPurpose1","testPurpose2","testPurpose3","testPurpose4","levelHealOrg","healthOrgTypeSelect","healthOrgType","administrativeUnit","fax","isView","shouldOpenAdministrativeUnitsPopup","level","sampleReceiptDate","Date","sampleRecipient","specifySampleStatus","specifyQualification","isManualSetCode","hasErrorLever","levelId","loading","handleDateChange","date","setState","handleChange","event","source","persist","isActive","target","checked","isManagementUnit","value","handleChangeAdministrativeUnitPopupClose","handleSelectAdministrativeUnit","id","handleChangeQualification","find","item","qualificationId","handleChangetestpurpose1","testPurpose1Id","handleChangetestpurpose2","testPurpose2Id","handleChangetestpurpose3","testPurpose3Id","handleChangetestpurpose4","testPurpose4Id","handleChangelevel","handleChangeType","healthOrgTypeId","handleFormSubmit","email","t","then","res","data","warning","result","success","response","status","handleSearchDialogClose","handleSearchOrgTypeDialogClose","shouldOpenSearchOrgTypeDialog","handleSelectHealthOrgType","handleSelectAdministrativeUnitType","open","handleClose","isHealthOrg","addValidationRule","length","publishDate","description","address","contactName","contactPhone","sampleStatus","technician","specifyTechnician","searchObject","pageIndex","pageSize","handleOKEditClose","i18n","cursor","position","right","top","overflowY","display","flexDirection","color","fontSize","endAdornment","map","type"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  DialogActions,\r\n  FormControlLabel,\r\n  InputAdornment, Checkbox,FormHelperText, Icon, IconButton\r\n} from \"@material-ui/core\";\r\nimport {\r\n  KeyboardDatePicker\r\n} from \"@material-ui/pickers\";\r\nimport { ValidatorForm, TextValidator, TextField, SelectValidator } from \"react-material-ui-form-validator\";\r\nimport { getByPage, deleteItem, saveItem, getItemById, checkCode, checkEmail } from \"./EQAHealthOrgService\";\r\nimport { getAllTestPurposes } from \"../TestPurpose/TestPurposeService\";\r\nimport { getAllEQAhealthOrgLevels } from \"../HealthOrgLevel/HealthOrgLevelService\"\r\nimport { searchByPage } from \"../EQAHealthOrgType/EQAHealthOrgTypeService\";\r\nimport { getAllQualifications, getQualificationById } from '../Qualification/QualificationService';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport AdministrativeUnitsPopup from './AdministrativeUnitSearchDialog';\r\nimport { searchByPage as getAllHealthOrgType } from \"../EQAHealthOrgType/EQAHealthOrgTypeService\";\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Draggable from 'react-draggable';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\r\nimport { MuiPickersUtilsProvider, DateTimePicker } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport EQAPlanningSearchDialog from './EQAPlanningSearchDialog';\r\nimport EQAPOrgTypeSearchDialog from './EQAPOrgTypeSearchDialog';\r\nimport EQAHealthOrg from \"./EQAHealthOrg\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { getAll } from \"../AllocationSampleSet/AllocationSampleSetService\";\r\nimport '../../../styles/views/_loadding.scss';\r\nimport clsx from 'clsx';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport '../../../styles/views/_style.scss';\r\n\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit: 3\r\n});\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\nclass EQAHealthOrgEditorDialog extends Component {\r\n  state = {\r\n    name: \"\",\r\n    taxCodeOfTheUnit: \"\",\r\n    code: \"\", specifyTestPurpose: \"\",\r\n    specifyLevel: \"\",\r\n    positiveAffirmativeRight: true,\r\n    shouldOpenSearchDialog: false,\r\n    shouldOpenConfirmationDialog: false,\r\n    qualificationSelect: [],\r\n    qualification: {}, officerPosion: \"\", unitCodeOfProgramPEQAS: \"\",\r\n    testpurposeSelect: [],\r\n    testPurpose1: {},\r\n    testPurpose2: {},\r\n    testPurpose3: {},\r\n    testPurpose4: {},\r\n    levelHealOrg: [],\r\n    healthOrgTypeSelect: [],\r\n    healthOrgType: [],\r\n    administrativeUnit: \"\",\r\n    fax: \"\",\r\n    isView: false,\r\n    shouldOpenAdministrativeUnitsPopup: false,\r\n    level: {}, sampleReceiptDate: new Date(),\r\n    sampleRecipient: \"\", specifySampleStatus: \"\", specifyQualification: \"\",\r\n    isManualSetCode: false,\r\n    hasErrorLever:false,\r\n    levelId: \"\",\r\n    loading: false\r\n  };\r\n  handleDateChange = date => {\r\n    this.setState({ sampleReceiptDate: date });\r\n  };\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n    if (source === \"isManagementUnit\") {\r\n      this.setState({ isManagementUnit: event.target.checked });\r\n      return;\r\n    }\r\n\r\n    if (source === \"positiveAffirmativeRight\") {\r\n      this.setState({ positiveAffirmativeRight: event.target.checked });\r\n      return;\r\n    }\r\n\r\n    if (source === \"isManualSetCode\") {\r\n      this.setState({ isManualSetCode: event.target.checked });\r\n      return;\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleChangeAdministrativeUnitPopupClose = () => {\r\n    this.setState({ shouldOpenAdministrativeUnitsPopup: false }, function () {\r\n    });\r\n  }\r\n\r\n  handleSelectAdministrativeUnit = (administrativeUnit) => {\r\n    if (administrativeUnit && administrativeUnit.id) {\r\n      this.setState({ administrativeUnit });\r\n      this.handleChangeAdministrativeUnitPopupClose();\r\n    }\r\n  }\r\n  handleChangeQualification = (event, source) => {\r\n    let { qualificationSelect } = this.state;\r\n    this.setState({\r\n      qualification: qualificationSelect.find(item => item.id == event.target.value),\r\n      qualificationId: event.target.value\r\n    })\r\n  }\r\n  handleChangetestpurpose1 = (event, source) => {\r\n    let { testpurposeSelect } = this.state;\r\n    this.setState({\r\n      testPurpose1: testpurposeSelect.find(item => item.id == event.target.value),\r\n      testPurpose1Id: event.target.value\r\n    })\r\n  }\r\n  handleChangetestpurpose2 = (event, source) => {\r\n    let { testpurposeSelect } = this.state;\r\n    this.setState({\r\n      testPurpose2: testpurposeSelect.find(item => item.id == event.target.value),\r\n      testPurpose2Id: event.target.value\r\n    })\r\n  }\r\n  handleChangetestpurpose3 = (event, source) => {\r\n    let { testpurposeSelect } = this.state;\r\n    this.setState({\r\n      testPurpose3: testpurposeSelect.find(item => item.id == event.target.value),\r\n      testPurpose3Id: event.target.value\r\n    })\r\n  }\r\n  handleChangetestpurpose4 = (event, source) => {\r\n    let { testpurposeSelect } = this.state;\r\n    this.setState({\r\n      testPurpose4: testpurposeSelect.find(item => item.id == event.target.value),\r\n      testPurpose4Id: event.target.value\r\n    })\r\n  }\r\n  handleChangelevel = (event, source) => {\r\n    let { levelHealOrg } = this.state;\r\n    this.setState({\r\n      level: levelHealOrg.find(item => item.id == event.target.value),\r\n      levelId: event.target.value,\r\n      hasErrorLever : false\r\n    })\r\n  }\r\n\r\n  handleChangeType = (event, source) => {\r\n    let { healthOrgTypeSelect } = this.state;\r\n    this.setState({\r\n      healthOrgType: healthOrgTypeSelect.find(item => item.id == event.target.value),\r\n      healthOrgTypeId: event.target.value\r\n    })\r\n  }\r\n\r\n  handleFormSubmit = () => {\r\n    let { id, code, isManualSetCode, email, hasErrorLever, levelId } = this.state;\r\n    let { t } = this.props;\r\n    this.setState({ loading: true });\r\n\r\n    if(levelId == \"\" ){\r\n      this.setState({hasErrorLever: true, loading:false});\r\n      return\r\n    }\r\n    if (email != null) {\r\n      checkEmail(id, email).then(res => {\r\n        if (res.data) {\r\n          toast.warning(t(\"sign_up.duplicate_email\"));\r\n          this.setState({ loading: false });\r\n          return\r\n        } else {\r\n          if (isManualSetCode) {\r\n            checkCode(id, code).then(result => {\r\n              if (result.data) {\r\n                toast.warning(t(\"EQAHealthOrg.duplicateCode\"));\r\n                this.setState({ loading: false });\r\n              } else {\r\n                if (id) {\r\n                  saveItem({\r\n                    ...this.state\r\n                  }).then(() => {\r\n                    toast.success(t('mess_edit'));\r\n                    this.setState({ loading: false });\r\n                  });\r\n                } else {\r\n                  saveItem({\r\n                    ...this.state\r\n                  }).then((response) => {\r\n                    if(response.data != null && response.status == 200){\r\n                      this.state.id = response.data.id;\r\n                      toast.success(t('mess_add'));\r\n                      this.setState({ ...this.state, loading: false });\r\n                    }\r\n                  });\r\n                }\r\n              }\r\n            })\r\n          } else {\r\n            if (id) {\r\n              saveItem({\r\n                ...this.state\r\n              }).then(() => {\r\n                // this.props.handleOKEditClose();\r\n                this.setState({ loading: false });\r\n                toast.success(t('mess_edit'));\r\n              });\r\n\r\n            } else {\r\n              saveItem({\r\n                ...this.state\r\n              }).then((response) => {\r\n                if(response.data != null && response.status == 200){\r\n                  this.state.id = response.data.id;\r\n                  toast.success(t('mess_add'));\r\n                  this.setState({ ...this.state, loading: false });\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      })\r\n    } else {\r\n      if (isManualSetCode) {\r\n        checkCode(id, code).then(result => {\r\n          if (result.data) {\r\n            toast.warning(t(\"EQAHealthOrg.duplicateCode\"));\r\n            this.setState({ loading: false });\r\n          } else {\r\n            if (id) {\r\n              saveItem({\r\n                ...this.state\r\n              }).then(() => {\r\n                // this.props.handleOKEditClose();\r\n                toast.success(t('mess_edit'));\r\n                this.setState({ loading: false });\r\n              });\r\n            } else {\r\n              saveItem({\r\n                ...this.state\r\n              }).then((response) => {\r\n                if(response.data != null && response.status == 200){\r\n                  this.state.id = response.data.id;\r\n                  toast.success(t('mess_add'));\r\n                  this.setState({ ...this.state, loading: false });\r\n                }\r\n              });\r\n            }\r\n          }\r\n        })\r\n      } else {\r\n        if (id) {\r\n          saveItem({\r\n            ...this.state\r\n          }).then(() => {\r\n            // this.props.handleOKEditClose();\r\n            toast.success(t('mess_edit'));\r\n            this.setState({ loading: false });\r\n          });\r\n\r\n        } else {\r\n          saveItem({\r\n            ...this.state\r\n          }).then((response) => {\r\n            if(response.data != null && response.status == 200){\r\n              this.state.id = response.data.id;\r\n              toast.success(t('mess_add'));\r\n              this.setState({ ...this.state, loading: false });\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    let { open, handleClose, item, isHealthOrg } = this.props;\r\n    this.setState({\r\n      ...this.props.item, isHealthOrg: isHealthOrg\r\n    }, function () {\r\n      let { qualification, testPurpose1, testPurpose2, testPurpose3, testPurpose4, level, healthOrgType } = this.state;\r\n      if (healthOrgType != null && healthOrgType.id != null) {\r\n        this.setState({ healthOrgTypeId: healthOrgType.id })\r\n      }\r\n      if (qualification != null && qualification.id != null) {\r\n        this.setState({ qualificationId: qualification.id })\r\n      }\r\n      if (testPurpose1 != null && testPurpose1.id != null) {\r\n        this.setState({ testPurpose1Id: testPurpose1.id })\r\n      }\r\n      if (testPurpose2 != null && testPurpose2.id != null) {\r\n        this.setState({ testPurpose2Id: testPurpose2.id })\r\n      }\r\n      if (testPurpose3 != null && testPurpose3.id != null) {\r\n        this.setState({ testPurpose3Id: testPurpose3.id })\r\n      }\r\n      if (testPurpose4 != null && testPurpose4.id != null) {\r\n        this.setState({ testPurpose4Id: testPurpose4.id })\r\n      }\r\n      if (level != null && level.id != null) {\r\n        this.setState({ levelId: level.id })\r\n      }\r\n    }\r\n    );\r\n  }\r\n  componentDidMount() {\r\n\r\n    getAllQualifications().then((data) => {\r\n      let qualificationSelect = data.data;\r\n      this.setState({ qualificationSelect: qualificationSelect });\r\n    });\r\n    getAllTestPurposes().then((data) => {\r\n      let testpurposeSelect = data.data;\r\n      this.setState({ testpurposeSelect: testpurposeSelect })\r\n    });\r\n\r\n    getAllEQAhealthOrgLevels().then((data) => {\r\n      let levelHealOrg = data.data;\r\n      this.setState({ levelHealOrg: levelHealOrg })\r\n    });\r\n    ValidatorForm.addValidationRule(\"isLengthNumber\", value => {\r\n      if (value.length > 10) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n  }\r\n\r\n  handleSearchDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenSearchDialog: false\r\n    });\r\n  };\r\n  handleSearchOrgTypeDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenSearchOrgTypeDialog: false\r\n    });\r\n  };\r\n  handleSelectHealthOrgType = (item) => {\r\n    this.setState({ healthOrgType: item });\r\n    this.handleSearchOrgTypeDialogClose();\r\n  }\r\n  handleSelectAdministrativeUnitType = (item) => {\r\n    this.setState({ administrativeUnit: item });\r\n    this.handleSearchDialogClose();\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      id,\r\n      name,\r\n      publishDate,\r\n      code,\r\n      description,\r\n      isManualSetCode,\r\n      address,\r\n      isView,\r\n      contactName, levelId, shouldOpenAdministrativeUnitsPopup,\r\n      contactPhone, levelHealOrg,\r\n      shouldOpenSearchOrgTypeDialog,\r\n      shouldOpenConfirmationDialog, isManagementUnit,\r\n      shouldOpenSearchDialog, sampleReceiptDate,\r\n      administrativeUnit, testPurpose1Id, testPurpose2Id, testPurpose3Id, testPurpose4Id,\r\n      email, qualificationId, qualificationSelect, testpurposeSelect, specifyQualification, officerPosion, unitCodeOfProgramPEQAS, fax,\r\n      sampleStatus, healthOrgTypeSelect, healthOrgType, healthOrgTypeId,\r\n      technician, specifyTechnician, positiveAffirmativeRight, sampleRecipient, specifySampleStatus, specifyTestPurpose, specifyLevel, taxCodeOfTheUnit,\r\n      hasErrorLever, loading\r\n    } = this.state;\r\n    let searchObject = { pageIndex: 0, pageSize: 1000000 };\r\n    let { open, handleClose, handleOKEditClose, t, i18n, isHealthOrg } = this.props;\r\n\r\n    return (\r\n      <Dialog open={open} PaperComponent={PaperComponent} maxWidth=\"lg\" fullWidth={true}>\r\n       <div className={clsx(\"wrapperButton\", !loading && 'hidden')} >\r\n          <CircularProgress className=\"buttonProgress\" size={24} />\r\n        </div>\r\n        <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\r\n        <span className=\"mb-20 styleColor\"> {(id ? t(\"update\") : t(\"Add\")) + \" \" + t(\"EQAHealthOrg.title\")} </span>\r\n        <IconButton style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }} onClick={() => handleClose()}><Icon color=\"error\"\r\n              title={t(\"close\")}>\r\n              close\r\n            </Icon>\r\n            </IconButton>\r\n        </DialogTitle>\r\n        <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit} style={{\r\n          overflowY: \"auto\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\"\r\n        }}>\r\n          <DialogContent dividers>\r\n            <Grid className=\"\" container spacing={2}>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <AsynchronousAutocomplete\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EQAHealthOrg.HealthOrgType\")}\r\n                    </span>\r\n                  }\r\n                  size=\"small\"\r\n                  searchFunction={getAllHealthOrgType}\r\n                  searchObject={searchObject}\r\n                  defaultValue={healthOrgType}\r\n                  value={healthOrgType}\r\n                  displayLable={'name'}\r\n                  valueTextValidator={healthOrgType}\r\n                  onSelect={this.handleSelectHealthOrgType}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.taxCodeOfTheUnit\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"taxCodeOfTheUnit\"\r\n                  value={taxCodeOfTheUnit}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.unitCodeOfProgramPEQAS\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"unitCodeOfProgramPEQAS\"\r\n                  value={unitCodeOfProgramPEQAS}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EQAHealthOrg.Name\")}\r\n                    </span>\r\n                  }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              {!isHealthOrg && (<Grid item lg={4} md={4} sm={6} xs={12}>\r\n                <FormControlLabel\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  label={<span className=\"font\">{t('EQAHealthOrg.isManualSetCode')}</span>}\r\n                  control={<Checkbox checked={isManualSetCode}\r\n                    onChange={(isManualSetCode) =>\r\n                      this.handleChange(isManualSetCode, \"isManualSetCode\")\r\n                    }\r\n                  />}\r\n                />\r\n              </Grid>)}\r\n              <Grid item lg={4} md={4} sm={6} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.Code\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  disabled={!isManualSetCode}\r\n                  type=\"text\"\r\n                  name=\"code\"\r\n                  value={code}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n\r\n              {/* <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <FormControlLabel\r\n                  label={t('EQAHealthOrg.isManagementUnit')}\r\n                  control={<Checkbox checked={isManagementUnit}\r\n                    onChange={(isManagementUnit) =>\r\n                      this.handleChange(isManagementUnit, \"isManagementUnit\")\r\n                      // this.handleChange(isFinalResult, 'isFinalResult')\r\n                    }\r\n                  />}\r\n                />\r\n              </Grid> */}\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <FormControlLabel\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  disabled={isHealthOrg}\r\n                  label={<span style={{fontSize: \"115%\"}} className=\"font\">{t('EQAHealthOrg.positiveAffirmativeRight')}</span>}\r\n                  control={<Checkbox checked={positiveAffirmativeRight}\r\n                    onChange={(positiveAffirmativeRight) =>\r\n                      this.handleChange(positiveAffirmativeRight, \"positiveAffirmativeRight\")\r\n                      // this.handleChange(isFinalResult, 'isFinalResult')\r\n                    }\r\n                  />}\r\n                />\r\n                {/* <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={t(\"EQAHealthOrg.isManagementUnit\")}\r\n                  onChange={this.handleChange}\r\n                  disabled = {true}\r\n                  type=\"text\"\r\n                  name=\"code\"\r\n                  value={code}\r\n                /> */}\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  size=\"small\"\r\n                  className=\"w-100 \"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EQAHealthOrg.AdministrativeUnit\")}\r\n                    </span>\r\n                  }\r\n                  name=\"administrativeUnit\"\r\n                  value={administrativeUnit ? administrativeUnit.name : \"\"}\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <Button\r\n                          size={'small'}\r\n                          disabled={isView}\r\n                          className=\"align-bottom\"\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={() => this.setState({ shouldOpenAdministrativeUnitsPopup: true })}\r\n                        >\r\n                          {t('Select')}\r\n                        </Button>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n                {shouldOpenAdministrativeUnitsPopup && (\r\n                  <AdministrativeUnitsPopup\r\n                    open={shouldOpenAdministrativeUnitsPopup}\r\n                    handleSelect={this.handleSelectAdministrativeUnit}\r\n                    item={administrativeUnit}\r\n                    handleClose={this.handleChangeAdministrativeUnitPopupClose}\r\n                    t={t} i18n={i18n}\r\n                  ></AdministrativeUnitsPopup>\r\n                )\r\n                }\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EQAHealthOrg.Address\")}\r\n                    </span>\r\n                  }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"address\"\r\n                  value={address}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.fax\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"fax\"\r\n                  name=\"fax\"\r\n                  value={fax}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.ContactName\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"contactName\"\r\n                  value={contactName}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.officerPosion\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"officerPosion\"\r\n                  value={officerPosion}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.contactPhone\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"number\"\r\n                  name=\"contactPhone\"\r\n                  value={contactPhone}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                // validators={[ \"matchRegexp:^[0-9]*$\", \"isLengthNumber\"]}\r\n                // errorMessages={[ t(\"general.errorMessages_phone_number_invalid\"),\r\n                // t(\"general.errorMessages_phone_number_invalid\")]}\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EQAHealthOrg.email\")}\r\n                    </span>\r\n                  }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  validators={[\"required\", \"isEmail\"]}\r\n                  errorMessages={[\r\n                    t(\"general.errorMessages_required\"),\r\n                    t(\"general.errorMessages_email_valid\")\r\n                  ]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <FormControl className=\"w-100\" variant=\"outlined\" size=\"small\">\r\n                  <InputLabel htmlFor=\"qualification\">{<span className=\"font\">{t(\"EQAHealthOrg.qualification\")}</span>}</InputLabel>\r\n                  <Select\r\n                    value={qualificationId}\r\n                    onChange={event => this.handleChangeQualification(event)}\r\n                    inputProps={{\r\n                      name: \"qualification\",\r\n                      id: \"qualification\"\r\n                    }}\r\n\r\n                  >\r\n                    {qualificationSelect.map(type => (\r\n                      <MenuItem key={type.id} value={type.id}>\r\n                        {type.name}\r\n                      </MenuItem>\r\n\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.specifyQualification\") + \"(\" + t(\"if\") + \")\"}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"specifyQualification\"\r\n                  value={specifyQualification}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n\r\n              {/* <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <FormControl className=\"w-100\">\r\n                  <InputLabel htmlFor=\"positiveAffirmativeRight\">{t(\"EQAHealthOrg.positiveAffirmativeRight\")}</InputLabel>\r\n                  <Select\r\n                    name=\"positiveAffirmativeRight\"\r\n                    value={positiveAffirmativeRight}\r\n                    onChange={event => this.handleChange(event)}\r\n                    input={<Input id=\"positiveAffirmativeRight\" />}\r\n                  >\r\n                    <MenuItem value={true}>{t(\"Yes\")}</MenuItem>\r\n                    <MenuItem value={false}>{t(\"No\")}</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid> */}\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <FormControl className=\"w-100\" error={hasErrorLever} variant=\"outlined\" size=\"small\">\r\n                  <InputLabel htmlFor=\"levelHealOrg\"><span className=\"font\">\r\n                    <span style={{ color: \"red\" }}> * </span>\r\n                    {t(\"EQAHealthOrg.levelHealOrg\")}\r\n                  </span></InputLabel>\r\n                  <Select\r\n                    value={levelId}\r\n                    onChange={event => this.handleChangelevel(event)}\r\n                    inputProps={{\r\n                      name: \"level\",\r\n                      id: \"level\"\r\n                    }}\r\n                  >{levelHealOrg.map(type => (\r\n                    <MenuItem key={type.id} value={type.id}>\r\n                      {type.name}\r\n                    </MenuItem>\r\n                  ))}\r\n\r\n                  </Select>\r\n                  {hasErrorLever && <FormHelperText>{t(\"general.errorMessages_required\")}</FormHelperText>}\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.specifyLevel\")}</span>}\r\n                  name=\"specifyLevel\"\r\n                  onChange={this.handleChange}\r\n                  value={specifyLevel}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <FormControl className=\"w-100\" variant=\"outlined\"\r\n                  size=\"small\">\r\n                  <InputLabel htmlFor=\"testurpose\">{<span className=\"font\">{t(\"EQAHealthOrg.testurpose1\")}</span>}</InputLabel>\r\n                  <Select\r\n                    value={testPurpose1Id}\r\n                    onChange={event => this.handleChangetestpurpose1(event)}\r\n                    inputProps={{\r\n                      name: \"testPurpose1\",\r\n                      id: \"testPurpose1\"\r\n                    }}                   >\r\n                    {testpurposeSelect.map(type => (\r\n                      <MenuItem key={type.id} value={type.id}>\r\n                        {type.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <FormControl className=\"w-100\" variant=\"outlined\"\r\n                  size=\"small\">\r\n                  <InputLabel htmlFor=\"testurpose\">{<span className=\"font\">{t(\"EQAHealthOrg.testurpose2\")}</span>}</InputLabel>\r\n                  <Select\r\n                    value={testPurpose2Id}\r\n                    onChange={event => this.handleChangetestpurpose2(event)}\r\n                    inputProps={{\r\n                      name: \"testPurpose2\",\r\n                      id: \"testPurpose2\"\r\n                    }}\r\n                  >\r\n                    {testpurposeSelect.map(type => (\r\n                      <MenuItem key={type.id} value={type.id}>\r\n                        {type.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <FormControl className=\"w-100\" variant=\"outlined\"\r\n                  size=\"small\">\r\n                  <InputLabel htmlFor=\"testurpose\">{<span className=\"font\">{t(\"EQAHealthOrg.testurpose3\")}</span>}</InputLabel>\r\n                  <Select\r\n                    value={testPurpose3Id}\r\n                    onChange={event => this.handleChangetestpurpose3(event)}\r\n                    inputProps={{\r\n                      name: \"testPurpose3\",\r\n                      id: \"testPurpose3\"\r\n                    }}\r\n                  >\r\n                    {testpurposeSelect.map(type => (\r\n                      <MenuItem key={type.id} value={type.id}>\r\n                        {type.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <FormControl className=\"w-100\" variant=\"outlined\"\r\n                  size=\"small\">\r\n                  <InputLabel htmlFor=\"testurpose\">{<span className=\"font\">{t(\"EQAHealthOrg.testurpose4\")}</span>}</InputLabel>\r\n                  <Select\r\n                    value={testPurpose4Id}\r\n                    onChange={event => this.handleChangetestpurpose4(event)}\r\n                    inputProps={{\r\n                      name: \"testPurpose4\",\r\n                      id: \"testPurpose4\"\r\n                    }}\r\n                  >\r\n                    {testpurposeSelect.map(type => (\r\n                      <MenuItem key={type.id} value={type.id}>\r\n                        {type.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.specifyTestPurpose\")}</span>}\r\n                  name=\"specifyTestPurpose\"\r\n                  onChange={this.handleChange}\r\n                  value={specifyTestPurpose}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n\r\n          </DialogContent>\r\n          <DialogActions spacing={4} className=\"flex flex-end flex-middle\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={() => handleClose()}>\r\n              {t('Cancel')}\r\n            </Button>\r\n            {(!isView && <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\">\r\n              {t('Save')}\r\n            </Button>)}\r\n          </DialogActions>\r\n        </ValidatorForm>\r\n      </Dialog >\r\n    );\r\n  }\r\n}\r\n\r\nexport default EQAHealthOrgEditorDialog;\r\n"]},"metadata":{},"sourceType":"module"}