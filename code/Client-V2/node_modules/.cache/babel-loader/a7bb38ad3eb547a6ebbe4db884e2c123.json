{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n\nvar PropTypes = require('prop-types');\n\nvar Tag = require('./Tag');\n\nvar Input = require('./Input');\n\nvar Suggestions = require('./Suggestions');\n\nvar KEYS = {\n  ENTER: 13,\n  TAB: 9,\n  BACKSPACE: 8,\n  UP_ARROW: 38,\n  DOWN_ARROW: 40\n};\nvar CLASS_NAMES = {\n  root: 'react-tags',\n  rootFocused: 'is-focused',\n  selected: 'react-tags__selected',\n  selectedTag: 'react-tags__selected-tag',\n  selectedTagName: 'react-tags__selected-tag-name',\n  search: 'react-tags__search',\n  searchInput: 'react-tags__search-input',\n  suggestions: 'react-tags__suggestions',\n  suggestionActive: 'is-active',\n  suggestionDisabled: 'is-disabled'\n};\n\nvar ReactTags = /*@__PURE__*/function (superclass) {\n  function ReactTags(props) {\n    superclass.call(this, props);\n    this.state = {\n      query: '',\n      focused: false,\n      expandable: false,\n      selectedIndex: -1,\n      classNames: Object.assign({}, CLASS_NAMES, this.props.classNames)\n    };\n    this.inputEventHandlers = {\n      // Provide a no-op function to the input component to avoid warnings\n      // <https://github.com/i-like-robots/react-tags/issues/135>\n      // <https://github.com/facebook/react/issues/13835>\n      onChange: function onChange() {},\n      onBlur: this.handleBlur.bind(this),\n      onFocus: this.handleFocus.bind(this),\n      onInput: this.handleInput.bind(this),\n      onKeyDown: this.handleKeyDown.bind(this)\n    };\n    this.container = React.createRef();\n  }\n\n  if (superclass) ReactTags.__proto__ = superclass;\n  ReactTags.prototype = Object.create(superclass && superclass.prototype);\n  ReactTags.prototype.constructor = ReactTags;\n\n  ReactTags.prototype.componentWillReceiveProps = function componentWillReceiveProps(newProps) {\n    this.setState({\n      classNames: Object.assign({}, CLASS_NAMES, newProps.classNames)\n    });\n  };\n\n  ReactTags.prototype.handleInput = function handleInput(e) {\n    var query = e.target.value;\n\n    if (this.props.handleInputChange) {\n      this.props.handleInputChange(query);\n    }\n\n    this.setState({\n      query: query\n    });\n  };\n\n  ReactTags.prototype.handleKeyDown = function handleKeyDown(e) {\n    var ref = this.state;\n    var query = ref.query;\n    var selectedIndex = ref.selectedIndex;\n    var ref$1 = this.props;\n    var delimiters = ref$1.delimiters;\n    var delimiterChars = ref$1.delimiterChars; // when one of the terminating keys is pressed, add current query to the tags.\n\n    if (delimiters.indexOf(e.keyCode) > -1 || delimiterChars.indexOf(e.key) > -1) {\n      if (query || selectedIndex > -1) {\n        e.preventDefault();\n      }\n\n      this.handleDelimiter();\n    } // when backspace key is pressed and query is blank, delete the last tag\n\n\n    if (e.keyCode === KEYS.BACKSPACE && query.length === 0 && this.props.allowBackspace) {\n      this.deleteTag(this.props.tags.length - 1);\n    }\n\n    if (e.keyCode === KEYS.UP_ARROW) {\n      e.preventDefault(); // if last item, cycle to the bottom\n\n      if (selectedIndex <= 0) {\n        this.setState({\n          selectedIndex: this.suggestions.state.options.length - 1\n        });\n      } else {\n        this.setState({\n          selectedIndex: selectedIndex - 1\n        });\n      }\n    }\n\n    if (e.keyCode === KEYS.DOWN_ARROW) {\n      e.preventDefault();\n      this.setState({\n        selectedIndex: (selectedIndex + 1) % this.suggestions.state.options.length\n      });\n    }\n  };\n\n  ReactTags.prototype.handleDelimiter = function handleDelimiter() {\n    var ref = this.state;\n    var query = ref.query;\n    var selectedIndex = ref.selectedIndex;\n\n    if (query.length >= this.props.minQueryLength) {\n      // Check if the user typed in an existing suggestion.\n      var match = this.suggestions.state.options.findIndex(function (suggestion) {\n        return suggestion.name.search(new RegExp(\"^\" + query + \"$\", 'i')) === 0;\n      });\n      var index = selectedIndex === -1 ? match : selectedIndex;\n\n      if (index > -1 && this.suggestions.state.options[index]) {\n        this.addTag(this.suggestions.state.options[index]);\n      } else if (this.props.allowNew) {\n        this.addTag({\n          name: query\n        });\n      }\n    }\n  };\n\n  ReactTags.prototype.handleClick = function handleClick(e) {\n    if (document.activeElement !== e.target) {\n      this.input.input.focus();\n    }\n  };\n\n  ReactTags.prototype.handleBlur = function handleBlur() {\n    this.setState({\n      focused: false,\n      selectedIndex: -1\n    });\n\n    if (this.props.handleBlur) {\n      this.props.handleBlur();\n    }\n\n    if (this.props.addOnBlur) {\n      this.handleDelimiter();\n    }\n  };\n\n  ReactTags.prototype.handleFocus = function handleFocus() {\n    this.setState({\n      focused: true\n    });\n\n    if (this.props.handleFocus) {\n      this.props.handleFocus();\n    }\n  };\n\n  ReactTags.prototype.handleDeleteTag = function handleDeleteTag(index, event) {\n    // Because we'll destroy the element with cursor focus we need to ensure\n    // it does not get lost and move it to the next interactive element\n    if (this.container.current) {\n      var interactiveEls = this.container.current.querySelectorAll('a,button,input');\n      var currentEl = Array.prototype.findIndex.call(interactiveEls, function (element) {\n        return element === event.currentTarget;\n      });\n      var nextEl = interactiveEls[currentEl - 1] || interactiveEls[currentEl + 1];\n\n      if (nextEl) {\n        nextEl.focus();\n      }\n    }\n\n    this.deleteTag(index);\n  };\n\n  ReactTags.prototype.addTag = function addTag(tag) {\n    if (tag.disabled) {\n      return;\n    }\n\n    if (typeof this.props.handleValidate === 'function' && !this.props.handleValidate(tag)) {\n      return;\n    }\n\n    this.props.handleAddition(tag); // reset the state\n\n    this.setState({\n      query: '',\n      selectedIndex: -1\n    });\n  };\n\n  ReactTags.prototype.deleteTag = function deleteTag(i) {\n    this.props.handleDelete(i);\n\n    if (this.props.clearInputOnDelete && this.state.query !== '') {\n      this.setState({\n        query: ''\n      });\n    }\n  };\n\n  ReactTags.prototype.render = function render() {\n    var this$1 = this;\n    var listboxId = 'ReactTags-listbox';\n    var TagComponent = this.props.tagComponent || Tag;\n    var tags = this.props.tags.map(function (tag, i) {\n      return React.createElement(TagComponent, {\n        key: i,\n        tag: tag,\n        classNames: this$1.state.classNames,\n        onDelete: this$1.handleDeleteTag.bind(this$1, i)\n      });\n    });\n    var expandable = this.state.focused && this.state.query.length >= this.props.minQueryLength;\n    var classNames = [this.state.classNames.root];\n    this.state.focused && classNames.push(this.state.classNames.rootFocused);\n    return React.createElement('div', {\n      ref: this.container,\n      className: classNames.join(' '),\n      onClick: this.handleClick.bind(this)\n    }, React.createElement('div', {\n      className: this.state.classNames.selected,\n      'aria-live': 'polite',\n      'aria-relevant': 'additions removals'\n    }, tags), React.createElement('div', {\n      className: this.state.classNames.search\n    }, React.createElement(Input, Object.assign({}, this.state, {\n      inputAttributes: this.props.inputAttributes,\n      inputEventHandlers: this.inputEventHandlers,\n      ref: function ref(c) {\n        this$1.input = c;\n      },\n      listboxId: listboxId,\n      autofocus: this.props.autofocus,\n      autoresize: this.props.autoresize,\n      expandable: expandable,\n      placeholder: this.props.placeholder,\n      ariaLabel: this.props.ariaLabel\n    })), React.createElement(Suggestions, Object.assign({}, this.state, {\n      ref: function ref(c) {\n        this$1.suggestions = c;\n      },\n      listboxId: listboxId,\n      expandable: expandable,\n      noSuggestionsText: this.props.noSuggestionsText,\n      suggestions: this.props.suggestions,\n      suggestionsFilter: this.props.suggestionsFilter,\n      addTag: this.addTag.bind(this),\n      maxSuggestionsLength: this.props.maxSuggestionsLength\n    }))));\n  };\n\n  return ReactTags;\n}(React.Component);\n\nReactTags.defaultProps = {\n  tags: [],\n  placeholder: 'Add new tag',\n  noSuggestionsText: null,\n  suggestions: [],\n  suggestionsFilter: null,\n  autofocus: true,\n  autoresize: true,\n  delimiters: [KEYS.TAB, KEYS.ENTER],\n  delimiterChars: [],\n  minQueryLength: 2,\n  maxSuggestionsLength: 6,\n  allowNew: false,\n  allowBackspace: true,\n  tagComponent: null,\n  inputAttributes: {},\n  addOnBlur: false,\n  clearInputOnDelete: true\n};\nReactTags.propTypes = {\n  tags: PropTypes.arrayOf(PropTypes.object),\n  placeholder: PropTypes.string,\n  ariaLabel: PropTypes.string,\n  noSuggestionsText: PropTypes.string,\n  suggestions: PropTypes.arrayOf(PropTypes.object),\n  suggestionsFilter: PropTypes.func,\n  autofocus: PropTypes.bool,\n  autoresize: PropTypes.bool,\n  delimiters: PropTypes.arrayOf(PropTypes.number),\n  delimiterChars: PropTypes.arrayOf(PropTypes.string),\n  handleDelete: PropTypes.func.isRequired,\n  handleAddition: PropTypes.func.isRequired,\n  handleInputChange: PropTypes.func,\n  handleFocus: PropTypes.func,\n  handleBlur: PropTypes.func,\n  handleValidate: PropTypes.func,\n  minQueryLength: PropTypes.number,\n  maxSuggestionsLength: PropTypes.number,\n  classNames: PropTypes.object,\n  allowNew: PropTypes.bool,\n  allowBackspace: PropTypes.bool,\n  tagComponent: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  inputAttributes: PropTypes.object,\n  addOnBlur: PropTypes.bool,\n  clearInputOnDelete: PropTypes.bool\n};\nmodule.exports = ReactTags;","map":null,"metadata":{},"sourceType":"script"}