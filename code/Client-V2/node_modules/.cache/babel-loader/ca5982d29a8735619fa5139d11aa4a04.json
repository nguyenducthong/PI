{"ast":null,"code":"import _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\EQAResultReportConclusion\\\\EQAResultReportDialog.jsx\";\nimport React, { Component } from \"react\";\nimport { Dialog, Button, Grid, Select, InputAdornment, FormControl, MenuItem, DialogTitle, DialogContent, DialogActions, FormHelperText, FormControlLabel, Checkbox, TableBody, TableCell, TableContainer, Table, TableRow, TableHead, Icon, IconButton } from \"@material-ui/core\";\nimport shortid from \"shortid\";\nimport PropTypes from \"prop-types\";\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport MaterialTable, { MTableToolbar, Chip, MTableBody, MTableHeader } from 'material-table';\nimport { ValidatorForm, TextValidator, TextField } from \"react-material-ui-form-validator\";\nimport { updateResultReportConclusionBySampleTube } from \"./EQAResultReportConclusionServices\";\nimport ConstantList from \"../../appConfig\";\nimport Draggable from 'react-draggable';\nimport Paper from '@material-ui/core/Paper';\nimport { MuiPickersUtilsProvider, DateTimePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\nimport { searchByPage as reagentSearchByPage } from \"../Reagent/ReagentService\";\nimport { searchByPage as getAllEQARound } from \"../EQARound/EQARoundService\";\nimport { getListHealthOrgEQARoundByEQARoundIdAndUser } from \"./EQAResultReportConclusionServices\";\nimport EQAResultReportElisaDialog from \"../EQAResultReportElisa/EQAResultReportElisaDialog\";\nimport EQAResultReportFastTestEditorDialog from \"../EQAResultReportFastTest/EQAResultReportFastTestEditorDialog\";\nimport EQAResultReportSerodiaDialog from \"../EQAResultReportSerodia/EQAResultReportSerodiaDialog\";\nimport EQAResultReportEcliaEditorDialog from \"../EQAResultReportEclia/EQAResultReportEcliaEditorDialog\";\nimport { getAllResultByHealthOrgEQARoundId, getResultReportById, getItemById } from \"../ResultsOfTheUnits/ResultsOfTheUnitsService\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../../../styles/views/_style.scss';\ntoast.configure({\n  autoClose: 3000,\n  draggable: false,\n  limit: 3\n});\n\nfunction PaperComponent(props) {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    handle: \"#draggable-dialog-title\",\n    cancel: '[class*=\"MuiDialogContent-root\"]',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  })));\n}\n\nvar EQAResultReportDialog = /*#__PURE__*/function (_Component) {\n  _inherits(EQAResultReportDialog, _Component);\n\n  var _super = _createSuper(EQAResultReportDialog);\n\n  function EQAResultReportDialog(props) {\n    var _this;\n\n    _classCallCheck(this, EQAResultReportDialog);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isViewButton: false,\n      hasErrorHealthOrgRound: false,\n      hasErrorEQARound: false,\n      isUsingIQC: false,\n      isUsingControlLine: false,\n      eqaRound: '',\n      healthOrgRound: '',\n      reagentLot: '',\n      order: '',\n      reagent: null,\n      technician: null,\n      personBuyReagent: '',\n      details: [],\n      supplyOfReagent: '',\n      timeToResult: '',\n      reagentExpiryDate: null,\n      testDate: new Date(),\n      reagentUnBoxDate: null,\n      shouldOpenSearchDialog: false,\n      shouldOpenConfirmationDialog: false,\n      shouldOpenSearchEQASampleSearchDialog: false,\n      shouldOpenViewDialogElisa: false,\n      shouldOpenViewDialogFastTest: false,\n      shouldOpenViewDialogSerodia: false,\n      shouldOpenViewDialogEclia: false,\n      isFinalResult: false,\n      view: false,\n      sampleTubeResultConclusionList: []\n    };\n\n    _this.handleDateChange = function (date, name) {\n      _this.setState({\n        [name]: date\n      });\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"isFinalResult\") {\n        _this.setState({\n          isFinalResult: event.target.checked\n        });\n      }\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.handleHealthOrgRoundChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n    };\n\n    _this.handleDialogClose = function () {\n      _this.setState({\n        shouldOpenViewDialogElisa: false,\n        shouldOpenViewDialogFastTest: false,\n        shouldOpenViewDialogSerodia: false,\n        shouldOpenViewDialogEclia: false,\n        shouldOpenConfirmationDialog: false\n      });\n    };\n\n    _this.handleHealthOrgRoundPopupClose = function () {\n      _this.setState({\n        shouldOpenHealthOrgRoundPopup: false\n      }, function () {});\n    };\n\n    _this.checkResult = function (list) {\n      var isCheck = true;\n\n      if (list != null && list.length > 0) {\n        list.forEach(function (item) {\n          if (item.typeMethod != null && item.typeMethod == 5) {\n            isCheck = false;\n          }\n        });\n      }\n\n      if (isCheck) {\n        _this.setState({\n          view: true\n        });\n      }\n    };\n\n    _this.handleRowDataCellChange = function (event, index) {\n      var sampleTubeResultConclusionList = _this.state.sampleTubeResultConclusionList;\n      var p = sampleTubeResultConclusionList[index]; // console.log(index)\n      // console.log(p)\n\n      p.result = event.target.value; // console.log(p)\n\n      sampleTubeResultConclusionList.splice(index, 1, p);\n\n      _this.setState({\n        sampleTubeResultConclusionList\n      }, function () {});\n    };\n\n    _this.handleFormSubmit = function () {\n      var t = _this.props.t;\n      var _this$state = _this.state,\n          sampleTubeResultConclusionList = _this$state.sampleTubeResultConclusionList,\n          currentHealthOrgEQARound = _this$state.currentHealthOrgEQARound,\n          isFinalResult = _this$state.isFinalResult;\n\n      if (sampleTubeResultConclusionList.length === 0) {\n        toast.warn(t(\"EQAResultReportConclusion.no_data\"));\n      } else {\n        updateResultReportConclusionBySampleTube(sampleTubeResultConclusionList, currentHealthOrgEQARound.id, isFinalResult).then(function (res) {\n          // this.props.handleOKEditClose();\n          toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\n\n          _this.setState({\n            loading: false\n          });\n        }).catch(function (err) {\n          _this.setState({\n            loading: false\n          });\n\n          toast.error(t(\"EQAResultReportConclusion.update_result_error\"));\n        });\n      }\n    };\n\n    _this.notificationFinalResult = function () {\n      // if(this.state.isFinalResult){\n      _this.setState({\n        shouldOpenConfirmationDialog: true\n      }); // }\n\n    };\n\n    _this.handleFinalResult = function () {\n      if (_this.state.isFinalResult == null || !_this.state.isFinalResult) {\n        _this.setState({\n          isFinalResult: true,\n          dateSubmitResults: new Date()\n        }, function () {});\n\n        _this.handleDialogClose();\n      }\n\n      if (_this.state.isFinalResult) {\n        _this.setState({\n          isFinalResult: false,\n          dateSubmitResults: new Date()\n        }, function () {});\n\n        _this.handleDialogClose();\n      }\n    };\n\n    _this.handleDialogFinalResultClose = function () {\n      // this.setState({isFinalResult:false},()=>{\n      // })\n      _this.handleDialogClose();\n    };\n\n    return _this;\n  }\n\n  _createClass(EQAResultReportDialog, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item,\n          sampleTubeResultConclusionList = _this$props.sampleTubeResultConclusionList,\n          currentHealthOrgEQARound = _this$props.currentHealthOrgEQARound,\n          currentHealthOrg = _this$props.currentHealthOrg;\n\n      if (sampleTubeResultConclusionList != null && currentHealthOrgEQARound != null) {\n        this.setState({\n          sampleTubeResultConclusionList,\n          currentHealthOrgEQARound,\n          currentHealthOrg\n        }, function () {\n          var _this2 = this;\n\n          var currentHealthOrgEQARound = this.state.currentHealthOrgEQARound;\n\n          if (currentHealthOrgEQARound && currentHealthOrgEQARound.id) {\n            getItemById(currentHealthOrgEQARound.id).then(function (data) {\n              _this2.setState({\n                healthOrgRound: data.data\n              }, function () {\n                var _this3 = this;\n\n                var _this$state2 = this.state,\n                    healthOrgRound = _this$state2.healthOrgRound,\n                    details = _this$state2.details;\n                details = [];\n                getAllResultByHealthOrgEQARoundId(healthOrgRound.id).then(function (result) {\n                  if (result != null && result.data != null) {\n                    _this3.checkResult(result.data);\n\n                    if (result.data != null) {\n                      result.data.forEach(function (el) {\n                        if (el.typeMethod === 5) {\n                          _this3.setState({\n                            isFinalResult: el.isFinalResult\n                          });\n                        }\n                      });\n                    }\n\n                    _this3.setState({\n                      listResult: result.data\n                    }, function () {\n                      var sampleSet = healthOrgRound.sampleSet,\n                          listSample = healthOrgRound.listSample;\n                      listSample = [];\n\n                      if (sampleSet != null && sampleSet.details != null && sampleSet.details.length > 0) {\n                        sampleSet.details.sort(function (a, b) {\n                          return a.orderNumber > b.orderNumber ? 1 : a.orderNumber === b.orderNumber ? a.sampleTube.code > b.sampleTube.code ? 1 : -1 : -1;\n                        });\n                        sampleSet.details.forEach(function (sampleSetDetail) {\n                          var eQASet = {};\n                          var hor = {};\n                          hor.tubeID = sampleSetDetail.sample.id;\n                          hor.tubeCode = sampleSetDetail.code;\n                          eQASet.id = sampleSetDetail.sample.id;\n                          eQASet.code = sampleSetDetail.code;\n                          listSample.push(eQASet);\n                        });\n                        this.setState({\n                          listSample: listSample\n                        });\n                      }\n                    });\n                  }\n                });\n              });\n            });\n          }\n        });\n      }\n\n      if (item && item.details && item.details.length > 0) {\n        item.details.sort(function (a, b) {\n          return a.orderNumber > b.orderNumber ? 1 : a.orderNumber === b.orderNumber ? a.sampleTube.code > b.sampleTube.code ? 1 : -1 : -1;\n        });\n      }\n\n      this.setState(_objectSpread(_objectSpread({}, item), {}, {\n        hasErrorResult: false\n      }), function () {});\n    }\n  }, {\n    key: \"renderRowHead\",\n    value: function renderRowHead() {\n      var _this4 = this;\n\n      var isCheck = false;\n      var _this$props2 = this.props,\n          onSelectEvent = _this$props2.onSelectEvent,\n          handleDelete = _this$props2.handleDelete,\n          handleClick = _this$props2.handleClick;\n      var _this$state3 = this.state,\n          listResult = _this$state3.listResult,\n          view = _this$state3.view;\n      var titleCell = null;\n\n      if (listResult != null && listResult.length > 0) {\n        listResult.forEach(function (item) {\n          if (!titleCell) {\n            titleCell = /*#__PURE__*/React.createElement(TableCell, {\n              key: shortid.generate(),\n              className: \"px-0\",\n              align: \"left\",\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 23\n              }\n            }, _this4.getTypeMethodName(item.typeMethod));\n          } else {\n            titleCell += /*#__PURE__*/React.createElement(TableCell, {\n              key: shortid.generate(),\n              className: \"px-0\",\n              align: \"left\",\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 24\n              }\n            }, _this4.getTypeMethodName(item.typeMethod));\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 7\n        }\n      }, listResult.map(function (item, index) {\n        return _this4.renderColHeadFirst(item);\n      }));\n    }\n  }, {\n    key: \"renderColHeadFirst\",\n    value: function renderColHeadFirst(item) {\n      if (item.reagent != null) {\n        item.title = this.getTypeMethodName(item.reagent.name, item.typeMethod);\n      } else if (item.typeMethod == 5) {\n        item.title = this.getTypeMethodName(\"\", item.typeMethod);\n      }\n\n      return this.renderHeadCells(item);\n    }\n  }, {\n    key: \"renderHeadCells\",\n    value: function renderHeadCells(item) {\n      if (item == null) {\n        item = {};\n      }\n\n      var titleCell = /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff'\n        },\n        key: shortid.generate(),\n        className: \"px-0\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }\n      }, item.title);\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 7\n        }\n      }, titleCell);\n    }\n  }, {\n    key: \"getTypeMethodName\",\n    value: function getTypeMethodName(text, type) {\n      var t = this.props.t;\n\n      if (type == 1) {\n        return text;\n      } else if (type == 2) {\n        return text;\n      } else if (type == 3) {\n        return text;\n      } else if (type == 4) {\n        return text;\n      } else if (type == 5) {\n        return t('EQAResultReportConclusion.final_conclusion');\n      }\n    }\n  }, {\n    key: \"renderResultDetails\",\n    value: function renderResultDetails(sample, index) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 9\n        }\n      }, this.renderSample(sample, index)));\n    }\n  }, {\n    key: \"renderSample\",\n    value: function renderSample(item, index) {\n      var _this5 = this;\n\n      // alert(ConstantList.CHECK_HEALTH_ORG);\n      var sampleTubeResultConclusionList = this.state.sampleTubeResultConclusionList;\n      var t = this.props.t;\n      var sttCell = /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 19\n        }\n      }, index + 1);\n      var titleCell = /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }\n      }, item ? item.code : '');\n      var resultTableAll = /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 26\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Select, {\n        style: {\n          textAlign: \"left\"\n        },\n        value: sampleTubeResultConclusionList[index] ? sampleTubeResultConclusionList[index].result : null,\n        onChange: function onChange(result) {\n          return _this5.handleRowDataCellChange(result, index);\n        },\n        inputProps: {\n          name: \"result\",\n          id: \"result-simple\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: -2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }\n      }, t(\"EQAResultReportElisa.Result.none\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }\n      }, t(\"EQAResultReportElisa.Result.negative\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }\n      }, t(\"EQAResultReportElisa.Result.indertermine\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }\n      }, t(\"EQAResultReportElisa.Result.positive\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }\n      }, t(\"EQAResultReportElisa.Result.confirms\")))));\n      var resultTable = /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Select, {\n        style: {\n          textAlign: \"left\"\n        },\n        value: sampleTubeResultConclusionList[index] ? sampleTubeResultConclusionList[index].result : null,\n        onChange: function onChange(result) {\n          return _this5.handleRowDataCellChange(result, index);\n        },\n        inputProps: {\n          name: \"result\",\n          id: \"result-simple\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: -2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }\n      }, t(\"EQAResultReportElisa.Result.none\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }\n      }, t(\"EQAResultReportElisa.Result.negative\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }\n      }, t(\"EQAResultReportElisa.Result.indertermine\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }\n      }, t(\"EQAResultReportElisa.Result.positive\")))));\n      var result = /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 18\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Select, {\n        style: {\n          textAlign: \"left\"\n        },\n        value: sampleTubeResultConclusionList[index] ? sampleTubeResultConclusionList[index].result : null,\n        onChange: function onChange(result) {\n          return _this5.handleRowDataCellChange(result, index);\n        },\n        inputProps: {\n          name: \"result\",\n          id: \"result-simple\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: -2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }\n      }, t(\"EQAResultReportElisa.Result.none\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }\n      }, t(\"EQAResultReportElisa.Result.negative\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }\n      }, t(\"EQAResultReportElisa.Result.indertermine\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }\n      }, t(\"EQAResultReportElisa.Result.confirms\")))));\n      var _this$state4 = this.state,\n          listResult = _this$state4.listResult,\n          currentHealthOrg = _this$state4.currentHealthOrg;\n      var cellContentByMethod = []; // let {sampleTubeResultConclusionList} = this.state\n\n      listResult.forEach(function (result) {\n        var content = null;\n\n        if (result != null && result.details != null && result.details.length > 0 && item) {\n          result.details.forEach(function (resultDetail) {\n            if (resultDetail.sampleTube != null && resultDetail.sampleTube.eqaSample != null && item.id == resultDetail.sampleTube.eqaSample.id) {\n              if (result.typeMethod != 5) {\n                content = resultDetail;\n                cellContentByMethod.push(content);\n              }\n            }\n          });\n        }\n      });\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 7\n        }\n      }, sttCell, titleCell, cellContentByMethod.map(function (cell, index) {\n        return _this5.renderCells(cell);\n      }), ConstantList.CHECK_HEALTH_ORG ? resultTableAll : currentHealthOrg.positiveAffirmativeRight ? resultTable : result);\n    }\n  }, {\n    key: \"renderCells\",\n    value: function renderCells(item) {\n      var _this6 = this;\n\n      var _this$props3 = this.props,\n          t = _this$props3.t,\n          i18n = _this$props3.i18n;\n\n      if (item == null) {\n        item = {};\n      }\n\n      var contentCell = /*#__PURE__*/React.createElement(TableCell, {\n        key: shortid.generate(),\n        className: \"px-0\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 23\n        }\n      }, item.result == 1 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-primary text-white px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"#\",\n        onClick: function onClick() {\n          return _this6.openDialogDetailCellContent(item);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 13\n        }\n      }, t('result.positive'))) : /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-light-gray px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"#\",\n        onClick: function onClick() {\n          return _this6.openDialogDetailCellContent(item);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 15\n        }\n      }, item.result == -2 ? t('result.none') : item.result == -1 ? t('result.negative') : item.result == 0 ? t('result.indertermine') : '')));\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 7\n        }\n      }, contentCell);\n    }\n  }, {\n    key: \"openDialogDetailCellContent\",\n    value: function openDialogDetailCellContent(resultReportDetail) {\n      var _this7 = this;\n\n      if (resultReportDetail != null && resultReportDetail.resultReport != null && resultReportDetail.resultReport.id != null) {\n        getResultReportById(resultReportDetail.resultReport.id).then(function (result) {\n          var item = result.data;\n          item.isView = true;\n\n          _this7.setState({\n            item: item\n          }, function () {\n            //Elisa(1),//Kết Quả Xét Nghiệm Bằng Kỹ Thuật Elisa\n            //FastTest(2),//Kết Quả Xét Nghiệm Bằng Kỹ Thuật Xét Nghiệm Nhanh\n            //SERODIA(3)//Kết Quả Xét Nghiệm Bằng Kỹ Thuật SERODIA\n            //ECLIA(4)//KẾT QUẢ ĐIỆN/HÓA PHÁT QUANG\n            if (item.typeMethod == 1) {\n              this.setState({\n                shouldOpenViewDialogElisa: true\n              });\n            } else if (item.typeMethod == 2) {\n              this.setState({\n                shouldOpenViewDialogFastTest: true\n              });\n            } else if (item.typeMethod == 3) {\n              this.setState({\n                shouldOpenViewDialogSerodia: true\n              });\n            } else if (item.typeMethod == 4) {\n              this.setState({\n                shouldOpenViewDialogEclia: true\n              });\n            }\n          });\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this8 = this;\n\n      var _this$props4 = this.props,\n          open = _this$props4.open,\n          handleClose = _this$props4.handleClose,\n          handleOKEditClose = _this$props4.handleOKEditClose,\n          isView = _this$props4.isView,\n          t = _this$props4.t,\n          i18n = _this$props4.i18n;\n      var _this$state5 = this.state,\n          id = _this$state5.id,\n          isViewButton = _this$state5.isViewButton,\n          healthOrgRound = _this$state5.healthOrgRound,\n          reagentLot = _this$state5.reagentLot,\n          reagent = _this$state5.reagent,\n          technician = _this$state5.technician,\n          reagentExpiryDate = _this$state5.reagentExpiryDate,\n          orderTest = _this$state5.orderTest,\n          view = _this$state5.view,\n          item = _this$state5.item,\n          personBuyReagent = _this$state5.personBuyReagent,\n          reagentUnBoxDate = _this$state5.reagentUnBoxDate,\n          details = _this$state5.details,\n          hasErrorResult = _this$state5.hasErrorResult,\n          testDate = _this$state5.testDate,\n          note = _this$state5.note,\n          shouldOpenHealthOrgRoundPopup = _this$state5.shouldOpenHealthOrgRoundPopup,\n          isFinalResult = _this$state5.isFinalResult,\n          listSample = _this$state5.listSample,\n          listResult = _this$state5.listResult;\n      var searchObject = {\n        pageIndex: 0,\n        pageSize: 1000000\n      };\n      var technicianSearchObject = {\n        pageIndex: 0,\n        pageSize: 1000000,\n        searchByHealthOrg: true,\n        healthOrg: healthOrgRound && healthOrgRound.healthOrg && healthOrgRound.healthOrg.id ? {\n          id: healthOrgRound.healthOrg.id\n        } : null\n      };\n      return /*#__PURE__*/React.createElement(Dialog, {\n        open: open,\n        PaperComponent: PaperComponent,\n        maxWidth: 'lg',\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DialogTitle, {\n        style: {\n          cursor: 'move'\n        },\n        id: \"draggable-dialog-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"mb-20 styleColor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 13\n        }\n      }, !isView ? t(\"SaveUpdate\") : t(\"Details\")), /*#__PURE__*/React.createElement(IconButton, {\n        style: {\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\"\n        },\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        color: \"error\",\n        title: t(\"close\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 116\n        }\n      }, \"close\"))), /*#__PURE__*/React.createElement(DialogContent, {\n        dividers: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 11\n        }\n      }, this.state.shouldOpenConfirmationDialog && /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        title: t(\"confirm\"),\n        open: this.state.shouldOpenConfirmationDialog,\n        onConfirmDialogClose: this.handleDialogFinalResultClose,\n        onYesClick: this.handleFinalResult,\n        text: isFinalResult ? t(\"EqaResult.unFinalResultConfirm\") : t(\"EqaResult.FinalResultConfirm\"),\n        Yes: t(\"general.Yes\"),\n        No: t(\"general.No\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Grid, {\n        className: \"\",\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        md: 8,\n        sm: 8,\n        xs: 8,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        disabled: true,\n        size: \"small\",\n        variant: \"outlined\" //   disabled={isView}\n        ,\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 26\n          }\n        }, t(\"EQAResultReportElisa.healthOrgName\")),\n        placeholder: t(\"EQAResultReportElisa.healthOrgName\"),\n        id: \"healthOrgRound\",\n        className: \"w-100 stylePlaceholder\",\n        value: healthOrgRound != null && healthOrgRound.healthOrg ? healthOrgRound.healthOrg.name : '',\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        md: 4,\n        sm: 4,\n        xs: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControlLabel //   disabled ={true}\n      , {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          style: {\n            fontWeight: \"bold\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 26\n          }\n        }, \" \", t('EQAResultReportFastTest.isFinalResult')),\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          checked: isFinalResult,\n          onClick: function onClick(isFinalResult) {\n            return _this8.notificationFinalResult(isFinalResult);\n          } // this.handleFinalResult(isFinalResult, 'isFinalResult')\n          ,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 28\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        className: \"mt-10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 17\n        }\n      }, listSample && /*#__PURE__*/React.createElement(Paper, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 35\n        }\n      }, /*#__PURE__*/React.createElement(TableContainer, {\n        style: {\n          maxHeight: 1000\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TableHead, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff'\n        },\n        rowSpan: 2,\n        width: \"50px\",\n        align: \"center\",\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 29\n        }\n      }, t('ResultsOfTheUnits.STT')), /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff'\n        },\n        rowSpan: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 29\n        }\n      }, t('ResultsOfTheUnits.set')), listResult && this.renderRowHead(), view && /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 39\n        }\n      }, t('EQAResultReportConclusion.final_conclusion')))), /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 25\n        }\n      }, listSample && listSample.map(function (sample, index) {\n        return _this8.renderResultDetails(sample, index);\n      })))))), this.state.shouldOpenViewDialogElisa && /*#__PURE__*/React.createElement(EQAResultReportElisaDialog, {\n        t: t,\n        i18n: i18n,\n        handleClose: this.handleDialogClose,\n        open: this.state.shouldOpenViewDialogElisa,\n        handleOKEditClose: this.handleOKEditClose,\n        item: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 19\n        }\n      }), this.state.shouldOpenViewDialogFastTest && /*#__PURE__*/React.createElement(EQAResultReportFastTestEditorDialog, {\n        t: t,\n        i18n: i18n,\n        handleClose: this.handleDialogClose,\n        open: this.state.shouldOpenViewDialogFastTest,\n        handleOKEditClose: this.handleOKEditClose,\n        item: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 19\n        }\n      }), this.state.shouldOpenViewDialogSerodia && /*#__PURE__*/React.createElement(EQAResultReportSerodiaDialog, {\n        t: t,\n        i18n: i18n,\n        handleClose: this.handleDialogClose,\n        open: this.state.shouldOpenViewDialogSerodia,\n        handleOKEditClose: this.handleOKEditClose,\n        item: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 19\n        }\n      }), this.state.shouldOpenViewDialogEclia && /*#__PURE__*/React.createElement(EQAResultReportEcliaEditorDialog, {\n        t: t,\n        i18n: i18n,\n        handleClose: this.handleDialogClose,\n        open: this.state.shouldOpenViewDialogEclia,\n        handleOKEditClose: this.handleOKEditClose,\n        item: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 19\n        }\n      })))), /*#__PURE__*/React.createElement(DialogActions, {\n        spacing: 4,\n        className: \"flex flex-end flex-middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        type: \"button\",\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 13\n        }\n      }, \" \", t('Cancel')), !isViewButton && /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 32\n        }\n      }, t('Save')))));\n    }\n  }]);\n\n  return EQAResultReportDialog;\n}(Component);\n\nexport default EQAResultReportDialog;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/EQAResultReportConclusion/EQAResultReportDialog.jsx"],"names":["React","Component","Dialog","Button","Grid","Select","InputAdornment","FormControl","MenuItem","DialogTitle","DialogContent","DialogActions","FormHelperText","FormControlLabel","Checkbox","TableBody","TableCell","TableContainer","Table","TableRow","TableHead","Icon","IconButton","shortid","PropTypes","Breadcrumb","ConfirmationDialog","MaterialTable","MTableToolbar","Chip","MTableBody","MTableHeader","ValidatorForm","TextValidator","TextField","updateResultReportConclusionBySampleTube","ConstantList","Draggable","Paper","MuiPickersUtilsProvider","DateTimePicker","DateFnsUtils","AsynchronousAutocomplete","searchByPage","reagentSearchByPage","getAllEQARound","getListHealthOrgEQARoundByEQARoundIdAndUser","EQAResultReportElisaDialog","EQAResultReportFastTestEditorDialog","EQAResultReportSerodiaDialog","EQAResultReportEcliaEditorDialog","getAllResultByHealthOrgEQARoundId","getResultReportById","getItemById","toast","configure","autoClose","draggable","limit","PaperComponent","props","EQAResultReportDialog","state","isViewButton","hasErrorHealthOrgRound","hasErrorEQARound","isUsingIQC","isUsingControlLine","eqaRound","healthOrgRound","reagentLot","order","reagent","technician","personBuyReagent","details","supplyOfReagent","timeToResult","reagentExpiryDate","testDate","Date","reagentUnBoxDate","shouldOpenSearchDialog","shouldOpenConfirmationDialog","shouldOpenSearchEQASampleSearchDialog","shouldOpenViewDialogElisa","shouldOpenViewDialogFastTest","shouldOpenViewDialogSerodia","shouldOpenViewDialogEclia","isFinalResult","view","sampleTubeResultConclusionList","handleDateChange","date","name","setState","handleChange","event","source","persist","isActive","target","checked","value","handleHealthOrgRoundChange","handleDialogClose","handleHealthOrgRoundPopupClose","shouldOpenHealthOrgRoundPopup","checkResult","list","isCheck","length","forEach","item","typeMethod","handleRowDataCellChange","index","p","result","splice","handleFormSubmit","t","currentHealthOrgEQARound","warn","id","then","res","success","loading","catch","err","error","notificationFinalResult","handleFinalResult","dateSubmitResults","handleDialogFinalResultClose","open","handleClose","currentHealthOrg","data","el","listResult","sampleSet","listSample","sort","a","b","orderNumber","sampleTube","code","sampleSetDetail","eQASet","hor","tubeID","sample","tubeCode","push","hasErrorResult","onSelectEvent","handleDelete","handleClick","titleCell","generate","getTypeMethodName","map","renderColHeadFirst","title","renderHeadCells","backgroundColor","color","text","type","renderSample","sttCell","resultTableAll","textAlign","resultTable","cellContentByMethod","content","resultDetail","eqaSample","cell","renderCells","CHECK_HEALTH_ORG","positiveAffirmativeRight","i18n","contentCell","openDialogDetailCellContent","resultReportDetail","resultReport","isView","handleOKEditClose","orderTest","note","searchObject","pageIndex","pageSize","technicianSearchObject","searchByHealthOrg","healthOrg","cursor","position","right","top","fontWeight","maxHeight","renderRowHead","renderResultDetails"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  Select,\r\n  InputAdornment,\r\n  FormControl,\r\n  MenuItem,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  FormHelperText,\r\n  FormControlLabel,\r\n  Checkbox, TableBody, TableCell,\r\n  TableContainer, Table, TableRow,\r\n  TableHead, Icon, IconButton\r\n} from \"@material-ui/core\";\r\nimport shortid from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport MaterialTable, { MTableToolbar, Chip, MTableBody, MTableHeader } from 'material-table';\r\nimport { ValidatorForm, TextValidator, TextField } from \"react-material-ui-form-validator\";\r\nimport { updateResultReportConclusionBySampleTube } from \"./EQAResultReportConclusionServices\";\r\nimport ConstantList from \"../../appConfig\";\r\nimport Draggable from 'react-draggable';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { MuiPickersUtilsProvider, DateTimePicker } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\r\nimport { searchByPage as reagentSearchByPage } from \"../Reagent/ReagentService\";\r\nimport { searchByPage as getAllEQARound } from \"../EQARound/EQARoundService\";\r\nimport { getListHealthOrgEQARoundByEQARoundIdAndUser } from \"./EQAResultReportConclusionServices\";\r\nimport EQAResultReportElisaDialog from \"../EQAResultReportElisa/EQAResultReportElisaDialog\";\r\nimport EQAResultReportFastTestEditorDialog from \"../EQAResultReportFastTest/EQAResultReportFastTestEditorDialog\";\r\nimport EQAResultReportSerodiaDialog from \"../EQAResultReportSerodia/EQAResultReportSerodiaDialog\";\r\nimport EQAResultReportEcliaEditorDialog from \"../EQAResultReportEclia/EQAResultReportEcliaEditorDialog\";\r\nimport { getAllResultByHealthOrgEQARoundId, getResultReportById, getItemById } from \"../ResultsOfTheUnits/ResultsOfTheUnitsService\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../../styles/views/_style.scss';\r\n\r\ntoast.configure({\r\n  autoClose: 3000,\r\n  draggable: false,\r\n  limit: 3\r\n});\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nclass EQAResultReportDialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  state = {\r\n    isViewButton: false,\r\n    hasErrorHealthOrgRound: false,\r\n    hasErrorEQARound: false,\r\n    isUsingIQC: false,\r\n    isUsingControlLine: false,\r\n    eqaRound: '',\r\n    healthOrgRound: '',\r\n    reagentLot: '',\r\n    order: '',\r\n    reagent: null,\r\n    technician: null,\r\n    personBuyReagent: '',\r\n    details: [],\r\n    supplyOfReagent: '',\r\n    timeToResult: '',\r\n    reagentExpiryDate: null,\r\n    testDate: new Date(),\r\n    reagentUnBoxDate: null,\r\n    shouldOpenSearchDialog: false,\r\n    shouldOpenConfirmationDialog: false,\r\n    shouldOpenSearchEQASampleSearchDialog: false,\r\n    shouldOpenViewDialogElisa: false,\r\n    shouldOpenViewDialogFastTest: false,\r\n    shouldOpenViewDialogSerodia: false,\r\n    shouldOpenViewDialogEclia: false,\r\n    isFinalResult: false,\r\n    view: false,\r\n    sampleTubeResultConclusionList: []\r\n  };\r\n\r\n  handleDateChange = (date, name) => {\r\n    this.setState({\r\n      [name]: date\r\n    });\r\n  };\r\n\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n    if (source === \"isFinalResult\") {\r\n      this.setState({ isFinalResult: event.target.checked })\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleHealthOrgRoundChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n  };\r\n\r\n  handleDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenViewDialogElisa: false,\r\n      shouldOpenViewDialogFastTest: false,\r\n      shouldOpenViewDialogSerodia: false,\r\n      shouldOpenViewDialogEclia: false,\r\n      shouldOpenConfirmationDialog: false,\r\n    });\r\n  };\r\n\r\n  componentWillMount() {\r\n    let { open, handleClose, item, sampleTubeResultConclusionList, currentHealthOrgEQARound, currentHealthOrg } = this.props;\r\n    if (sampleTubeResultConclusionList != null && currentHealthOrgEQARound != null) {\r\n      this.setState({\r\n        sampleTubeResultConclusionList, currentHealthOrgEQARound, currentHealthOrg\r\n      }, function () {\r\n        let { currentHealthOrgEQARound } = this.state\r\n        if (currentHealthOrgEQARound && currentHealthOrgEQARound.id) {\r\n          getItemById(currentHealthOrgEQARound.id).then((data) => {\r\n            this.setState({ healthOrgRound: data.data }, function () {\r\n              let { healthOrgRound, details } = this.state;\r\n              details = [];\r\n              getAllResultByHealthOrgEQARoundId(healthOrgRound.id).then((result) => {\r\n                if (result != null && result.data != null) {\r\n                  this.checkResult(result.data);\r\n                  if (result.data != null) {\r\n                    result.data.forEach(el => {\r\n                      if (el.typeMethod === 5) {\r\n                        this.setState({ isFinalResult: el.isFinalResult })\r\n                      }\r\n                    })\r\n                  }\r\n                  this.setState({\r\n                    listResult: result.data\r\n                  }, function () {\r\n                    let { sampleSet, listSample } = healthOrgRound;\r\n                    listSample = [];\r\n                    if (sampleSet != null && sampleSet.details != null && sampleSet.details.length > 0) {\r\n                      sampleSet.details.sort((a, b) => (a.orderNumber > b.orderNumber) ? 1 : (a.orderNumber === b.orderNumber) ? ((a.sampleTube.code > b.sampleTube.code) ? 1 : -1) : -1);\r\n                      sampleSet.details.forEach(sampleSetDetail => {\r\n                        let eQASet = {};\r\n                        let hor = {}\r\n                        hor.tubeID = sampleSetDetail.sample.id;\r\n                        hor.tubeCode = sampleSetDetail.code\r\n                        eQASet.id = sampleSetDetail.sample.id;\r\n                        eQASet.code = sampleSetDetail.code;\r\n                        listSample.push(eQASet);\r\n                      });\r\n                      this.setState({\r\n                        listSample: listSample\r\n                      });\r\n                    }\r\n                  });\r\n                }\r\n              });\r\n            });\r\n          });\r\n\r\n        }\r\n      })\r\n    }\r\n    if (item && item.details && item.details.length > 0) {\r\n      item.details.sort((a, b) => (a.orderNumber > b.orderNumber) ? 1 : (a.orderNumber === b.orderNumber) ? ((a.sampleTube.code > b.sampleTube.code) ? 1 : -1) : -1);\r\n    }\r\n    this.setState({\r\n      ...item, hasErrorResult: false\r\n    }, function () {\r\n    });\r\n  }\r\n\r\n  handleHealthOrgRoundPopupClose = () => {\r\n    this.setState({ shouldOpenHealthOrgRoundPopup: false }, function () {\r\n    });\r\n  }\r\n  checkResult = (list) => {\r\n    let isCheck = true;\r\n    if (list != null && list.length > 0) {\r\n      list.forEach(item => {\r\n        if (item.typeMethod != null && item.typeMethod == 5) {\r\n          isCheck = false;\r\n        }\r\n      });\r\n    }\r\n    if (isCheck) {\r\n      this.setState({ view: true });\r\n    }\r\n  }\r\n  handleRowDataCellChange = (event, index) => {\r\n    let { sampleTubeResultConclusionList } = this.state\r\n    let p = sampleTubeResultConclusionList[index]\r\n    // console.log(index)\r\n    // console.log(p)\r\n    p.result = event.target.value\r\n    // console.log(p)\r\n    sampleTubeResultConclusionList.splice(index, 1, p)\r\n    this.setState({ sampleTubeResultConclusionList }, () => {\r\n\r\n    })\r\n  }\r\n  renderRowHead() {\r\n    let isCheck = false;\r\n    let { onSelectEvent, handleDelete, handleClick } = this.props;\r\n    let { listResult, view } = this.state;\r\n    let titleCell = null;\r\n    if (listResult != null && listResult.length > 0) {\r\n      listResult.forEach(item => {\r\n        if (!titleCell) {\r\n          titleCell = <TableCell key={shortid.generate()} className=\"px-0\" align=\"left\">\r\n            {this.getTypeMethodName(item.typeMethod)}\r\n          </TableCell>\r\n        } else {\r\n          titleCell += <TableCell key={shortid.generate()} className=\"px-0\" align=\"left\">\r\n            {this.getTypeMethodName(item.typeMethod)}\r\n          </TableCell>\r\n        }\r\n      });\r\n    }\r\n\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {listResult.map((item, index) => this.renderColHeadFirst(item))}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  renderColHeadFirst(item) {\r\n\r\n    if (item.reagent != null) {\r\n      item.title = this.getTypeMethodName(item.reagent.name, item.typeMethod);\r\n    }\r\n    else if (item.typeMethod == 5) {\r\n      item.title = this.getTypeMethodName(\"\", item.typeMethod);\r\n    }\r\n    return (\r\n      this.renderHeadCells(item)\r\n    )\r\n  }\r\n  renderHeadCells(item) {\r\n    if (item == null) {\r\n      item = {};\r\n    }\r\n    let titleCell = <TableCell style={{\r\n      backgroundColor: '#358600',\r\n      color: '#fff',\r\n    }} key={shortid.generate()} className=\"px-0\" align=\"left\">\r\n      {item.title}\r\n    </TableCell>\r\n    return (\r\n      <React.Fragment>\r\n        {titleCell}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  getTypeMethodName(text, type) {\r\n    let { t } = this.props;\r\n    if (type == 1) {\r\n      return text;\r\n    } else if (type == 2) {\r\n      return text;\r\n    } else if (type == 3) {\r\n      return text;\r\n    } else if (type == 4) {\r\n      return text;\r\n    } else if (type == 5) {\r\n      return t('EQAResultReportConclusion.final_conclusion');\r\n    }\r\n  }\r\n\r\n  renderResultDetails(sample, index) {\r\n    return (\r\n      <React.Fragment>\r\n        <TableRow>\r\n          {this.renderSample(sample, index)}\r\n        </TableRow>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  renderSample(item, index) {\r\n    // alert(ConstantList.CHECK_HEALTH_ORG);\r\n    let { sampleTubeResultConclusionList } = this.state\r\n    let { t } = this.props\r\n    let sttCell = <TableCell className=\"px-0\" align=\"center\">\r\n      {index + 1}\r\n    </TableCell>\r\n    let titleCell = <TableCell className=\"px-0\" align=\"left\">\r\n      {item ? item.code : ''}\r\n    </TableCell>\r\n    let resultTableAll = <TableCell className=\"px-0\" align=\"center\">\r\n      <FormControl className=\"w-100\" disabled={true}>\r\n        <Select\r\n          style={{ textAlign: \"left\" }}\r\n          value={sampleTubeResultConclusionList[index] ? sampleTubeResultConclusionList[index].result : null}\r\n          onChange={(result) => this.handleRowDataCellChange(result, index)}\r\n          inputProps={{\r\n            name: \"result\",\r\n            id: \"result-simple\"\r\n          }}\r\n        >\r\n          <MenuItem value={-2}>{t(\"EQAResultReportElisa.Result.none\")}</MenuItem>\r\n          <MenuItem value={-1}>{t(\"EQAResultReportElisa.Result.negative\")}</MenuItem>\r\n          <MenuItem value={0}>{t(\"EQAResultReportElisa.Result.indertermine\")}</MenuItem>\r\n          <MenuItem value={1}>{t(\"EQAResultReportElisa.Result.positive\")}</MenuItem>\r\n          <MenuItem value={2}>{t(\"EQAResultReportElisa.Result.confirms\")}</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </TableCell>\r\n\r\n    let resultTable = <TableCell className=\"px-0\" align=\"center\">\r\n      <FormControl className=\"w-100\" disabled={true}>\r\n        <Select\r\n          style={{ textAlign: \"left\" }}\r\n          value={sampleTubeResultConclusionList[index] ? sampleTubeResultConclusionList[index].result : null}\r\n          onChange={(result) => this.handleRowDataCellChange(result, index)}\r\n          inputProps={{\r\n            name: \"result\",\r\n            id: \"result-simple\"\r\n          }}\r\n        >\r\n          <MenuItem value={-2}>{t(\"EQAResultReportElisa.Result.none\")}</MenuItem>\r\n          <MenuItem value={-1}>{t(\"EQAResultReportElisa.Result.negative\")}</MenuItem>\r\n          <MenuItem value={0}>{t(\"EQAResultReportElisa.Result.indertermine\")}</MenuItem>\r\n          <MenuItem value={1}>{t(\"EQAResultReportElisa.Result.positive\")}</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </TableCell>\r\n\r\n    let result = <TableCell className=\"px-0\" align=\"center\">\r\n      <FormControl className=\"w-100\" disabled={true}>\r\n        <Select\r\n          style={{ textAlign: \"left\" }}\r\n          value={sampleTubeResultConclusionList[index] ? sampleTubeResultConclusionList[index].result : null}\r\n          onChange={(result) => this.handleRowDataCellChange(result, index)}\r\n          inputProps={{\r\n            name: \"result\",\r\n            id: \"result-simple\"\r\n          }}\r\n        >\r\n          <MenuItem value={-2}>{t(\"EQAResultReportElisa.Result.none\")}</MenuItem>\r\n          <MenuItem value={-1}>{t(\"EQAResultReportElisa.Result.negative\")}</MenuItem>\r\n          <MenuItem value={0}>{t(\"EQAResultReportElisa.Result.indertermine\")}</MenuItem>\r\n          <MenuItem value={2}>{t(\"EQAResultReportElisa.Result.confirms\")}</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </TableCell>\r\n\r\n    let { listResult, currentHealthOrg } = this.state;\r\n    let cellContentByMethod = [];\r\n    // let {sampleTubeResultConclusionList} = this.state\r\n    listResult.forEach(result => {\r\n      let content = null;\r\n      if (result != null && result.details != null && result.details.length > 0 && item) {\r\n        result.details.forEach(resultDetail => {\r\n          if (resultDetail.sampleTube != null && resultDetail.sampleTube.eqaSample != null\r\n            && item.id == resultDetail.sampleTube.eqaSample.id) {\r\n            if (result.typeMethod != 5) {\r\n              content = resultDetail;\r\n              cellContentByMethod.push(content);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {sttCell}\r\n        {titleCell}\r\n        {cellContentByMethod.map((cell, index) => this.renderCells(cell))}\r\n        {ConstantList.CHECK_HEALTH_ORG ? resultTableAll : (currentHealthOrg.positiveAffirmativeRight ? resultTable : result)}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  renderCells(item) {\r\n    let { t, i18n } = this.props;\r\n    if (item == null) {\r\n      item = {};\r\n    }\r\n    let contentCell = <TableCell key={shortid.generate()} className=\"px-0\" align=\"left\">\r\n      {\r\n        item.result == 1 ? (\r\n          <small className=\"border-radius-4 bg-primary text-white px-8 py-2 \">\r\n            <a href=\"#\" onClick={() => this.openDialogDetailCellContent(item)}>\r\n              {t('result.positive')}\r\n            </a>\r\n          </small>\r\n        ) : (\r\n            <small className=\"border-radius-4 bg-light-gray px-8 py-2 \">\r\n              <a href=\"#\" onClick={() => this.openDialogDetailCellContent(item)}>\r\n                {\r\n                  item.result == -2 ? (\r\n                    t('result.none')\r\n                  ) : (\r\n                      item.result == -1 ? (\r\n                        t('result.negative')\r\n                      ) : (\r\n                          item.result == 0 ? (\r\n                            t('result.indertermine')\r\n                          ) : (\r\n                              ''\r\n                            )\r\n                        )\r\n                    )\r\n                }\r\n              </a>\r\n            </small>\r\n          )\r\n      }\r\n    </TableCell>\r\n    return (\r\n      <React.Fragment>\r\n        {contentCell}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  openDialogDetailCellContent(resultReportDetail) {\r\n    if (resultReportDetail != null && resultReportDetail.resultReport != null && resultReportDetail.resultReport.id != null) {\r\n      getResultReportById(resultReportDetail.resultReport.id).then((result) => {\r\n        let item = result.data;\r\n        item.isView = true;\r\n        this.setState({ item: item }, function () {\r\n          //Elisa(1),//Kết Quả Xét Nghiệm Bằng Kỹ Thuật Elisa\r\n          //FastTest(2),//Kết Quả Xét Nghiệm Bằng Kỹ Thuật Xét Nghiệm Nhanh\r\n          //SERODIA(3)//Kết Quả Xét Nghiệm Bằng Kỹ Thuật SERODIA\r\n          //ECLIA(4)//KẾT QUẢ ĐIỆN/HÓA PHÁT QUANG\r\n          if (item.typeMethod == 1) {\r\n            this.setState({ shouldOpenViewDialogElisa: true });\r\n          } else if (item.typeMethod == 2) {\r\n            this.setState({ shouldOpenViewDialogFastTest: true });\r\n          } else if (item.typeMethod == 3) {\r\n            this.setState({ shouldOpenViewDialogSerodia: true });\r\n          } else if (item.typeMethod == 4) {\r\n            this.setState({ shouldOpenViewDialogEclia: true });\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  handleFormSubmit = () => {\r\n    const { t } = this.props;\r\n    const {\r\n      sampleTubeResultConclusionList,\r\n      currentHealthOrgEQARound,\r\n      isFinalResult\r\n    } = this.state;\r\n    if (sampleTubeResultConclusionList.length === 0) {\r\n      toast.warn(t(\"EQAResultReportConclusion.no_data\"));\r\n    } else {\r\n      updateResultReportConclusionBySampleTube(\r\n        sampleTubeResultConclusionList,\r\n        currentHealthOrgEQARound.id,\r\n        isFinalResult\r\n      )\r\n        .then(res => {\r\n          // this.props.handleOKEditClose();\r\n          toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\r\n          this.setState({ loading: false });\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: false });\r\n          toast.error(t(\"EQAResultReportConclusion.update_result_error\"));\r\n        });\r\n    }\r\n\r\n  };\r\n\r\n  notificationFinalResult = () => {\r\n    // if(this.state.isFinalResult){\r\n    this.setState({ shouldOpenConfirmationDialog: true })\r\n    // }\r\n\r\n  }\r\n  handleFinalResult = () => {\r\n\r\n    if (this.state.isFinalResult == null || !this.state.isFinalResult) {\r\n      this.setState({ isFinalResult: true, dateSubmitResults: new Date() }, () => {\r\n      })\r\n      this.handleDialogClose()\r\n    }\r\n    if (this.state.isFinalResult) {\r\n      this.setState({ isFinalResult: false, dateSubmitResults: new Date() }, () => {\r\n      })\r\n      this.handleDialogClose()\r\n    }\r\n  }\r\n  handleDialogFinalResultClose = () => {\r\n    // this.setState({isFinalResult:false},()=>{\r\n    // })\r\n    this.handleDialogClose()\r\n  }\r\n  render() {\r\n    let { open, handleClose, handleOKEditClose, isView, t, i18n } = this.props;\r\n    let {\r\n      id,\r\n      isViewButton,\r\n      healthOrgRound,\r\n      reagentLot,\r\n      reagent,\r\n      technician,\r\n      reagentExpiryDate,\r\n      orderTest,\r\n      view,\r\n      item,\r\n      personBuyReagent,\r\n      reagentUnBoxDate,\r\n      details,\r\n      hasErrorResult,\r\n      testDate, note,\r\n      shouldOpenHealthOrgRoundPopup,\r\n      isFinalResult, listSample, listResult\r\n    } = this.state;\r\n\r\n    let searchObject = { pageIndex: 0, pageSize: 1000000 };\r\n    let technicianSearchObject = { pageIndex: 0, pageSize: 1000000, searchByHealthOrg: true, healthOrg: (healthOrgRound && healthOrgRound.healthOrg && healthOrgRound.healthOrg.id) ? { id: healthOrgRound.healthOrg.id } : null };\r\n\r\n    return (\r\n      <Dialog open={open} PaperComponent={PaperComponent} maxWidth={'lg'} fullWidth={true} >\r\n        <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit}>\r\n          <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\r\n            <span className=\"mb-20 styleColor\">{!isView ? t(\"SaveUpdate\") : t(\"Details\")}</span>\r\n            <IconButton style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }} onClick={() => handleClose()}><Icon color=\"error\"\r\n              title={t(\"close\")}>\r\n              close\r\n            </Icon>\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent dividers>\r\n            {this.state.shouldOpenConfirmationDialog && (\r\n              <ConfirmationDialog\r\n                title={t(\"confirm\")}\r\n                open={this.state.shouldOpenConfirmationDialog}\r\n                onConfirmDialogClose={this.handleDialogFinalResultClose}\r\n                onYesClick={this.handleFinalResult}\r\n                text={isFinalResult ? t(\"EqaResult.unFinalResultConfirm\") : t(\"EqaResult.FinalResultConfirm\")}\r\n                Yes={t(\"general.Yes\")}\r\n                No={t(\"general.No\")}\r\n              />\r\n            )}\r\n            <Grid className=\"\" container spacing={2}>\r\n              <Grid item md={8} sm={8} xs={8}>\r\n                <TextValidator\r\n                  disabled={true}\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                  //   disabled={isView}\r\n                  label={<span className=\"font\">{t(\"EQAResultReportElisa.healthOrgName\")}</span>}\r\n                  placeholder={t(\"EQAResultReportElisa.healthOrgName\")}\r\n                  id=\"healthOrgRound\"\r\n                  className=\"w-100 stylePlaceholder\"\r\n                  value={(healthOrgRound != null && healthOrgRound.healthOrg) ? healthOrgRound.healthOrg.name : ''}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                />\r\n              </Grid>\r\n              <Grid item md={4} sm={4} xs={4} >\r\n                <FormControlLabel\r\n                  //   disabled ={true}\r\n                  label={<span className=\"font\" style={{ fontWeight: \"bold\" }}> {t('EQAResultReportFastTest.isFinalResult')}</span>}\r\n                  control={<Checkbox checked={isFinalResult}\r\n                    onClick={(isFinalResult) =>\r\n                      this.notificationFinalResult(isFinalResult)\r\n                      // this.handleFinalResult(isFinalResult, 'isFinalResult')\r\n                    }\r\n                  />}\r\n\r\n                />\r\n              </Grid>\r\n              {/* <Grid item md ={8} sm={6} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\">{t(\"SampleManagement.serum-bottle.note\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"note\"\r\n                  value={note}\r\n                  disabled ={true}\r\n                />\r\n              </Grid> */}\r\n\r\n\r\n              <Grid item xs={12} className=\"mt-10\">\r\n                <div>\r\n                  {listSample && (<Paper>\r\n                    <TableContainer style={{ maxHeight: 1000 }}>\r\n                      <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead>\r\n                          <TableRow>\r\n                            <TableCell\r\n                              style={{\r\n                                backgroundColor: '#358600',\r\n                                color: '#fff',\r\n                              }}\r\n                              rowSpan={2} width=\"50px\" align=\"center\" className=\"p-0\">{t('ResultsOfTheUnits.STT')}</TableCell>\r\n                            <TableCell style={{\r\n                              backgroundColor: '#358600',\r\n                              color: '#fff',\r\n                            }}\r\n                              rowSpan={2}>{t('ResultsOfTheUnits.set')}</TableCell>\r\n                            {\r\n                              (listResult && this.renderRowHead())\r\n                            }\r\n                            {(view && <TableCell style={{\r\n                              backgroundColor: '#358600',\r\n                              color: '#fff',\r\n                            }}>{t('EQAResultReportConclusion.final_conclusion')}</TableCell>)}\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          {\r\n                            (listSample && listSample.map((sample, index) => this.renderResultDetails(sample, index)))\r\n                          }\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </Paper>)}\r\n                </div>\r\n                {this.state.shouldOpenViewDialogElisa && (\r\n                  <EQAResultReportElisaDialog t={t} i18n={i18n}\r\n                    handleClose={this.handleDialogClose}\r\n                    open={this.state.shouldOpenViewDialogElisa}\r\n                    handleOKEditClose={this.handleOKEditClose}\r\n                    item={item}\r\n                  />\r\n                )}\r\n                {this.state.shouldOpenViewDialogFastTest && (\r\n                  <EQAResultReportFastTestEditorDialog t={t} i18n={i18n}\r\n                    handleClose={this.handleDialogClose}\r\n                    open={this.state.shouldOpenViewDialogFastTest}\r\n                    handleOKEditClose={this.handleOKEditClose}\r\n                    item={item}\r\n                  />\r\n                )}\r\n                {this.state.shouldOpenViewDialogSerodia && (\r\n                  <EQAResultReportSerodiaDialog t={t} i18n={i18n}\r\n                    handleClose={this.handleDialogClose}\r\n                    open={this.state.shouldOpenViewDialogSerodia}\r\n                    handleOKEditClose={this.handleOKEditClose}\r\n                    item={item}\r\n                  />\r\n                )}\r\n                {this.state.shouldOpenViewDialogEclia && (\r\n                  <EQAResultReportEcliaEditorDialog t={t} i18n={i18n}\r\n                    handleClose={this.handleDialogClose}\r\n                    open={this.state.shouldOpenViewDialogEclia}\r\n                    handleOKEditClose={this.handleOKEditClose}\r\n                    item={item}\r\n                  />\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions spacing={4} className=\"flex flex-end flex-middle\">\r\n            <Button variant=\"contained\" color=\"secondary\" type=\"button\" onClick={() => handleClose()}> {t('Cancel')}</Button>\r\n            {(!isViewButton && <Button variant=\"contained\" color=\"primary\" type=\"submit\" >\r\n              {t('Save')}\r\n            </Button>\r\n            )}\r\n          </DialogActions>\r\n        </ValidatorForm>\r\n      </Dialog >\r\n    );\r\n  }\r\n}\r\n\r\nexport default EQAResultReportDialog;\r\n"]},"metadata":{},"sourceType":"module"}