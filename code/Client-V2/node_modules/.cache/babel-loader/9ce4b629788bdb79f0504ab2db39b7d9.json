{"ast":null,"code":"import _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\EQAResultReportSerodia\\\\EQAResultReportSerodiaInformation.jsx\";\nimport React, { Component } from \"react\";\nimport { Dialog, Button, Grid, TextField, Icon, IconButton, FormControl, DialogTitle, DialogContent, DialogActions, Paper, InputAdornment, MenuItem, Checkbox, Select, FormControlLabel } from \"@material-ui/core\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { saveItem, getEQASampleTubeByHealthOrgEQARoundId, checkReagentByHealthOrgRound } from \"./EQAResultReportSerodiaService\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport ConstantList from \"../../appConfig\";\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\nimport HealthOrgEQARoundPopup from \"../Component/HealthOrgEQARound/HealthOrgEQARoundPopup\";\nimport { searchByPage as reagentSearchByPage } from \"../Reagent/ReagentService\";\nimport Draggable from \"react-draggable\";\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport LocalConstants from \"./Constants\";\nimport MaterialTable, { MTableToolbar, Chip, MTableBody, MTableHeader } from \"material-table\";\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { getCurrentUser, getListHealthOrgByUser } from \"../User/UserService\";\nimport \"../../../styles/views/_loadding.scss\";\nimport \"../../../styles/views/_style.scss\";\nimport clsx from \"clsx\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n}); // function PaperComponent(props) {\n//   return (\n//     <Draggable handle=\"#draggable-dialog\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n//       <Paper {...props} />\n//     </Draggable>\n//   );\n// }\n\nfunction MaterialButton(props) {\n  var item = props.item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      return props.onSelect(item);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    color: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"delete\")));\n}\n\nfunction TableODColumn(props) {\n  var item = props.item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    disabled: props.isView,\n    className: \"w-80\",\n    onChange: function onChange(event) {\n      return props.onChange(event, item);\n    },\n    type: \"number\",\n    value: item.oDvalue,\n    name: \"itemODvalue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction TableCOColumn(props) {\n  var item = props.item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    disabled: props.isView,\n    className: \"w-80\",\n    value: item.cutOff,\n    onChange: function onChange(event) {\n      return props.onChange(event, item);\n    },\n    type: \"number\",\n    name: \"itemcutOff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction TableODDeviceCOColumn(props) {\n  var item = props.item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    disabled: props.isView,\n    className: \"w-80\",\n    value: item.ratioOdAndCutOff,\n    type: \"number\",\n    name: \"itemRatioOdAndCutOff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction TableResultColumn(props) {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t,\n      i18n = _useTranslation.i18n;\n\n  var item = props.item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    disabled: props.isView,\n    value: item.result,\n    onChange: function onChange(event) {\n      return props.onChange(event, item);\n    },\n    inputProps: {\n      name: \"result\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, t(\"EQAResultReportElisa.Result.none\")), /*#__PURE__*/React.createElement(MenuItem, {\n    value: LocalConstants.EQAResultReportDetail_TestValue.negative,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, t(\"EQAResultReportElisa.Result.negative\")), /*#__PURE__*/React.createElement(MenuItem, {\n    value: LocalConstants.EQAResultReportDetail_TestValue.indertermine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, t(\"EQAResultReportElisa.Result.indertermine\")), /*#__PURE__*/React.createElement(MenuItem, {\n    value: LocalConstants.EQAResultReportDetail_TestValue.positive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, t(\"EQAResultReportElisa.Result.positive\")))));\n}\n\nfunction TableNoteColumn(props) {\n  var item = props.item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 10\n    }\n  });\n}\n\nvar EQAResultReportElisaInformation = /*#__PURE__*/function (_Component) {\n  _inherits(EQAResultReportElisaInformation, _Component);\n\n  var _super = _createSuper(EQAResultReportElisaInformation);\n\n  function EQAResultReportElisaInformation(props) {\n    var _this;\n\n    _classCallCheck(this, EQAResultReportElisaInformation);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      rowsPerPage: 1000,\n      page: 0,\n      // isView: false,\n      typeMethod: 1,\n      healthOrg: [],\n      listHealthOrgRound: [],\n      reagent: null,\n      technician: null,\n      details: [],\n      healthOrg: null,\n      reagentExpiryDate: null,\n      testDate: null,\n      reagentUnBoxDate: null,\n      dateSubmitResults: null,\n      roundLists: [],\n      eqaRoundRegister: [],\n      roundId: \"\",\n      listReagent: [],\n      reagentId: \"\",\n      healthOrgRound: null,\n      round: null,\n      orderTest: \"\",\n      shouldOpenSearchDialog: false,\n      shouldOpenConfirmationDialog: false,\n      shouldOpenHealthOrgRoundPopup: false,\n      shouldOpenConfirmation: false,\n      isViewButton: false,\n      isRoleAdmin: false,\n      typeMethod: 3,\n      loading: false\n    };\n    _this.listCheckValue = [{\n      id: LocalConstants.EQAResultReportDetail_TestValue.positive,\n      name: \"Dương tính\"\n    }, {\n      id: LocalConstants.EQAResultReportDetail_TestValue.negative,\n      name: \"Âm tính\"\n    }];\n    _this.listTestValue = [{\n      id: LocalConstants.EQAResultReportDetail_TestValue.positive,\n      name: \"Dương tính\"\n    }, {\n      id: LocalConstants.EQAResultReportDetail_TestValue.indertermine,\n      name: \"Không xác định\"\n    }, {\n      id: LocalConstants.EQAResultReportDetail_TestValue.negative,\n      name: \"Âm tính\"\n    }];\n    _this.listAgglomeration = [{\n      id: 1,\n      name: \" - \"\n    }, {\n      id: 2,\n      name: \" +/- \"\n    }, {\n      id: 3,\n      name: \" + \"\n    }, {\n      id: 4,\n      name: \" ++ \"\n    }];\n    _this.Results = [{\n      id: LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented,\n      name: \"Không thực hiện\"\n    }, {\n      id: LocalConstants.EQAResultReportDetail_TestValue.negative,\n      name: \"Âm tính\"\n    }, {\n      id: LocalConstants.EQAResultReportDetail_TestValue.indertermine,\n      name: \"Không xác định\"\n    }, {\n      id: LocalConstants.EQAResultReportDetail_TestValue.positive,\n      name: \"Dương tính\"\n    }];\n\n    _this.handleDialogClose = function () {\n      _this.setState({\n        shouldOpenConfirmationDialog: false,\n        shouldOpenConfirmation: false\n      });\n    };\n\n    _this.handleChange = function (event, source) {\n      var item = _this.state.item;\n\n      if (item == null) {\n        item = {};\n      }\n\n      var name = event.target.name;\n      var value = event.target.value;\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"isFinalResult\") {\n        item[\"isFinalResult\"] = event.target.checked;\n\n        _this.setState({\n          item: item\n        });\n      }\n\n      item[name] = value;\n\n      _this.setState({\n        item: item\n      });\n    };\n\n    _this.handleRowDataCellChange = function (rowData, event) {\n      var item = _this.state.item;\n      var t = _this.props.t;\n\n      if (item.details != null && item.details.length > 0) {\n        item.details.forEach(function (element) {\n          if (element.tableData != null && rowData != null && rowData.tableData != null && element.tableData.id == rowData.tableData.id) {\n            if (event.target.name == \"checkValue\") {\n              if (event.target.value != \"\" && event.target.value != null) if (element.result == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\n                element.result = \"\";\n              }\n              element.checkValue = event.target.value;\n            } else if (event.target.name == \"testValue\") {\n              if (event.target.value != \"\" && event.target.value != null) if (element.result == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\n                element.result = \"\";\n              }\n              element.testValue = event.target.value;\n            } else if (event.target.name == \"agglomeration\") {\n              if (event.target.value != \"\" && event.target.value != null) if (element.result == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\n                element.result = \"\";\n              }\n              element.agglomeration = event.target.value;\n            } else if (event.target.name == \"result\") {\n              if (event.target.value == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\n                element.agglomeration = \"\";\n                element.testValue = \"\";\n                element.checkValue = \"\";\n              }\n\n              element.result = event.target.value;\n            } else if (event.target.name == \"note\") {\n              element.note = event.target.value;\n            }\n          }\n        });\n\n        _this.setState({\n          item: item\n        }, function () {});\n      }\n    };\n\n    _this.openCircularProgress = function () {\n      _this.setState({\n        loading: true\n      });\n    };\n\n    _this.handleDateChange = function (date, name) {\n      var item = _this.state.item;\n\n      if (item == null) {\n        item = {};\n      }\n\n      item[name] = date;\n\n      _this.setState({\n        item: item\n      });\n    };\n\n    _this.selectReagent = function (reagent) {\n      var item = _this.state.item;\n\n      if (item == null) {\n        item = {};\n      }\n\n      if (reagent != null && reagent.id != null) {\n        if (reagent.name === \"Sinh phẩm khác\") {\n          _this.setState({\n            shouldOpenConfirmation: true\n          });\n\n          item[\"otherReagent\"] = true;\n        } else {\n          item[\"otherReagent\"] = false;\n        }\n\n        item[\"reagent\"] = reagent;\n\n        _this.setState({\n          item: item\n        }, function () {});\n      }\n    };\n\n    _this.handleHealthOrgRoundPopupClose = function () {\n      _this.setState({\n        shouldOpenHealthOrgRoundPopup: false\n      }, function () {});\n    };\n\n    _this.handleSelectHealthOrgRound = function (healthOrgRound) {\n      var item = _this.state.item;\n\n      if (item == null) {\n        item = {};\n      }\n\n      if (healthOrgRound && healthOrgRound.id) {\n        item[\"healthOrgRound\"] = healthOrgRound;\n\n        _this.setState({\n          item: item\n        }, function () {\n          var _this$state$item,\n              _this$state$item2,\n              _this2 = this;\n\n          var item = this.state.item;\n          var details = (_this$state$item = this.state.item) === null || _this$state$item === void 0 ? void 0 : _this$state$item.details;\n          details = [];\n          getEQASampleTubeByHealthOrgEQARoundId((_this$state$item2 = this.state.item) === null || _this$state$item2 === void 0 ? void 0 : _this$state$item2.healthOrgRound.id).then(function (result) {\n            var listEQASampleTube = result.data;\n\n            if (listEQASampleTube != null && listEQASampleTube.length > 0) {\n              listEQASampleTube.forEach(function (tube) {\n                var eQAResultReportDetail = {};\n                eQAResultReportDetail.sampleTube = tube;\n                eQAResultReportDetail.checkValue = \"\";\n                eQAResultReportDetail.testValue = \"\";\n                eQAResultReportDetail.agglomeration = \"\";\n                eQAResultReportDetail.result = \"\";\n                details.push(eQAResultReportDetail);\n              });\n            }\n\n            item[\"details\"] = details;\n\n            _this2.setState({\n              item: item\n            });\n          });\n        });\n      }\n\n      _this.handleHealthOrgRoundPopupClose();\n    };\n\n    _this.notificationFinalResult = function () {\n      _this.setState({\n        shouldOpenConfirmationDialog: true\n      });\n    };\n\n    _this.handleFinalResult = function () {\n      var item = _this.state.item;\n\n      if (item.isFinalResult == null || !item.isFinalResult) {\n        item[\"isFinalResult\"] = true;\n        item[\"dateSubmitResults\"] = new Date();\n\n        _this.setState({\n          item: item\n        }, function () {});\n\n        _this.handleDialogClose();\n\n        return;\n      }\n\n      if (item.isFinalResult) {\n        item[\"isFinalResult\"] = false;\n        item[\"dateSubmitResults\"] = null;\n\n        _this.setState({\n          item: item\n        }, function () {});\n\n        _this.handleDialogClose();\n\n        return;\n      }\n    };\n\n    _this.handleDialogFinalResultClose = function () {\n      _this.handleDialogClose();\n    };\n\n    return _this;\n  } // componentDidMount() {\n  // }\n\n\n  _createClass(EQAResultReportElisaInformation, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item,\n          isRoleAdmin = _this$props.isRoleAdmin,\n          isView = _this$props.isView;\n\n      if (item != null && item.reagent != null && item.reagent.name != null) {\n        if (item.reagent.name === \"Sinh phẩm khác\") {\n          item[\"otherReagent\"] = true;\n        } else {\n          item[\"otherReagent\"] = false;\n        }\n      }\n\n      this.setState({\n        item: item,\n        isRoleAdmin: isRoleAdmin\n      }, function () {\n        if (item.listHealthOrgRound != null) {\n          _this3.setState({\n            listHealthOrgRound: item.listHealthOrgRound,\n            healthOrgRound: item.listHealthOrgRound[0]\n          }, function () {\n            _this3.handleSelectHealthOrgRound(_this3.state.healthOrgRound);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state$item3,\n          _this$state$item4,\n          _this$state$item5,\n          _this$state$item6,\n          _this4 = this,\n          _this$state$item7,\n          _this$state$item8,\n          _this$state$item9,\n          _this$state$item10,\n          _this$state$item11,\n          _this$state$item12,\n          _this$state$item13,\n          _this$state$item14,\n          _this$state$item15,\n          _this$state$item16,\n          _this$state$item17,\n          _this$state$item18,\n          _this$state$item19,\n          _this$state$item20,\n          _this$state$item21,\n          _this$state$item22,\n          _this$state$item23,\n          _this$state$item24,\n          _this$state$item25,\n          _this$state$item26,\n          _this$state$item27,\n          _this$state$item28,\n          _this$state$item29;\n\n      var _this$state = this.state,\n          isRoleAdmin = _this$state.isRoleAdmin,\n          isView = _this$state.isView,\n          isCheck = _this$state.isCheck,\n          id = _this$state.id,\n          isViewButton = _this$state.isViewButton,\n          supplyOfReagent = _this$state.supplyOfReagent,\n          shouldOpenHealthOrgRoundPopup = _this$state.shouldOpenHealthOrgRoundPopup,\n          personBuyReagent = _this$state.personBuyReagent,\n          reagent = _this$state.reagent,\n          listHealthOrgRound = _this$state.listHealthOrgRound,\n          reagentLot = _this$state.reagentLot,\n          orderTest = _this$state.orderTest,\n          reagentExpiryDate = _this$state.reagentExpiryDate,\n          testDate = _this$state.testDate,\n          dateSubmitResults = _this$state.dateSubmitResults,\n          technician = _this$state.technician,\n          healthOrgRound = _this$state.healthOrgRound,\n          incubationTemp = _this$state.incubationTemp,\n          incubationPeriod = _this$state.incubationPeriod,\n          incubationTempWithPlus = _this$state.incubationTempWithPlus,\n          incubationPeriodWithPlus = _this$state.incubationPeriodWithPlus,\n          incubationTempWithSubstrate = _this$state.incubationTempWithSubstrate,\n          incubationPeriodWithSubstrate = _this$state.incubationPeriodWithSubstrate,\n          details = _this$state.details,\n          note = _this$state.note,\n          isManagementUnit = _this$state.isManagementUnit,\n          reagentUnBoxDate = _this$state.reagentUnBoxDate,\n          loading = _this$state.loading,\n          item = _this$state.item,\n          isFinalResult = _this$state.isFinalResult;\n      var searchObject = {\n        pageIndex: 0,\n        pageSize: 1000000,\n        testType: 3\n      };\n      var technicianSearchObject = {\n        pageIndex: 0,\n        pageSize: 1000000,\n        searchByHealthOrg: true,\n        healthOrg: ((_this$state$item3 = this.state.item) === null || _this$state$item3 === void 0 ? void 0 : _this$state$item3.healthOrgRound) && ((_this$state$item4 = this.state.item) === null || _this$state$item4 === void 0 ? void 0 : _this$state$item4.healthOrgRound.healthOrg) && ((_this$state$item5 = this.state.item) === null || _this$state$item5 === void 0 ? void 0 : _this$state$item5.healthOrgRound.healthOrg.id) ? {\n          id: (_this$state$item6 = this.state.item) === null || _this$state$item6 === void 0 ? void 0 : _this$state$item6.healthOrgRound.healthOrg.id\n        } : null\n      };\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          handleClose = _this$props2.handleClose,\n          classes = _this$props2.classes,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n;\n      var columns = [{\n        title: t(\"EQAResultReportFastTest.sample_list.sample_code\"),\n        field: \"sampleTube.code\",\n        align: \"left\",\n        width: \"150\",\n        headerStyle: {\n          minWidth: \"50px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        cellStyle: {\n          minWidth: \"50px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        }\n      }, {\n        title: t(\"EQAResultReportSerodia.checkValue\"),\n        field: \"supplyOfReagent\",\n        width: \"150\",\n        headerStyle: {\n          minWidth: \"100px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        cellStyle: {\n          minWidth: \"100px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(FormControl, {\n            className: \"w-80\",\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(Select, {\n            value: rowData.checkValue,\n            disabled: isRoleAdmin,\n            onChange: function onChange(checkValue) {\n              return _this4.handleRowDataCellChange(rowData, checkValue);\n            },\n            inputProps: {\n              name: \"checkValue\",\n              id: \"checkValue-simple\"\n            },\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 13\n            }\n          }, _this4.listCheckValue.map(function (item) {\n            return /*#__PURE__*/React.createElement(MenuItem, {\n              key: item.id,\n              value: item.id,\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 559,\n                columnNumber: 19\n              }\n            }, item.name);\n          })));\n        }\n      }, {\n        title: t(\"EQAResultReportSerodia.testValue\"),\n        field: \"supplyOfReagent\",\n        width: \"150\",\n        headerStyle: {\n          minWidth: \"100px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        cellStyle: {\n          minWidth: \"100px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(FormControl, {\n            className: \"w-80\",\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 585,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(Select, {\n            value: rowData.testValue,\n            disabled: isRoleAdmin,\n            onChange: function onChange(testValue) {\n              return _this4.handleRowDataCellChange(rowData, testValue);\n            },\n            inputProps: {\n              name: \"testValue\",\n              id: \"testValue-simple\"\n            },\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 586,\n              columnNumber: 13\n            }\n          }, _this4.listTestValue.map(function (item) {\n            return /*#__PURE__*/React.createElement(MenuItem, {\n              key: item.id,\n              value: item.id,\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 600,\n                columnNumber: 19\n              }\n            }, item.name);\n          })));\n        }\n      }, {\n        title: t(\"EQAResultReportSerodia.agglomeration\"),\n        field: \"supplyOfReagent\",\n        width: \"150\",\n        headerStyle: {\n          minWidth: \"100px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        cellStyle: {\n          minWidth: \"100px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(FormControl, {\n            className: \"w-80\",\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(Select, {\n            value: rowData.agglomeration,\n            disabled: isRoleAdmin,\n            onChange: function onChange(agglomeration) {\n              return _this4.handleRowDataCellChange(rowData, agglomeration);\n            },\n            inputProps: {\n              name: \"agglomeration\",\n              id: \"agglomeration-simple\"\n            },\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 13\n            }\n          }, _this4.listAgglomeration.map(function (item) {\n            return /*#__PURE__*/React.createElement(MenuItem, {\n              key: item.id,\n              value: item.id,\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 641,\n                columnNumber: 19\n              }\n            }, item.name);\n          })));\n        }\n      }, {\n        title: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 13\n          }\n        }, \" * \"), t(\"EQAResultReportSerodia.Result.title\")),\n        field: \"supplyOfReagent\",\n        width: \"150\",\n        headerStyle: {\n          minWidth: \"200px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        cellStyle: {\n          minWidth: \"200px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(FormControl, {\n            className: \"w-80\",\n            required: _this4.state.isCheck,\n            error: _this4.state.isCheck,\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 672,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(Select, {\n            value: rowData.result,\n            disabled: isRoleAdmin,\n            onChange: function onChange(result) {\n              return _this4.handleRowDataCellChange(rowData, result);\n            },\n            inputProps: {\n              name: \"result\",\n              id: \"result-simple\"\n            },\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 677,\n              columnNumber: 13\n            }\n          }, _this4.Results.map(function (item) {\n            return /*#__PURE__*/React.createElement(MenuItem, {\n              key: item.id,\n              value: item.id,\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 691,\n                columnNumber: 19\n              }\n            }, item.name);\n          })));\n        }\n      }, {\n        title: t(\"SampleManagement.serum-bottle.note\"),\n        field: \"note\",\n        width: \"150\",\n        headerStyle: {\n          minWidth: \"200px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        cellStyle: {\n          minWidth: \"200px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(TextValidator, {\n            className: \"w-100\",\n            onChange: function onChange(note) {\n              return _this4.handleRowDataCellChange(rowData, note);\n            },\n            type: \"textarea\",\n            multiLine: true,\n            rowsMax: 4,\n            name: \"note\",\n            value: rowData.note ? rowData.note : \"\",\n            disabled: isRoleAdmin,\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 717,\n              columnNumber: 11\n            }\n          });\n        }\n      }];\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 7\n        }\n      }, this.state.shouldOpenConfirmationDialog && /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        title: t(\"confirm\"),\n        open: this.state.shouldOpenConfirmationDialog,\n        onConfirmDialogClose: this.handleDialogFinalResultClose,\n        onYesClick: this.handleFinalResult,\n        text: ((_this$state$item7 = this.state.item) === null || _this$state$item7 === void 0 ? void 0 : _this$state$item7.isFinalResult) ? t(\"EqaResult.unFinalResultConfirm\") : t(\"EqaResult.FinalResultConfirm\"),\n        Yes: t(\"general.Yes\"),\n        No: t(\"general.No\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 11\n        }\n      }), this.state.shouldOpenConfirmation && /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        title: t(\"general.noti\"),\n        open: this.state.shouldOpenConfirmation,\n        onYesClick: this.handleDialogFinalResultClose,\n        text: t(\"general.otherReagent\"),\n        Yes: t(\"general.Yes\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 758,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Autocomplete, {\n        size: \"small\",\n        id: \"combo-box\",\n        options: this.props.listHealthOrgRound,\n        className: \"flex-end\",\n        disabled: isRoleAdmin,\n        getOptionLabel: function getOptionLabel(option) {\n          return option.healthOrg.name;\n        },\n        onChange: function onChange(event, healthOrgRound) {\n          return _this4.handleSelectHealthOrgRound(healthOrgRound);\n        },\n        value: (_this$state$item8 = this.state.item) === null || _this$state$item8 === void 0 ? void 0 : _this$state$item8.healthOrgRound,\n        renderInput: function renderInput(params) {\n          return /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n            label: /*#__PURE__*/React.createElement(\"span\", {\n              className: \"font\",\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 774,\n                columnNumber: 21\n              }\n            }, t(\"EQAResultReportElisa.healthOrgName\")),\n            variant: \"outlined\",\n            disabled: isRoleAdmin,\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 771,\n              columnNumber: 17\n            }\n          }));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 2,\n        md: 2,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 790,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 19\n          }\n        }, \" * \"), t(\"EQAResultReportElisa.order\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"orderTest\",\n        value: (_this$state$item9 = this.state.item) === null || _this$state$item9 === void 0 ? void 0 : _this$state$item9.orderTest,\n        disabled: isRoleAdmin,\n        validators: [\"required\"],\n        errorMessages: t(\"general.errorMessages_required\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 785,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 804,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 805,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        size: \"small\",\n        className: \"w-100\",\n        margin: \"none\",\n        id: \"mui-pickers-testDate\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 812,\n            columnNumber: 19\n          }\n        }, t(\"EQAResultReportElisa.testDate\")),\n        inputVariant: \"outlined\",\n        type: \"text\",\n        autoOk: true,\n        format: \"dd/MM/yyyy\",\n        value: ((_this$state$item10 = this.state.item) === null || _this$state$item10 === void 0 ? void 0 : _this$state$item10.testDate) ? (_this$state$item11 = this.state.item) === null || _this$state$item11 === void 0 ? void 0 : _this$state$item11.testDate : null,\n        disabled: isRoleAdmin,\n        onChange: function onChange(date) {\n          return _this4.handleDateChange(date, \"testDate\");\n        },\n        fullWidth: true,\n        validators: [\"required\"],\n        errorMessages: t(\"general.errorMessages_required\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 806,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 833,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 838,\n            columnNumber: 26\n          }\n        }, t(\"EQAResultReportElisa.technician\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"technician\",\n        value: technician,\n        disabled: isView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 834,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 847,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(AsynchronousAutocomplete, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 850,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 851,\n            columnNumber: 19\n          }\n        }, \" * \"), t(\"EqaResult.reagent\")),\n        size: \"small\",\n        variant: \"outlined\",\n        disabled: isRoleAdmin,\n        searchFunction: reagentSearchByPage,\n        searchObject: searchObject,\n        defaultValue: (_this$state$item12 = this.state.item) === null || _this$state$item12 === void 0 ? void 0 : _this$state$item12.reagent,\n        value: (_this$state$item13 = this.state.item) === null || _this$state$item13 === void 0 ? void 0 : _this$state$item13.reagent,\n        displayLable: \"name\",\n        valueTextValidator: (_this$state$item14 = this.state.item) === null || _this$state$item14 === void 0 ? void 0 : _this$state$item14.reagent,\n        validators: [\"required\"],\n        errorMessages: t(\"general.errorMessages_required\"),\n        onSelect: this.selectReagent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 848,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 2,\n        md: 2,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 869,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 875,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 876,\n            columnNumber: 19\n          }\n        }, \" * \"), t(\"EQAResultReportElisa.reagentLot\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"reagentLot\",\n        value: (_this$state$item15 = this.state.item) === null || _this$state$item15 === void 0 ? void 0 : _this$state$item15.reagentLot,\n        disabled: isRoleAdmin,\n        validators: [\"required\"],\n        errorMessages: t(\"general.errorMessages_required\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 870,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        container: true,\n        spacing: 2,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 889,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 890,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 893,\n            columnNumber: 28\n          }\n        }, t(\"reagent.expirationDay\")),\n        onChange: this.handleChange,\n        type: \"number\",\n        name: \"dayReagentExpiryDate\",\n        value: (_this$state$item16 = this.state.item) === null || _this$state$item16 === void 0 ? void 0 : _this$state$item16.dayReagentExpiryDate,\n        disabled: isRoleAdmin,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 891,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 903,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 906,\n            columnNumber: 28\n          }\n        }, t(\"reagent.expirationMonth\")),\n        onChange: this.handleChange,\n        type: \"number\",\n        name: \"monthReagentExpiryDate\",\n        value: (_this$state$item17 = this.state.item) === null || _this$state$item17 === void 0 ? void 0 : _this$state$item17.monthReagentExpiryDate,\n        disabled: isRoleAdmin,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 904,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 916,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 919,\n            columnNumber: 28\n          }\n        }, t(\"reagent.expirationYear\")),\n        onChange: this.handleChange,\n        type: \"number\",\n        name: \"yeahReagentExpiryDate\",\n        value: (_this$state$item18 = this.state.item) === null || _this$state$item18 === void 0 ? void 0 : _this$state$item18.yeahReagentExpiryDate,\n        disabled: isRoleAdmin,\n        variant: \"outlined\",\n        size: \"small\",\n        validators: [\"required\"],\n        errorMessages: t('general.errorMessages_required'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 917,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 933,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 934,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        size: \"small\",\n        fullWidth: true,\n        margin: \"none\",\n        id: \"mui-pickers-reagentExpiryDate\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 941,\n            columnNumber: 19\n          }\n        }, t(\"EQAResultReportElisa.reagentUnBoxDate\")),\n        inputVariant: \"outlined\",\n        type: \"text\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        value: (_this$state$item19 = this.state.item) === null || _this$state$item19 === void 0 ? void 0 : _this$state$item19.reagentUnBoxDate,\n        disabled: isRoleAdmin,\n        onChange: function onChange(date) {\n          return _this4.handleDateChange(date, \"reagentUnBoxDate\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 935,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 957,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 963,\n            columnNumber: 17\n          }\n        }, t(\"EQAResultReportElisa.supplyOfReagent\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"supplyOfReagent\",\n        value: (_this$state$item20 = this.state.item) === null || _this$state$item20 === void 0 ? void 0 : _this$state$item20.supplyOfReagent,\n        disabled: isRoleAdmin,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 958,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 5,\n        md: 5,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 975,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 981,\n            columnNumber: 17\n          }\n        }, t(\"EQAResultReportElisa.personBuyReagent\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"personBuyReagent\",\n        value: (_this$state$item21 = this.state.item) === null || _this$state$item21 === void 0 ? void 0 : _this$state$item21.personBuyReagent,\n        disabled: isRoleAdmin,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 976,\n          columnNumber: 13\n        }\n      })), ((_this$state$item22 = this.state.item) === null || _this$state$item22 === void 0 ? void 0 : _this$state$item22.isFinalResult) && /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 993,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 994,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        size: \"small\",\n        fullWidth: true,\n        margin: \"none\",\n        disabled: true,\n        id: \"mui-pickers-dateSubmitResults\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1002,\n            columnNumber: 21\n          }\n        }, t(\"EQAResultReportElisa.dateSubmitResults\")),\n        inputVariant: \"outlined\",\n        type: \"text\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        value: (_this$state$item23 = this.state.item) === null || _this$state$item23 === void 0 ? void 0 : _this$state$item23.dateSubmitResults,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 995,\n          columnNumber: 17\n        }\n      }))), ((_this$state$item24 = this.state.item) === null || _this$state$item24 === void 0 ? void 0 : _this$state$item24.isFinalResult) && /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1016,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormControlLabel, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          style: {\n            fontWeight: \"bold\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1019,\n            columnNumber: 17\n          }\n        }, \" \", t(\"EQAResultReportFastTest.isFinalResult\")),\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          checked: this.state.item.isFinalResult ? true : false,\n          onClick: function onClick(isFinalResult) {\n            return _this4.notificationFinalResult(isFinalResult);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1025,\n            columnNumber: 17\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1017,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 12,\n        md: 12,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1035,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        disabled: isRoleAdmin,\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1040,\n            columnNumber: 17\n          }\n        }, t(\"SampleManagement.serum-bottle.note\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        size: \"small\",\n        variant: \"outlined\",\n        name: \"note\",\n        value: (_this$state$item25 = this.state.item) === null || _this$state$item25 === void 0 ? void 0 : _this$state$item25.note,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1036,\n          columnNumber: 13\n        }\n      })), ((_this$state$item26 = this.state.item) === null || _this$state$item26 === void 0 ? void 0 : _this$state$item26.otherReagent) && /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 12,\n        md: 12,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1053,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        disabled: isRoleAdmin,\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1057,\n            columnNumber: 24\n          }\n        }, t(\"reagent.note\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        size: \"small\",\n        variant: \"outlined\",\n        name: \"noteOtherReagent\",\n        value: (_this$state$item27 = this.state.item) === null || _this$state$item27 === void 0 ? void 0 : _this$state$item27.noteOtherReagent,\n        validators: [\"required\"],\n        errorMessages: t(\"general.errorMessages_required\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1054,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1069,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(MaterialTable, {\n        title: \"\",\n        data: ((_this$state$item28 = this.state.item) === null || _this$state$item28 === void 0 ? void 0 : _this$state$item28.details) ? (_this$state$item29 = this.state.item) === null || _this$state$item29 === void 0 ? void 0 : _this$state$item29.details : [],\n        columns: columns,\n        options: {\n          selection: false,\n          actionsColumnIndex: -1,\n          paging: false,\n          search: false,\n          rowStyle: function rowStyle(rowData, index) {\n            return {\n              backgroundColor: index % 2 === 1 ? \"#EEE\" : \"#FFF\"\n            };\n          },\n          headerStyle: {\n            backgroundColor: \"#358600\",\n            color: \"#fff\"\n          },\n          padding: \"dense\",\n          toolbar: false\n        },\n        components: {\n          Toolbar: function Toolbar(props) {\n            return /*#__PURE__*/React.createElement(MTableToolbar, Object.assign({}, props, {\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1090,\n                columnNumber: 37\n              }\n            }));\n          }\n        },\n        onSelectionChange: function onSelectionChange(rows) {\n          _this4.data = rows;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1070,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return EQAResultReportElisaInformation;\n}(Component);\n\nexport default EQAResultReportElisaInformation;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/EQAResultReportSerodia/EQAResultReportSerodiaInformation.jsx"],"names":["React","Component","Dialog","Button","Grid","TextField","Icon","IconButton","FormControl","DialogTitle","DialogContent","DialogActions","Paper","InputAdornment","MenuItem","Checkbox","Select","FormControlLabel","ValidatorForm","TextValidator","saveItem","getEQASampleTubeByHealthOrgEQARoundId","checkReagentByHealthOrgRound","Autocomplete","ConstantList","AsynchronousAutocomplete","HealthOrgEQARoundPopup","searchByPage","reagentSearchByPage","Draggable","Breadcrumb","ConfirmationDialog","MuiPickersUtilsProvider","KeyboardDatePicker","DateFnsUtils","LocalConstants","MaterialTable","MTableToolbar","Chip","MTableBody","MTableHeader","useTranslation","withTranslation","Trans","toast","getCurrentUser","getListHealthOrgByUser","clsx","CircularProgress","configure","autoClose","draggable","limit","MaterialButton","props","item","onSelect","TableODColumn","isView","event","onChange","oDvalue","TableCOColumn","cutOff","TableODDeviceCOColumn","ratioOdAndCutOff","TableResultColumn","t","i18n","result","name","EQAResultReportDetail_TestValue","Not_Implemented","negative","indertermine","positive","TableNoteColumn","EQAResultReportElisaInformation","state","rowsPerPage","page","typeMethod","healthOrg","listHealthOrgRound","reagent","technician","details","reagentExpiryDate","testDate","reagentUnBoxDate","dateSubmitResults","roundLists","eqaRoundRegister","roundId","listReagent","reagentId","healthOrgRound","round","orderTest","shouldOpenSearchDialog","shouldOpenConfirmationDialog","shouldOpenHealthOrgRoundPopup","shouldOpenConfirmation","isViewButton","isRoleAdmin","loading","listCheckValue","id","listTestValue","listAgglomeration","Results","handleDialogClose","setState","handleChange","source","target","value","persist","isActive","checked","handleRowDataCellChange","rowData","length","forEach","element","tableData","checkValue","testValue","agglomeration","note","openCircularProgress","handleDateChange","date","selectReagent","handleHealthOrgRoundPopupClose","handleSelectHealthOrgRound","then","listEQASampleTube","data","tube","eQAResultReportDetail","sampleTube","push","notificationFinalResult","handleFinalResult","isFinalResult","Date","handleDialogFinalResultClose","open","handleClose","isCheck","supplyOfReagent","personBuyReagent","reagentLot","incubationTemp","incubationPeriod","incubationTempWithPlus","incubationPeriodWithPlus","incubationTempWithSubstrate","incubationPeriodWithSubstrate","isManagementUnit","searchObject","pageIndex","pageSize","testType","technicianSearchObject","searchByHealthOrg","classes","columns","title","field","align","width","headerStyle","minWidth","paddingLeft","paddingRight","textAlign","cellStyle","render","map","color","option","params","dayReagentExpiryDate","monthReagentExpiryDate","yeahReagentExpiryDate","fontWeight","otherReagent","noteOtherReagent","selection","actionsColumnIndex","paging","search","rowStyle","index","backgroundColor","padding","toolbar","Toolbar","rows"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  TextField,\r\n  Icon,\r\n  IconButton,\r\n  FormControl,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Paper,\r\n  InputAdornment,\r\n  MenuItem,\r\n  Checkbox,\r\n  Select,\r\n  FormControlLabel,\r\n} from \"@material-ui/core\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport {\r\n  saveItem,\r\n  getEQASampleTubeByHealthOrgEQARoundId,\r\n  checkReagentByHealthOrgRound,\r\n} from \"./EQAResultReportSerodiaService\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport ConstantList from \"../../appConfig\";\r\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\r\nimport HealthOrgEQARoundPopup from \"../Component/HealthOrgEQARound/HealthOrgEQARoundPopup\";\r\nimport { searchByPage as reagentSearchByPage } from \"../Reagent/ReagentService\";\r\nimport Draggable from \"react-draggable\";\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport LocalConstants from \"./Constants\";\r\nimport MaterialTable, {\r\n  MTableToolbar,\r\n  Chip,\r\n  MTableBody,\r\n  MTableHeader,\r\n} from \"material-table\";\r\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { getCurrentUser, getListHealthOrgByUser } from \"../User/UserService\";\r\nimport \"../../../styles/views/_loadding.scss\";\r\nimport \"../../../styles/views/_style.scss\";\r\nimport clsx from \"clsx\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit: 3,\r\n});\r\n// function PaperComponent(props) {\r\n//   return (\r\n//     <Draggable handle=\"#draggable-dialog\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n//       <Paper {...props} />\r\n//     </Draggable>\r\n//   );\r\n// }\r\nfunction MaterialButton(props) {\r\n  const item = props.item;\r\n  return (\r\n    <div>\r\n      <IconButton onClick={() => props.onSelect(item)}>\r\n        <Icon color=\"error\">delete</Icon>\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TableODColumn(props) {\r\n  let item = props.item;\r\n  return (\r\n    <div>\r\n      <TextField\r\n        disabled={props.isView}\r\n        className=\"w-80\"\r\n        onChange={(event) => props.onChange(event, item)}\r\n        type=\"number\"\r\n        value={item.oDvalue}\r\n        name=\"itemODvalue\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TableCOColumn(props) {\r\n  let item = props.item;\r\n  return (\r\n    <div>\r\n      <TextField\r\n        disabled={props.isView}\r\n        className=\"w-80\"\r\n        value={item.cutOff}\r\n        onChange={(event) => props.onChange(event, item)}\r\n        type=\"number\"\r\n        name=\"itemcutOff\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TableODDeviceCOColumn(props) {\r\n  let item = props.item;\r\n  return (\r\n    <div>\r\n      <TextField\r\n        disabled={props.isView}\r\n        className=\"w-80\"\r\n        value={item.ratioOdAndCutOff}\r\n        type=\"number\"\r\n        name=\"itemRatioOdAndCutOff\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TableResultColumn(props) {\r\n  const { t, i18n } = useTranslation();\r\n  let item = props.item;\r\n  return (\r\n    <div>\r\n      <FormControl className=\"w-100\">\r\n        <Select\r\n          disabled={props.isView}\r\n          value={item.result}\r\n          onChange={(event) => props.onChange(event, item)}\r\n          inputProps={{\r\n            name: \"result\",\r\n          }}\r\n        >\r\n          {/* <MenuItem value=''><em>None</em> </MenuItem> */}\r\n          <MenuItem\r\n            value={\r\n              LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented\r\n            }\r\n          >\r\n            {t(\"EQAResultReportElisa.Result.none\")}\r\n          </MenuItem>\r\n          <MenuItem\r\n            value={LocalConstants.EQAResultReportDetail_TestValue.negative}\r\n          >\r\n            {t(\"EQAResultReportElisa.Result.negative\")}\r\n          </MenuItem>\r\n          <MenuItem\r\n            value={LocalConstants.EQAResultReportDetail_TestValue.indertermine}\r\n          >\r\n            {t(\"EQAResultReportElisa.Result.indertermine\")}\r\n          </MenuItem>\r\n          <MenuItem\r\n            value={LocalConstants.EQAResultReportDetail_TestValue.positive}\r\n          >\r\n            {t(\"EQAResultReportElisa.Result.positive\")}\r\n          </MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\nfunction TableNoteColumn(props) {\r\n  let item = props.item;\r\n  return <div></div>;\r\n}\r\nclass EQAResultReportElisaInformation extends Component {\r\n  state = {\r\n    rowsPerPage: 1000,\r\n    page: 0,\r\n    // isView: false,\r\n    typeMethod: 1,\r\n    healthOrg: [],\r\n    listHealthOrgRound: [],\r\n    reagent: null,\r\n    technician: null,\r\n    details: [],\r\n    healthOrg: null,\r\n    reagentExpiryDate: null,\r\n    testDate: null,\r\n    reagentUnBoxDate: null,\r\n    dateSubmitResults: null,\r\n    roundLists: [],\r\n    eqaRoundRegister: [],\r\n    roundId: \"\",\r\n    listReagent: [],\r\n    reagentId: \"\",\r\n    healthOrgRound: null,\r\n    round: null,\r\n    orderTest: \"\",\r\n    shouldOpenSearchDialog: false,\r\n    shouldOpenConfirmationDialog: false,\r\n    shouldOpenHealthOrgRoundPopup: false,\r\n    shouldOpenConfirmation: false,\r\n    isViewButton: false,\r\n    isRoleAdmin: false,\r\n    typeMethod: 3,\r\n    loading: false,\r\n  };\r\n  listCheckValue = [\r\n    {\r\n      id: LocalConstants.EQAResultReportDetail_TestValue.positive,\r\n      name: \"Dương tính\",\r\n    },\r\n    {\r\n      id: LocalConstants.EQAResultReportDetail_TestValue.negative,\r\n      name: \"Âm tính\",\r\n    },\r\n  ];\r\n\r\n  listTestValue = [\r\n    {\r\n      id: LocalConstants.EQAResultReportDetail_TestValue.positive,\r\n      name: \"Dương tính\",\r\n    },\r\n    {\r\n      id: LocalConstants.EQAResultReportDetail_TestValue.indertermine,\r\n      name: \"Không xác định\",\r\n    },\r\n    {\r\n      id: LocalConstants.EQAResultReportDetail_TestValue.negative,\r\n      name: \"Âm tính\",\r\n    },\r\n  ];\r\n  listAgglomeration = [\r\n    { id: 1, name: \" - \" },\r\n    { id: 2, name: \" +/- \" },\r\n    { id: 3, name: \" + \" },\r\n    { id: 4, name: \" ++ \" },\r\n  ];\r\n  Results = [\r\n    {\r\n      id: LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented,\r\n      name: \"Không thực hiện\",\r\n    },\r\n    {\r\n      id: LocalConstants.EQAResultReportDetail_TestValue.negative,\r\n      name: \"Âm tính\",\r\n    },\r\n    {\r\n      id: LocalConstants.EQAResultReportDetail_TestValue.indertermine,\r\n      name: \"Không xác định\",\r\n    },\r\n    {\r\n      id: LocalConstants.EQAResultReportDetail_TestValue.positive,\r\n      name: \"Dương tính\",\r\n    },\r\n  ];\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  // componentDidMount() {\r\n  // }\r\n  handleDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenConfirmationDialog: false,\r\n      shouldOpenConfirmation: false,\r\n    });\r\n  };\r\n  handleChange = (event, source) => {\r\n    let { item } = this.state;\r\n    if (item == null) {\r\n      item = {};\r\n    }\r\n    let name = event.target.name;\r\n    let value = event.target.value;\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n    if (source === \"isFinalResult\") {\r\n      item[\"isFinalResult\"] = event.target.checked;\r\n      this.setState({ item: item });\r\n    }\r\n    item[name] = value;\r\n    this.setState({\r\n      item: item,\r\n    });\r\n  };\r\n\r\n  handleRowDataCellChange = (rowData, event) => {\r\n    let { item } = this.state;\r\n    let { t } = this.props;\r\n    if (item.details != null && item.details.length > 0) {\r\n      item.details.forEach((element) => {\r\n        if (\r\n          element.tableData != null &&\r\n          rowData != null &&\r\n          rowData.tableData != null &&\r\n          element.tableData.id == rowData.tableData.id\r\n        ) {\r\n          if (event.target.name == \"checkValue\") {\r\n            if (event.target.value != \"\" && event.target.value != null)\r\n              if (\r\n                element.result ==\r\n                LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented\r\n              ) {\r\n                element.result = \"\";\r\n              }\r\n            element.checkValue = event.target.value;\r\n          } else if (event.target.name == \"testValue\") {\r\n            if (event.target.value != \"\" && event.target.value != null)\r\n              if (\r\n                element.result ==\r\n                LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented\r\n              ) {\r\n                element.result = \"\";\r\n              }\r\n            element.testValue = event.target.value;\r\n          } else if (event.target.name == \"agglomeration\") {\r\n            if (event.target.value != \"\" && event.target.value != null)\r\n              if (\r\n                element.result ==\r\n                LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented\r\n              ) {\r\n                element.result = \"\";\r\n              }\r\n            element.agglomeration = event.target.value;\r\n          } else if (event.target.name == \"result\") {\r\n            if (\r\n              event.target.value ==\r\n              LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented\r\n            ) {\r\n              element.agglomeration = \"\";\r\n              element.testValue = \"\";\r\n              element.checkValue = \"\";\r\n            }\r\n            element.result = event.target.value;\r\n          } else if (event.target.name == \"note\") {\r\n            element.note = event.target.value;\r\n          }\r\n        }\r\n      });\r\n      this.setState({ item: item }, () => {\r\n      });\r\n    }\r\n  };\r\n\r\n  openCircularProgress = () => {\r\n    this.setState({ loading: true });\r\n  };\r\n\r\n  componentWillMount() {\r\n    let { open, handleClose, item, isRoleAdmin, isView } = this.props;\r\n    if (item != null && item.reagent != null && item.reagent.name != null) {\r\n      if (item.reagent.name === \"Sinh phẩm khác\") {\r\n        item[\"otherReagent\"] = true;\r\n      } else {\r\n        item[\"otherReagent\"] = false;\r\n      }\r\n    }\r\n    this.setState({ item: item, isRoleAdmin: isRoleAdmin }, () => {\r\n      if (item.listHealthOrgRound != null) {\r\n        this.setState(\r\n          {\r\n            listHealthOrgRound: item.listHealthOrgRound,\r\n            healthOrgRound: item.listHealthOrgRound[0],\r\n          },\r\n          () => {\r\n            this.handleSelectHealthOrgRound(this.state.healthOrgRound);\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  handleDateChange = (date, name) => {\r\n    let { item } = this.state;\r\n    if (item == null) {\r\n      item = {};\r\n    }\r\n    item[name] = date;\r\n    this.setState({\r\n      item: item,\r\n    });\r\n  };\r\n\r\n  selectReagent = (reagent) => {\r\n    let { item } = this.state;\r\n    if (item == null) {\r\n      item = {};\r\n    }\r\n    if (reagent != null && reagent.id != null) {\r\n      if (reagent.name === \"Sinh phẩm khác\") {\r\n        this.setState({ shouldOpenConfirmation: true });\r\n        item[\"otherReagent\"] = true;\r\n      } else {\r\n        item[\"otherReagent\"] = false;\r\n      }\r\n      item[\"reagent\"] = reagent;\r\n      this.setState({ item: item }, function () {});\r\n    }\r\n  };\r\n\r\n  handleHealthOrgRoundPopupClose = () => {\r\n    this.setState({ shouldOpenHealthOrgRoundPopup: false }, function () {});\r\n  };\r\n\r\n  handleSelectHealthOrgRound = (healthOrgRound) => {\r\n    let { item } = this.state;\r\n    if (item == null) {\r\n      item = {};\r\n    }\r\n    if (healthOrgRound && healthOrgRound.id) {\r\n      item[\"healthOrgRound\"] = healthOrgRound;\r\n      this.setState({ item: item }, function () {\r\n        let { item } = this.state;\r\n        let details = this.state.item?.details;\r\n        details = [];\r\n        getEQASampleTubeByHealthOrgEQARoundId(\r\n          this.state.item?.healthOrgRound.id\r\n        ).then((result) => {\r\n          let listEQASampleTube = result.data;\r\n          if (listEQASampleTube != null && listEQASampleTube.length > 0) {\r\n            listEQASampleTube.forEach((tube) => {\r\n              let eQAResultReportDetail = {};\r\n              eQAResultReportDetail.sampleTube = tube;\r\n              eQAResultReportDetail.checkValue = \"\";\r\n              eQAResultReportDetail.testValue = \"\";\r\n              eQAResultReportDetail.agglomeration = \"\";\r\n              eQAResultReportDetail.result = \"\";\r\n              details.push(eQAResultReportDetail);\r\n            });\r\n          }\r\n          item[\"details\"] = details;\r\n          this.setState({ item: item });\r\n        });\r\n      });\r\n    }\r\n    this.handleHealthOrgRoundPopupClose();\r\n  };\r\n  notificationFinalResult = () => {\r\n    this.setState({ shouldOpenConfirmationDialog: true });\r\n  };\r\n  handleFinalResult = () => {\r\n    let { item } = this.state;\r\n    if (item.isFinalResult == null || !item.isFinalResult) {\r\n      item[\"isFinalResult\"] = true;\r\n      item[\"dateSubmitResults\"] = new Date();\r\n      this.setState({ item: item }, () => {});\r\n      this.handleDialogClose();\r\n      return;\r\n    }\r\n    if (item.isFinalResult) {\r\n      item[\"isFinalResult\"] = false;\r\n      item[\"dateSubmitResults\"] = null;\r\n      this.setState({ item: item }, () => {});\r\n      this.handleDialogClose();\r\n      return;\r\n    }\r\n  };\r\n  handleDialogFinalResultClose = () => {\r\n    this.handleDialogClose();\r\n  };\r\n  render() {\r\n    let {\r\n      isRoleAdmin,\r\n      isView,\r\n      isCheck,\r\n      id,\r\n      isViewButton,\r\n      supplyOfReagent,\r\n      shouldOpenHealthOrgRoundPopup,\r\n      personBuyReagent,\r\n      reagent,\r\n      listHealthOrgRound,\r\n      reagentLot,\r\n      orderTest,\r\n      reagentExpiryDate,\r\n      testDate,\r\n      dateSubmitResults,\r\n      technician,\r\n      healthOrgRound,\r\n      incubationTemp,\r\n      incubationPeriod,\r\n      incubationTempWithPlus,\r\n      incubationPeriodWithPlus,\r\n      incubationTempWithSubstrate,\r\n      incubationPeriodWithSubstrate,\r\n      details,\r\n      note,\r\n      isManagementUnit,\r\n      reagentUnBoxDate,\r\n      loading,\r\n      item,\r\n      isFinalResult,\r\n    } = this.state;\r\n\r\n    let searchObject = { pageIndex: 0, pageSize: 1000000, testType: 3 };\r\n    let technicianSearchObject = {\r\n      pageIndex: 0,\r\n      pageSize: 1000000,\r\n      searchByHealthOrg: true,\r\n      healthOrg:\r\n        this.state.item?.healthOrgRound &&\r\n        this.state.item?.healthOrgRound.healthOrg &&\r\n        this.state.item?.healthOrgRound.healthOrg.id\r\n          ? { id: this.state.item?.healthOrgRound.healthOrg.id }\r\n          : null,\r\n    };\r\n\r\n    let { open, handleClose, classes, t, i18n } = this.props;\r\n    let columns = [\r\n      {\r\n        title: t(\"EQAResultReportFastTest.sample_list.sample_code\"),\r\n        field: \"sampleTube.code\",\r\n        align: \"left\",\r\n        width: \"150\",\r\n        headerStyle: {\r\n          minWidth: \"50px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n          textAlign: \"left\",\r\n        },\r\n        cellStyle: {\r\n          minWidth: \"50px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n          textAlign: \"left\",\r\n        },\r\n      },\r\n      {\r\n        title: t(\"EQAResultReportSerodia.checkValue\"),\r\n        field: \"supplyOfReagent\",\r\n        width: \"150\",\r\n        headerStyle: {\r\n          minWidth: \"100px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n          textAlign: \"left\",\r\n        },\r\n        cellStyle: {\r\n          minWidth: \"100px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n          textAlign: \"left\",\r\n        },\r\n        render: (rowData) => (\r\n          <FormControl className=\"w-80\">\r\n            <Select\r\n              value={rowData.checkValue}\r\n              disabled={isRoleAdmin}\r\n              onChange={(checkValue) =>\r\n                this.handleRowDataCellChange(rowData, checkValue)\r\n              }\r\n              inputProps={{\r\n                name: \"checkValue\",\r\n                id: \"checkValue-simple\",\r\n              }}\r\n            >\r\n              {/* <MenuItem value={null}><em>None</em> </MenuItem> */}\r\n              {this.listCheckValue.map((item) => {\r\n                return (\r\n                  <MenuItem key={item.id} value={item.id}>\r\n                    {item.name}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n        ),\r\n      },\r\n      {\r\n        title: t(\"EQAResultReportSerodia.testValue\"),\r\n        field: \"supplyOfReagent\",\r\n        width: \"150\",\r\n        headerStyle: {\r\n          minWidth: \"100px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n          textAlign: \"left\",\r\n        },\r\n        cellStyle: {\r\n          minWidth: \"100px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n          textAlign: \"left\",\r\n        },\r\n        render: (rowData) => (\r\n          <FormControl className=\"w-80\">\r\n            <Select\r\n              value={rowData.testValue}\r\n              disabled={isRoleAdmin}\r\n              onChange={(testValue) =>\r\n                this.handleRowDataCellChange(rowData, testValue)\r\n              }\r\n              inputProps={{\r\n                name: \"testValue\",\r\n                id: \"testValue-simple\",\r\n              }}\r\n            >\r\n              {/* <MenuItem value={null}><em>None</em> </MenuItem> */}\r\n              {this.listTestValue.map((item) => {\r\n                return (\r\n                  <MenuItem key={item.id} value={item.id}>\r\n                    {item.name}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n        ),\r\n      },\r\n      {\r\n        title: t(\"EQAResultReportSerodia.agglomeration\"),\r\n        field: \"supplyOfReagent\",\r\n        width: \"150\",\r\n        headerStyle: {\r\n          minWidth: \"100px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n          textAlign: \"left\",\r\n        },\r\n        cellStyle: {\r\n          minWidth: \"100px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n          textAlign: \"left\",\r\n        },\r\n        render: (rowData) => (\r\n          <FormControl className=\"w-80\">\r\n            <Select\r\n              value={rowData.agglomeration}\r\n              disabled={isRoleAdmin}\r\n              onChange={(agglomeration) =>\r\n                this.handleRowDataCellChange(rowData, agglomeration)\r\n              }\r\n              inputProps={{\r\n                name: \"agglomeration\",\r\n                id: \"agglomeration-simple\",\r\n              }}\r\n            >\r\n              {/* <MenuItem value={null}><em>None</em> </MenuItem> */}\r\n              {this.listAgglomeration.map((item) => {\r\n                return (\r\n                  <MenuItem key={item.id} value={item.id}>\r\n                    {item.name}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n        ),\r\n      },\r\n      {\r\n        title: (\r\n          <span>\r\n            <span style={{ color: \"red\" }}> * </span>\r\n            {t(\"EQAResultReportSerodia.Result.title\")}\r\n          </span>\r\n        ),\r\n        field: \"supplyOfReagent\",\r\n        width: \"150\",\r\n        headerStyle: {\r\n          minWidth: \"200px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n          textAlign: \"left\",\r\n        },\r\n        cellStyle: {\r\n          minWidth: \"200px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n          textAlign: \"left\",\r\n        },\r\n        render: (rowData) => (\r\n          <FormControl\r\n            className=\"w-80\"\r\n            required={this.state.isCheck}\r\n            error={this.state.isCheck}\r\n          >\r\n            <Select\r\n              value={rowData.result}\r\n              disabled={isRoleAdmin}\r\n              onChange={(result) =>\r\n                this.handleRowDataCellChange(rowData, result)\r\n              }\r\n              inputProps={{\r\n                name: \"result\",\r\n                id: \"result-simple\",\r\n              }}\r\n            >\r\n              {/* <MenuItem value={null}><em>None</em> </MenuItem> */}\r\n              {this.Results.map((item) => {\r\n                return (\r\n                  <MenuItem key={item.id} value={item.id}>\r\n                    {item.name}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n        ),\r\n      },\r\n      {\r\n        title: t(\"SampleManagement.serum-bottle.note\"),\r\n        field: \"note\",\r\n        width: \"150\",\r\n        headerStyle: {\r\n          minWidth: \"200px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n          textAlign: \"left\",\r\n        },\r\n        cellStyle: {\r\n          minWidth: \"200px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n          textAlign: \"left\",\r\n        },\r\n        render: (rowData) => (\r\n          <TextValidator\r\n            className=\"w-100\"\r\n            onChange={(note) => this.handleRowDataCellChange(rowData, note)}\r\n            type=\"textarea\"\r\n            multiLine\r\n            rowsMax={4}\r\n            name=\"note\"\r\n            value={rowData.note ? rowData.note : \"\"}\r\n            disabled={isRoleAdmin}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.shouldOpenConfirmationDialog && (\r\n          <ConfirmationDialog\r\n            title={t(\"confirm\")}\r\n            open={this.state.shouldOpenConfirmationDialog}\r\n            onConfirmDialogClose={this.handleDialogFinalResultClose}\r\n            onYesClick={this.handleFinalResult}\r\n            text={\r\n              this.state.item?.isFinalResult\r\n                ? t(\"EqaResult.unFinalResultConfirm\")\r\n                : t(\"EqaResult.FinalResultConfirm\")\r\n            }\r\n            Yes={t(\"general.Yes\")}\r\n            No={t(\"general.No\")}\r\n          />\r\n        )}\r\n\r\n        {this.state.shouldOpenConfirmation && (\r\n          <ConfirmationDialog\r\n            title={t(\"general.noti\")}\r\n            open={this.state.shouldOpenConfirmation}\r\n            onYesClick={this.handleDialogFinalResultClose}\r\n            text={t(\"general.otherReagent\")}\r\n            Yes={t(\"general.Yes\")}\r\n          />\r\n        )}\r\n        <Grid container spacing={2}>\r\n          <Grid item lg={4} md={4} sm={12} xs={12}>\r\n            <Autocomplete\r\n              size=\"small\"\r\n              id=\"combo-box\"\r\n              options={this.props.listHealthOrgRound}\r\n              className=\"flex-end\"\r\n              disabled={isRoleAdmin}\r\n              getOptionLabel={(option) => option.healthOrg.name}\r\n              onChange={(event, healthOrgRound) =>\r\n                this.handleSelectHealthOrgRound(healthOrgRound)\r\n              }\r\n              value={this.state.item?.healthOrgRound}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  label={\r\n                    <span className=\"font\">\r\n                      {t(\"EQAResultReportElisa.healthOrgName\")}\r\n                    </span>\r\n                  }\r\n                  variant=\"outlined\"\r\n                  disabled={isRoleAdmin}\r\n                />\r\n              )}\r\n            />\r\n          </Grid>\r\n          <Grid item lg={2} md={2} sm={12} xs={12}>\r\n            <TextValidator\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              className=\"w-100\"\r\n              label={\r\n                <span className=\"font\">\r\n                  <span style={{ color: \"red\" }}> * </span>\r\n                  {t(\"EQAResultReportElisa.order\")}\r\n                </span>\r\n              }\r\n              onChange={this.handleChange}\r\n              type=\"text\"\r\n              name=\"orderTest\"\r\n              value={this.state.item?.orderTest}\r\n              disabled={isRoleAdmin}\r\n              validators={[\"required\"]}\r\n              errorMessages={t(\"general.errorMessages_required\")}\r\n            />\r\n          </Grid>\r\n          <Grid item lg={3} md={3} sm={12} xs={12}>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n              <KeyboardDatePicker\r\n                size=\"small\"\r\n                className=\"w-100\"\r\n                margin=\"none\"\r\n                id=\"mui-pickers-testDate\"\r\n                label={\r\n                  <span className=\"font\">\r\n                    {t(\"EQAResultReportElisa.testDate\")}\r\n                  </span>\r\n                }\r\n                inputVariant=\"outlined\"\r\n                type=\"text\"\r\n                autoOk={true}\r\n                format=\"dd/MM/yyyy\"\r\n                value={\r\n                  this.state.item?.testDate\r\n                    ? this.state.item?.testDate\r\n                    : null\r\n                }\r\n                disabled={isRoleAdmin}\r\n                onChange={(date) => this.handleDateChange(date, \"testDate\")}\r\n                fullWidth\r\n                validators={[\"required\"]}\r\n                errorMessages={t(\"general.errorMessages_required\")}\r\n              />\r\n            </MuiPickersUtilsProvider>\r\n          </Grid>\r\n          <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <TextValidator\r\n                  size=\"small\"\r\n                  variant = \"outlined\"\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\">{t(\"EQAResultReportElisa.technician\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"technician\"\r\n                  value={technician}\r\n                  disabled={isView }\r\n                />\r\n              </Grid>\r\n\r\n          <Grid item lg={4} md={4} sm={12} xs={12}>\r\n            <AsynchronousAutocomplete\r\n              label={\r\n                <span className=\"font\">\r\n                  <span style={{ color: \"red\" }}> * </span>\r\n                  {t(\"EqaResult.reagent\")}\r\n                </span>\r\n              }\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              disabled={isRoleAdmin}\r\n              searchFunction={reagentSearchByPage}\r\n              searchObject={searchObject}\r\n              defaultValue={this.state.item?.reagent}\r\n              value={this.state.item?.reagent}\r\n              displayLable={\"name\"}\r\n              valueTextValidator={this.state.item?.reagent}\r\n              validators={[\"required\"]}\r\n              errorMessages={t(\"general.errorMessages_required\")}\r\n              onSelect={this.selectReagent}\r\n            />\r\n          </Grid>\r\n          <Grid item lg={2} md={2} sm={12} xs={12}>\r\n            <TextValidator\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              className=\"w-100\"\r\n              label={\r\n                <span className=\"font\">\r\n                  <span style={{ color: \"red\" }}> * </span>\r\n                  {t(\"EQAResultReportElisa.reagentLot\")}\r\n                </span>\r\n              }\r\n              onChange={this.handleChange}\r\n              type=\"text\"\r\n              name=\"reagentLot\"\r\n              value={this.state.item?.reagentLot}\r\n              disabled={isRoleAdmin}\r\n              validators={[\"required\"]}\r\n              errorMessages={t(\"general.errorMessages_required\")}\r\n            />\r\n          </Grid>\r\n          <Grid item container spacing={2} lg={6} md={6} sm={12} xs={12}>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                  <TextValidator\r\n                    className=\"w-100\"\r\n                    label={<span className=\"font\">{t(\"reagent.expirationDay\")}</span>}\r\n                    onChange={this.handleChange}\r\n                    type=\"number\"\r\n                    name=\"dayReagentExpiryDate\"\r\n                    value={this.state.item?.dayReagentExpiryDate}\r\n                    disabled={isRoleAdmin}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                  />\r\n                </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                  <TextValidator\r\n                    className=\"w-100\"\r\n                    label={<span className=\"font\">{t(\"reagent.expirationMonth\")}</span>}\r\n                    onChange={this.handleChange}\r\n                    type=\"number\"\r\n                    name=\"monthReagentExpiryDate\"\r\n                    value={this.state.item?.monthReagentExpiryDate}\r\n                    disabled={isRoleAdmin}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                  />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                    className=\"w-100\"\r\n                    label={<span className=\"font\">{t(\"reagent.expirationYear\")}</span>}\r\n                    onChange={this.handleChange}\r\n                    type=\"number\"\r\n                    name=\"yeahReagentExpiryDate\"\r\n                    value={this.state.item?.yeahReagentExpiryDate}\r\n                    disabled={isRoleAdmin}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    validators={[\"required\"]}\r\n                    errorMessages={t('general.errorMessages_required')}\r\n                  />\r\n              </Grid>\r\n                \r\n            </Grid>\r\n          <Grid item lg={3} md={3} sm={12} xs={12}>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n              <KeyboardDatePicker\r\n                size=\"small\"\r\n                fullWidth\r\n                margin=\"none\"\r\n                id=\"mui-pickers-reagentExpiryDate\"\r\n                label={\r\n                  <span className=\"font\">\r\n                    {t(\"EQAResultReportElisa.reagentUnBoxDate\")}\r\n                  </span>\r\n                }\r\n                inputVariant=\"outlined\"\r\n                type=\"text\"\r\n                autoOk={false}\r\n                format=\"dd/MM/yyyy\"\r\n                value={this.state.item?.reagentUnBoxDate}\r\n                disabled={isRoleAdmin}\r\n                onChange={(date) =>\r\n                  this.handleDateChange(date, \"reagentUnBoxDate\")\r\n                }\r\n              />\r\n            </MuiPickersUtilsProvider>\r\n          </Grid>\r\n          <Grid item lg={4} md={4} sm={12} xs={12}>\r\n            <TextValidator\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              className=\"w-100\"\r\n              label={\r\n                <span className=\"font\">\r\n                  {t(\"EQAResultReportElisa.supplyOfReagent\")}\r\n                </span>\r\n              }\r\n              onChange={this.handleChange}\r\n              type=\"text\"\r\n              name=\"supplyOfReagent\"\r\n              value={this.state.item?.supplyOfReagent}\r\n              disabled={isRoleAdmin}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item lg={5} md={5} sm={12} xs={12}>\r\n            <TextValidator\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              className=\"w-100 \"\r\n              label={\r\n                <span className=\"font\">\r\n                  {t(\"EQAResultReportElisa.personBuyReagent\")}\r\n                </span>\r\n              }\r\n              onChange={this.handleChange}\r\n              type=\"text\"\r\n              name=\"personBuyReagent\"\r\n              value={this.state.item?.personBuyReagent}\r\n              disabled={isRoleAdmin}\r\n            />\r\n          </Grid>\r\n          {this.state.item?.isFinalResult && (\r\n            <Grid item lg={3} md={3} sm={12} xs={12}>\r\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                  size=\"small\"\r\n                  fullWidth\r\n                  margin=\"none\"\r\n                  disabled={true}\r\n                  id=\"mui-pickers-dateSubmitResults\"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      {t(\"EQAResultReportElisa.dateSubmitResults\")}\r\n                    </span>\r\n                  }\r\n                  inputVariant=\"outlined\"\r\n                  type=\"text\"\r\n                  autoOk={false}\r\n                  format=\"dd/MM/yyyy\"\r\n                  value={this.state.item?.dateSubmitResults}\r\n                />\r\n              </MuiPickersUtilsProvider>\r\n            </Grid>\r\n          )}\r\n          {this.state.item?.isFinalResult && (\r\n          <Grid item lg={3} md={3} sm={12} xs={12}>\r\n            <FormControlLabel\r\n              label={ \r\n                <span className=\"font\" style={{ fontWeight: \"bold\" }}>\r\n                  {\" \"}\r\n                  {t(\"EQAResultReportFastTest.isFinalResult\")}\r\n                </span>\r\n              }\r\n              control={\r\n                <Checkbox\r\n                  checked={this.state.item.isFinalResult ? true : false}\r\n                  onClick={(isFinalResult) =>\r\n                    this.notificationFinalResult(isFinalResult)\r\n                  }\r\n                />\r\n              }\r\n            />\r\n          </Grid>\r\n          )}\r\n          <Grid item lg={12} md={12} sm={12} xs={12}>\r\n            <TextValidator\r\n              disabled={isRoleAdmin}\r\n              className=\"w-100\"\r\n              label={\r\n                <span className=\"font\">\r\n                  {t(\"SampleManagement.serum-bottle.note\")}\r\n                </span>\r\n              }\r\n              onChange={this.handleChange}\r\n              type=\"text\"\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              name=\"note\"\r\n              value={this.state.item?.note}\r\n            />\r\n          </Grid>\r\n          {this.state.item?.otherReagent && (\r\n            <Grid item lg={12} md={12} sm={12} xs={12}>\r\n              <TextValidator\r\n                disabled={isRoleAdmin}\r\n                className=\"w-100\"\r\n                label={<span className=\"font\">{t(\"reagent.note\")}</span>}\r\n                onChange={this.handleChange}\r\n                type=\"text\"\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                name=\"noteOtherReagent\"\r\n                value={this.state.item?.noteOtherReagent}\r\n                validators={[\"required\"]}\r\n                errorMessages={t(\"general.errorMessages_required\")}\r\n              />\r\n            </Grid>\r\n          )}\r\n          <Grid item sm={12} xs={12}>\r\n            <MaterialTable\r\n              title={\"\"}\r\n              data={this.state.item?.details ? this.state.item?.details : []}\r\n              columns={columns}\r\n              options={{\r\n                selection: false,\r\n                actionsColumnIndex: -1,\r\n                paging: false,\r\n                search: false,\r\n                rowStyle: (rowData, index) => ({\r\n                  backgroundColor: index % 2 === 1 ? \"#EEE\" : \"#FFF\",\r\n                }),\r\n                headerStyle: {\r\n                  backgroundColor: \"#358600\",\r\n                  color: \"#fff\",\r\n                },\r\n                padding: \"dense\",\r\n                toolbar: false,\r\n              }}\r\n              components={{\r\n                Toolbar: (props) => <MTableToolbar {...props} />,\r\n              }}\r\n              onSelectionChange={(rows) => {\r\n                this.data = rows;\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EQAResultReportElisaInformation;\r\n"]},"metadata":{},"sourceType":"module"}