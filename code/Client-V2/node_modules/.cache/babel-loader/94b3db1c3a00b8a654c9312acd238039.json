{"ast":null,"code":"import _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport Mock from \"../mock\";\nimport ConstantList from \"../../app/appConfig\";\nvar date = new Date();\nvar calendarEventDB = {\n  events: [{\n    id: \"344jdfher3wh23\",\n    title: \"Meeting with all employees\",\n    start: new Date(date.getFullYear(), date.getMonth(), 1),\n    end: new Date(date.getFullYear(), date.getMonth(), 3)\n  }, {\n    id: \"344jdfher3wh23\",\n    title: \"A trip to Bali Island\",\n    start: new Date(),\n    end: new Date(date.getFullYear(), date.getMonth(), date.getDate() + 2)\n  }]\n};\nMock.onGet(ConstantList.ROOT_PATH + \"api/calendar/events/all\").reply(function (config) {\n  return [200, calendarEventDB.events];\n});\nMock.onPost(ConstantList.ROOT_PATH + \"api/calendar/events/add\").reply(function (config) {\n  var _JSON$parse = JSON.parse(config.data),\n      start = _JSON$parse.start,\n      end = _JSON$parse.end,\n      others = _objectWithoutProperties(_JSON$parse, [\"start\", \"end\"]);\n\n  var event = _objectSpread({\n    start: new Date(start),\n    end: new Date(end)\n  }, others);\n\n  calendarEventDB.events.push(event);\n  return [200, calendarEventDB.events];\n});\nMock.onPost(ConstantList.ROOT_PATH + \"api/calendar/events/update\").reply(function (config) {\n  var updatedEvent = JSON.parse(config.data);\n\n  if (updatedEvent.event) {\n    // resize or move event handling\n    calendarEventDB.events.map(function (event) {\n      if (event.id === updatedEvent.event.id) {\n        event.start = new Date(updatedEvent.start);\n        event.end = new Date(updatedEvent.end);\n      }\n\n      return event;\n    });\n  } else {\n    calendarEventDB.events.map(function (event) {\n      if (event.id === updatedEvent.id) {\n        event.start = new Date(updatedEvent.start);\n        event.end = new Date(updatedEvent.end);\n        event.title = updatedEvent.title;\n        event.location = updatedEvent.location;\n        event.note = updatedEvent.note;\n      }\n\n      return event;\n    });\n  }\n\n  return [200, calendarEventDB.events];\n});\nMock.onPost(ConstantList.ROOT_PATH + \"api/calendar/events/delete\").reply(function (config) {\n  var event = JSON.parse(config.data);\n  var index = {\n    i: 0\n  };\n  calendarEventDB.events.forEach(function (element) {\n    if (element.id === event.id) {\n      return [200, calendarEventDB.events.splice(index.i, 1)];\n    }\n\n    index.i++;\n  });\n  return [200, calendarEventDB.events];\n});","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/fake-db/db/calendarEvents.js"],"names":["Mock","ConstantList","date","Date","calendarEventDB","events","id","title","start","getFullYear","getMonth","end","getDate","onGet","ROOT_PATH","reply","config","onPost","JSON","parse","data","others","event","push","updatedEvent","map","location","note","index","i","forEach","element","splice"],"mappings":"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","sourcesContent":["import Mock from \"../mock\";\nimport ConstantList from \"../../app/appConfig\";\nconst date = new Date();\n\nconst calendarEventDB = {\n  events: [\n    {\n      id: \"344jdfher3wh23\",\n      title: \"Meeting with all employees\",\n      start: new Date(date.getFullYear(), date.getMonth(), 1),\n      end: new Date(date.getFullYear(), date.getMonth(), 3)\n    },\n    {\n      id: \"344jdfher3wh23\",\n      title: \"A trip to Bali Island\",\n      start: new Date(),\n      end: new Date(date.getFullYear(), date.getMonth(), date.getDate() + 2)\n    }\n  ]\n};\n\nMock.onGet(ConstantList.ROOT_PATH+\"api/calendar/events/all\").reply(config => {\n  return [200, calendarEventDB.events];\n});\n\nMock.onPost(ConstantList.ROOT_PATH+\"api/calendar/events/add\").reply(config => {\n  let { start, end, ...others } = JSON.parse(config.data);\n  let event = {\n    start: new Date(start),\n    end: new Date(end),\n    ...others\n  };\n  calendarEventDB.events.push(event);\n  return [200, calendarEventDB.events];\n});\n\nMock.onPost(ConstantList.ROOT_PATH+\"api/calendar/events/update\").reply(config => {\n  let updatedEvent = JSON.parse(config.data);\n\n  if (updatedEvent.event) {\n    // resize or move event handling\n    calendarEventDB.events.map(event => {\n      if (event.id === updatedEvent.event.id) {\n        event.start = new Date(updatedEvent.start);\n        event.end = new Date(updatedEvent.end);\n      }\n      return event;\n    });\n  } else {\n    calendarEventDB.events.map(event => {\n      if (event.id === updatedEvent.id) {\n        event.start = new Date(updatedEvent.start);\n        event.end = new Date(updatedEvent.end);\n        event.title = updatedEvent.title;\n        event.location = updatedEvent.location;\n        event.note = updatedEvent.note;\n      }\n\n      return event;\n    });\n  }\n\n  return [200, calendarEventDB.events];\n});\n\nMock.onPost(ConstantList.ROOT_PATH+\"api/calendar/events/delete\").reply(config => {\n  let event = JSON.parse(config.data);\n\n  let index = { i: 0 };\n\n  calendarEventDB.events.forEach(element => {\n    if (element.id === event.id) {\n      return [200, calendarEventDB.events.splice(index.i, 1)];\n    }\n    index.i++;\n  });\n\n  return [200, calendarEventDB.events];\n});\n"]},"metadata":{},"sourceType":"module"}