{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport PropTypes from 'prop-types';\nimport { createElement, Fragment, PureComponent } from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport clsx from 'clsx';\nimport Dropzone from 'react-dropzone';\nimport Chip from '@material-ui/core/Chip';\nimport Fab from '@material-ui/core/Fab';\nimport Grid from '@material-ui/core/Grid';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nfunction isImage(file) {\n  if (file.type.split('/')[0] === 'image') {\n    return true;\n  }\n}\n\nfunction convertBytesToMbsOrKbs(filesize) {\n  var size = ''; // I know, not technically correct...\n\n  if (filesize >= 1000000) {\n    size = filesize / 1000000 + ' megabytes';\n  } else if (filesize >= 1000) {\n    size = filesize / 1000 + ' kilobytes';\n  } else {\n    size = filesize + ' bytes';\n  }\n\n  return size;\n}\n\nfunction createFileFromUrl(_x) {\n  return _createFileFromUrl.apply(this, arguments);\n}\n\nfunction _createFileFromUrl() {\n  _createFileFromUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    var response, data, metadata, filename;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url);\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.blob();\n\n          case 5:\n            data = _context.sent;\n            metadata = {\n              type: data.type\n            };\n            filename = url.replace(/\\?.+/, '').split('/').pop();\n            return _context.abrupt(\"return\", new File([data], filename, metadata));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createFileFromUrl.apply(this, arguments);\n}\n\nfunction readFile(file) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n\n    reader.onload = function (event) {\n      var _event$target;\n\n      resolve(event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result);\n    };\n\n    reader.onerror = function (event) {\n      reader.abort();\n      reject(event);\n    };\n\n    reader.readAsDataURL(file);\n  });\n}\n\nvar styles = function styles(_ref) {\n  var palette = _ref.palette,\n      shape = _ref.shape,\n      spacing = _ref.spacing;\n  return {\n    root: {},\n    imageContainer: {\n      position: 'relative',\n      zIndex: 10,\n      textAlign: 'center',\n      '&:hover $image': {\n        opacity: 0.3\n      },\n      '&:hover $removeButton': {\n        opacity: 1\n      }\n    },\n    image: {\n      height: 100,\n      width: 'initial',\n      maxWidth: '100%',\n      color: palette.text.primary,\n      transition: 'all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',\n      boxSizing: 'border-box',\n      boxShadow: 'rgba(0, 0, 0, 0.12) 0 1px 6px, rgba(0, 0, 0, 0.12) 0 1px 4px',\n      borderRadius: shape.borderRadius,\n      zIndex: 5,\n      opacity: 1\n    },\n    removeButton: {\n      transition: '.5s ease',\n      position: 'absolute',\n      opacity: 0,\n      top: spacing(-1),\n      right: spacing(-1),\n      width: 40,\n      height: 40,\n      '&:focus': {\n        opacity: 1\n      }\n    }\n  };\n};\n\nvar _ref5 = /*#__PURE__*/createElement(DeleteIcon, null);\n\nfunction PreviewList(_ref2) {\n  var fileObjects = _ref2.fileObjects,\n      handleRemove = _ref2.handleRemove,\n      showFileNames = _ref2.showFileNames,\n      useChipsForPreview = _ref2.useChipsForPreview,\n      previewChipProps = _ref2.previewChipProps,\n      previewGridClasses = _ref2.previewGridClasses,\n      previewGridProps = _ref2.previewGridProps,\n      classes = _ref2.classes,\n      getPreviewIcon = _ref2.getPreviewIcon;\n\n  if (useChipsForPreview) {\n    return createElement(Grid, _extends({\n      spacing: 1,\n      direction: \"row\"\n    }, previewGridProps.container, {\n      container: true,\n      className: clsx(classes.root, previewGridClasses.container)\n    }), fileObjects.map(function (fileObject, i) {\n      var _ref3, _fileObject$file;\n\n      return createElement(Grid, _extends({}, previewGridProps.item, {\n        item: true,\n        key: \"\".concat((_ref3 = (_fileObject$file = fileObject.file) === null || _fileObject$file === void 0 ? void 0 : _fileObject$file.name) !== null && _ref3 !== void 0 ? _ref3 : 'file', \"-\").concat(i),\n        className: classes.imageContainer\n      }), createElement(Chip, _extends({\n        variant: \"outlined\"\n      }, previewChipProps, {\n        label: fileObject.file.name,\n        onDelete: handleRemove(i)\n      })));\n    }));\n  }\n\n  return createElement(Grid, _extends({\n    spacing: 8\n  }, previewGridProps.container, {\n    container: true,\n    className: clsx(classes.root, previewGridClasses.container)\n  }), fileObjects.map(function (fileObject, i) {\n    var _ref4, _fileObject$file2;\n\n    return createElement(Grid, _extends({\n      xs: 4\n    }, previewGridProps.item, {\n      item: true,\n      key: \"\".concat((_ref4 = (_fileObject$file2 = fileObject.file) === null || _fileObject$file2 === void 0 ? void 0 : _fileObject$file2.name) !== null && _ref4 !== void 0 ? _ref4 : 'file', \"-\").concat(i),\n      className: clsx(classes.imageContainer, previewGridClasses.item)\n    }), getPreviewIcon(fileObject, classes), showFileNames && createElement(Typography, {\n      variant: \"body1\",\n      component: \"p\"\n    }, fileObject.file.name), createElement(Fab, {\n      onClick: handleRemove(i),\n      \"aria-label\": \"Delete\",\n      className: classes.removeButton\n    }, _ref5));\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? PreviewList.propTypes = {\n  classes: PropTypes.object.isRequired,\n  fileObjects: PropTypes.arrayOf(PropTypes.object).isRequired,\n  getPreviewIcon: PropTypes.func.isRequired,\n  handleRemove: PropTypes.func.isRequired,\n  previewChipProps: PropTypes.object,\n  previewGridClasses: PropTypes.object,\n  previewGridProps: PropTypes.object,\n  showFileNames: PropTypes.bool,\n  useChipsForPreview: PropTypes.bool\n} : void 0;\nvar PreviewList$1 = withStyles(styles, {\n  name: 'MuiDropzonePreviewList'\n})(PreviewList);\nvar variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\n\nvar styles$1 = function styles(theme) {\n  return {\n    successAlert: {\n      backgroundColor: theme.palette.success.main\n    },\n    errorAlert: {\n      backgroundColor: theme.palette.error.main\n    },\n    infoAlert: {\n      backgroundColor: theme.palette.info.main\n    },\n    warningAlert: {\n      backgroundColor: theme.palette.warning.main\n    },\n    message: {\n      display: 'flex',\n      alignItems: 'center',\n      '& > svg': {\n        marginRight: theme.spacing(1)\n      }\n    },\n    icon: {\n      fontSize: 20,\n      opacity: 0.9\n    },\n    closeButton: {}\n  };\n};\n\nfunction SnackbarContentWrapper(props) {\n  var classes = props.classes,\n      className = props.className,\n      message = props.message,\n      onClose = props.onClose,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"message\", \"onClose\", \"variant\"]);\n\n  var Icon = variantIcon[variant];\n  return createElement(SnackbarContent, _extends({\n    className: clsx(classes[\"\".concat(variant, \"Alert\")], className),\n    \"aria-describedby\": \"client-snackbar\",\n    message: createElement(\"span\", {\n      id: \"client-snackbar\",\n      className: classes.message\n    }, createElement(Icon, {\n      className: classes.icon\n    }), message),\n    action: [createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"Close\",\n      color: \"inherit\",\n      className: classes.closeButton,\n      onClick: onClose\n    }, createElement(CloseIcon, {\n      className: classes.icon\n    }))]\n  }, other));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? SnackbarContentWrapper.propTypes = {\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  message: PropTypes.node,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired\n} : void 0;\nvar SnackbarContentWrapper$1 = withStyles(styles$1, {\n  name: 'MuiDropzoneSnackbar'\n})(SnackbarContentWrapper);\n\nvar styles$2 = function styles(_ref) {\n  var palette = _ref.palette,\n      shape = _ref.shape,\n      spacing = _ref.spacing;\n  return {\n    '@keyframes progress': {\n      '0%': {\n        backgroundPosition: '0 0'\n      },\n      '100%': {\n        backgroundPosition: '-70px 0'\n      }\n    },\n    root: {\n      position: 'relative',\n      width: '100%',\n      minHeight: '250px',\n      backgroundColor: palette.background.paper,\n      border: 'dashed',\n      borderColor: palette.divider,\n      borderRadius: shape.borderRadius,\n      boxSizing: 'border-box',\n      cursor: 'pointer',\n      overflow: 'hidden'\n    },\n    active: {\n      animation: '$progress 2s linear infinite !important',\n      // eslint-disable-next-line max-len\n      backgroundImage: \"repeating-linear-gradient(-45deg, \".concat(palette.background.paper, \", \").concat(palette.background.paper, \" 25px, \").concat(palette.divider, \" 25px, \").concat(palette.divider, \" 50px)\"),\n      backgroundSize: '150% 100%',\n      border: 'solid',\n      borderColor: palette.primary.light\n    },\n    invalid: {\n      // eslint-disable-next-line max-len\n      backgroundImage: \"repeating-linear-gradient(-45deg, \".concat(palette.error.light, \", \").concat(palette.error.light, \" 25px, \").concat(palette.error.dark, \" 25px, \").concat(palette.error.dark, \" 50px)\"),\n      borderColor: palette.error.main\n    },\n    textContainer: {\n      textAlign: 'center'\n    },\n    text: {\n      marginBottom: spacing(3),\n      marginTop: spacing(3)\n    },\n    icon: {\n      width: 51,\n      height: 51,\n      color: palette.text.primary\n    }\n  };\n};\n\nvar defaultSnackbarAnchorOrigin = {\n  horizontal: 'left',\n  vertical: 'bottom'\n};\n\nvar defaultGetPreviewIcon = function defaultGetPreviewIcon(fileObject, classes) {\n  if (isImage(fileObject.file)) {\n    return createElement(\"img\", {\n      className: classes.image,\n      role: \"presentation\",\n      src: fileObject.data\n    });\n  }\n\n  return createElement(AttachFileIcon, {\n    className: classes.image\n  });\n};\n/**\n * This components creates a Material-UI Dropzone, with previews and snackbar notifications.\n */\n\n\nvar DropzoneAreaBase = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DropzoneAreaBase, _React$PureComponent);\n\n  function DropzoneAreaBase() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropzoneAreaBase);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropzoneAreaBase)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      openSnackBar: false,\n      snackbarMessage: '',\n      snackbarVariant: 'success'\n    };\n\n    _this.handleDropAccepted = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(acceptedFiles, evt) {\n        var _this$props, fileObjects, filesLimit, getFileAddedMessage, getFileLimitExceedMessage, onAdd, onDrop, fileObjs, message;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$props = _this.props, fileObjects = _this$props.fileObjects, filesLimit = _this$props.filesLimit, getFileAddedMessage = _this$props.getFileAddedMessage, getFileLimitExceedMessage = _this$props.getFileLimitExceedMessage, onAdd = _this$props.onAdd, onDrop = _this$props.onDrop;\n\n                if (!(filesLimit > 1 && fileObjects.length + acceptedFiles.length > filesLimit)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                _this.setState({\n                  openSnackBar: true,\n                  snackbarMessage: getFileLimitExceedMessage(filesLimit),\n                  snackbarVariant: 'error'\n                }, _this.notifyAlert);\n\n                return _context2.abrupt(\"return\");\n\n              case 4:\n                // Notify Drop event\n                if (onDrop) {\n                  onDrop(acceptedFiles, evt);\n                } // Retrieve fileObjects data\n\n\n                _context2.next = 7;\n                return Promise.all(acceptedFiles.map( /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n                    var data;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return readFile(file);\n\n                          case 2:\n                            data = _context.sent;\n                            return _context.abrupt(\"return\", {\n                              file: file,\n                              data: data\n                            });\n\n                          case 4:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x3) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }()));\n\n              case 7:\n                fileObjs = _context2.sent; // Notify added files\n\n                if (onAdd) {\n                  onAdd(fileObjs);\n                } // Display message\n\n\n                message = fileObjs.reduce(function (msg, fileObj) {\n                  return msg + getFileAddedMessage(fileObj.file.name);\n                }, '');\n\n                _this.setState({\n                  openSnackBar: true,\n                  snackbarMessage: message,\n                  snackbarVariant: 'success'\n                }, _this.notifyAlert);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.handleDropRejected = function (rejectedFiles, evt) {\n      var _this$props2 = _this.props,\n          acceptedFiles = _this$props2.acceptedFiles,\n          filesLimit = _this$props2.filesLimit,\n          fileObjects = _this$props2.fileObjects,\n          getDropRejectMessage = _this$props2.getDropRejectMessage,\n          getFileLimitExceedMessage = _this$props2.getFileLimitExceedMessage,\n          maxFileSize = _this$props2.maxFileSize,\n          onDropRejected = _this$props2.onDropRejected;\n      var message = '';\n\n      if (fileObjects.length + rejectedFiles.length > filesLimit) {\n        message = getFileLimitExceedMessage(filesLimit);\n      } else {\n        rejectedFiles.forEach(function (rejectedFile) {\n          message = getDropRejectMessage(rejectedFile, acceptedFiles, maxFileSize);\n        });\n      }\n\n      if (onDropRejected) {\n        onDropRejected(rejectedFiles, evt);\n      }\n\n      _this.setState({\n        openSnackBar: true,\n        snackbarMessage: message,\n        snackbarVariant: 'error'\n      }, _this.notifyAlert);\n    };\n\n    _this.handleRemove = function (fileIndex) {\n      return function (event) {\n        event.stopPropagation();\n        var _this$props3 = _this.props,\n            fileObjects = _this$props3.fileObjects,\n            getFileRemovedMessage = _this$props3.getFileRemovedMessage,\n            onDelete = _this$props3.onDelete; // Find removed fileObject\n\n        var removedFileObj = fileObjects[fileIndex]; // Notify removed file\n\n        if (onDelete) {\n          onDelete(removedFileObj, fileIndex);\n        }\n\n        _this.setState({\n          openSnackBar: true,\n          snackbarMessage: getFileRemovedMessage(removedFileObj.file.name),\n          snackbarVariant: 'info'\n        }, _this.notifyAlert);\n      };\n    };\n\n    _this.handleCloseSnackbar = function () {\n      _this.setState({\n        openSnackBar: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(DropzoneAreaBase, [{\n    key: \"notifyAlert\",\n    value: function notifyAlert() {\n      var onAlert = this.props.onAlert;\n      var _this$state = this.state,\n          openSnackBar = _this$state.openSnackBar,\n          snackbarMessage = _this$state.snackbarMessage,\n          snackbarVariant = _this$state.snackbarVariant;\n\n      if (openSnackBar && onAlert) {\n        onAlert(snackbarMessage, snackbarVariant);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          acceptedFiles = _this$props4.acceptedFiles,\n          alertSnackbarProps = _this$props4.alertSnackbarProps,\n          classes = _this$props4.classes,\n          disableRejectionFeedback = _this$props4.disableRejectionFeedback,\n          dropzoneClass = _this$props4.dropzoneClass,\n          dropzoneParagraphClass = _this$props4.dropzoneParagraphClass,\n          dropzoneProps = _this$props4.dropzoneProps,\n          dropzoneText = _this$props4.dropzoneText,\n          fileObjects = _this$props4.fileObjects,\n          filesLimit = _this$props4.filesLimit,\n          getPreviewIcon = _this$props4.getPreviewIcon,\n          Icon = _this$props4.Icon,\n          inputProps = _this$props4.inputProps,\n          maxFileSize = _this$props4.maxFileSize,\n          previewChipProps = _this$props4.previewChipProps,\n          previewGridClasses = _this$props4.previewGridClasses,\n          previewGridProps = _this$props4.previewGridProps,\n          previewText = _this$props4.previewText,\n          showAlerts = _this$props4.showAlerts,\n          showFileNames = _this$props4.showFileNames,\n          showFileNamesInPreview = _this$props4.showFileNamesInPreview,\n          showPreviews = _this$props4.showPreviews,\n          showPreviewsInDropzone = _this$props4.showPreviewsInDropzone,\n          useChipsForPreview = _this$props4.useChipsForPreview;\n      var _this$state2 = this.state,\n          openSnackBar = _this$state2.openSnackBar,\n          snackbarMessage = _this$state2.snackbarMessage,\n          snackbarVariant = _this$state2.snackbarVariant;\n      var acceptFiles = acceptedFiles === null || acceptedFiles === void 0 ? void 0 : acceptedFiles.join(',');\n      var isMultiple = filesLimit > 1;\n      var previewsVisible = showPreviews && fileObjects.length > 0;\n      var previewsInDropzoneVisible = showPreviewsInDropzone && fileObjects.length > 0;\n      return createElement(Fragment, null, createElement(Dropzone, _extends({}, dropzoneProps, {\n        accept: acceptFiles,\n        onDropAccepted: this.handleDropAccepted,\n        onDropRejected: this.handleDropRejected,\n        maxSize: maxFileSize,\n        multiple: isMultiple\n      }), function (_ref4) {\n        var getRootProps = _ref4.getRootProps,\n            getInputProps = _ref4.getInputProps,\n            isDragActive = _ref4.isDragActive,\n            isDragReject = _ref4.isDragReject;\n        return createElement(\"div\", _extends({}, getRootProps(), {\n          className: clsx(classes.root, dropzoneClass, isDragActive && classes.active, !disableRejectionFeedback && isDragReject && classes.invalid)\n        }), createElement(\"input\", _extends({}, inputProps, getInputProps())), createElement(\"div\", {\n          className: classes.textContainer\n        }, createElement(Typography, {\n          variant: \"h5\",\n          component: \"p\",\n          className: clsx(classes.text, dropzoneParagraphClass)\n        }, dropzoneText), Icon ? createElement(Icon, {\n          className: classes.icon\n        }) : createElement(CloudUploadIcon, {\n          className: classes.icon\n        })), previewsInDropzoneVisible && createElement(PreviewList$1, {\n          fileObjects: fileObjects,\n          handleRemove: _this2.handleRemove,\n          getPreviewIcon: getPreviewIcon,\n          showFileNames: showFileNames,\n          useChipsForPreview: useChipsForPreview,\n          previewChipProps: previewChipProps,\n          previewGridClasses: previewGridClasses,\n          previewGridProps: previewGridProps\n        }));\n      }), previewsVisible && createElement(Fragment, null, createElement(Typography, {\n        variant: \"subtitle1\",\n        component: \"span\"\n      }, previewText), createElement(PreviewList$1, {\n        fileObjects: fileObjects,\n        handleRemove: this.handleRemove,\n        getPreviewIcon: getPreviewIcon,\n        showFileNames: showFileNamesInPreview,\n        useChipsForPreview: useChipsForPreview,\n        previewChipProps: previewChipProps,\n        previewGridClasses: previewGridClasses,\n        previewGridProps: previewGridProps\n      })), (typeof showAlerts === 'boolean' && showAlerts || Array.isArray(showAlerts) && showAlerts.includes(snackbarVariant)) && createElement(Snackbar, _extends({\n        anchorOrigin: defaultSnackbarAnchorOrigin,\n        autoHideDuration: 6000\n      }, alertSnackbarProps, {\n        open: openSnackBar,\n        onClose: this.handleCloseSnackbar\n      }), createElement(SnackbarContentWrapper$1, {\n        onClose: this.handleCloseSnackbar,\n        variant: snackbarVariant,\n        message: snackbarMessage\n      })));\n    }\n  }]);\n\n  return DropzoneAreaBase;\n}(PureComponent);\n\nDropzoneAreaBase.defaultProps = {\n  acceptedFiles: [],\n  filesLimit: 3,\n  fileObjects: [],\n  maxFileSize: 3000000,\n  dropzoneText: 'Drag and drop a file here or click',\n  previewText: 'Preview:',\n  disableRejectionFeedback: false,\n  showPreviews: false,\n  // By default previews show up under in the dialog and inside in the standalone\n  showPreviewsInDropzone: true,\n  showFileNames: false,\n  showFileNamesInPreview: false,\n  useChipsForPreview: false,\n  previewChipProps: {},\n  previewGridClasses: {},\n  previewGridProps: {},\n  showAlerts: true,\n  alertSnackbarProps: {\n    anchorOrigin: {\n      horizontal: 'left',\n      vertical: 'bottom'\n    },\n    autoHideDuration: 6000\n  },\n  getFileLimitExceedMessage: function getFileLimitExceedMessage(filesLimit) {\n    return \"Maximum allowed number of files exceeded. Only \".concat(filesLimit, \" allowed\");\n  },\n  getFileAddedMessage: function getFileAddedMessage(fileName) {\n    return \"File \".concat(fileName, \" successfully added.\");\n  },\n  getPreviewIcon: defaultGetPreviewIcon,\n  getFileRemovedMessage: function getFileRemovedMessage(fileName) {\n    return \"File \".concat(fileName, \" removed.\");\n  },\n  getDropRejectMessage: function getDropRejectMessage(rejectedFile, acceptedFiles, maxFileSize) {\n    var message = \"File \".concat(rejectedFile.name, \" was rejected. \");\n\n    if (!acceptedFiles.includes(rejectedFile.type)) {\n      message += 'File type not supported. ';\n    }\n\n    if (rejectedFile.size > maxFileSize) {\n      message += 'File is too big. Size limit is ' + convertBytesToMbsOrKbs(maxFileSize) + '. ';\n    }\n\n    return message;\n  }\n};\nvar FileObjectShape = PropTypes.shape({\n  file: PropTypes.object,\n  data: PropTypes.any\n});\nprocess.env.NODE_ENV !== \"production\" ? DropzoneAreaBase.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n\n  /** A list of file types to accept.\n   * @see See [here](https://react-dropzone.js.org/#section-accepting-specific-file-types) for more details.\n   */\n  acceptedFiles: PropTypes.arrayOf(PropTypes.string),\n\n  /** Maximum number of files that can be loaded into the dropzone. */\n  filesLimit: PropTypes.number,\n\n  /** Icon to be displayed inside the dropzone area. */\n  Icon: PropTypes.elementType,\n\n  /** Currently loaded files. */\n  fileObjects: PropTypes.arrayOf(FileObjectShape),\n\n  /** Maximum file size (in bytes) that the dropzone will accept. */\n  maxFileSize: PropTypes.number,\n\n  /** Text inside the dropzone. */\n  dropzoneText: PropTypes.string,\n\n  /** Custom CSS class name for dropzone container. */\n  dropzoneClass: PropTypes.string,\n\n  /** Custom CSS class name for text inside the container. */\n  dropzoneParagraphClass: PropTypes.string,\n\n  /** Disable feedback effect when dropping rejected files. */\n  disableRejectionFeedback: PropTypes.bool,\n\n  /** Shows previews **BELOW** the dropzone. */\n  showPreviews: PropTypes.bool,\n\n  /** Shows preview **INSIDE** the dropzone area. */\n  showPreviewsInDropzone: PropTypes.bool,\n\n  /** Shows file name under the dropzone image. */\n  showFileNames: PropTypes.bool,\n\n  /** Shows file name under the image. */\n  showFileNamesInPreview: PropTypes.bool,\n\n  /** Uses deletable Material-UI Chip components to display file names. */\n  useChipsForPreview: PropTypes.bool,\n\n  /**\n   * Props to pass to the Material-UI Chip components.<br/>Requires `useChipsForPreview` prop to be `true`.\n   *\n   * @see See [Material-UI Chip](https://material-ui.com/api/chip/#props) for available values.\n   */\n  previewChipProps: PropTypes.object,\n\n  /**\n   * Custom CSS classNames for preview Grid components.<br/>\n   * Should be in the form {container: string, item: string, image: string}.\n   */\n  previewGridClasses: PropTypes.object,\n\n  /**\n   * Props to pass to the Material-UI Grid components.<br/>\n   * Should be in the form {container: GridProps, item: GridProps}.\n   *\n   * @see See [Material-UI Grid](https://material-ui.com/api/grid/#props) for available GridProps values.\n   */\n  previewGridProps: PropTypes.object,\n\n  /** The label for the file preview section. */\n  previewText: PropTypes.string,\n\n  /**\n   * Shows styled Material-UI Snackbar when files are dropped, deleted or rejected.\n   *\n   * - can be a boolean (\"global\" `true` or `false` for all alerts).\n   * - can be an array, with values 'error', 'info', 'success' to select to view only certain alerts:\n   *  - showAlerts={['error']} for only errors.\n   *  - showAlerts={['error', 'info']} for both errors and info.\n   *  - showAlerts={['error', 'success', 'info']} is same as showAlerts={true}.\n   *  - showAlerts={[]} is same as showAlerts={false}.\n   */\n  showAlerts: PropTypes.oneOfType([PropTypes.bool, PropTypes.arrayOf(PropTypes.oneOf(['error', 'success', 'info']))]),\n\n  /**\n   * Props to pass to the Material-UI Snackbar components.<br/>Requires `showAlerts` prop to be `true`.\n   *\n   * @see See [Material-UI Snackbar](https://material-ui.com/api/snackbar/#props) for available values.\n   */\n  alertSnackbarProps: PropTypes.object,\n\n  /**\n   * Props to pass to the Dropzone component.\n   *\n   * @see See [Dropzone props](https://react-dropzone.js.org/#src) for available values.\n   */\n  dropzoneProps: PropTypes.object,\n\n  /**\n   * Attributes applied to the input element.\n   *\n   * @see See [MDN Input File attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Additional_attributes) for available values.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Get alert message to display when files limit is exceed.\n   *\n   * *Default*: \"Maximum allowed number of files exceeded. Only ${filesLimit} allowed\"\n   *\n   * @param {number} filesLimit The `filesLimit` currently set for the component.\n   */\n  getFileLimitExceedMessage: PropTypes.func,\n\n  /**\n   * Get alert message to display when a new file is added.\n   *\n   * *Default*: \"File ${fileName} successfully added.\"\n   *\n   * @param {string} fileName The newly added file name.\n   */\n  getFileAddedMessage: PropTypes.func,\n\n  /**\n   * Get alert message to display when a file is removed.\n   *\n   * *Default*: \"File ${fileName} removed.\"\n   *\n   * @param {string} fileName The name of the removed file.\n   */\n  getFileRemovedMessage: PropTypes.func,\n\n  /**\n   * Get alert message to display when a file is rejected onDrop.\n   *\n   * *Default*: \"File ${rejectedFile.name} was rejected.\"\n   *\n   * @param {Object} rejectedFile The file that got rejected\n   * @param {string[]} acceptedFiles The `acceptedFiles` prop currently set for the component\n   * @param {number} maxFileSize The `maxFileSize` prop currently set for the component\n   */\n  getDropRejectMessage: PropTypes.func,\n\n  /**\n   * A function which determines which icon to display for a file preview.\n   *\n   * *Default*: If its an image then displays a preview the image, otherwise it will display an attachment icon\n   *\n   * @param {FileObject} objectFile The file which the preview will belong to\n   * @param {Object} classes The classes for the file preview icon, in the default case we use the 'image' className.\n   */\n  getPreviewIcon: PropTypes.func,\n\n  /**\n   * Fired when new files are added to dropzone.\n   *\n   * @param {FileObject[]} newFiles The new files added to the dropzone.\n   */\n  onAdd: PropTypes.func,\n\n  /**\n   * Fired when a file is deleted from the previews panel.\n   *\n   * @param {FileObject} deletedFileObject The file that was removed.\n   * @param {number} index The index of the removed file object.\n   */\n  onDelete: PropTypes.func,\n\n  /**\n   * Fired when the user drops files into the dropzone.\n   *\n   * @param {File[]} droppedFiles All the files dropped into the dropzone.\n   * @param {Event} event The react-dropzone drop event.\n   */\n  onDrop: PropTypes.func,\n\n  /**\n   * Fired when a file is rejected because of wrong file type, size or goes beyond the filesLimit.\n   *\n   * @param {File[]} rejectedFiles All the rejected files.\n   * @param {Event} event The react-dropzone drop event.\n   */\n  onDropRejected: PropTypes.func,\n\n  /**\n   * Fired when an alert is triggered.\n   *\n   * @param {string} message Alert message.\n   * @param {string} variant One of \"error\", \"info\", \"success\".\n   */\n  onAlert: PropTypes.func\n} : void 0;\nvar DropzoneAreaBase$1 = withStyles(styles$2, {\n  name: 'MuiDropzoneArea'\n})(DropzoneAreaBase);\n\nvar splitDropzoneAreaProps = function splitDropzoneAreaProps(props) {\n  var clearOnUnmount = props.clearOnUnmount,\n      initialFiles = props.initialFiles,\n      onChange = props.onChange,\n      onDelete = props.onDelete,\n      dropzoneAreaProps = _objectWithoutProperties(props, [\"clearOnUnmount\", \"initialFiles\", \"onChange\", \"onDelete\"]);\n\n  return [{\n    clearOnUnmount: clearOnUnmount,\n    initialFiles: initialFiles,\n    onChange: onChange,\n    onDelete: onDelete\n  }, dropzoneAreaProps];\n};\n/**\n * This components creates an uncontrolled Material-UI Dropzone, with previews and snackbar notifications.\n *\n * It supports all props of `DropzoneAreaBase` but keeps the files state internally.\n *\n * **Note** To listen to file changes use `onChange` event handler and notice that `onDelete` returns a `File` instance instead of `FileObject`.\n */\n\n\nvar DropzoneArea = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DropzoneArea, _React$PureComponent);\n\n  function DropzoneArea() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropzoneArea);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropzoneArea)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fileObjects: []\n    };\n\n    _this.notifyFileChange = function () {\n      var onChange = _this.props.onChange;\n      var fileObjects = _this.state.fileObjects;\n\n      if (onChange) {\n        onChange(fileObjects.map(function (fileObject) {\n          return fileObject.file;\n        }));\n      }\n    };\n\n    _this.loadInitialFiles = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var initialFiles, fileObjs;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              initialFiles = _this.props.initialFiles;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return Promise.all(initialFiles.map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(initialFile) {\n                  var file, data;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          if (!(typeof initialFile === 'string')) {\n                            _context.next = 6;\n                            break;\n                          }\n\n                          _context.next = 3;\n                          return createFileFromUrl(initialFile);\n\n                        case 3:\n                          file = _context.sent;\n                          _context.next = 7;\n                          break;\n\n                        case 6:\n                          file = initialFile;\n\n                        case 7:\n                          _context.next = 9;\n                          return readFile(file);\n\n                        case 9:\n                          data = _context.sent;\n                          return _context.abrupt(\"return\", {\n                            file: file,\n                            data: data\n                          });\n\n                        case 11:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n\n            case 4:\n              fileObjs = _context2.sent;\n\n              _this.setState(function (state) {\n                return {\n                  fileObjects: [].concat(state.fileObjects, fileObjs)\n                };\n              }, _this.notifyFileChange);\n\n              _context2.next = 11;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 8]]);\n    }));\n\n    _this.addFiles = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(newFileObjects) {\n        var filesLimit;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                filesLimit = _this.props.filesLimit; // Update component state\n\n                _this.setState(function (state) {\n                  // Handle a single file\n                  if (filesLimit <= 1) {\n                    return {\n                      fileObjects: [].concat(newFileObjects[0])\n                    };\n                  } // Handle multiple files\n\n\n                  return {\n                    fileObjects: [].concat(state.fileObjects, newFileObjects)\n                  };\n                }, _this.notifyFileChange);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.deleteFile = function (removedFileObj, removedFileObjIdx) {\n      event.stopPropagation();\n      var onDelete = _this.props.onDelete;\n      var fileObjects = _this.state.fileObjects; // Calculate remaining fileObjects array\n\n      var remainingFileObjs = fileObjects.filter(function (fileObject, i) {\n        return i !== removedFileObjIdx;\n      }); // Notify removed file\n\n      if (onDelete) {\n        onDelete(removedFileObj.file);\n      } // Update local state\n\n\n      _this.setState({\n        fileObjects: remainingFileObjs\n      }, _this.notifyFileChange);\n    };\n\n    return _this;\n  }\n\n  _createClass(DropzoneArea, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadInitialFiles();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var clearOnUnmount = this.props.clearOnUnmount;\n\n      if (clearOnUnmount) {\n        this.setState({\n          fileObjects: []\n        }, this.notifyFileChange);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _splitDropzoneAreaPro = splitDropzoneAreaProps(this.props),\n          _splitDropzoneAreaPro2 = _slicedToArray(_splitDropzoneAreaPro, 2),\n          dropzoneAreaProps = _splitDropzoneAreaPro2[1];\n\n      var fileObjects = this.state.fileObjects;\n      return createElement(DropzoneAreaBase$1, _extends({}, dropzoneAreaProps, {\n        fileObjects: fileObjects,\n        onAdd: this.addFiles,\n        onDelete: this.deleteFile\n      }));\n    }\n  }]);\n\n  return DropzoneArea;\n}(PureComponent);\n\nDropzoneArea.defaultProps = {\n  clearOnUnmount: true,\n  filesLimit: 3,\n  initialFiles: []\n};\nprocess.env.NODE_ENV !== \"production\" ? DropzoneArea.propTypes = _extends({}, DropzoneAreaBase$1.propTypes, {\n  /** Clear uploaded files when component is unmounted. */\n  clearOnUnmount: PropTypes.bool,\n\n  /** List containing File objects or URL strings.<br/>\n   * **Note:** Please take care of CORS.\n  */\n  initialFiles: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.any])),\n\n  /** Maximum number of files that can be loaded into the dropzone. */\n  filesLimit: PropTypes.number,\n\n  /**\n   * Fired when the files inside dropzone change.\n   *\n   * @param {File[]} loadedFiles All the files currently loaded into the dropzone.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Fired when a file is deleted from the previews panel.\n   *\n   * @param {File} deletedFile The file that was removed.\n   */\n  onDelete: PropTypes.func\n}) : void 0;\n\nfunction splitDropzoneDialogProps(allProps) {\n  var cancelButtonText = allProps.cancelButtonText,\n      dialogProps = allProps.dialogProps,\n      dialogTitle = allProps.dialogTitle,\n      fullWidth = allProps.fullWidth,\n      maxWidth = allProps.maxWidth,\n      onClose = allProps.onClose,\n      onSave = allProps.onSave,\n      open = allProps.open,\n      submitButtonText = allProps.submitButtonText,\n      dropzoneAreaProps = _objectWithoutProperties(allProps, [\"cancelButtonText\", \"dialogProps\", \"dialogTitle\", \"fullWidth\", \"maxWidth\", \"onClose\", \"onSave\", \"open\", \"submitButtonText\"]);\n\n  return [{\n    cancelButtonText: cancelButtonText,\n    dialogProps: dialogProps,\n    dialogTitle: dialogTitle,\n    fullWidth: fullWidth,\n    maxWidth: maxWidth,\n    onClose: onClose,\n    onSave: onSave,\n    open: open,\n    submitButtonText: submitButtonText\n  }, dropzoneAreaProps];\n}\n/**\n * This component provides the DropzoneArea inside of a Material-UI Dialog.\n *\n * It supports all the Props and Methods from `DropzoneAreaBase`.\n */\n\n\nvar DropzoneDialogBase = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DropzoneDialogBase, _React$PureComponent);\n\n  function DropzoneDialogBase() {\n    _classCallCheck(this, DropzoneDialogBase);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DropzoneDialogBase).apply(this, arguments));\n  }\n\n  _createClass(DropzoneDialogBase, [{\n    key: \"render\",\n    value: function render() {\n      var _splitDropzoneDialogP = splitDropzoneDialogProps(this.props),\n          _splitDropzoneDialogP2 = _slicedToArray(_splitDropzoneDialogP, 2),\n          dropzoneDialogProps = _splitDropzoneDialogP2[0],\n          dropzoneAreaProps = _splitDropzoneDialogP2[1];\n\n      var cancelButtonText = dropzoneDialogProps.cancelButtonText,\n          dialogProps = dropzoneDialogProps.dialogProps,\n          dialogTitle = dropzoneDialogProps.dialogTitle,\n          fullWidth = dropzoneDialogProps.fullWidth,\n          maxWidth = dropzoneDialogProps.maxWidth,\n          onClose = dropzoneDialogProps.onClose,\n          onSave = dropzoneDialogProps.onSave,\n          open = dropzoneDialogProps.open,\n          submitButtonText = dropzoneDialogProps.submitButtonText; // Submit button state\n\n      var submitDisabled = dropzoneAreaProps.fileObjects.length === 0;\n      return createElement(Dialog, _extends({}, dialogProps, {\n        fullWidth: fullWidth,\n        maxWidth: maxWidth,\n        onClose: onClose,\n        open: open\n      }), createElement(DialogTitle, null, dialogTitle), createElement(DialogContent, null, createElement(DropzoneAreaBase$1, dropzoneAreaProps)), createElement(DialogActions, null, createElement(Button, {\n        color: \"primary\",\n        onClick: onClose\n      }, cancelButtonText), createElement(Button, {\n        color: \"primary\",\n        disabled: submitDisabled,\n        onClick: onSave\n      }, submitButtonText)));\n    }\n  }]);\n\n  return DropzoneDialogBase;\n}(PureComponent);\n\nDropzoneDialogBase.defaultProps = {\n  open: false,\n  dialogTitle: 'Upload file',\n  dialogProps: {},\n  fullWidth: true,\n  maxWidth: 'sm',\n  cancelButtonText: 'Cancel',\n  submitButtonText: 'Submit',\n  showPreviews: true,\n  showPreviewsInDropzone: false,\n  showFileNamesInPreview: true\n};\nprocess.env.NODE_ENV !== \"production\" ? DropzoneDialogBase.propTypes = _extends({}, DropzoneAreaBase$1.propTypes, {\n  /** Sets whether the dialog is open or closed. */\n  open: PropTypes.bool,\n\n  /** The Dialog title. */\n  dialogTitle: PropTypes.string,\n\n  /**\n   * Props to pass to the Material-UI Dialog components.\n   * @see See [Material-UI Dialog](https://material-ui.com/api/dialog/#props) for available values.\n   */\n  dialogProps: PropTypes.object,\n\n  /**\n   * If `true`, the dialog stretches to `maxWidth`.<br/>\n   * Notice that the dialog width grow is limited by the default margin.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * Determine the max-width of the dialog. The dialog width grows with the size of the screen.<br/>\n   * Set to `false` to disable `maxWidth`.\n   */\n  maxWidth: PropTypes.string,\n\n  /** Cancel button text in dialog. */\n  cancelButtonText: PropTypes.string,\n\n  /** Submit button text in dialog. */\n  submitButtonText: PropTypes.string,\n\n  /**\n   * Fired when the modal is closed.\n   *\n   * @param {SyntheticEvent} event The react `SyntheticEvent`\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Fired when the user clicks the Submit button.\n   *\n   * @param {SyntheticEvent} event The react `SyntheticEvent`\n   */\n  onSave: PropTypes.func,\n\n  /**\n   * Shows previews **BELOW** the dropzone.<br/>\n   * **Note:** By default previews show up under in the Dialog and inside in the standalone.\n   */\n  showPreviews: PropTypes.bool,\n\n  /** Shows preview **INSIDE** the dropzone area. */\n  showPreviewsInDropzone: PropTypes.bool,\n\n  /** Shows file name under the image. */\n  showFileNamesInPreview: PropTypes.bool\n}) : void 0;\n/**\n * This component provides an uncontrolled version of the DropzoneDialogBase component.\n *\n * It supports all the Props and Methods from `DropzoneDialogBase` but keeps the files state internally.\n *\n * **Note** The `onSave` handler also returns `File[]` with all the accepted files.\n */\n\nvar DropzoneDialog = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DropzoneDialog, _React$PureComponent);\n\n  function DropzoneDialog() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropzoneDialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropzoneDialog)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fileObjects: []\n    };\n\n    _this.notifyFileChange = function () {\n      var onChange = _this.props.onChange;\n      var fileObjects = _this.state.fileObjects;\n\n      if (onChange) {\n        onChange(fileObjects.map(function (fileObject) {\n          return fileObject.file;\n        }));\n      }\n    };\n\n    _this.loadInitialFiles = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var initialFiles, fileObjs;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              initialFiles = _this.props.initialFiles;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return Promise.all(initialFiles.map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(initialFile) {\n                  var file, data;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          if (!(typeof initialFile === 'string')) {\n                            _context.next = 6;\n                            break;\n                          }\n\n                          _context.next = 3;\n                          return createFileFromUrl(initialFile);\n\n                        case 3:\n                          file = _context.sent;\n                          _context.next = 7;\n                          break;\n\n                        case 6:\n                          file = initialFile;\n\n                        case 7:\n                          _context.next = 9;\n                          return readFile(file);\n\n                        case 9:\n                          data = _context.sent;\n                          return _context.abrupt(\"return\", {\n                            file: file,\n                            data: data\n                          });\n\n                        case 11:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n\n            case 4:\n              fileObjs = _context2.sent;\n\n              _this.setState(function (state) {\n                return {\n                  fileObjects: [].concat(state.fileObjects, fileObjs)\n                };\n              }, _this.notifyFileChange);\n\n              _context2.next = 11;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 8]]);\n    }));\n\n    _this.addFiles = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(newFileObjects) {\n        var filesLimit;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                filesLimit = _this.props.filesLimit; // Update component state\n\n                _this.setState(function (state) {\n                  // Handle a single file\n                  if (filesLimit <= 1) {\n                    return {\n                      fileObjects: [].concat(newFileObjects[0])\n                    };\n                  } // Handle multiple files\n\n\n                  return {\n                    fileObjects: [].concat(state.fileObjects, newFileObjects)\n                  };\n                }, _this.notifyFileChange);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.deleteFile = function (removedFileObj, removedFileObjIdx) {\n      event.stopPropagation();\n      var onDelete = _this.props.onDelete;\n      var fileObjects = _this.state.fileObjects; // Calculate remaining fileObjects array\n\n      var remainingFileObjs = fileObjects.filter(function (fileObject, i) {\n        return i !== removedFileObjIdx;\n      }); // Notify removed file\n\n      if (onDelete) {\n        onDelete(removedFileObj.file);\n      } // Update local state\n\n\n      _this.setState({\n        fileObjects: remainingFileObjs\n      }, _this.notifyFileChange);\n    };\n\n    _this.handleClose = function (evt) {\n      var _this$props = _this.props,\n          clearOnUnmount = _this$props.clearOnUnmount,\n          onClose = _this$props.onClose;\n\n      if (onClose) {\n        onClose(evt);\n      }\n\n      if (clearOnUnmount) {\n        _this.setState({\n          fileObjects: []\n        }, _this.notifyFileChange);\n      }\n    };\n\n    _this.handleSave = function (evt) {\n      var _this$props2 = _this.props,\n          clearOnUnmount = _this$props2.clearOnUnmount,\n          onSave = _this$props2.onSave;\n      var fileObjects = _this.state.fileObjects;\n\n      if (onSave) {\n        onSave(fileObjects.map(function (fileObject) {\n          return fileObject.file;\n        }), evt);\n      }\n\n      if (clearOnUnmount) {\n        _this.setState({\n          fileObjects: []\n        }, _this.notifyFileChange);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DropzoneDialog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadInitialFiles();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var clearOnUnmount = this.props.clearOnUnmount;\n\n      if (clearOnUnmount) {\n        this.setState({\n          fileObjects: []\n        }, this.notifyFileChange);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var fileObjects = this.state.fileObjects;\n      return createElement(DropzoneDialogBase, _extends({}, this.props, {\n        fileObjects: fileObjects,\n        onAdd: this.addFiles,\n        onDelete: this.deleteFile,\n        onClose: this.handleClose,\n        onSave: this.handleSave\n      }));\n    }\n  }]);\n\n  return DropzoneDialog;\n}(PureComponent);\n\nDropzoneDialog.defaultProps = {\n  clearOnUnmount: true,\n  filesLimit: 3,\n  initialFiles: []\n};\nprocess.env.NODE_ENV !== \"production\" ? DropzoneDialog.propTypes = _extends({}, DropzoneDialogBase.propTypes, {\n  /** Clear uploaded files when component is unmounted. */\n  clearOnUnmount: PropTypes.bool,\n\n  /** Maximum number of files that can be loaded into the dropzone. */\n  filesLimit: PropTypes.number,\n\n  /** List containing File objects or URL strings.<br/>\n   * **Note:** Please take care of CORS.\n  */\n  initialFiles: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.any])),\n\n  /**\n   * Fired when the user clicks the Submit button.\n   *\n   * @param {File[]} files All the files currently inside the Dropzone.\n   * @param {SyntheticEvent} event The react `SyntheticEvent`.\n   */\n  onSave: PropTypes.func\n}) : void 0;\nexport { DropzoneArea, DropzoneAreaBase$1 as DropzoneAreaBase, DropzoneDialog, DropzoneDialogBase };","map":null,"metadata":{},"sourceType":"module"}