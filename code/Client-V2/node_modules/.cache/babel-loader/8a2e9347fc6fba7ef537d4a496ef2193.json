{"ast":null,"code":"import _createForOfIteratorHelper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\ResultsOfUnitsByReagentGroup\\\\ResultsOfUnitsByReagentGroup.jsx\";\nimport { InputAdornment, Input, Grid, Button, Select, TextField, Table, TableHead, TableRow, FormControlLabel, Paper, TableContainer, Checkbox, TableCell, FormControl, TableBody } from \"@material-ui/core\";\nimport shortid from \"shortid\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\nimport { searchByPage as getAllEQARound } from \"../EQARound/EQARoundService\";\nimport { getSampleSetByRoundID, getListResultByRoundId, getByReportReagent, exportToExcel } from \"./ResultsOfUnitsByReagentGroupService\";\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport { Helmet } from \"react-helmet\";\nimport { toast } from \"react-toastify\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { getCurrentUser } from \"../User/UserService\";\nimport LocalConstants from \"./Constants\";\nimport { saveAs } from 'file-saver'; //   import { updateResultReportConclusionBySampleTube } from \"./EQAResultReportConclusionServices\";\n//   import { getEQASampleTubeResultConclusionDtoByHealthOrgEQARoundId } from \"./EQAResultReportConclusionServices\";\n\nimport { getAllResultByHealthOrgEQARoundId, getResultReportById, getItemById } from \"../ResultsOfTheUnits/ResultsOfTheUnitsService\";\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n});\n\nvar ResultsOfUnitsByReagentGroup = /*#__PURE__*/function (_React$Component) {\n  _inherits(ResultsOfUnitsByReagentGroup, _React$Component);\n\n  var _super = _createSuper(ResultsOfUnitsByReagentGroup);\n\n  function ResultsOfUnitsByReagentGroup(props) {\n    var _this;\n\n    _classCallCheck(this, ResultsOfUnitsByReagentGroup);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      sampleTubeResultConclusionList: [],\n      listEQARound: [],\n      currentRound: null,\n      healthOrgEQARoundList: [],\n      currentHealthOrgEQARound: null,\n      shouldOpenConfirmationDialog: false,\n      isFinalResult: false,\n      shouldOpenEQAResultReportDialog: false,\n      listSample: [],\n      isCheckUpdate: false,\n      listResult: []\n    };\n\n    _this.handleDialogClose = function () {\n      _this.setState({\n        shouldOpenConfirmationDialog: false,\n        shouldOpenEQAResultReportDialog: false\n      }, function () {// console.log(this.state.sampleTubeResultConclusionList)\n      });\n    };\n\n    _this.handleSelectEQARound = function (value) {\n      if (value != null && value != \"\") {\n        getSampleSetByRoundID(value.id).then(function (res) {\n          // console.log(res.data)\n          var listSampleSetDetail = [];\n          var listSampleSet = res.data;\n          listSampleSet.forEach(function (e) {\n            listSampleSetDetail = e.details;\n          });\n          listSampleSetDetail.sort(function (a, b) {\n            return a.sampleCode > b.sampleCode ? 1 : -1;\n          });\n\n          _this.setState({\n            currentHealthOrgEQARound: null,\n            sampleTubeResultConclusionList: [],\n            currentRound: value,\n            healthOrgEQARoundList: res.data,\n            listSample: listSampleSetDetail\n          }, function () {\n            getByReportReagent(value.id).then(function (res) {\n              var list = res.data;\n              list.sort(function (a, b) {\n                return a.reagent > b.reagent ? 1 : -1;\n              });\n\n              _this.setState({\n                listReagent: res.data\n              }, function () {\n                var _this$state = _this.state,\n                    listSample = _this$state.listSample,\n                    listReagent = _this$state.listReagent;\n                listSample.forEach(function (e) {\n                  var sampleCodeId = e.sampleCode;\n                  var result = sampleCodeId + \"-result\";\n                  listReagent.forEach(function (el) {\n                    el[result] = e.sampleResult;\n                    el[sampleCodeId] = e.sample.id;\n\n                    _this.setState({\n                      listReagent\n                    }, function () {});\n                  });\n                });\n              });\n            });\n            getListResultByRoundId(value.id).then(function (res) {\n              var _this$state2 = _this.state,\n                  listSample = _this$state2.listSample,\n                  listReagent = _this$state2.listReagent;\n              var listResult = _this.state.listResult;\n\n              var listItem = _toConsumableArray(res.data);\n\n              listResult = listItem;\n              var content = {};\n\n              var list = _toConsumableArray(res.data); // listReagent.forEach(e=>{\n              //     listSample.forEach(el =>{\n              //         let sampleCode = e.sampleCode\n              //         if(e.sample != null && el.sampleId != null\n              //             && e.sample.id == el.sampleId){\n              //                 e[${sampleCode}] = el.result\n              //                 content\n              //             }\n              //     })\n              //     listResult.push(content)\n              // })\n\n\n              _this.setState({\n                listResult\n              }, function () {// console.log(this.state.listResult)\n                // console.log(this.state.listReagent)\n              });\n            });\n          });\n        });\n      } else {\n        _this.setState({\n          currentRound: null,\n          currentHealthOrgEQARound: null,\n          healthOrgEQARoundList: [],\n          sampleTubeResultConclusionList: [],\n          listSample: []\n        });\n      }\n    };\n\n    _this.handleChangeResult = function (result, id) {\n      var sampleTubeResultConclusionList = _this.state.sampleTubeResultConclusionList;\n\n      var _iterator = _createForOfIteratorHelper(sampleTubeResultConclusionList),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var dto = _step.value;\n\n          if (dto.tubeID === id) {\n            dto.result = result;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      _this.setState({\n        sampleTubeResultConclusionList\n      });\n    };\n\n    _this.handleChangeNote = function (note, id) {\n      var sampleTubeResultConclusionList = _this.state.sampleTubeResultConclusionList;\n\n      var _iterator2 = _createForOfIteratorHelper(sampleTubeResultConclusionList),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var dto = _step2.value;\n\n          if (dto.tubeID === id) {\n            dto.note = note;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      _this.setState({\n        sampleTubeResultConclusionList\n      });\n    };\n\n    _this.resultValue = function (rowDataID) {\n      var item = _this.state.sampleTubeResultConclusionList.find(function (dto) {\n        return dto.tubeID === rowDataID;\n      });\n\n      if (typeof item != \"undefined\") {\n        return item.result != null ? item.result : \"\";\n      }\n\n      return \"\";\n    };\n\n    _this.noteValue = function (rowDataID) {\n      var item = _this.state.sampleTubeResultConclusionList.find(function (dto) {\n        return dto.tubeID === rowDataID;\n      });\n\n      if (typeof item != \"undefined\") {\n        return item.note != null ? item.note : \"\";\n      }\n\n      return \"\";\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"isFinalResult\") {\n        _this.setState({\n          isFinalResult: event.target.checked\n        });\n      }\n    };\n\n    _this.handleOKEditClose = function () {\n      _this.setState({\n        shouldOpenEQAResultReportDialog: false,\n        shouldOpenConfirmationDialog: false,\n        shouldOpenConfirmationEditDialog: false\n      }, function () {\n        _this.handleSelectHealthOrg(_this.state.currentHealthOrgEQARound);\n      }); // this.setPage(0);\n\n    };\n\n    _this.exportToExcel = function () {\n      var t = _this.props.t;\n      var searchObject = {};\n\n      if (_this.state.currentRound == null || _this.state.currentRound.id == \"\") {\n        toast.warn(t(\"EQASampleSet.please_select_eqa_round\"));\n        return;\n      }\n\n      exportToExcel(_this.state.currentRound ? _this.state.currentRound.id : \"\").then(function (res) {\n        var blob = new Blob([res.data], {\n          type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n        });\n        saveAs(blob, 'ResultsOfUnitsByReagentGroup.xlsx');\n      }).catch(function (err) {// console.log(err)\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ResultsOfUnitsByReagentGroup, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {}\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var searchObject = {\n        pageIndex: 0,\n        pageSize: 1000000\n      };\n      getAllEQARound(searchObject).then(function (res) {\n        _this2.setState({\n          listEQARound: res.data.content\n        });\n      }, function () {});\n    }\n  }, {\n    key: \"renderRowResultHead\",\n    value: function renderRowResultHead() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          onSelectEvent = _this$props.onSelectEvent,\n          handleDelete = _this$props.handleDelete,\n          handleClick = _this$props.handleClick;\n      var listSample = this.state.listSample;\n      var titleCell = null;\n\n      if (listSample != null && listSample.length > 0) {\n        listSample.forEach(function (item) {\n          // console.log(item)\n          if (!titleCell) {\n            titleCell = /*#__PURE__*/React.createElement(TableCell, {\n              key: shortid.generate(),\n              className: \"px-0\",\n              align: \"left\",\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 25\n              }\n            }, item.sampleResult);\n          } else {\n            titleCell += /*#__PURE__*/React.createElement(TableCell, {\n              key: shortid.generate(),\n              className: \"px-0\",\n              align: \"left\",\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 26\n              }\n            }, item.sampleResult);\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 9\n        }\n      }, listSample.map(function (item, index) {\n        return _this3.renderColHeadResult(item);\n      }));\n    }\n  }, {\n    key: \"renderRowHead\",\n    value: function renderRowHead() {\n      var _this4 = this;\n\n      var _this$props2 = this.props,\n          onSelectEvent = _this$props2.onSelectEvent,\n          handleDelete = _this$props2.handleDelete,\n          handleClick = _this$props2.handleClick;\n      var listSample = this.state.listSample;\n      var titleCell = null;\n\n      if (listSample != null && listSample.length > 0) {\n        listSample.forEach(function (item) {\n          // console.log(item)\n          if (!titleCell) {\n            titleCell = /*#__PURE__*/React.createElement(TableCell, {\n              key: shortid.generate(),\n              className: \"px-0\",\n              align: \"left\",\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 25\n              }\n            }, item.sampleCode);\n          } else {\n            titleCell += /*#__PURE__*/React.createElement(TableCell, {\n              key: shortid.generate(),\n              className: \"px-0\",\n              align: \"left\",\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 26\n              }\n            }, item.sampleCode);\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 9\n        }\n      }, listSample.map(function (item, index) {\n        return _this4.renderColHeadFirst(item);\n      }));\n    }\n  }, {\n    key: \"renderColHeadResult\",\n    value: function renderColHeadResult(item) {\n      if (item.sampleResult != null) {\n        if (item.sampleResult === -1) {\n          item.title = \"Âm tính\";\n        } else if (item.sampleResult === 0) {\n          item.title = \"Không xác định\";\n        } else if (item.sampleResult === 1) {\n          item.title = \"Dương tính\";\n        }\n      }\n\n      return this.renderHeadResultCells(item);\n    }\n  }, {\n    key: \"renderColHeadFirst\",\n    value: function renderColHeadFirst(item) {\n      if (item.code != null) {\n        item.title = item.sampleCode;\n      }\n\n      return this.renderHeadCells(item);\n    }\n  }, {\n    key: \"renderHeadResultCells\",\n    value: function renderHeadResultCells(item) {\n      if (item == null) {\n        item = {};\n      }\n\n      var titleCell = /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff'\n        },\n        key: shortid.generate(),\n        className: \"px-0\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 27\n        }\n      }, item.title);\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }\n      }, titleCell);\n    }\n  }, {\n    key: \"renderHeadCells\",\n    value: function renderHeadCells(item) {\n      if (item == null) {\n        item = {};\n      }\n\n      var titleCell = /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff'\n        },\n        key: shortid.generate(),\n        className: \"px-0\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 23\n        }\n      }, item.title);\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 9\n        }\n      }, titleCell);\n    }\n  }, {\n    key: \"renderResultDetails\",\n    value: function renderResultDetails(sample, index) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }\n      }, this.renderSample(sample, index)));\n    }\n  }, {\n    key: \"renderSample\",\n    value: function renderSample(item, index) {\n      var _this5 = this;\n\n      var _this$state3 = this.state,\n          listResult = _this$state3.listResult,\n          listSample = _this$state3.listSample;\n      var cellContentByMethod = [];\n      var isCheck = false;\n\n      if (item.typeMethod != null) {\n        if (item.typeMethod === LocalConstants.EQAResultReportTypeMethod.Elisa) {\n          item.title = \"Elisa\";\n        } else if (item.typeMethod === LocalConstants.EQAResultReportTypeMethod.FastTest) {\n          item.title = \"FastTest\";\n        } else if (item.typeMethod === LocalConstants.EQAResultReportTypeMethod.SERODIA) {\n          item.title = \"Serodioa\";\n        } else if (item.typeMethod === LocalConstants.EQAResultReportTypeMethod.ECL) {\n          item.title = \"Eclia\";\n        }\n      }\n\n      var sttCell = /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 21\n        }\n      }, item.healthOrgCode);\n      var titleCell = /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 21\n        }\n      }, item ? item.reagent : '');\n      var titleTypeMethod = /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 23\n        }\n      }, item ? item.title : '');\n      listResult.forEach(function (el) {\n        if (item.healthOrgId == el.healthOrgId && item.typeMethod == el.typeMethod && item.reagentId == el.reagentId) {\n          cellContentByMethod.push(el);\n        }\n      }); // listSample.forEach(e =>{\n      //     let sampleCodeId = e.sampleCode\n      //     let result = sampleCodeId +\"-result\"\n      //     listResult.forEach(el=>{\n      //         if(item[sampleCodeId] == el.sampleId && item.typeMethod == el.typeMethod && \n      //             item.){\n      //         }\n      //     })\n      // })  \n\n      cellContentByMethod.sort(function (a, b) {\n        return a.sampleCode > b.sampleCode ? 1 : -1;\n      }); //   console.log(cellContentByMethod)\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 9\n        }\n      }, titleTypeMethod, sttCell, titleCell, cellContentByMethod.map(function (cell, index) {\n        return _this5.renderCells(cell);\n      }));\n    }\n  }, {\n    key: \"renderCells\",\n    value: function renderCells(item) {\n      var _this$props3 = this.props,\n          t = _this$props3.t,\n          i18n = _this$props3.i18n;\n\n      if (item == null) {\n        item = {};\n      }\n\n      var contentCell = /*#__PURE__*/React.createElement(TableCell, {\n        key: shortid.generate(),\n        className: \"px-0\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 25\n        }\n      }, item.result == 1 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-primary text-white px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 13\n        }\n      }, t('result.positive')) : /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-light-gray px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 15\n        }\n      }, item.result == -2 ? t('result.none') : item.result == -1 ? t('result.negative') : item.result == 0 ? t('result.indertermine') : item.result == 2 ? t('EQAResultReportElisa.Result.confirms') : ''));\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 9\n        }\n      }, contentCell);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var _this$props4 = this.props,\n          t = _this$props4.t,\n          i18n = _this$props4.i18n;\n      var _this$state4 = this.state,\n          listEQARound = _this$state4.listEQARound,\n          currentRound = _this$state4.currentRound,\n          sampleTubeResultConclusionList = _this$state4.sampleTubeResultConclusionList,\n          healthOrgEQARoundList = _this$state4.healthOrgEQARoundList,\n          currentHealthOrgEQARound = _this$state4.currentHealthOrgEQARound,\n          shouldOpenConfirmationDialog = _this$state4.shouldOpenConfirmationDialog,\n          isFinalResult = _this$state4.isFinalResult,\n          listSample = _this$state4.listSample,\n          listResult = _this$state4.listResult,\n          listReagent = _this$state4.listReagent;\n      var columns = [{\n        title: t(\"SampleManagement.tube_code\"),\n        field: \"tubeCode\",\n        width: \"150\"\n      }, {\n        title: t(\"ReportResult.result\"),\n        field: \"result\",\n        align: \"left\",\n        width: \"150\",\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(FormControl, {\n            className: \"w-100\",\n            disabled: true,\n            __self: _this6,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(Select, {\n            native: true,\n            value: _this6.resultValue(rowData.tubeID),\n            onChange: function onChange(event) {\n              return _this6.handleChangeResult(event.target.value, rowData.tubeID);\n            },\n            inputProps: {\n              name: \"result\"\n            },\n            __self: _this6,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 498,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"option\", {\n            value: -2,\n            __self: _this6,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 17\n            }\n          }, t(\"result.none\")), /*#__PURE__*/React.createElement(\"option\", {\n            value: -1,\n            __self: _this6,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 17\n            }\n          }, t(\"result.negative\")), /*#__PURE__*/React.createElement(\"option\", {\n            value: 0,\n            __self: _this6,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 511,\n              columnNumber: 17\n            }\n          }, t(\"result.indertermine\")), /*#__PURE__*/React.createElement(\"option\", {\n            value: 1,\n            __self: _this6,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 17\n            }\n          }, t(\"result.positive\"))));\n        }\n      }];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"m-sm-30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mb-sm-30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Helmet, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"title\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 15\n        }\n      }, t(\"ResultsOfUnitsByReagentGroup.title\"), \" | \", t(\"web_site\"))), /*#__PURE__*/React.createElement(Breadcrumb, {\n        routeSegments: [{\n          name: t(\"ReportResult.title\"),\n          path: \"/directory/apartment\"\n        }, {\n          name: t(\"ResultsOfUnitsByReagentGroup.title\")\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        md: 4,\n        sm: 4,\n        xs: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Autocomplete, {\n        size: \"small\",\n        id: \"combo-box\",\n        options: listEQARound,\n        className: \"flex-end\",\n        getOptionLabel: function getOptionLabel(option) {\n          return option.code != null && typeof option.code != \"undefined\" ? option.code : \"\";\n        },\n        onChange: function onChange(event, newValue) {\n          return _this6.handleSelectEQARound(newValue);\n        },\n        value: currentRound,\n        renderInput: function renderInput(params) {\n          return /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n            label: t(\"EQAResultReportConclusion.select_eqa_round\"),\n            variant: \"outlined\",\n            __self: _this6,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 19\n            }\n          }));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        md: 4,\n        sm: 4,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"mb-16 align-bottom\",\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: this.exportToExcel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 15\n        }\n      }, t('general.exportToExcel')))), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 11\n        }\n      }, this.state.listSample.length == 0 && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 52\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 15\n        }\n      }, t(\"EQAResultReportConclusion.no_data\"))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 13\n        }\n      }, listSample && listSample.length != 0 && this.state.listResult && this.state.listResult.length != 0 && /*#__PURE__*/React.createElement(Paper, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 117\n        }\n      }, /*#__PURE__*/React.createElement(TableContainer, {\n        style: {\n          maxHeight: 1000\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(Table, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(TableHead, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff'\n        },\n        rowSpan: 2,\n        width: \"50px\",\n        align: \"center\",\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 31\n        }\n      }, t('ResultsOfTheUnits.STT')), /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff'\n        },\n        rowSpan: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 31\n        }\n      }, t('ResultsOfUnitsByReagentGroup.countHealthOrg')), /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff'\n        },\n        rowSpan: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 33\n        }\n      }, t('EqaResult.reagent')), listSample && this.renderRowHead()), /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 29\n        }\n      }, listSample && this.renderRowResultHead())), /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 27\n        }\n      }, listReagent && listReagent.map(function (sample, index) {\n        return _this6.renderResultDetails(sample, index);\n      }))))))), /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        title: t(\"confirm\"),\n        open: shouldOpenConfirmationDialog,\n        onConfirmDialogClose: this.handleDialogClose,\n        onYesClick: this.handleConfirmUpdateResult,\n        text: t(\"EQAResultReportConclusion.confirm_update_result\"),\n        Yes: t(\"general.Yes\"),\n        No: t(\"general.No\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n\n  return ResultsOfUnitsByReagentGroup;\n}(React.Component);\n\nexport default ResultsOfUnitsByReagentGroup;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/ResultsOfUnitsByReagentGroup/ResultsOfUnitsByReagentGroup.jsx"],"names":["InputAdornment","Input","Grid","Button","Select","TextField","Table","TableHead","TableRow","FormControlLabel","Paper","TableContainer","Checkbox","TableCell","FormControl","TableBody","shortid","createMuiTheme","React","Component","ReactDOM","MaterialTable","MTableToolbar","useTranslation","withTranslation","Trans","searchByPage","getAllEQARound","getSampleSetByRoundID","getListResultByRoundId","getByReportReagent","exportToExcel","Breadcrumb","ConfirmationDialog","Helmet","toast","Autocomplete","getCurrentUser","LocalConstants","saveAs","getAllResultByHealthOrgEQARoundId","getResultReportById","getItemById","configure","autoClose","draggable","limit","ResultsOfUnitsByReagentGroup","props","state","sampleTubeResultConclusionList","listEQARound","currentRound","healthOrgEQARoundList","currentHealthOrgEQARound","shouldOpenConfirmationDialog","isFinalResult","shouldOpenEQAResultReportDialog","listSample","isCheckUpdate","listResult","handleDialogClose","setState","handleSelectEQARound","value","id","then","res","listSampleSetDetail","listSampleSet","data","forEach","e","details","sort","a","b","sampleCode","list","reagent","listReagent","sampleCodeId","result","el","sampleResult","sample","listItem","content","handleChangeResult","dto","tubeID","handleChangeNote","note","resultValue","rowDataID","item","find","noteValue","handleChange","event","source","persist","isActive","target","checked","handleOKEditClose","shouldOpenConfirmationEditDialog","handleSelectHealthOrg","t","searchObject","warn","blob","Blob","type","catch","err","pageIndex","pageSize","onSelectEvent","handleDelete","handleClick","titleCell","length","generate","map","index","renderColHeadResult","renderColHeadFirst","title","renderHeadResultCells","code","renderHeadCells","backgroundColor","color","renderSample","cellContentByMethod","isCheck","typeMethod","EQAResultReportTypeMethod","Elisa","FastTest","SERODIA","ECL","sttCell","healthOrgCode","titleTypeMethod","healthOrgId","reagentId","push","cell","renderCells","i18n","contentCell","columns","field","width","align","render","rowData","name","path","option","newValue","params","maxHeight","renderRowHead","renderRowResultHead","renderResultDetails","handleConfirmUpdateResult"],"mappings":"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","sourcesContent":["import {\r\n    InputAdornment,\r\n    Input,\r\n    Grid,\r\n    Button,\r\n    Select,\r\n    TextField,Table,TableHead,TableRow,\r\n    FormControlLabel,Paper,TableContainer,\r\n    Checkbox,TableCell ,FormControl,TableBody\r\n  } from \"@material-ui/core\";\r\n  import shortid from \"shortid\";\r\n  import { createMuiTheme } from \"@material-ui/core/styles\";\r\n  import React, { Component } from \"react\";\r\n  import ReactDOM from \"react-dom\";\r\n  import MaterialTable, { MTableToolbar } from \"material-table\";\r\n  import { useTranslation, withTranslation, Trans } from \"react-i18next\";\r\n  import { searchByPage as getAllEQARound } from \"../EQARound/EQARoundService\";\r\n  import { getSampleSetByRoundID,getListResultByRoundId,getByReportReagent,exportToExcel } from \"./ResultsOfUnitsByReagentGroupService\";\r\n  import { Breadcrumb, ConfirmationDialog } from \"egret\";\r\n  import { Helmet } from \"react-helmet\";\r\n  import { toast } from \"react-toastify\";\r\n  import Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n  import \"react-toastify/dist/ReactToastify.css\";\r\n  import {getCurrentUser} from \"../User/UserService\"\r\n  import LocalConstants from \"./Constants\";\r\n  import { saveAs } from 'file-saver';\r\n//   import { updateResultReportConclusionBySampleTube } from \"./EQAResultReportConclusionServices\";\r\n//   import { getEQASampleTubeResultConclusionDtoByHealthOrgEQARoundId } from \"./EQAResultReportConclusionServices\";\r\n  import { getAllResultByHealthOrgEQARoundId, getResultReportById,getItemById } from \"../ResultsOfTheUnits/ResultsOfTheUnitsService\";\r\n  toast.configure({\r\n    autoClose: 1000,\r\n    draggable: false,\r\n    limit:3\r\n  });\r\n  class ResultsOfUnitsByReagentGroup extends React.Component {\r\n    state = {\r\n      sampleTubeResultConclusionList: [],\r\n      listEQARound: [],\r\n      currentRound: null,\r\n      healthOrgEQARoundList: [],\r\n      currentHealthOrgEQARound: null,\r\n      shouldOpenConfirmationDialog: false,\r\n      isFinalResult:false,\r\n      shouldOpenEQAResultReportDialog:false,\r\n      listSample : [],\r\n      isCheckUpdate:false,\r\n      listResult:[]\r\n    };\r\n  \r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n  \r\n    componentWillMount (){\r\n    }\r\n    componentDidMount() {\r\n      const searchObject = { pageIndex: 0, pageSize: 1000000 };\r\n      getAllEQARound(searchObject).then(res => {\r\n        this.setState({ listEQARound: res.data.content });\r\n      },()=>{\r\n        \r\n      });\r\n    }\r\n  \r\n    \r\n  \r\n    handleDialogClose = () => {\r\n      this.setState({\r\n        shouldOpenConfirmationDialog: false,\r\n        shouldOpenEQAResultReportDialog:false,\r\n      },()=>{\r\n        // console.log(this.state.sampleTubeResultConclusionList)\r\n      });\r\n    };\r\n  \r\n    handleSelectEQARound = value => {\r\n      if (value != null && value != \"\") {\r\n\r\n        \r\n        getSampleSetByRoundID(value.id).then(res => {\r\n            // console.log(res.data)\r\n            let listSampleSetDetail =[]\r\n            let listSampleSet = res.data\r\n            listSampleSet.forEach(e=>{\r\n                listSampleSetDetail = e.details\r\n            })\r\n            listSampleSetDetail.sort((a, b) => (a.sampleCode > b.sampleCode)  ? 1  : -1)\r\n          this.setState({\r\n            currentHealthOrgEQARound: null,\r\n            sampleTubeResultConclusionList: [],\r\n            currentRound: value,\r\n            healthOrgEQARoundList: res.data,\r\n            listSample: listSampleSetDetail\r\n          },()=>{\r\n\r\n            getByReportReagent(value.id).then(res=>{\r\n                let list = res.data;\r\n                list.sort((a, b) => (a.reagent > b.reagent) ? 1 : -1);\r\n                this.setState({listReagent:res.data},()=>{\r\n                    let {listSample,listReagent} = this.state\r\n                    listSample.forEach(e=>{\r\n                        let sampleCodeId = e.sampleCode\r\n                        let result = sampleCodeId +\"-result\"\r\n                        listReagent.forEach(el =>{\r\n                            el[result] = e.sampleResult    \r\n                            el[sampleCodeId] = e.sample.id\r\n                                this.setState({listReagent},()=>{\r\n                                    })\r\n                    })\r\n                })\r\n                \r\n                    \r\n                })\r\n            })\r\n\r\n            getListResultByRoundId(value.id).then(res=>{\r\n                let {listSample,listReagent} = this.state\r\n                let {listResult}= this.state\r\n                let listItem = [...res.data]\r\n                listResult = listItem\r\n                let content = {};\r\n                let list = [...res.data]\r\n                // listReagent.forEach(e=>{\r\n                    \r\n                //     listSample.forEach(el =>{\r\n                //         let sampleCode = e.sampleCode\r\n                //         if(e.sample != null && el.sampleId != null\r\n                //             && e.sample.id == el.sampleId){\r\n                //                 e[${sampleCode}] = el.result\r\n                //                 content\r\n                //             }\r\n                //     })\r\n                //     listResult.push(content)\r\n                // })\r\n                \r\n                this.setState({listResult},()=>{\r\n                // console.log(this.state.listResult)\r\n                // console.log(this.state.listReagent)\r\n\r\n                })\r\n            })\r\n          });\r\n        });\r\n\r\n        \r\n      } else {\r\n        this.setState({\r\n          currentRound: null,\r\n          currentHealthOrgEQARound: null,\r\n          healthOrgEQARoundList: [],\r\n          sampleTubeResultConclusionList: [],\r\n          listSample: []\r\n        });\r\n      }\r\n    };\r\n  \r\n    \r\n  \r\n    handleChangeResult = (result, id) => {\r\n      let { sampleTubeResultConclusionList } = this.state;\r\n      for (let dto of sampleTubeResultConclusionList) {\r\n        if (dto.tubeID === id) {\r\n          dto.result = result;\r\n        }\r\n      }\r\n      this.setState({\r\n        sampleTubeResultConclusionList\r\n      });\r\n    };\r\n  \r\n    handleChangeNote = (note, id) => {\r\n      let { sampleTubeResultConclusionList } = this.state;\r\n      for (let dto of sampleTubeResultConclusionList) {\r\n        if (dto.tubeID === id) {\r\n          dto.note = note;\r\n        }\r\n      }\r\n      this.setState({\r\n        sampleTubeResultConclusionList\r\n      });\r\n    };\r\n    resultValue = rowDataID => {\r\n      const item = this.state.sampleTubeResultConclusionList.find(\r\n        dto => dto.tubeID === rowDataID\r\n      );\r\n      if (typeof item != \"undefined\") {\r\n        return item.result != null ? item.result : \"\";\r\n      }\r\n      return \"\";\r\n    };\r\n  \r\n    noteValue = rowDataID => {\r\n      const item = this.state.sampleTubeResultConclusionList.find(\r\n        dto => dto.tubeID === rowDataID\r\n      );\r\n      if (typeof item != \"undefined\") {\r\n        return item.note != null ? item.note : \"\";\r\n      }\r\n      return \"\";\r\n    };\r\n   \r\n    handleChange = (event, source) => {\r\n      event.persist();\r\n      if (source === \"switch\") {\r\n        this.setState({ isActive: event.target.checked });\r\n        return;\r\n      }\r\n      if(source === \"isFinalResult\"){\r\n        this.setState({isFinalResult:event.target.checked})\r\n      }\r\n  \r\n    };\r\n  \r\n    handleOKEditClose = () => {\r\n      this.setState({\r\n        shouldOpenEQAResultReportDialog: false,\r\n        shouldOpenConfirmationDialog: false,\r\n        shouldOpenConfirmationEditDialog:false,\r\n      },()=>{\r\n        this.handleSelectHealthOrg(this.state.currentHealthOrgEQARound)\r\n      });\r\n      // this.setPage(0);\r\n    };\r\n  \r\n    renderRowResultHead(){\r\n        let { onSelectEvent, handleDelete, handleClick } = this.props;\r\n      let { listSample } = this.state;\r\n      let titleCell = null;\r\n      if (listSample != null && listSample.length > 0) {\r\n        listSample.forEach(item => {\r\n            // console.log(item)\r\n          if (!titleCell) {\r\n            titleCell = <TableCell key={shortid.generate()} className=\"px-0\" align=\"left\">\r\n              {item.sampleResult}\r\n            </TableCell>\r\n          } else {\r\n            titleCell += <TableCell key={shortid.generate()} className=\"px-0\" align=\"left\">\r\n              {item.sampleResult}\r\n            </TableCell>\r\n          }\r\n          \r\n        });\r\n        \r\n      }\r\n  \r\n      return (\r\n        <React.Fragment>\r\n          {listSample.map((item, index) => this.renderColHeadResult(item))}\r\n        </React.Fragment>\r\n      )\r\n    }\r\n\r\n\r\n\r\n    renderRowHead() {\r\n      let { onSelectEvent, handleDelete, handleClick } = this.props;\r\n      let { listSample } = this.state;\r\n      let titleCell = null;\r\n      if (listSample != null && listSample.length > 0) {\r\n        listSample.forEach(item => {\r\n            // console.log(item)\r\n          if (!titleCell) {\r\n            titleCell = <TableCell key={shortid.generate()} className=\"px-0\" align=\"left\">\r\n              {item.sampleCode}\r\n            </TableCell>\r\n          } else {\r\n            titleCell += <TableCell key={shortid.generate()} className=\"px-0\" align=\"left\">\r\n              {item.sampleCode}\r\n            </TableCell>\r\n          }\r\n          \r\n        });\r\n        \r\n      }\r\n  \r\n      return (\r\n        <React.Fragment>\r\n          {listSample.map((item, index) => this.renderColHeadFirst(item))}\r\n        </React.Fragment>\r\n      )\r\n    }\r\n\r\n\r\n    renderColHeadResult(item){\r\n        if(item.sampleResult != null){\r\n            if(item.sampleResult === -1 ){\r\n                item.title = \"Âm tính\";\r\n            }else if(item.sampleResult === 0){\r\n                item.title = \"Không xác định\";\r\n            }else if(item.sampleResult === 1){\r\n                item.title = \"Dương tính\";\r\n            }\r\n            \r\n          }\r\n          \r\n          return (\r\n            this.renderHeadResultCells(item)\r\n          )\r\n    }\r\n\r\n    renderColHeadFirst(item) {\r\n      if(item.code != null){\r\n        item.title = item.sampleCode;\r\n      }\r\n      \r\n      return (\r\n        this.renderHeadCells(item)\r\n      )\r\n    }\r\n\r\n    renderHeadResultCells(item){\r\n        if (item == null) {\r\n            item = {};\r\n          }\r\n          let titleCell = <TableCell style ={{backgroundColor: '#358600',\r\n          color:'#fff',}}\r\n           key={shortid.generate()} \r\n           className=\"px-0\" align=\"left\" >\r\n            {item.title}\r\n          </TableCell>\r\n    \r\n        \r\n          return (\r\n            <React.Fragment>\r\n              {titleCell}\r\n            </React.Fragment>\r\n          )\r\n    }\r\n\r\n    renderHeadCells(item) {\r\n      if (item == null) {\r\n        item = {};\r\n      }\r\n      let titleCell = <TableCell style ={{backgroundColor: '#358600',\r\n      color:'#fff',}}\r\n       key={shortid.generate()} \r\n       className=\"px-0\" align=\"left\" >\r\n        {item.title}\r\n      </TableCell>\r\n\r\n    \r\n      return (\r\n        <React.Fragment>\r\n          {titleCell}\r\n        </React.Fragment>\r\n      )\r\n    }\r\nrenderResultDetails(sample, index) {\r\n      return (\r\n        <React.Fragment>\r\n          <TableRow>\r\n            {this.renderSample(sample, index)}\r\n          </TableRow>\r\n        </React.Fragment>\r\n      )\r\n    }\r\nrenderSample(item, index) {\r\n      let {listResult,listSample} = this.state;\r\n      let cellContentByMethod = [];\r\n      let isCheck = false\r\n      if(item.typeMethod != null){\r\n        if(item.typeMethod === LocalConstants.EQAResultReportTypeMethod.Elisa ){\r\n            item.title = \"Elisa\";\r\n          }else if(item.typeMethod === LocalConstants.EQAResultReportTypeMethod.FastTest){\r\n            item.title = \"FastTest\";\r\n          }else if(item.typeMethod === LocalConstants.EQAResultReportTypeMethod.SERODIA){\r\n            item.title = \"Serodioa\";\r\n          }else if(item.typeMethod === LocalConstants.EQAResultReportTypeMethod.ECL){\r\n            item.title = \"Eclia\";\r\n           }\r\n      }\r\n\r\n      let sttCell = <TableCell className=\"px-0\" align=\"center\">\r\n      {item.healthOrgCode}\r\n    </TableCell>\r\n    let titleCell = <TableCell className=\"px-0\" align=\"left\">\r\n      { item ? item.reagent : ''}\r\n    </TableCell>\r\n\r\nlet titleTypeMethod = <TableCell className=\"px-0\" align=\"left\">\r\n{ item ? item.title : ''}\r\n</TableCell>\r\nlistResult.forEach(el=>{\r\n    if(item.healthOrgId == el.healthOrgId && item.typeMethod == el.typeMethod && item.reagentId == el.reagentId){\r\n        cellContentByMethod.push(el)\r\n    }\r\n})\r\n    // listSample.forEach(e =>{\r\n    //     let sampleCodeId = e.sampleCode\r\n    //     let result = sampleCodeId +\"-result\"\r\n    //     listResult.forEach(el=>{\r\n    //         if(item[sampleCodeId] == el.sampleId && item.typeMethod == el.typeMethod && \r\n    //             item.){\r\n\r\n    //         }\r\n    //     })\r\n    // })  \r\n    cellContentByMethod.sort((a, b) => (a.sampleCode > b.sampleCode)  ? 1  : -1)\r\n    //   console.log(cellContentByMethod)\r\n      return (\r\n        <React.Fragment>\r\n        {titleTypeMethod}\r\n          {sttCell}\r\n          {titleCell}\r\n          {cellContentByMethod.map((cell, index) => this.renderCells(cell))}\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  \r\n    renderCells(item) {\r\n      let { t, i18n } = this.props;\r\n      if (item == null) {\r\n        item = {};\r\n      }\r\n      \r\n      let contentCell = <TableCell key={shortid.generate()} className=\"px-0\" align=\"left\">\r\n        {\r\n          item.result == 1 ? (\r\n            <small className=\"border-radius-4 bg-primary text-white px-8 py-2 \">\r\n              \r\n                {t('result.positive')}\r\n              \r\n            </small>\r\n          ) : (\r\n              <small className=\"border-radius-4 bg-light-gray px-8 py-2 \">\r\n              {\r\n                  item.result == -2 ? (\r\n                    t('result.none')\r\n                  ) : (\r\n                      item.result == -1 ? (\r\n                        t('result.negative')\r\n                      ) : (\r\n                          item.result == 0 ? (\r\n                            t('result.indertermine')\r\n                          ) : (item.result == 2 ? (\r\n                            t('EQAResultReportElisa.Result.confirms')\r\n                          ):(\r\n                              ''\r\n                            ))\r\n                        )\r\n                    )\r\n                }\r\n              </small>\r\n            )\r\n        }\r\n      </TableCell>\r\n      return (\r\n        <React.Fragment>\r\n          {contentCell}\r\n        </React.Fragment>\r\n      )\r\n    }\r\n    exportToExcel = () => {\r\n      const { t } = this.props;\r\n      let searchObject = {}\r\n      if(this.state.currentRound == null || this.state.currentRound.id == \"\"){\r\n        toast.warn(t(\"EQASampleSet.please_select_eqa_round\"))\r\n        return\r\n      }\r\n        exportToExcel(this.state.currentRound ? this.state.currentRound.id :\"\").then((res) => {\r\n          let blob = new Blob([res.data], {\r\n            type:\r\n              'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n          })\r\n          saveAs(blob, 'ResultsOfUnitsByReagentGroup.xlsx')\r\n        })\r\n        .catch((err) => {\r\n          // console.log(err)\r\n        })\r\n    }\r\n    render() {\r\n      const { t, i18n } = this.props;\r\n  \r\n      const {\r\n        listEQARound,\r\n        currentRound,\r\n        sampleTubeResultConclusionList,\r\n        healthOrgEQARoundList,\r\n        currentHealthOrgEQARound,\r\n        shouldOpenConfirmationDialog,\r\n        isFinalResult,listSample,listResult,listReagent\r\n      } = this.state;\r\n  \r\n      let columns = [\r\n        {\r\n          title: t(\"SampleManagement.tube_code\"),\r\n          field: \"tubeCode\",\r\n          width: \"150\"\r\n        },\r\n        {\r\n          title: t(\"ReportResult.result\"),\r\n          field: \"result\",\r\n          align: \"left\",\r\n          width: \"150\",\r\n          render: rowData => {\r\n            return (\r\n              <FormControl className=\"w-100\" disabled={true}>\r\n              <Select\r\n                native\r\n                value={this.resultValue(rowData.tubeID)}\r\n                onChange={event =>\r\n                  this.handleChangeResult(event.target.value, rowData.tubeID)\r\n                }\r\n                inputProps={{\r\n                  name: \"result\"\r\n                }}\r\n              >\r\n                {/* <option value={\"\"}>{t(\"ReportResult.select_result\")}</option> */}\r\n                <option value={-2}>{t(\"result.none\")}</option>\r\n                <option value={-1}>{t(\"result.negative\")}</option>\r\n                <option value={0}>{t(\"result.indertermine\")}</option>\r\n                <option value={1}>{t(\"result.positive\")}</option>\r\n              </Select>\r\n              </FormControl>\r\n            );\r\n          }\r\n        },\r\n        \r\n      ];\r\n  \r\n      return (\r\n        <div className=\"m-sm-30\">\r\n          <div className=\"mb-sm-30\">\r\n            <Helmet>\r\n              <title>\r\n                {t(\"ResultsOfUnitsByReagentGroup.title\")} | {t(\"web_site\")}\r\n              </title>\r\n            </Helmet>\r\n            <Breadcrumb\r\n              routeSegments={[{ name: t(\"ReportResult.title\"), path: \"/directory/apartment\" },{ name: t(\"ResultsOfUnitsByReagentGroup.title\") }]}\r\n            />\r\n          </div>\r\n\r\n          <Grid container spacing={3}>\r\n            <Grid item md={4} sm={4} xs={4}>\r\n              <Autocomplete\r\n                size=\"small\"\r\n                id=\"combo-box\"\r\n                options={listEQARound}\r\n                className=\"flex-end\"\r\n                getOptionLabel={option =>\r\n                  option.code != null && typeof option.code != \"undefined\"\r\n                    ? option.code\r\n                    : \"\"\r\n                }\r\n                onChange={(event, newValue) =>\r\n                  this.handleSelectEQARound(newValue)\r\n                }\r\n                value={currentRound}\r\n                renderInput={params => (\r\n                  <TextField\r\n                    {...params}\r\n                    label={t(\"EQAResultReportConclusion.select_eqa_round\")}\r\n                    variant=\"outlined\"\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item md={4} sm={4} xs={12}>\r\n              <Button\r\n                className=\"mb-16 align-bottom\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={this.exportToExcel}\r\n                >\r\n                {t('general.exportToExcel')}\r\n              </Button>\r\n            </Grid>\r\n            \r\n          </Grid>\r\n          <Grid container spacing={3}>\r\n          <Grid item >\r\n            {this.state.listSample.length == 0 && (<div>\r\n              <h3>{t(\"EQAResultReportConclusion.no_data\")}</h3>\r\n            </div>)}\r\n            <div>\r\n            {(listSample && listSample.length !=0 &&this.state.listResult && this.state.listResult.length != 0) && (<Paper>\r\n                      <TableContainer style={{ maxHeight: 1000 }}>\r\n                        <Table >\r\n                          <TableHead style ={{backgroundColor: '#358600',\r\n                              color:'#fff',}} >\r\n                            <TableRow>\r\n                              <TableCell \r\n                              style ={{backgroundColor: '#358600',\r\n                                color:'#fff',}}\r\n                                rowSpan={2} width=\"50px\" align=\"center\" className=\"p-0\">{t('ResultsOfTheUnits.STT')}</TableCell>\r\n                              <TableCell style ={{backgroundColor: '#358600',\r\n                                  color:'#fff',}} \r\n                                rowSpan={2}>{t('ResultsOfUnitsByReagentGroup.countHealthOrg')}</TableCell>\r\n                                <TableCell style ={{backgroundColor: '#358600',\r\n                                  color:'#fff',}} \r\n                                rowSpan={2}>{t('EqaResult.reagent')}</TableCell>\r\n                              {\r\n                                (listSample && this.renderRowHead())\r\n                              }\r\n                            </TableRow>\r\n                            <TableRow>\r\n                              {\r\n                                (listSample && this.renderRowResultHead())\r\n                              }\r\n                            </TableRow>\r\n                            {/* <TableRow>\r\n                              {\r\n                                (listSample && this.renderRowResultHead())\r\n                              }\r\n                            </TableRow> */}\r\n                          </TableHead>\r\n                          <TableBody>\r\n                            {\r\n                              (listReagent && listReagent.map((sample, index) => this.renderResultDetails(sample, index)))\r\n                            }\r\n                            {/* <TableRow>\r\n                                {this.renderSample(sample, index)}\r\n                            </TableRow> */}\r\n                          </TableBody>\r\n                          \r\n                        </Table>\r\n                      </TableContainer>\r\n                    </Paper>)}\r\n                  </div>\r\n            \r\n              {/* <MaterialTable\r\n                title={t(\"EQAResultReportConclusion.title\")}\r\n                data={sampleTubeResultConclusionList}\r\n                columns={columns}\r\n                \r\n                options={{\r\n                  selection: false,\r\n                  actionsColumnIndex: -1,\r\n                  paging: false,\r\n                  search: false\r\n                }}\r\n                components={{\r\n                  Toolbar: props => <MTableToolbar {...props} />\r\n                }}\r\n              /> */}\r\n            </Grid>\r\n            <ConfirmationDialog\r\n              title={t(\"confirm\")}\r\n              open={shouldOpenConfirmationDialog}\r\n              onConfirmDialogClose={this.handleDialogClose}\r\n              onYesClick={this.handleConfirmUpdateResult}\r\n              text={t(\"EQAResultReportConclusion.confirm_update_result\")}\r\n              Yes={t(\"general.Yes\")}\r\n              No={t(\"general.No\")}\r\n            />\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  export default ResultsOfUnitsByReagentGroup;\r\n  "]},"metadata":{},"sourceType":"module"}