{"ast":null,"code":"import _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\EQARound\\\\EQAPreparationThePanel.jsx\";\nimport React, { Component } from \"react\";\nimport { Dialog, Button, Grid, FormControlLabel, MenuItem, FormControl, InputLabel, Select, Switch, FormHelperText, InputAdornment, Checkbox, Icon, IconButton } from \"@material-ui/core\";\nimport { ValidatorForm, TextValidator, TextField } from \"react-material-ui-form-validator\";\nimport { getByPage, deleteItem, saveItem, getItemById, checkCode } from \"./EQARoundService\";\nimport EQARoundDialog from \"./EQARoundDialog\";\nimport { generateRandomId } from \"utils\";\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport { getAll } from \"../Personnel/PresonnelService\";\nimport { search as searchByPage } from \"../EQAPlanning/EQAPlanningService\";\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { MuiPickersUtilsProvider, DatePicker, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport EQAPlanningSearchDialog from \"./EQAPlanningSearchDialog\";\nimport '../../../styles/views/_style.scss';\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\ntoast.configure({\n  autoClose: 2000,\n  draggable: false,\n  limit: 3 //etc you get the idea\n\n}); //CHUẨN BỊ BỘ MẪU CHUẨN \n\nvar EQAPreparationThePanel = /*#__PURE__*/function (_React$Component) {\n  _inherits(EQAPreparationThePanel, _React$Component);\n\n  var _super = _createSuper(EQAPreparationThePanel);\n\n  function EQAPreparationThePanel() {\n    var _this;\n\n    _classCallCheck(this, EQAPreparationThePanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {};\n\n    _this.handleChange = function (event, source) {\n      var item = _this.state.item;\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"isManualSetCode\") {\n        item[\"isManualSetCode\"] = event.target.checked;\n\n        _this.setState({\n          item: item\n        });\n      }\n\n      var name = event.target.name;\n      var value = event.target.value;\n      item[name] = value;\n\n      _this.setState({\n        item: item\n      });\n    };\n\n    _this.handleChangeDetailRound = function (number, event, name) {\n      var detailRound = _this.state.item.detailRound;\n      var p = {};\n\n      if (name === \"startDate\" || name === \"endDate\") {\n        if (name === \"startDate\" && event != null) {\n          event.setHours(\"00\");\n          event.setMinutes(\"00\");\n          event.setSeconds(\"00\");\n        }\n\n        if (name === \"endDate\" && event != null) {\n          event.setHours(\"23\");\n          event.setMinutes(\"59\");\n          event.setSeconds(\"00\");\n        }\n\n        p = _objectSpread(_objectSpread({}, detailRound[number]), {}, {\n          [name]: event\n        });\n        p.type = number;\n      } else {\n        p = _objectSpread(_objectSpread({}, detailRound[number]), {}, {\n          [event.target.name]: event.target.value\n        });\n        p.type = number;\n      }\n\n      detailRound.splice(number, 1, p);\n\n      _this.setState({\n        detailRound\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(EQAPreparationThePanel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          item = _this$props.item,\n          listPersonnel = _this$props.listPersonnel;\n      this.setState({\n        item: item,\n        listPersonnel: listPersonnel\n      }, function () {\n        _this2.state.item = item;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state$item2,\n          _this$state$item3,\n          _this$state$item4,\n          _this$state$item5,\n          _this3 = this,\n          _this$state$item6,\n          _this$state$item7,\n          _this$state$item8,\n          _this$state$item9,\n          _this$state$item9$det,\n          _this$state$item10,\n          _this$state$item10$de,\n          _this$state$item11,\n          _this$state$item12,\n          _this$state$item13,\n          _this$state$item14,\n          _this$state$item15,\n          _this$state$item16,\n          _this$state$item17,\n          _this$state$item17$de,\n          _this$state$item18,\n          _this$state$item18$de,\n          _this$state$item19,\n          _this$state$item20,\n          _this$state$item21,\n          _this$state$item22,\n          _this$state$item23,\n          _this$state$item24,\n          _this$state$item25,\n          _this$state$item25$de,\n          _this$state$item26,\n          _this$state$item26$de,\n          _this$state$item27,\n          _this$state$item28,\n          _this$state$item29,\n          _this$state$item30,\n          _this$state$item31,\n          _this$state$item32,\n          _this$state$item33,\n          _this$state$item33$de,\n          _this$state$item34,\n          _this$state$item34$de,\n          _this$state$item35,\n          _this$state$item36,\n          _this$state$item37,\n          _this$state$item38,\n          _this$state$item39,\n          _this$state$item40,\n          _this$state$item41,\n          _this$state$item41$de,\n          _this$state$item42,\n          _this$state$item42$de;\n\n      var _this$props2 = this.props,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n,\n          handleClose = _this$props2.handleClose,\n          handleSelect = _this$props2.handleSelect,\n          isRoleAdmin = _this$props2.isRoleAdmin,\n          selectedItem = _this$props2.selectedItem,\n          open = _this$props2.open,\n          item = _this$props2.item;\n      var _this$state$item = this.state.item,\n          id = _this$state$item.id,\n          name = _this$state$item.name,\n          code = _this$state$item.code,\n          level = _this$state$item.level,\n          isActive = _this$state$item.isActive,\n          hasErrorPerson = _this$state$item.hasErrorPerson,\n          startDate = _this$state$item.startDate,\n          isManualSetCode = _this$state$item.isManualSetCode,\n          endDate = _this$state$item.endDate,\n          sampleSubmissionDeadline = _this$state$item.sampleSubmissionDeadline,\n          registrationStartDate = _this$state$item.registrationStartDate,\n          registrationExpiryDate = _this$state$item.registrationExpiryDate,\n          parent = _this$state$item.parent,\n          isView = _this$state$item.isView,\n          shouldOpenDialog = _this$state$item.shouldOpenDialog,\n          shouldOpenConfirmationDialog = _this$state$item.shouldOpenConfirmationDialog,\n          shouldOpenSearchDialog = _this$state$item.shouldOpenSearchDialog,\n          shouldPlanningSearchDialog = _this$state$item.shouldPlanningSearchDialog,\n          eqaPlanning = _this$state$item.eqaPlanning,\n          detailRound = _this$state$item.detailRound,\n          sampleNumber = _this$state$item.sampleNumber,\n          sampleSetNumber = _this$state$item.sampleSetNumber,\n          healthOrgNumber = _this$state$item.healthOrgNumber,\n          executionTime = _this$state$item.executionTime;\n      var listPersonnel = this.state.listPersonnel;\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: \"mt-16\",\n        style: {\n          width: \"100%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 12,\n        md: 12,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 mt-8\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 31\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 35\n          }\n        }, \" * \"), t(\"EQARound.sampleCharacteristics\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        multiline: true,\n        rows: 4,\n        rowsMax: 12,\n        name: \"sampleCharacteristics\",\n        value: (_this$state$item2 = this.state.item) === null || _this$state$item2 === void 0 ? void 0 : _this$state$item2.sampleCharacteristics,\n        variant: \"outlined\",\n        size: \"small\",\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 23\n        }\n      })), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 17\n        }\n      }, t(\"EQARound.checkingStockSample\")), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        className: \"mb-16 mt-8\",\n        container: true,\n        sm: 12,\n        xs: 12,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        className: \"w-100\",\n        margin: \"none\",\n        id: \"mui-pickers-date\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"EQARound.detail.startDate\")),\n        inputVariant: \"outlined\",\n        size: \"small\",\n        type: \"text\",\n        name: \"startDate\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        invalidDateMessage: t(\"Invalid_Date_Format\"),\n        value: ((_this$state$item3 = this.state.item) === null || _this$state$item3 === void 0 ? void 0 : _this$state$item3.detailRound[4]) ? ((_this$state$item4 = this.state.item) === null || _this$state$item4 === void 0 ? void 0 : _this$state$item4.detailRound[4].startDate) ? (_this$state$item5 = this.state.item) === null || _this$state$item5 === void 0 ? void 0 : _this$state$item5.detailRound[4].startDate : null : null,\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(4, event, \"startDate\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 23\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        className: \"w-100\",\n        margin: \"none\",\n        id: \"mui-pickers-date\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"EQARound.detail.endDate\")),\n        inputVariant: \"outlined\",\n        size: \"small\",\n        type: \"text\",\n        name: \"endDate\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        invalidDateMessage: t(\"Invalid_Date_Format\"),\n        value: ((_this$state$item6 = this.state.item) === null || _this$state$item6 === void 0 ? void 0 : _this$state$item6.detailRound[4]) ? ((_this$state$item7 = this.state.item) === null || _this$state$item7 === void 0 ? void 0 : _this$state$item7.detailRound[4].endDate) ? (_this$state$item8 = this.state.item) === null || _this$state$item8 === void 0 ? void 0 : _this$state$item8.detailRound[4].endDate : null : null,\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(4, event, \"endDate\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 23\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        fullWidth: true,\n        error: hasErrorPerson,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"personnel-simple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 63\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 86\n        }\n      }, \" * \"), \" \", t('EQARound.detail.responsible_by'), \" \")), /*#__PURE__*/React.createElement(Select, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 32\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 55\n          }\n        }, \" * \"), \" \", t('EQARound.detail.responsible_by'), \" \"),\n        value: (_this$state$item9 = this.state.item) === null || _this$state$item9 === void 0 ? void 0 : (_this$state$item9$det = _this$state$item9.detailRound[4]) === null || _this$state$item9$det === void 0 ? void 0 : _this$state$item9$det.personnel,\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(4, event);\n        },\n        inputProps: {\n          name: \"personnel\",\n          id: \"personnel-simple\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 23\n        }\n      }, listPersonnel.map(function (item) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: item.id,\n          value: item.id,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 34\n          }\n        }, item.displayName);\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 30\n          }\n        }, t(\"EQARound.detail.note\")),\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(4, event);\n        },\n        type: \"text\",\n        name: \"note\",\n        variant: \"outlined\",\n        size: \"small\",\n        value: (_this$state$item10 = this.state.item) === null || _this$state$item10 === void 0 ? void 0 : (_this$state$item10$de = _this$state$item10.detailRound[4]) === null || _this$state$item10$de === void 0 ? void 0 : _this$state$item10$de.note,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }\n      }))), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 17\n        }\n      }, t(\"EQARound.collectingSample\")), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        className: \"mb-16 mt-8\",\n        container: true,\n        sm: 12,\n        xs: 12,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        className: \"w-100\",\n        margin: \"none\",\n        id: \"mui-pickers-date\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"EQARound.detail.startDate\")),\n        inputVariant: \"outlined\",\n        size: \"small\",\n        type: \"text\",\n        name: \"startDate\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        invalidDateMessage: t(\"Invalid_Date_Format\"),\n        value: ((_this$state$item11 = this.state.item) === null || _this$state$item11 === void 0 ? void 0 : _this$state$item11.detailRound[5]) ? ((_this$state$item12 = this.state.item) === null || _this$state$item12 === void 0 ? void 0 : _this$state$item12.detailRound[5].startDate) ? (_this$state$item13 = this.state.item) === null || _this$state$item13 === void 0 ? void 0 : _this$state$item13.detailRound[5].startDate : null : null,\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(5, event, \"startDate\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 23\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        className: \"w-100\",\n        margin: \"none\",\n        id: \"mui-pickers-date\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"EQARound.detail.endDate\")),\n        inputVariant: \"outlined\",\n        size: \"small\",\n        type: \"text\",\n        name: \"endDate\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        invalidDateMessage: t(\"Invalid_Date_Format\"),\n        value: ((_this$state$item14 = this.state.item) === null || _this$state$item14 === void 0 ? void 0 : _this$state$item14.detailRound[5]) ? ((_this$state$item15 = this.state.item) === null || _this$state$item15 === void 0 ? void 0 : _this$state$item15.detailRound[5].endDate) ? (_this$state$item16 = this.state.item) === null || _this$state$item16 === void 0 ? void 0 : _this$state$item16.detailRound[5].endDate : null : null,\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(5, event, \"endDate\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 23\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        fullWidth: true,\n        error: hasErrorPerson,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"personnel-simple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 63\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 86\n        }\n      }, \" * \"), \" \", t('EQARound.detail.responsible_by'), \" \")), /*#__PURE__*/React.createElement(Select, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 32\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 55\n          }\n        }, \" * \"), \" \", t('EQARound.detail.responsible_by'), \" \"),\n        value: (_this$state$item17 = this.state.item) === null || _this$state$item17 === void 0 ? void 0 : (_this$state$item17$de = _this$state$item17.detailRound[5]) === null || _this$state$item17$de === void 0 ? void 0 : _this$state$item17$de.personnel,\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(5, event);\n        },\n        inputProps: {\n          name: \"personnel\",\n          id: \"personnel-simple\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 23\n        }\n      }, listPersonnel.map(function (item) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: item.id,\n          value: item.id,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 34\n          }\n        }, item.displayName);\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 30\n          }\n        }, t(\"EQARound.detail.note\")),\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(5, event);\n        },\n        type: \"text\",\n        name: \"note\",\n        variant: \"outlined\",\n        size: \"small\",\n        value: (_this$state$item18 = this.state.item) === null || _this$state$item18 === void 0 ? void 0 : (_this$state$item18$de = _this$state$item18.detailRound[5]) === null || _this$state$item18$de === void 0 ? void 0 : _this$state$item18$de.note,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 21\n        }\n      }))), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 17\n        }\n      }, t(\"EQARound.identifyingSample\")), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        className: \"mb-16 mt-8\",\n        container: true,\n        sm: 12,\n        xs: 12,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        className: \"w-100\",\n        margin: \"none\",\n        id: \"mui-pickers-date\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"EQARound.detail.startDate\")),\n        inputVariant: \"outlined\",\n        size: \"small\",\n        type: \"text\",\n        name: \"startDate\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        invalidDateMessage: t(\"Invalid_Date_Format\"),\n        value: ((_this$state$item19 = this.state.item) === null || _this$state$item19 === void 0 ? void 0 : _this$state$item19.detailRound[6]) ? ((_this$state$item20 = this.state.item) === null || _this$state$item20 === void 0 ? void 0 : _this$state$item20.detailRound[6].startDate) ? (_this$state$item21 = this.state.item) === null || _this$state$item21 === void 0 ? void 0 : _this$state$item21.detailRound[6].startDate : null : null,\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(6, event, \"startDate\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 23\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        className: \"w-100\",\n        margin: \"none\",\n        id: \"mui-pickers-date\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"EQARound.detail.endDate\")),\n        inputVariant: \"outlined\",\n        size: \"small\",\n        type: \"text\",\n        name: \"endDate\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        invalidDateMessage: t(\"Invalid_Date_Format\"),\n        value: ((_this$state$item22 = this.state.item) === null || _this$state$item22 === void 0 ? void 0 : _this$state$item22.detailRound[6]) ? ((_this$state$item23 = this.state.item) === null || _this$state$item23 === void 0 ? void 0 : _this$state$item23.detailRound[6].endDate) ? (_this$state$item24 = this.state.item) === null || _this$state$item24 === void 0 ? void 0 : _this$state$item24.detailRound[6].endDate : null : null,\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(6, event, \"endDate\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 23\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        fullWidth: true,\n        error: hasErrorPerson,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"personnel-simple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 63\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 86\n        }\n      }, \" * \"), \" \", t('EQARound.detail.responsible_by'), \" \")), /*#__PURE__*/React.createElement(Select, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 32\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 55\n          }\n        }, \" * \"), \" \", t('EQARound.detail.responsible_by'), \" \"),\n        value: (_this$state$item25 = this.state.item) === null || _this$state$item25 === void 0 ? void 0 : (_this$state$item25$de = _this$state$item25.detailRound[6]) === null || _this$state$item25$de === void 0 ? void 0 : _this$state$item25$de.personnel,\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(6, event);\n        },\n        inputProps: {\n          name: \"personnel\",\n          id: \"personnel-simple\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 23\n        }\n      }, listPersonnel.map(function (item) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: item.id,\n          value: item.id,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 34\n          }\n        }, item.displayName);\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 30\n          }\n        }, t(\"EQARound.detail.note\")),\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(6, event);\n        },\n        type: \"text\",\n        name: \"note\",\n        variant: \"outlined\",\n        size: \"small\",\n        value: (_this$state$item26 = this.state.item) === null || _this$state$item26 === void 0 ? void 0 : (_this$state$item26$de = _this$state$item26.detailRound[6]) === null || _this$state$item26$de === void 0 ? void 0 : _this$state$item26$de.note,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 21\n        }\n      }))), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 17\n        }\n      }, t(\"EQARound.sampleDilutionAndHomogenous\")), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        className: \"mb-16 mt-8\",\n        container: true,\n        sm: 12,\n        xs: 12,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        className: \"w-100\",\n        margin: \"none\",\n        id: \"mui-pickers-date\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"EQARound.detail.startDate\")),\n        inputVariant: \"outlined\",\n        size: \"small\",\n        type: \"text\",\n        name: \"startDate\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        invalidDateMessage: t(\"Invalid_Date_Format\"),\n        value: ((_this$state$item27 = this.state.item) === null || _this$state$item27 === void 0 ? void 0 : _this$state$item27.detailRound[7]) ? ((_this$state$item28 = this.state.item) === null || _this$state$item28 === void 0 ? void 0 : _this$state$item28.detailRound[7].startDate) ? (_this$state$item29 = this.state.item) === null || _this$state$item29 === void 0 ? void 0 : _this$state$item29.detailRound[7].startDate : null : null,\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(7, event, \"startDate\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 23\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        className: \"w-100\",\n        margin: \"none\",\n        id: \"mui-pickers-date\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"EQARound.detail.endDate\")),\n        inputVariant: \"outlined\",\n        size: \"small\",\n        type: \"text\",\n        name: \"endDate\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        invalidDateMessage: t(\"Invalid_Date_Format\"),\n        value: ((_this$state$item30 = this.state.item) === null || _this$state$item30 === void 0 ? void 0 : _this$state$item30.detailRound[7]) ? ((_this$state$item31 = this.state.item) === null || _this$state$item31 === void 0 ? void 0 : _this$state$item31.detailRound[7].endDate) ? (_this$state$item32 = this.state.item) === null || _this$state$item32 === void 0 ? void 0 : _this$state$item32.detailRound[7].endDate : null : null,\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(7, event, \"endDate\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 23\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        fullWidth: true,\n        error: hasErrorPerson,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"personnel-simple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 63\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 86\n        }\n      }, \" * \"), \" \", t('EQARound.detail.responsible_by'), \" \")), /*#__PURE__*/React.createElement(Select, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 32\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 55\n          }\n        }, \" * \"), \" \", t('EQARound.detail.responsible_by'), \" \"),\n        value: (_this$state$item33 = this.state.item) === null || _this$state$item33 === void 0 ? void 0 : (_this$state$item33$de = _this$state$item33.detailRound[7]) === null || _this$state$item33$de === void 0 ? void 0 : _this$state$item33$de.personnel,\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(7, event);\n        },\n        inputProps: {\n          name: \"personnel\",\n          id: \"personnel-simple\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 23\n        }\n      }, listPersonnel.map(function (item) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: item.id,\n          value: item.id,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 34\n          }\n        }, item.displayName);\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 30\n          }\n        }, t(\"EQARound.detail.note\")),\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(7, event);\n        },\n        type: \"text\",\n        name: \"note\",\n        variant: \"outlined\",\n        size: \"small\",\n        value: (_this$state$item34 = this.state.item) === null || _this$state$item34 === void 0 ? void 0 : (_this$state$item34$de = _this$state$item34.detailRound[7]) === null || _this$state$item34$de === void 0 ? void 0 : _this$state$item34$de.note,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 21\n        }\n      }))), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 17\n        }\n      }, t(\"EQARound.asessingSample\")), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        className: \"mb-16 mt-8\",\n        container: true,\n        sm: 12,\n        xs: 12,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        className: \"w-100\",\n        margin: \"none\",\n        id: \"mui-pickers-date\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"EQARound.detail.startDate\")),\n        inputVariant: \"outlined\",\n        size: \"small\",\n        type: \"text\",\n        name: \"startDate\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        invalidDateMessage: t(\"Invalid_Date_Format\"),\n        value: ((_this$state$item35 = this.state.item) === null || _this$state$item35 === void 0 ? void 0 : _this$state$item35.detailRound[8]) ? ((_this$state$item36 = this.state.item) === null || _this$state$item36 === void 0 ? void 0 : _this$state$item36.detailRound[8].startDate) ? (_this$state$item37 = this.state.item) === null || _this$state$item37 === void 0 ? void 0 : _this$state$item37.detailRound[8].startDate : null : null,\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(8, event, \"startDate\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 23\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        className: \"w-100\",\n        margin: \"none\",\n        id: \"mui-pickers-date\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"EQARound.detail.endDate\")),\n        inputVariant: \"outlined\",\n        size: \"small\",\n        type: \"text\",\n        name: \"endDate\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        invalidDateMessage: t(\"Invalid_Date_Format\"),\n        value: ((_this$state$item38 = this.state.item) === null || _this$state$item38 === void 0 ? void 0 : _this$state$item38.detailRound[8]) ? ((_this$state$item39 = this.state.item) === null || _this$state$item39 === void 0 ? void 0 : _this$state$item39.detailRound[8].endDate) ? (_this$state$item40 = this.state.item) === null || _this$state$item40 === void 0 ? void 0 : _this$state$item40.detailRound[8].endDate : null : null,\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(8, event, \"endDate\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 23\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        fullWidth: true,\n        error: hasErrorPerson,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"personnel-simple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 63\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 86\n        }\n      }, \" * \"), \" \", t('EQARound.detail.responsible_by'), \" \")), /*#__PURE__*/React.createElement(Select, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 32\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 55\n          }\n        }, \" * \"), \" \", t('EQARound.detail.responsible_by'), \" \"),\n        value: (_this$state$item41 = this.state.item) === null || _this$state$item41 === void 0 ? void 0 : (_this$state$item41$de = _this$state$item41.detailRound[8]) === null || _this$state$item41$de === void 0 ? void 0 : _this$state$item41$de.personnel,\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(8, event);\n        },\n        inputProps: {\n          name: \"personnel\",\n          id: \"personnel-simple\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 23\n        }\n      }, listPersonnel.map(function (item) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: item.id,\n          value: item.id,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 34\n          }\n        }, item.displayName);\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 30\n          }\n        }, t(\"EQARound.detail.note\")),\n        onChange: function onChange(event) {\n          return _this3.handleChangeDetailRound(8, event);\n        },\n        type: \"text\",\n        name: \"note\",\n        variant: \"outlined\",\n        size: \"small\",\n        value: (_this$state$item42 = this.state.item) === null || _this$state$item42 === void 0 ? void 0 : (_this$state$item42$de = _this$state$item42.detailRound[8]) === null || _this$state$item42$de === void 0 ? void 0 : _this$state$item42$de.note,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 21\n        }\n      }))))));\n    }\n  }]);\n\n  return EQAPreparationThePanel;\n}(React.Component);\n\nexport default EQAPreparationThePanel;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/EQARound/EQAPreparationThePanel.jsx"],"names":["React","Component","Dialog","Button","Grid","FormControlLabel","MenuItem","FormControl","InputLabel","Select","Switch","FormHelperText","InputAdornment","Checkbox","Icon","IconButton","ValidatorForm","TextValidator","TextField","getByPage","deleteItem","saveItem","getItemById","checkCode","EQARoundDialog","generateRandomId","useTranslation","withTranslation","Trans","Breadcrumb","ConfirmationDialog","getAll","search","searchByPage","AsynchronousAutocomplete","DialogActions","DialogContent","DialogContentText","DialogTitle","Draggable","Paper","MuiPickersUtilsProvider","DatePicker","KeyboardDatePicker","DateFnsUtils","EQAPlanningSearchDialog","toast","configure","autoClose","draggable","limit","EQAPreparationThePanel","state","handleChange","event","source","item","persist","setState","isActive","target","checked","name","value","handleChangeDetailRound","number","detailRound","p","setHours","setMinutes","setSeconds","type","splice","props","listPersonnel","t","i18n","handleClose","handleSelect","isRoleAdmin","selectedItem","open","id","code","level","hasErrorPerson","startDate","isManualSetCode","endDate","sampleSubmissionDeadline","registrationStartDate","registrationExpiryDate","parent","isView","shouldOpenDialog","shouldOpenConfirmationDialog","shouldOpenSearchDialog","shouldPlanningSearchDialog","eqaPlanning","sampleNumber","sampleSetNumber","healthOrgNumber","executionTime","width","color","sampleCharacteristics","personnel","map","displayName","note"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  FormControlLabel,MenuItem,\r\n  FormControl, InputLabel, Select,\r\n  Switch,FormHelperText,\r\n  InputAdornment,\r\n  Checkbox,\r\n  Icon,\r\n  IconButton\r\n} from \"@material-ui/core\";\r\nimport {\r\n  ValidatorForm,\r\n  TextValidator,\r\n  TextField\r\n} from \"react-material-ui-form-validator\";\r\nimport {\r\n  getByPage,\r\n  deleteItem,\r\n  saveItem,\r\n  getItemById,\r\n  checkCode\r\n} from \"./EQARoundService\";\r\nimport EQARoundDialog from \"./EQARoundDialog\";\r\nimport { generateRandomId } from \"utils\";\r\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport { getAll } from \"../Personnel/PresonnelService\";\r\nimport { search as searchByPage } from \"../EQAPlanning/EQAPlanningService\";\r\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { MuiPickersUtilsProvider, DatePicker,KeyboardDatePicker } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport EQAPlanningSearchDialog from \"./EQAPlanningSearchDialog\";\r\nimport '../../../styles/views/_style.scss';\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\ntoast.configure({\r\n    autoClose: 2000,\r\n    draggable: false,\r\n    limit: 3\r\n    //etc you get the idea\r\n});\r\n//CHUẨN BỊ BỘ MẪU CHUẨN \r\nclass EQAPreparationThePanel extends React.Component {\r\n  state = {\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n  handleChange = (event, source) => {\r\n    let { item } = this.state;\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n        this.setState({ isActive: event.target.checked });\r\n        return;\r\n    }\r\n    if (source === \"isManualSetCode\") {\r\n        item[\"isManualSetCode\"] = event.target.checked\r\n        this.setState({ item : item})\r\n    }\r\n    let name =  event.target.name;\r\n    let value = event.target.value;\r\n    item[name] = value;\r\n    this.setState({\r\n       item : item\r\n    });\r\n};\r\n\r\n  handleChangeDetailRound = (number, event, name) => {\r\n      let { detailRound } = this.state.item;\r\n      let p = {}\r\n      if (name === \"startDate\" || name === \"endDate\") {\r\n        if (name === \"startDate\" && event != null) {\r\n          event.setHours(\"00\");\r\n          event.setMinutes(\"00\");\r\n          event.setSeconds(\"00\");\r\n        }\r\n        if (name === \"endDate\" && event != null) {\r\n          event.setHours(\"23\");\r\n          event.setMinutes(\"59\");\r\n          event.setSeconds(\"00\");\r\n        }\r\n        p = {\r\n          ...detailRound[number],\r\n          [name]: event,\r\n        };\r\n        p.type = number\r\n      } else {\r\n        p = {\r\n          ...detailRound[number],\r\n          [event.target.name]: event.target.value,\r\n        };\r\n        p.type = number\r\n      }\r\n      detailRound.splice(number, 1, p)\r\n      this.setState({ detailRound })\r\n    }\r\n\r\n  componentWillMount() {\r\n      let { item, listPersonnel } = this.props;\r\n\r\n      this.setState({ item: item, listPersonnel: listPersonnel}, () => {\r\n          this.state.item = item\r\n      });\r\n  }\r\n\r\n  render() {\r\n      const {\r\n          t,\r\n          i18n,\r\n          handleClose,\r\n          handleSelect,\r\n          isRoleAdmin,\r\n          selectedItem,\r\n          open,\r\n          item,\r\n      } = this.props;\r\n      let {\r\n        id,\r\n        name,\r\n        code,\r\n        level,\r\n        isActive,\r\n        hasErrorPerson,\r\n        startDate,\r\n        isManualSetCode,\r\n        endDate,\r\n        sampleSubmissionDeadline,\r\n        registrationStartDate,\r\n        registrationExpiryDate,\r\n        parent,\r\n        isView,\r\n        shouldOpenDialog,\r\n        shouldOpenConfirmationDialog,\r\n        shouldOpenSearchDialog,\r\n        shouldPlanningSearchDialog,\r\n        eqaPlanning,\r\n        detailRound,\r\n        sampleNumber,\r\n        sampleSetNumber,\r\n        healthOrgNumber,\r\n        executionTime,\r\n      } = this.state.item;\r\n      let { listPersonnel} = this.state;\r\n        return (\r\n            <React.Fragment>\r\n                <Grid container spacing={2}>\r\n                <fieldset className=\"mt-16\" style={{ width: \"100%\" }}>\r\n                <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                      <TextValidator\r\n                          className=\"w-100 mt-8\"\r\n                          label={\r\n                              <span className=\"font\">\r\n                                  <span style={{ color: \"red\" }}> * </span>\r\n                                  {t(\"EQARound.sampleCharacteristics\")}\r\n                              </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          multiline\r\n                          rows={4}\r\n                          rowsMax={12}\r\n                          name=\"sampleCharacteristics\"\r\n                          value={this.state.item?.sampleCharacteristics}\r\n                          variant=\"outlined\"\r\n                          size=\"small\"\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                      />\r\n                  </Grid>\r\n                {/* <legend><span className=\"styleColor\">{t(\"EQARound.preparationThePanel\")}</span></legend> */}\r\n                <span className=\"title\">{t(\"EQARound.checkingStockSample\")}</span>\r\n                <Grid item className=\"mb-16 mt-8\" container sm={12} xs={12} spacing={2}>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                      <KeyboardDatePicker\r\n                        className=\"w-100\"\r\n                        margin=\"none\"\r\n                        id=\"mui-pickers-date\"\r\n                        label={\r\n                          <span className=\"font\">\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"EQARound.detail.startDate\")}\r\n                          </span>\r\n                        }\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        type=\"text\"\r\n                        name=\"startDate\"\r\n                        autoOk={false}\r\n                        format=\"dd/MM/yyyy\"\r\n                        invalidDateMessage={t(\"Invalid_Date_Format\")}\r\n                        value={this.state.item?.detailRound[4] ? this.state.item?.detailRound[4].startDate ? this.state.item?.detailRound[4].startDate : null : null}\r\n                        onChange={\r\n                          event => this.handleChangeDetailRound(4, event, \"startDate\")\r\n                        }\r\n                      />\r\n                    </MuiPickersUtilsProvider>\r\n                  </Grid>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                      <KeyboardDatePicker\r\n                        className=\"w-100\"\r\n                        margin=\"none\"\r\n                        id=\"mui-pickers-date\"\r\n                        label={\r\n                          <span className=\"font\">\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"EQARound.detail.endDate\")}\r\n                          </span>\r\n                        }\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        type=\"text\"\r\n                        name=\"endDate\"\r\n                        autoOk={false}\r\n                        format=\"dd/MM/yyyy\"\r\n                        invalidDateMessage={t(\"Invalid_Date_Format\")}\r\n                        value={this.state.item?.detailRound[4] ? this.state.item?.detailRound[4].endDate ? this.state.item?.detailRound[4].endDate : null : null}\r\n                        onChange={\r\n                          event => this.handleChangeDetailRound(4, event, \"endDate\")\r\n                        }\r\n                      />\r\n                    </MuiPickersUtilsProvider>\r\n                  </Grid>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <FormControl fullWidth={true} error={hasErrorPerson} variant=\"outlined\"\r\n                      size=\"small\">\r\n                      <InputLabel htmlFor=\"personnel-simple\">{<span className=\"font\"><span style={{ color: \"red\" }}> * </span> {t('EQARound.detail.responsible_by')} </span>}</InputLabel>\r\n                      <Select\r\n                        label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span> {t('EQARound.detail.responsible_by')} </span>}\r\n                        value={this.state.item?.detailRound[4]?.personnel}\r\n                        onChange={event => this.handleChangeDetailRound(4, event)}\r\n                        inputProps={{\r\n                          name: \"personnel\",\r\n                          id: \"personnel-simple\"\r\n                        }}\r\n                      >\r\n                        {listPersonnel.map(item => {\r\n                          return <MenuItem key={item.id} value={item.id}>{item.displayName}</MenuItem>;\r\n                        })}\r\n                      </Select>\r\n                       {/* {hasErrorPerson && <FormHelperText>{t(\"general.errorMessages_required\")}</FormHelperText>} */}\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <TextValidator\r\n                      className=\"w-100\"\r\n                      label={<span className=\"font\">{t(\"EQARound.detail.note\")}</span>}\r\n                      onChange={event => this.handleChangeDetailRound(4, event)}\r\n                      type=\"text\"\r\n                      name=\"note\"\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      value={this.state.item?.detailRound[4]?.note}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <span className=\"title\">{t(\"EQARound.collectingSample\")}</span>\r\n                <Grid item className=\"mb-16 mt-8\" container sm={12} xs={12} spacing={2}>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                      <KeyboardDatePicker\r\n                        className=\"w-100\"\r\n                        margin=\"none\"\r\n                        id=\"mui-pickers-date\"\r\n                        label={\r\n                          <span className=\"font\">\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"EQARound.detail.startDate\")}\r\n                          </span>\r\n                        }\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        type=\"text\"\r\n                        name=\"startDate\"\r\n                        autoOk={false}\r\n                        format=\"dd/MM/yyyy\"\r\n                        invalidDateMessage={t(\"Invalid_Date_Format\")}\r\n                        value={this.state.item?.detailRound[5] ? this.state.item?.detailRound[5].startDate ? this.state.item?.detailRound[5].startDate : null : null}\r\n                        onChange={\r\n                          event => this.handleChangeDetailRound(5, event, \"startDate\")\r\n                        }\r\n                      />\r\n                    </MuiPickersUtilsProvider>\r\n                  </Grid>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                      <KeyboardDatePicker\r\n                        className=\"w-100\"\r\n                        margin=\"none\"\r\n                        id=\"mui-pickers-date\"\r\n                        label={\r\n                          <span className=\"font\">\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"EQARound.detail.endDate\")}\r\n                          </span>\r\n                        }\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        type=\"text\"\r\n                        name=\"endDate\"\r\n                        autoOk={false}\r\n                        format=\"dd/MM/yyyy\"\r\n                        invalidDateMessage={t(\"Invalid_Date_Format\")}\r\n                        value={this.state.item?.detailRound[5] ? this.state.item?.detailRound[5].endDate ? this.state.item?.detailRound[5].endDate : null : null}\r\n                        onChange={\r\n                          event => this.handleChangeDetailRound(5, event, \"endDate\")\r\n                        }\r\n                      />\r\n                    </MuiPickersUtilsProvider>\r\n                  </Grid>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <FormControl fullWidth={true} error={hasErrorPerson} variant=\"outlined\"\r\n                      size=\"small\">\r\n                      <InputLabel htmlFor=\"personnel-simple\">{<span className=\"font\"><span style={{ color: \"red\" }}> * </span> {t('EQARound.detail.responsible_by')} </span>}</InputLabel>\r\n                      <Select\r\n                        label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span> {t('EQARound.detail.responsible_by')} </span>}\r\n                        value={this.state.item?.detailRound[5]?.personnel}\r\n                        onChange={event => this.handleChangeDetailRound(5, event)}\r\n                        inputProps={{\r\n                          name: \"personnel\",\r\n                          id: \"personnel-simple\"\r\n                        }}\r\n                      >\r\n                        {listPersonnel.map(item => {\r\n                          return <MenuItem key={item.id} value={item.id}>{item.displayName}</MenuItem>;\r\n                        })}\r\n                      </Select>\r\n                       {/* {hasErrorPerson && <FormHelperText>{t(\"general.errorMessages_required\")}</FormHelperText>} */}\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <TextValidator\r\n                      className=\"w-100\"\r\n                      label={<span className=\"font\">{t(\"EQARound.detail.note\")}</span>}\r\n                      onChange={event => this.handleChangeDetailRound(5, event)}\r\n                      type=\"text\"\r\n                      name=\"note\"\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      value={this.state.item?.detailRound[5]?.note}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <span className=\"title\">{t(\"EQARound.identifyingSample\")}</span>\r\n                <Grid item className=\"mb-16 mt-8\" container sm={12} xs={12} spacing={2}>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                      <KeyboardDatePicker\r\n                        className=\"w-100\"\r\n                        margin=\"none\"\r\n                        id=\"mui-pickers-date\"\r\n                        label={\r\n                          <span className=\"font\">\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"EQARound.detail.startDate\")}\r\n                          </span>\r\n                        }\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        type=\"text\"\r\n                        name=\"startDate\"\r\n                        autoOk={false}\r\n                        format=\"dd/MM/yyyy\"\r\n                        invalidDateMessage={t(\"Invalid_Date_Format\")}\r\n                        value={this.state.item?.detailRound[6] ? this.state.item?.detailRound[6].startDate ? this.state.item?.detailRound[6].startDate : null : null}\r\n                        onChange={\r\n                          event => this.handleChangeDetailRound(6, event, \"startDate\")\r\n                        }\r\n                      />\r\n                    </MuiPickersUtilsProvider>\r\n                  </Grid>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                      <KeyboardDatePicker\r\n                        className=\"w-100\"\r\n                        margin=\"none\"\r\n                        id=\"mui-pickers-date\"\r\n                        label={\r\n                          <span className=\"font\">\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"EQARound.detail.endDate\")}\r\n                          </span>\r\n                        }\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        type=\"text\"\r\n                        name=\"endDate\"\r\n                        autoOk={false}\r\n                        format=\"dd/MM/yyyy\"\r\n                        invalidDateMessage={t(\"Invalid_Date_Format\")}\r\n                        value={this.state.item?.detailRound[6] ? this.state.item?.detailRound[6].endDate ? this.state.item?.detailRound[6].endDate : null : null}\r\n                        onChange={\r\n                          event => this.handleChangeDetailRound(6, event, \"endDate\")\r\n                        }\r\n                      />\r\n                    </MuiPickersUtilsProvider>\r\n                  </Grid>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <FormControl fullWidth={true} error={hasErrorPerson} variant=\"outlined\"\r\n                      size=\"small\">\r\n                      <InputLabel htmlFor=\"personnel-simple\">{<span className=\"font\"><span style={{ color: \"red\" }}> * </span> {t('EQARound.detail.responsible_by')} </span>}</InputLabel>\r\n                      <Select\r\n                        label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span> {t('EQARound.detail.responsible_by')} </span>}\r\n                        value={this.state.item?.detailRound[6]?.personnel}\r\n                        onChange={event => this.handleChangeDetailRound(6, event)}\r\n                        inputProps={{\r\n                          name: \"personnel\",\r\n                          id: \"personnel-simple\"\r\n                        }}\r\n                      >\r\n                        {listPersonnel.map(item => {\r\n                          return <MenuItem key={item.id} value={item.id}>{item.displayName}</MenuItem>;\r\n                        })}\r\n                      </Select>\r\n                       {/* {hasErrorPerson && <FormHelperText>{t(\"general.errorMessages_required\")}</FormHelperText>} */}\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <TextValidator\r\n                      className=\"w-100\"\r\n                      label={<span className=\"font\">{t(\"EQARound.detail.note\")}</span>}\r\n                      onChange={event => this.handleChangeDetailRound(6, event)}\r\n                      type=\"text\"\r\n                      name=\"note\"\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      value={this.state.item?.detailRound[6]?.note}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <span className=\"title\">{t(\"EQARound.sampleDilutionAndHomogenous\")}</span>\r\n                <Grid item className=\"mb-16 mt-8\" container sm={12} xs={12} spacing={2}>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                      <KeyboardDatePicker\r\n                        className=\"w-100\"\r\n                        margin=\"none\"\r\n                        id=\"mui-pickers-date\"\r\n                        label={\r\n                          <span className=\"font\">\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"EQARound.detail.startDate\")}\r\n                          </span>\r\n                        }\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        type=\"text\"\r\n                        name=\"startDate\"\r\n                        autoOk={false}\r\n                        format=\"dd/MM/yyyy\"\r\n                        invalidDateMessage={t(\"Invalid_Date_Format\")}\r\n                        value={this.state.item?.detailRound[7] ? this.state.item?.detailRound[7].startDate ? this.state.item?.detailRound[7].startDate : null : null}\r\n                        onChange={\r\n                          event => this.handleChangeDetailRound(7, event, \"startDate\")\r\n                        }\r\n                      />\r\n                    </MuiPickersUtilsProvider>\r\n                  </Grid>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                      <KeyboardDatePicker\r\n                        className=\"w-100\"\r\n                        margin=\"none\"\r\n                        id=\"mui-pickers-date\"\r\n                        label={\r\n                          <span className=\"font\">\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"EQARound.detail.endDate\")}\r\n                          </span>\r\n                        }\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        type=\"text\"\r\n                        name=\"endDate\"\r\n                        autoOk={false}\r\n                        format=\"dd/MM/yyyy\"\r\n                        invalidDateMessage={t(\"Invalid_Date_Format\")}\r\n                        value={this.state.item?.detailRound[7] ? this.state.item?.detailRound[7].endDate ? this.state.item?.detailRound[7].endDate : null : null}\r\n                        onChange={\r\n                          event => this.handleChangeDetailRound(7, event, \"endDate\")\r\n                        }\r\n                      />\r\n                    </MuiPickersUtilsProvider>\r\n                  </Grid>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <FormControl fullWidth={true} error={hasErrorPerson} variant=\"outlined\"\r\n                      size=\"small\">\r\n                      <InputLabel htmlFor=\"personnel-simple\">{<span className=\"font\"><span style={{ color: \"red\" }}> * </span> {t('EQARound.detail.responsible_by')} </span>}</InputLabel>\r\n                      <Select\r\n                        label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span> {t('EQARound.detail.responsible_by')} </span>}\r\n                        value={this.state.item?.detailRound[7]?.personnel}\r\n                        onChange={event => this.handleChangeDetailRound(7, event)}\r\n                        inputProps={{\r\n                          name: \"personnel\",\r\n                          id: \"personnel-simple\"\r\n                        }}\r\n                      >\r\n                        {listPersonnel.map(item => {\r\n                          return <MenuItem key={item.id} value={item.id}>{item.displayName}</MenuItem>;\r\n                        })}\r\n                      </Select>\r\n                       {/* {hasErrorPerson && <FormHelperText>{t(\"general.errorMessages_required\")}</FormHelperText>} */}\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <TextValidator\r\n                      className=\"w-100\"\r\n                      label={<span className=\"font\">{t(\"EQARound.detail.note\")}</span>}\r\n                      onChange={event => this.handleChangeDetailRound(7, event)}\r\n                      type=\"text\"\r\n                      name=\"note\"\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      value={this.state.item?.detailRound[7]?.note}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <span className=\"title\">{t(\"EQARound.asessingSample\")}</span>\r\n                <Grid item className=\"mb-16 mt-8\" container sm={12} xs={12} spacing={2}>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                      <KeyboardDatePicker\r\n                        className=\"w-100\"\r\n                        margin=\"none\"\r\n                        id=\"mui-pickers-date\"\r\n                        label={\r\n                          <span className=\"font\">\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"EQARound.detail.startDate\")}\r\n                          </span>\r\n                        }\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        type=\"text\"\r\n                        name=\"startDate\"\r\n                        autoOk={false}\r\n                        format=\"dd/MM/yyyy\"\r\n                        invalidDateMessage={t(\"Invalid_Date_Format\")}\r\n                        value={this.state.item?.detailRound[8] ? this.state.item?.detailRound[8].startDate ? this.state.item?.detailRound[8].startDate : null : null}\r\n                        onChange={\r\n                          event => this.handleChangeDetailRound(8, event, \"startDate\")\r\n                        }\r\n                      />\r\n                    </MuiPickersUtilsProvider>\r\n                  </Grid>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                      <KeyboardDatePicker\r\n                        className=\"w-100\"\r\n                        margin=\"none\"\r\n                        id=\"mui-pickers-date\"\r\n                        label={\r\n                          <span className=\"font\">\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"EQARound.detail.endDate\")}\r\n                          </span>\r\n                        }\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        type=\"text\"\r\n                        name=\"endDate\"\r\n                        autoOk={false}\r\n                        format=\"dd/MM/yyyy\"\r\n                        invalidDateMessage={t(\"Invalid_Date_Format\")}\r\n                        value={this.state.item?.detailRound[8] ? this.state.item?.detailRound[8].endDate ? this.state.item?.detailRound[8].endDate : null : null}\r\n                        onChange={\r\n                          event => this.handleChangeDetailRound(8, event, \"endDate\")\r\n                        }\r\n                      />\r\n                    </MuiPickersUtilsProvider>\r\n                  </Grid>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <FormControl fullWidth={true} error={hasErrorPerson} variant=\"outlined\"\r\n                      size=\"small\">\r\n                      <InputLabel htmlFor=\"personnel-simple\">{<span className=\"font\"><span style={{ color: \"red\" }}> * </span> {t('EQARound.detail.responsible_by')} </span>}</InputLabel>\r\n                      <Select\r\n                        label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span> {t('EQARound.detail.responsible_by')} </span>}\r\n                        value={this.state.item?.detailRound[8]?.personnel}\r\n                        onChange={event => this.handleChangeDetailRound(8, event)}\r\n                        inputProps={{\r\n                          name: \"personnel\",\r\n                          id: \"personnel-simple\"\r\n                        }}\r\n                      >\r\n                        {listPersonnel.map(item => {\r\n                          return <MenuItem key={item.id} value={item.id}>{item.displayName}</MenuItem>;\r\n                        })}\r\n                      </Select>\r\n                       {/* {hasErrorPerson && <FormHelperText>{t(\"general.errorMessages_required\")}</FormHelperText>} */}\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                    <TextValidator\r\n                      className=\"w-100\"\r\n                      label={<span className=\"font\">{t(\"EQARound.detail.note\")}</span>}\r\n                      onChange={event => this.handleChangeDetailRound(8, event)}\r\n                      type=\"text\"\r\n                      name=\"note\"\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      value={this.state.item?.detailRound[8]?.note}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </fieldset> \r\n                </Grid>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EQAPreparationThePanel"]},"metadata":{},"sourceType":"module"}