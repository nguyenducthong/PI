{"ast":null,"code":"import _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\HomePage\\\\LaboratoryInformation.jsx\";\nimport React, { Component } from \"react\";\nimport { Dialog, Button, Grid, DialogActions, FormControlLabel, InputAdornment, Checkbox, FormHelperText, Icon, IconButton } from \"@material-ui/core\";\nimport Draggable from 'react-draggable';\nimport Paper from '@material-ui/core/Paper';\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport { ValidatorForm, TextValidator, TextField, SelectValidator } from \"react-material-ui-form-validator\";\nimport { getCurrentUser } from \"../page-layouts/UserProfileService\";\nimport authService from \"../../services/jwtAuthService\";\nimport { searchByPage as getHealthOrg } from \"../EQAHealthOrg/EQAHealthOrgService\";\nimport { checkEmail, saveItem, getItemById } from \"../EQAHealthOrg/EQAHealthOrgService\";\nimport { toast } from 'react-toastify';\n\nvar LaboratoryInformation = /*#__PURE__*/function (_Component) {\n  _inherits(LaboratoryInformation, _Component);\n\n  var _super = _createSuper(LaboratoryInformation);\n\n  function LaboratoryInformation() {\n    var _this;\n\n    _classCallCheck(this, LaboratoryInformation);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      name: \"\",\n      taxCodeOfTheUnit: \"\",\n      code: \"\",\n      specifyTestPurpose: \"\",\n      address: \"\",\n      specifyLevel: \"\",\n      positiveAffirmativeRight: true,\n      shouldOpenSearchDialog: false,\n      shouldOpenConfirmationDialog: false,\n      qualificationSelect: [],\n      qualification: {},\n      officerPosion: \"\",\n      unitCodeOfProgramPEQAS: \"\",\n      testpurposeSelect: [],\n      testPurpose1: {},\n      testPurpose2: {},\n      testPurpose3: {},\n      testPurpose4: {},\n      levelHealOrg: [],\n      healthOrgTypeSelect: [],\n      healthOrgType: [],\n      administrativeUnit: \"\",\n      fax: \"\",\n      isView: true,\n      shouldOpenAdministrativeUnitsPopup: false,\n      level: {},\n      sampleReceiptDate: new Date(),\n      sampleRecipient: \"\",\n      specifySampleStatus: \"\",\n      specifyQualification: \"\",\n      isManualSetCode: false,\n      hasErrorLever: false,\n      levelId: \"\",\n      loading: false\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"isManagementUnit\") {\n        _this.setState({\n          isManagementUnit: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"positiveAffirmativeRight\") {\n        _this.setState({\n          positiveAffirmativeRight: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"isManualSetCode\") {\n        _this.setState({\n          isManualSetCode: event.target.checked\n        });\n\n        return;\n      }\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.handleChangeAdministrativeUnitPopupClose = function () {\n      _this.setState({\n        shouldOpenAdministrativeUnitsPopup: false\n      }, function () {});\n    };\n\n    _this.handleSelectAdministrativeUnit = function (administrativeUnit) {\n      if (administrativeUnit && administrativeUnit.id) {\n        _this.setState({\n          administrativeUnit\n        });\n\n        _this.handleChangeAdministrativeUnitPopupClose();\n      }\n    };\n\n    _this.handleChangeQualification = function (event, source) {\n      var qualificationSelect = _this.state.qualificationSelect;\n\n      _this.setState({\n        qualification: qualificationSelect.find(function (item) {\n          return item.id == event.target.value;\n        }),\n        qualificationId: event.target.value\n      });\n    };\n\n    _this.handleChangetestpurpose1 = function (event, source) {\n      var testpurposeSelect = _this.state.testpurposeSelect;\n\n      _this.setState({\n        testPurpose1: testpurposeSelect.find(function (item) {\n          return item.id == event.target.value;\n        }),\n        testPurpose1Id: event.target.value\n      });\n    };\n\n    _this.handleChangetestpurpose2 = function (event, source) {\n      var testpurposeSelect = _this.state.testpurposeSelect;\n\n      _this.setState({\n        testPurpose2: testpurposeSelect.find(function (item) {\n          return item.id == event.target.value;\n        }),\n        testPurpose2Id: event.target.value\n      });\n    };\n\n    _this.handleChangetestpurpose3 = function (event, source) {\n      var testpurposeSelect = _this.state.testpurposeSelect;\n\n      _this.setState({\n        testPurpose3: testpurposeSelect.find(function (item) {\n          return item.id == event.target.value;\n        }),\n        testPurpose3Id: event.target.value\n      });\n    };\n\n    _this.handleChangetestpurpose4 = function (event, source) {\n      var testpurposeSelect = _this.state.testpurposeSelect;\n\n      _this.setState({\n        testPurpose4: testpurposeSelect.find(function (item) {\n          return item.id == event.target.value;\n        }),\n        testPurpose4Id: event.target.value\n      });\n    };\n\n    _this.handleChangelevel = function (event, source) {\n      var levelHealOrg = _this.state.levelHealOrg;\n\n      _this.setState({\n        level: levelHealOrg.find(function (item) {\n          return item.id == event.target.value;\n        }),\n        levelId: event.target.value,\n        hasErrorLever: false\n      });\n    };\n\n    _this.handleChangeType = function (event, source) {\n      var healthOrgTypeSelect = _this.state.healthOrgTypeSelect;\n\n      _this.setState({\n        healthOrgType: healthOrgTypeSelect.find(function (item) {\n          return item.id == event.target.value;\n        }),\n        healthOrgTypeId: event.target.value\n      });\n    };\n\n    _this.handleFormSubmit = function () {\n      var _this$state = _this.state,\n          id = _this$state.id,\n          code = _this$state.code,\n          isManualSetCode = _this$state.isManualSetCode,\n          email = _this$state.email,\n          hasErrorLever = _this$state.hasErrorLever,\n          levelId = _this$state.levelId;\n      var t = _this.props.t;\n\n      _this.setState({\n        loading: true\n      }); // if(levelId == \"\" ){\n      //   this.setState({hasErrorLever: true, loading:false});\n      //   return\n      // }\n\n\n      if (email != null) {\n        checkEmail(id, email).then(function (res) {\n          if (res.data) {\n            toast.warning(t(\"sign_up.duplicate_email\"));\n\n            _this.setState({\n              loading: false\n            });\n\n            return;\n          } else {\n            if (id) {\n              saveItem(_objectSpread({}, _this.state)).then(function () {\n                // this.props.handleOKEditClose();\n                _this.setState({\n                  loading: false,\n                  isView: true\n                });\n\n                toast.success(t('mess_edit'));\n              });\n            } // console.log(123)\n\n          }\n        });\n      } // console.log(this.state);\n\n    };\n\n    _this.handleSearchDialogClose = function () {\n      _this.setState({\n        shouldOpenSearchDialog: false\n      });\n    };\n\n    _this.handleSearchOrgTypeDialogClose = function () {\n      _this.setState({\n        shouldOpenSearchOrgTypeDialog: false\n      });\n    };\n\n    _this.handleSelectHealthOrgType = function (item) {\n      _this.setState({\n        healthOrgType: item\n      });\n\n      _this.handleSearchOrgTypeDialogClose();\n    };\n\n    _this.handleSelectAdministrativeUnitType = function (item) {\n      _this.setState({\n        administrativeUnit: item\n      });\n\n      _this.handleSearchDialogClose();\n    };\n\n    return _this;\n  }\n\n  _createClass(LaboratoryInformation, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      getHealthOrg({\n        pageSize: 1000000,\n        pageIndex: 0\n      }).then(function (res) {\n        getItemById(res.data.content[0].id).then(function (data) {\n          _this2.setState(_objectSpread({}, data.data));\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      // console.log(this.state)\n      var t = this.props.t;\n      var _this$state2 = this.state,\n          id = _this$state2.id,\n          name = _this$state2.name,\n          code = _this$state2.code,\n          isManualSetCode = _this$state2.isManualSetCode,\n          address = _this$state2.address,\n          isView = _this$state2.isView,\n          contactName = _this$state2.contactName,\n          levelId = _this$state2.levelId,\n          shouldOpenAdministrativeUnitsPopup = _this$state2.shouldOpenAdministrativeUnitsPopup,\n          contactPhone = _this$state2.contactPhone,\n          levelHealOrg = _this$state2.levelHealOrg,\n          shouldOpenSearchOrgTypeDialog = _this$state2.shouldOpenSearchOrgTypeDialog,\n          shouldOpenConfirmationDialog = _this$state2.shouldOpenConfirmationDialog,\n          isManagementUnit = _this$state2.isManagementUnit,\n          shouldOpenSearchDialog = _this$state2.shouldOpenSearchDialog,\n          sampleReceiptDate = _this$state2.sampleReceiptDate,\n          administrativeUnit = _this$state2.administrativeUnit,\n          testPurpose1Id = _this$state2.testPurpose1Id,\n          testPurpose2Id = _this$state2.testPurpose2Id,\n          testPurpose3Id = _this$state2.testPurpose3Id,\n          testPurpose4Id = _this$state2.testPurpose4Id,\n          email = _this$state2.email,\n          qualificationId = _this$state2.qualificationId,\n          qualificationSelect = _this$state2.qualificationSelect,\n          testpurposeSelect = _this$state2.testpurposeSelect,\n          specifyQualification = _this$state2.specifyQualification,\n          officerPosion = _this$state2.officerPosion,\n          unitCodeOfProgramPEQAS = _this$state2.unitCodeOfProgramPEQAS,\n          fax = _this$state2.fax,\n          sampleStatus = _this$state2.sampleStatus,\n          healthOrgTypeSelect = _this$state2.healthOrgTypeSelect,\n          healthOrgType = _this$state2.healthOrgType,\n          healthOrgTypeId = _this$state2.healthOrgTypeId,\n          technician = _this$state2.technician,\n          specifyTechnician = _this$state2.specifyTechnician,\n          positiveAffirmativeRight = _this$state2.positiveAffirmativeRight,\n          sampleRecipient = _this$state2.sampleRecipient,\n          specifySampleStatus = _this$state2.specifySampleStatus,\n          specifyTestPurpose = _this$state2.specifyTestPurpose,\n          specifyLevel = _this$state2.specifyLevel,\n          taxCodeOfTheUnit = _this$state2.taxCodeOfTheUnit,\n          hasErrorLever = _this$state2.hasErrorLever,\n          loading = _this$state2.loading;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        style: {\n          marginBottom: 40\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"mb-20 styleColor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }\n      }, \" Th\\xF4ng tin ph\\xF2ng x\\xE9t nghi\\u1EC7m \")), /*#__PURE__*/React.createElement(Grid, {\n        driver: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        className: \"\",\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EQAHealthOrg.Name\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"name\",\n        disabled: this.state.isView,\n        value: name,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.Code\")),\n        onChange: this.handleChange,\n        disabled: true,\n        type: \"text\",\n        name: \"code\",\n        value: code,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EQAHealthOrg.Address\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"address\",\n        value: address,\n        disabled: this.state.isView,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.contactPhone\")),\n        onChange: this.handleChange,\n        type: \"number\",\n        name: \"contactPhone\",\n        disabled: this.state.isView,\n        value: contactPhone ? contactPhone : \"\",\n        variant: \"outlined\",\n        size: \"small\" // validators={[ \"matchRegexp:^[0-9]*$\", \"isLengthNumber\"]}\n        // errorMessages={[ t(\"general.errorMessages_phone_number_invalid\"),\n        // t(\"general.errorMessages_phone_number_invalid\")]}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EQAHealthOrg.email\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"email\",\n        disabled: this.state.isView,\n        value: email ? email : \"\",\n        validators: [\"required\", \"isEmail\"],\n        errorMessages: [t(\"general.errorMessages_required\"), t(\"general.errorMessages_email_valid\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.ContactName\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"contactName\",\n        disabled: this.state.isView,\n        value: contactName ? contactName : \"\",\n        variant: \"outlined\",\n        size: \"small\",\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControlLabel, {\n        disabled: true,\n        variant: \"outlined\",\n        size: \"small\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            fontSize: \"115%\"\n          },\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 26\n          }\n        }, t('EQAHealthOrg.positiveAffirmativeRight')),\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          checked: positiveAffirmativeRight,\n          onChange: function onChange(positiveAffirmativeRight) {\n            return _this3.handleChange(positiveAffirmativeRight, \"positiveAffirmativeRight\");\n          } // this.handleChange(isFinalResult, 'isFinalResult')\n          ,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 28\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        className: \"flex flex-end flex-middle\",\n        container: true,\n        spacing: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 13\n        }\n      }, this.state.isView && /*#__PURE__*/React.createElement(Button, {\n        className: \"mr-12\",\n        onClick: function onClick() {\n          return _this3.setState({\n            isView: false\n          });\n        },\n        variant: \"contained\",\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 17\n        }\n      }, t('Edit')), !this.state.isView && /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 17\n        }\n      }, t('update'))))));\n    }\n  }]);\n\n  return LaboratoryInformation;\n}(Component);\n\nexport default LaboratoryInformation;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/HomePage/LaboratoryInformation.jsx"],"names":["React","Component","Dialog","Button","Grid","DialogActions","FormControlLabel","InputAdornment","Checkbox","FormHelperText","Icon","IconButton","Draggable","Paper","AsynchronousAutocomplete","FormControl","Select","MenuItem","InputLabel","ValidatorForm","TextValidator","TextField","SelectValidator","getCurrentUser","authService","searchByPage","getHealthOrg","checkEmail","saveItem","getItemById","toast","LaboratoryInformation","state","name","taxCodeOfTheUnit","code","specifyTestPurpose","address","specifyLevel","positiveAffirmativeRight","shouldOpenSearchDialog","shouldOpenConfirmationDialog","qualificationSelect","qualification","officerPosion","unitCodeOfProgramPEQAS","testpurposeSelect","testPurpose1","testPurpose2","testPurpose3","testPurpose4","levelHealOrg","healthOrgTypeSelect","healthOrgType","administrativeUnit","fax","isView","shouldOpenAdministrativeUnitsPopup","level","sampleReceiptDate","Date","sampleRecipient","specifySampleStatus","specifyQualification","isManualSetCode","hasErrorLever","levelId","loading","handleChange","event","source","persist","setState","isActive","target","checked","isManagementUnit","value","handleChangeAdministrativeUnitPopupClose","handleSelectAdministrativeUnit","id","handleChangeQualification","find","item","qualificationId","handleChangetestpurpose1","testPurpose1Id","handleChangetestpurpose2","testPurpose2Id","handleChangetestpurpose3","testPurpose3Id","handleChangetestpurpose4","testPurpose4Id","handleChangelevel","handleChangeType","healthOrgTypeId","handleFormSubmit","email","t","props","then","res","data","warning","success","handleSearchDialogClose","handleSearchOrgTypeDialogClose","shouldOpenSearchOrgTypeDialog","handleSelectHealthOrgType","handleSelectAdministrativeUnitType","pageSize","pageIndex","content","contactName","contactPhone","sampleStatus","technician","specifyTechnician","marginBottom","color","fontSize"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  DialogActions,\r\n  FormControlLabel,\r\n  InputAdornment, Checkbox,FormHelperText, Icon, IconButton\r\n} from \"@material-ui/core\";\r\nimport Draggable from 'react-draggable';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport {\r\n  ValidatorForm,\r\n  TextValidator,\r\n  TextField,\r\n  SelectValidator,\r\n} from \"react-material-ui-form-validator\";\r\nimport {getCurrentUser} from \"../page-layouts/UserProfileService\";\r\nimport authService from \"../../services/jwtAuthService\";\r\nimport {searchByPage as getHealthOrg} from \"../EQAHealthOrg/EQAHealthOrgService\";\r\nimport {checkEmail, saveItem, getItemById} from \"../EQAHealthOrg/EQAHealthOrgService\";\r\nimport { toast } from 'react-toastify';\r\n\r\nclass LaboratoryInformation extends Component {\r\n    state = {\r\n        name: \"\",\r\n        taxCodeOfTheUnit: \"\",\r\n        code: \"\", specifyTestPurpose: \"\",\r\n        address: \"\",\r\n        specifyLevel: \"\",\r\n        positiveAffirmativeRight: true,\r\n        shouldOpenSearchDialog: false,\r\n        shouldOpenConfirmationDialog: false,\r\n        qualificationSelect: [],\r\n        qualification: {}, officerPosion: \"\", unitCodeOfProgramPEQAS: \"\",\r\n        testpurposeSelect: [],\r\n        testPurpose1: {},\r\n        testPurpose2: {},\r\n        testPurpose3: {},\r\n        testPurpose4: {},\r\n        levelHealOrg: [],\r\n        healthOrgTypeSelect: [],\r\n        healthOrgType: [],\r\n        administrativeUnit: \"\",\r\n        fax: \"\",\r\n        isView: true,\r\n        shouldOpenAdministrativeUnitsPopup: false,\r\n        level: {}, sampleReceiptDate: new Date(),\r\n        sampleRecipient: \"\", specifySampleStatus: \"\", specifyQualification: \"\",\r\n        isManualSetCode: false,\r\n        hasErrorLever:false,\r\n        levelId: \"\",\r\n        loading: false\r\n      };\r\n\r\n    handleChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n    if (source === \"isManagementUnit\") {\r\n      this.setState({ isManagementUnit: event.target.checked });\r\n      return;\r\n    }\r\n\r\n    if (source === \"positiveAffirmativeRight\") {\r\n      this.setState({ positiveAffirmativeRight: event.target.checked });\r\n      return;\r\n    }\r\n\r\n    if (source === \"isManualSetCode\") {\r\n      this.setState({ isManualSetCode: event.target.checked });\r\n      return;\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n  handleChangeAdministrativeUnitPopupClose = () => {\r\n    this.setState({ shouldOpenAdministrativeUnitsPopup: false }, function () {\r\n    });\r\n  }\r\n\r\n  handleSelectAdministrativeUnit = (administrativeUnit) => {\r\n    if (administrativeUnit && administrativeUnit.id) {\r\n      this.setState({ administrativeUnit });\r\n      this.handleChangeAdministrativeUnitPopupClose();\r\n    }\r\n  }\r\n  handleChangeQualification = (event, source) => {\r\n    let { qualificationSelect } = this.state;\r\n    this.setState({\r\n      qualification: qualificationSelect.find(item => item.id == event.target.value),\r\n      qualificationId: event.target.value\r\n    })\r\n  }\r\n  handleChangetestpurpose1 = (event, source) => {\r\n    let { testpurposeSelect } = this.state;\r\n    this.setState({\r\n      testPurpose1: testpurposeSelect.find(item => item.id == event.target.value),\r\n      testPurpose1Id: event.target.value\r\n    })\r\n  }\r\n  handleChangetestpurpose2 = (event, source) => {\r\n    let { testpurposeSelect } = this.state;\r\n    this.setState({\r\n      testPurpose2: testpurposeSelect.find(item => item.id == event.target.value),\r\n      testPurpose2Id: event.target.value\r\n    })\r\n  }\r\n  handleChangetestpurpose3 = (event, source) => {\r\n    let { testpurposeSelect } = this.state;\r\n    this.setState({\r\n      testPurpose3: testpurposeSelect.find(item => item.id == event.target.value),\r\n      testPurpose3Id: event.target.value\r\n    })\r\n  }\r\n  handleChangetestpurpose4 = (event, source) => {\r\n    let { testpurposeSelect } = this.state;\r\n    this.setState({\r\n      testPurpose4: testpurposeSelect.find(item => item.id == event.target.value),\r\n      testPurpose4Id: event.target.value\r\n    })\r\n  }\r\n  handleChangelevel = (event, source) => {\r\n    let { levelHealOrg } = this.state;\r\n    this.setState({\r\n      level: levelHealOrg.find(item => item.id == event.target.value),\r\n      levelId: event.target.value,\r\n      hasErrorLever : false\r\n    })\r\n  }\r\n\r\n  handleChangeType = (event, source) => {\r\n    let { healthOrgTypeSelect } = this.state;\r\n    this.setState({\r\n      healthOrgType: healthOrgTypeSelect.find(item => item.id == event.target.value),\r\n      healthOrgTypeId: event.target.value\r\n    })\r\n  }\r\n\r\n  handleFormSubmit = () => {\r\n    let { id, code, isManualSetCode, email, hasErrorLever, levelId } = this.state;\r\n    let { t } = this.props;\r\n    this.setState({ loading: true });\r\n\r\n    // if(levelId == \"\" ){\r\n    //   this.setState({hasErrorLever: true, loading:false});\r\n    //   return\r\n    // }\r\n    if (email != null) {\r\n      checkEmail(id, email).then(res => {\r\n        if (res.data) {\r\n          toast.warning(t(\"sign_up.duplicate_email\"));\r\n          this.setState({ loading: false });\r\n          return\r\n        } else {\r\n            if (id) {\r\n              saveItem({\r\n                ...this.state\r\n              }).then(() => {\r\n                // this.props.handleOKEditClose();\r\n                this.setState({ loading: false, isView: true });\r\n                toast.success(t('mess_edit'));\r\n              });\r\n\r\n            }\r\n            // console.log(123)\r\n        }\r\n      })\r\n    } \r\n\r\n    // console.log(this.state);\r\n  }\r\n\r\n  componentWillMount() {\r\n    getHealthOrg({pageSize: 1000000, pageIndex: 0}).then((res) => {\r\n      getItemById(res.data.content[0].id).then((data) => {\r\n        this.setState({\r\n          ...data.data\r\n        })\r\n      })\r\n    })\r\n  \r\n\r\n    \r\n  }\r\n  componentDidMount() {\r\n\r\n    \r\n    \r\n  }\r\n\r\n  handleSearchDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenSearchDialog: false\r\n    });\r\n  };\r\n  handleSearchOrgTypeDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenSearchOrgTypeDialog: false\r\n    });\r\n  };\r\n  handleSelectHealthOrgType = (item) => {\r\n    this.setState({ healthOrgType: item });\r\n    this.handleSearchOrgTypeDialogClose();\r\n  }\r\n  handleSelectAdministrativeUnitType = (item) => {\r\n    this.setState({ administrativeUnit: item });\r\n    this.handleSearchDialogClose();\r\n  }\r\n\r\n  render() {\r\n    // console.log(this.state)\r\n    let { t } = this.props;\r\n    let {\r\n        id,\r\n        name,\r\n        code,\r\n        isManualSetCode,\r\n        address,\r\n        isView,\r\n        contactName, levelId, shouldOpenAdministrativeUnitsPopup,\r\n        contactPhone, levelHealOrg,\r\n        shouldOpenSearchOrgTypeDialog,\r\n        shouldOpenConfirmationDialog, isManagementUnit,\r\n        shouldOpenSearchDialog, sampleReceiptDate,\r\n        administrativeUnit, testPurpose1Id, testPurpose2Id, testPurpose3Id, testPurpose4Id,\r\n        email, qualificationId, qualificationSelect, testpurposeSelect, specifyQualification, officerPosion, unitCodeOfProgramPEQAS, fax,\r\n        sampleStatus, healthOrgTypeSelect, healthOrgType, healthOrgTypeId,\r\n        technician, specifyTechnician, positiveAffirmativeRight, sampleRecipient, specifySampleStatus, specifyTestPurpose, specifyLevel, taxCodeOfTheUnit,\r\n        hasErrorLever, loading\r\n      } = this.state;\r\n    return (\r\n      <div>\r\n          <Grid style={{marginBottom: 40}}>\r\n            <span className=\"mb-20 styleColor\"> Thông tin phòng xét nghiệm </span>\r\n          </Grid>\r\n          <Grid driver>\r\n            <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit} >\r\n            <Grid className=\"\" container spacing={2}>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EQAHealthOrg.Name\")}\r\n                    </span>\r\n                  }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  disabled={this.state.isView}\r\n                  value={name}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.Code\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  disabled={true}\r\n                  type=\"text\"\r\n                  name=\"code\"\r\n                  value={code}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EQAHealthOrg.Address\")}\r\n                    </span>\r\n                  }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"address\"\r\n                  value={address}\r\n                  disabled={this.state.isView}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.contactPhone\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"number\"\r\n                  name=\"contactPhone\"\r\n                  disabled={this.state.isView}\r\n                  value={contactPhone ? contactPhone :\"\"}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                // validators={[ \"matchRegexp:^[0-9]*$\", \"isLengthNumber\"]}\r\n                // errorMessages={[ t(\"general.errorMessages_phone_number_invalid\"),\r\n                // t(\"general.errorMessages_phone_number_invalid\")]}\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EQAHealthOrg.email\")}\r\n                    </span>\r\n                  }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  disabled={this.state.isView}\r\n                  value={email? email:\"\"}\r\n                  validators={[\"required\", \"isEmail\"]}\r\n                  errorMessages={[\r\n                    t(\"general.errorMessages_required\"),\r\n                    t(\"general.errorMessages_email_valid\")\r\n                  ]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.ContactName\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"contactName\"\r\n                  disabled={this.state.isView}\r\n                  value={contactName ? contactName : \"\"}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[\r\n                    t(\"general.errorMessages_required\")\r\n                  ]}\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <FormControlLabel\r\n                  disabled\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  label={<span style={{fontSize: \"115%\"}} className=\"font\">{t('EQAHealthOrg.positiveAffirmativeRight')}</span>}\r\n                  control={<Checkbox checked={positiveAffirmativeRight}\r\n                    onChange={(positiveAffirmativeRight) =>\r\n                      this.handleChange(positiveAffirmativeRight, \"positiveAffirmativeRight\")\r\n                      // this.handleChange(isFinalResult, 'isFinalResult')\r\n                    }\r\n                  />}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className=\"flex flex-end flex-middle\" container spacing={4}>\r\n              {this.state.isView && (\r\n                <Button\r\n                className=\"mr-12\"\r\n                onClick={() => this.setState({isView: false})}\r\n                variant=\"contained\"\r\n                color=\"primary\">\r\n                {t('Edit')}\r\n              </Button>\r\n              )}\r\n              {!this.state.isView && (\r\n                <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\">\r\n                {t('update')}\r\n              </Button>\r\n              )}\r\n              \r\n            </Grid>\r\n            </ValidatorForm>\r\n          </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LaboratoryInformation;\r\n"]},"metadata":{},"sourceType":"module"}