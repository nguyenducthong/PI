{"ast":null,"code":"import _slicedToArray from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _createForOfIteratorHelper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\dashboard\\\\Analytics.jsx\";\nimport React, { Component, Fragment } from \"react\";\nimport { Grid, Card, Icon, IconButton, Button, Checkbox, Fab, Avatar, Hidden, TextField } from \"@material-ui/core\";\nimport { Breadcrumb, SimpleCard, EgretProgressBar } from \"egret\";\nimport DashboardWelcomeCard from \"../cards/DashboardWelcomeCard\";\nimport DashboardWelcomeHealthOrgCard from \"../cards/DashboardWelcomeHealthOrgCard\";\nimport AreaChart from \"../charts/echarts/AreaChart\";\nimport { format } from \"date-fns\";\nimport ModifiedAreaChart from \"./ModifiedAreaChart\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\nimport ConstantList from \"../../appConfig\";\nimport JwtAuthService from \"../../services/jwtAuthService\";\nimport { Helmet } from \"react-helmet\";\nimport ReactEcharts from \"echarts-for-react\"; // import HomePage from \"../HomePage/HomePage\";\n// import Tab from \"../IntroduceTheProgram/Tab\";\n\nimport { getCurrentUser, getEQARound, countNumberOfHealthOrgEQARoundByEQARound, countSampleTubeByEQARound } from \"./DashboardService\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"; //let isAdmin=false;\n\nvar Dashboard1 = /*#__PURE__*/function (_Component) {\n  _inherits(Dashboard1, _Component);\n\n  var _super = _createSuper(Dashboard1);\n\n  function Dashboard1(props) {\n    var _this;\n\n    _classCallCheck(this, Dashboard1);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      user: {},\n      isAdmin: false,\n      isHealthOrg: false,\n      isUser: false,\n      numberOfEQARound: 0,\n      eqaRoundList: [],\n      selectedEQARound: {},\n      barChartData: [],\n      pieChartData: []\n    };\n\n    _this.checkIsAdmin = function () {\n      _this.setState({\n        isAdmin: false\n      });\n\n      if (_this.state.user != null && _this.state.user.roles != null && _this.state.user.roles.length > 0) {\n        _this.state.user.roles.forEach(function (element) {\n          if (element.name == 'ROLE_ADMIN') {\n            _this.setState({\n              isAdmin: true\n            });\n\n            return true;\n          }\n        });\n      }\n    };\n\n    _this.getBarChartData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var barChartQueryResult, barChartData, _iterator, _step, dto;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return countNumberOfHealthOrgEQARoundByEQARound();\n\n            case 2:\n              barChartQueryResult = _context.sent.data;\n              barChartData = [];\n              _iterator = _createForOfIteratorHelper(barChartQueryResult);\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  dto = _step.value;\n                  barChartData.push([dto.round.name, dto.count]);\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n\n              return _context.abrupt(\"return\", barChartData);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.getPieChartData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(roundId) {\n        var pieChartData, pieChartQueryResult, _i, _Object$entries, _Object$entries$_i, key, value;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                pieChartData = [];\n                _context2.prev = 1;\n                _context2.next = 4;\n                return countSampleTubeByEQARound(roundId);\n\n              case 4:\n                pieChartQueryResult = _context2.sent.data;\n                _i = 0, _Object$entries = Object.entries(pieChartQueryResult);\n\n              case 6:\n                if (!(_i < _Object$entries.length)) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), key = _Object$entries$_i[0], value = _Object$entries$_i[1];\n                _context2.t0 = key;\n                _context2.next = _context2.t0 === \"correct\" ? 11 : _context2.t0 === \"incorrect\" ? 13 : _context2.t0 === \"notSubmitted\" ? 15 : 17;\n                break;\n\n              case 11:\n                pieChartData.push({\n                  value,\n                  name: _this.props.t(\"Analytics.correct\")\n                });\n                return _context2.abrupt(\"break\", 18);\n\n              case 13:\n                pieChartData.push({\n                  value,\n                  name: _this.props.t(\"Analytics.incorrect\")\n                });\n                return _context2.abrupt(\"break\", 18);\n\n              case 15:\n                pieChartData.push({\n                  value,\n                  name: _this.props.t(\"Analytics.not_submitted\")\n                });\n                return _context2.abrupt(\"break\", 18);\n\n              case 17:\n                return _context2.abrupt(\"break\", 18);\n\n              case 18:\n                _i++;\n                _context2.next = 6;\n                break;\n\n              case 21:\n                _context2.next = 26;\n                break;\n\n              case 23:\n                _context2.prev = 23;\n                _context2.t1 = _context2[\"catch\"](1);\n                pieChartData = [{\n                  value: 0,\n                  name: _this.props.t(\"Analytics.correct\")\n                }, {\n                  value: 0,\n                  name: _this.props.t(\"Analytics.incorrect\")\n                }, {\n                  value: 0,\n                  name: _this.props.t(\"Analytics.not_submitted\")\n                }];\n\n              case 26:\n                _context2.prev = 26;\n                return _context2.abrupt(\"return\", pieChartData);\n\n              case 29:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[1, 23, 26, 29]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.handleSelectEQARound = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(selectedEQARound) {\n        var pieChartData;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _this.getPieChartData(selectedEQARound.id);\n\n              case 2:\n                pieChartData = _context3.sent;\n\n                _this.setState({\n                  pieChartData,\n                  selectedEQARound\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(Dashboard1, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this2 = this;\n\n        var user, eqaRoundList, selectedEQARound, barChartData, pieChartData;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                user = JwtAuthService.getLoginUser();\n\n                if (user != null && user.roles != null && user.roles.length > 0) {\n                  this.setState({\n                    isHealthOrg: false,\n                    isAdmin: false,\n                    isUser: false\n                  });\n                  user.roles.forEach(function (role) {\n                    if (role.name == \"ROLE_ADMIN\") {\n                      _this2.setState({\n                        isAdmin: true\n                      });\n                    } else if (role.name == \"ROLE_HEALTH_ORG\") {\n                      _this2.setState({\n                        isHealthOrg: true\n                      });\n                    } else if (role.name == \"ROLE_USER\") {\n                      _this2.setState({\n                        isUser: true\n                      });\n                    }\n                  });\n                }\n\n                _context4.next = 4;\n                return getEQARound();\n\n              case 4:\n                eqaRoundList = _context4.sent.data.content;\n                _context4.next = 7;\n                return eqaRoundList[0];\n\n              case 7:\n                selectedEQARound = _context4.sent;\n                _context4.next = 10;\n                return this.getBarChartData();\n\n              case 10:\n                barChartData = _context4.sent;\n                pieChartData = null;\n\n                if (!(selectedEQARound != null)) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                _context4.next = 15;\n                return this.getPieChartData(selectedEQARound.id);\n\n              case 15:\n                pieChartData = _context4.sent;\n\n              case 16:\n                this.setState({\n                  selectedEQARound,\n                  barChartData,\n                  pieChartData\n                });\n\n              case 17:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          t = _this$props.t,\n          i18n = _this$props.i18n; //this.checkIsAdmin();\n\n      var isAdmin = this.state.isAdmin;\n      var _this$state = this.state,\n          barChartData = _this$state.barChartData,\n          pieChartData = _this$state.pieChartData;\n      var bigCardStyle = {\n        height: \"500px\",\n        padding: \"10px\",\n        fontFamily: \"Arial\"\n      };\n      var barChartOptions = {\n        title: {\n          text: t(\"Analytics.registered_units\"),\n          left: \"center\",\n          fontFamily: \"Arial\"\n        },\n        color: [\"#3398DB\"],\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          containLabel: true\n        },\n        xAxis: [{\n          type: \"category\",\n          axisTick: {\n            alignWithLabel: false\n          }\n        }],\n        yAxis: [{\n          type: \"value\",\n          axisLabel: {\n            show: true\n          },\n          name: t(\"Analytics.number_of_registered_units\"),\n          nameLocation: \"end\",\n          nameTextStyle: {\n            align: \"left\"\n          }\n        }],\n        series: [{\n          name: t(\"Analytics.registered_units\"),\n          type: \"bar\",\n          barWidth: \"60%\",\n          data: barChartData,\n          label: {\n            show: true,\n            position: \"top\"\n          }\n        }]\n      };\n      var pieChartOptions = {\n        title: {\n          text: t(\"Analytics.eqa_round_result\"),\n          left: \"center\",\n          fontFamily: \"Arial\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b} : {c} ({d}%)\"\n        },\n        legend: {\n          orient: \"vertical\",\n          left: \"left\",\n          data: [t(\"Analytics.correct\"), t(\"Analytics.incorrect\"), t(\"Analytics.not_submitted\")]\n        },\n        color: [\"#229955\", \"#ff0000\", \"#9400ff\"],\n        series: [{\n          name: t(\"Analytics.eqa_round_result\"),\n          type: \"pie\",\n          radius: \"55%\",\n          center: [\"50%\", \"60%\"],\n          data: pieChartData,\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: \"rgba(0, 0, 0, 0.5)\"\n            }\n          }\n        }]\n      };\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"analytics m-sm-30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mb-sm-30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Helmet, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"title\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }\n      }, t(\"Dashboard.dashboard\"), \" | \", t(\"web_site\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mb-sm-30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Breadcrumb, {\n        routeSegments: [{\n          name: t(\"Dashboard.dashboard\")\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 12,\n        md: 12,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return Dashboard1;\n}(Component);\n\nexport default withStyles({}, {\n  withTheme: true\n})(Dashboard1);","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/dashboard/Analytics.jsx"],"names":["React","Component","Fragment","Grid","Card","Icon","IconButton","Button","Checkbox","Fab","Avatar","Hidden","TextField","Breadcrumb","SimpleCard","EgretProgressBar","DashboardWelcomeCard","DashboardWelcomeHealthOrgCard","AreaChart","format","ModifiedAreaChart","withStyles","useTranslation","withTranslation","Trans","ConstantList","JwtAuthService","Helmet","ReactEcharts","getCurrentUser","getEQARound","countNumberOfHealthOrgEQARoundByEQARound","countSampleTubeByEQARound","Autocomplete","Dashboard1","props","state","user","isAdmin","isHealthOrg","isUser","numberOfEQARound","eqaRoundList","selectedEQARound","barChartData","pieChartData","checkIsAdmin","setState","roles","length","forEach","element","name","getBarChartData","barChartQueryResult","data","dto","push","round","count","getPieChartData","roundId","pieChartQueryResult","Object","entries","key","value","t","handleSelectEQARound","id","getLoginUser","role","content","theme","i18n","bigCardStyle","height","padding","fontFamily","barChartOptions","title","text","left","color","tooltip","trigger","axisPointer","type","grid","right","bottom","containLabel","xAxis","axisTick","alignWithLabel","yAxis","axisLabel","show","nameLocation","nameTextStyle","align","series","barWidth","label","position","pieChartOptions","formatter","legend","orient","radius","center","emphasis","itemStyle","shadowBlur","shadowOffsetX","shadowColor","withTheme"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport {\n  Grid,\n  Card,\n  Icon,\n  IconButton,\n  Button,\n  Checkbox,\n  Fab,\n  Avatar,\n  Hidden,\n  TextField\n} from \"@material-ui/core\";\nimport { Breadcrumb, SimpleCard, EgretProgressBar } from \"egret\";\nimport DashboardWelcomeCard from \"../cards/DashboardWelcomeCard\";\nimport DashboardWelcomeHealthOrgCard from \"../cards/DashboardWelcomeHealthOrgCard\";\nimport AreaChart from \"../charts/echarts/AreaChart\";\nimport { format } from \"date-fns\";\nimport ModifiedAreaChart from \"./ModifiedAreaChart\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\nimport ConstantList from \"../../appConfig\";\nimport JwtAuthService from \"../../services/jwtAuthService\";\nimport { Helmet } from \"react-helmet\";\nimport ReactEcharts from \"echarts-for-react\";\n// import HomePage from \"../HomePage/HomePage\";\n// import Tab from \"../IntroduceTheProgram/Tab\";\n\nimport {\n  getCurrentUser,\n  getEQARound,\n  countNumberOfHealthOrgEQARoundByEQARound,\n  countSampleTubeByEQARound\n} from \"./DashboardService\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n//let isAdmin=false;\nclass Dashboard1 extends Component {\n  state = {\n    user: {},\n    isAdmin: false,\n    isHealthOrg: false,\n    isUser: false,\n    numberOfEQARound: 0,\n    eqaRoundList: [],\n    selectedEQARound: {},\n    barChartData: [],\n    pieChartData: []\n  };\n  constructor(props) {\n    super(props);\n  }\n  checkIsAdmin = ()=>{\n    this.setState({isAdmin:false})\n    if(this.state.user!=null && this.state.user.roles!=null && this.state.user.roles.length>0){\n      this.state.user.roles.forEach(element => {\n        if(element.name=='ROLE_ADMIN'){\n          this.setState({isAdmin:true})\n          return true;\n        }\n      });\n    }\n  }\n  getBarChartData = async () => {\n    const barChartQueryResult = (\n      await countNumberOfHealthOrgEQARoundByEQARound()\n    ).data;\n    let barChartData = [];\n    for (const dto of barChartQueryResult) {\n      barChartData.push([dto.round.name, dto.count]);\n    }\n    return barChartData;\n  };\n\n  getPieChartData = async roundId => {\n    let pieChartData = [];\n    try {\n      const pieChartQueryResult = (await countSampleTubeByEQARound(roundId))\n        .data;\n      for (const [key, value] of Object.entries(pieChartQueryResult)) {\n        switch (key) {\n          case \"correct\":\n            pieChartData.push({\n              value,\n              name: this.props.t(\"Analytics.correct\")\n            });\n            break;\n          case \"incorrect\":\n            pieChartData.push({\n              value,\n              name: this.props.t(\"Analytics.incorrect\")\n            });\n            break;\n          case \"notSubmitted\":\n            pieChartData.push({\n              value,\n              name: this.props.t(\"Analytics.not_submitted\")\n            });\n            break;\n          default:\n            break;\n        }\n      }\n    } catch (err) {\n      pieChartData = [\n        { value: 0, name: this.props.t(\"Analytics.correct\") },\n        { value: 0, name: this.props.t(\"Analytics.incorrect\") },\n        { value: 0, name: this.props.t(\"Analytics.not_submitted\") }\n      ];\n    } finally {\n      return pieChartData;\n    }\n  };\n\n  handleSelectEQARound = async selectedEQARound => {\n    const pieChartData = await this.getPieChartData(selectedEQARound.id);\n    this.setState({\n      pieChartData,\n      selectedEQARound\n    });\n  };\n \n  async componentWillMount() {\n    let  user=JwtAuthService.getLoginUser();\n    if (user != null && user.roles != null && user.roles.length > 0) {\n \n      this.setState({\n        isHealthOrg: false,\n        isAdmin: false,\n        isUser: false\n      });      \n      user.roles.forEach(role => {      \n        if (role.name == \"ROLE_ADMIN\") {\n          this.setState({ isAdmin: true });\n        } else if (role.name == \"ROLE_HEALTH_ORG\") {\n          this.setState({ isHealthOrg: true });\n        } else if (role.name == \"ROLE_USER\") {\n          this.setState({ isUser: true });\n        } \n      });\n    }\n\n    var eqaRoundList = (await getEQARound()).data.content;\n    var selectedEQARound = await eqaRoundList[0];\n    var barChartData = await this.getBarChartData();\n\n    var pieChartData = null;\n    if(selectedEQARound!=null)\n      pieChartData= await this.getPieChartData(selectedEQARound.id);\n\n    this.setState({\n      selectedEQARound,\n      barChartData,\n      pieChartData\n    });\n  }\n\n  render() {\n    \n    let { theme, t, i18n } = this.props;\n    //this.checkIsAdmin();\n    let isAdmin = this.state.isAdmin;\n    const {\n  \n      barChartData,\n      pieChartData\n    } = this.state;\n    const bigCardStyle = {\n      height: \"500px\",\n      padding: \"10px\",\n      fontFamily: \"Arial\"\n    };\n\n    const barChartOptions = {\n      title: {\n        text: t(\"Analytics.registered_units\"),  \n        left: \"center\",\n        fontFamily: \"Arial\"\n      },\n      color: [\"#3398DB\"],\n      tooltip: {\n        trigger: \"axis\",\n        axisPointer: { type: \"shadow\" }\n      },\n      grid: {\n        left: \"3%\",\n        right: \"4%\",\n        bottom: \"3%\",\n        containLabel: true\n      },\n      xAxis: [\n        {\n          type: \"category\",\n          axisTick: {\n            alignWithLabel: false\n          }\n        }\n      ],\n      yAxis: [\n        {\n          type: \"value\",\n          axisLabel: {\n            show: true\n          },\n          name: t(\"Analytics.number_of_registered_units\"),\n          nameLocation: \"end\",\n          nameTextStyle: {\n            align: \"left\"\n          }\n        }\n      ],\n      series: [\n        {\n          name: t(\"Analytics.registered_units\"),\n          type: \"bar\",\n          barWidth: \"60%\",\n          data: barChartData,\n          label: {\n            show: true,\n            position: \"top\"\n          }\n        }\n      ]\n    };\n\n    const pieChartOptions = {\n      title: {\n        text: t(\"Analytics.eqa_round_result\"),\n        left: \"center\",\n        fontFamily: \"Arial\"\n      },\n      tooltip: {\n        trigger: \"item\",\n        formatter: \"{a} <br/>{b} : {c} ({d}%)\"\n      },\n      legend: {\n        orient: \"vertical\",\n        left: \"left\",\n        data: [\n          t(\"Analytics.correct\"),\n          t(\"Analytics.incorrect\"),\n          t(\"Analytics.not_submitted\")\n        ]\n      },\n      color: [\"#229955\", \"#ff0000\", \"#9400ff\"],\n      series: [\n        {\n          name: t(\"Analytics.eqa_round_result\"),\n          type: \"pie\",\n          radius: \"55%\",\n          center: [\"50%\", \"60%\"],\n          data: pieChartData,\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: \"rgba(0, 0, 0, 0.5)\"\n            }\n          }\n        }\n      ]\n    };\n    return (\n      <div className=\"analytics m-sm-30\">\n        <div className=\"mb-sm-30\">\n          <Helmet>\n            <title>\n              {t(\"Dashboard.dashboard\")} | {t(\"web_site\")}\n            </title>\n          </Helmet>\n\n          <div className=\"mb-sm-30\">\n            <Breadcrumb routeSegments={[{ name: t(\"Dashboard.dashboard\") }]} />\n          </div>\n        </div>\n        <Grid container spacing={3}>\n          <Grid item lg={12} md={12} sm={12} xs={12}>   \n      \n          {/* {isAdmin && (\n            <Tab t={t}/>\n          )}\n          {!isAdmin && (\n            <HomePage t={t} />\n          )} */}\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles({}, { withTheme: true })(Dashboard1);\n"]},"metadata":{},"sourceType":"module"}