{"ast":null,"code":"import _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\Reagent\\\\ReagentInformation.jsx\";\nimport React, { Component } from \"react\";\nimport { Dialog, Button, DialogActions, Grid, Checkbox, FormControlLabel, DialogTitle, TextField, DialogContent, FormControl, MenuItem, Select, InputLabel, FormHelperText } from \"@material-ui/core\";\nimport { TextValidator } from \"react-material-ui-form-validator\";\nimport { checkCode, addNewReagent, updateReagent } from \"./ReagentService\";\nimport { MuiPickersUtilsProvider, DateTimePicker } from \"@material-ui/pickers\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport LocalConstants from \"./Constants\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport Draggable from 'react-draggable';\nimport Paper from '@material-ui/core/Paper';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../../../styles/views/_style.scss';\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n});\n\nfunction PaperComponent(props) {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    handle: \"#draggable-dialog-title\",\n    cancel: '[class*=\"MuiDialogContent-root\"]',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  })));\n}\n\nvar ReagentInformation = /*#__PURE__*/function (_Component) {\n  _inherits(ReagentInformation, _Component);\n\n  var _super = _createSuper(ReagentInformation);\n\n  function ReagentInformation() {\n    var _this;\n\n    _classCallCheck(this, ReagentInformation);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      name: \"\",\n      code: \"\",\n      description: \"\",\n      registrationNumber: \"\",\n      //Số đăng ký\n      dateOfIssue: new Date(),\n      //Ngày cấp\n      expirationDate: new Date(),\n      //Ngày hết hạn\n      activeIngredients: \"\",\n      //Hoạt chất\n      dosageForms: \"\",\n      //Dạng bào chế\n      packing: \"\",\n      //Quy cách đóng gói\n      registeredFacilityName: \"\",\n      //Tên cơ sở đăng ký\n      productionFacilityName: \"\",\n      //Tên cơ sở sản xuất\n      healthDepartmentDirectory: true,\n      //thuộc bộ y tế\n      testType: null,\n      //Thuộc phương pháp xét nghiệm nào\n      isActive: false,\n      isView: false,\n      hasTestType: false\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n      var item = _this.state.item;\n\n      if (source === \"switch\") {\n        item[\"isActive\"] = event.target.checked;\n\n        _this.setState({\n          item: item\n        });\n\n        return;\n      }\n\n      if (source === \"active\") {\n        item[\"healthDepartmentDirectory\"] = event.target.checked;\n\n        _this.setState({\n          item: item\n        });\n\n        return;\n      }\n\n      if (source === \"testType\") {\n        item[\"testType\"] = event.target.value;\n        item[\"hasTestType\"] = false;\n\n        _this.setState({\n          item: item\n        });\n      }\n\n      var name = event.target.name;\n      var value = event.target.value;\n      item[name] = value;\n\n      _this.setState({\n        item: item\n      }); // this.setState({\n      //   [event.target.name]: event.target.value\n      // });\n\n    };\n\n    _this.handleDateChange = function (date, name) {\n      var item = _this.state.item;\n\n      if (name === \"dateOfIssue\") {\n        item[\"dateOfIssue\"] = date;\n      }\n\n      if (name === \"expirationDate\") {\n        item[\"expirationDate\"] = date;\n      }\n\n      _this.setState({\n        item: item\n      });\n    };\n\n    _this.handleDateOfIssueChange = function (date) {\n      var item = _this.state.item;\n      item[\"dateOfIssue\"] = date;\n\n      _this.setState({\n        item: item\n      });\n    };\n\n    _this.handleExpirationDateChange = function (date) {\n      var item = _this.state.item;\n      item[\"expirationDate\"] = date;\n\n      _this.setState({\n        item: item\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ReagentInformation, [{\n    key: \"list\",\n    value: function list() {\n      var listMethod = [{\n        value: LocalConstants.EQAResultReportTypeMethod.Elisa,\n        name: \"Elisa\"\n      }, {\n        value: LocalConstants.EQAResultReportTypeMethod.FastTest,\n        name: \"Test nhanh\"\n      }, {\n        value: LocalConstants.EQAResultReportTypeMethod.ECL,\n        name: \"Điện hóa phát quang\"\n      }, {\n        value: LocalConstants.EQAResultReportTypeMethod.SERODIA,\n        name: \"Serodia\"\n      }]; // console.log(listMethod);\n\n      this.setState({\n        listMethod: listMethod\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item;\n\n      if (item == null) {\n        item = {};\n      }\n\n      this.setState({\n        item: item\n      });\n      this.list(); // ValidatorForm.addValidationRule('checkMaxLength', (value) => {\n      //   if (value.length > 1020) {\n      //     return false;\n      //   }\n      //   return true;\n      // });\n      // ValidatorForm.addValidationRule('checkBox', (value) => {\n      //   if (this.state.healthDepartmentDirectory == true) {\n      //     if (value.length == 0) {\n      //       return false;\n      //     }\n      //   }\n      //   return true;\n      // });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state$item,\n          _this$state$item2,\n          _this$state$item3,\n          _this$state$item4,\n          _this$state$item5,\n          _this$state$item6,\n          _this$state$item7,\n          _this$state$item8,\n          _this$state$item9,\n          _this$state$item10,\n          _this$state$item11,\n          _this$state$item12,\n          _this$state$item13,\n          _this$state$item14,\n          _this$state$item15,\n          _this2 = this,\n          _this$state$item16;\n\n      var _this$state = this.state,\n          id = _this$state.id,\n          name = _this$state.name,\n          code = _this$state.code,\n          isView = _this$state.isView,\n          registrationNumber = _this$state.registrationNumber,\n          dateOfIssue = _this$state.dateOfIssue,\n          expirationDate = _this$state.expirationDate,\n          activeIngredients = _this$state.activeIngredients,\n          dosageForms = _this$state.dosageForms,\n          packing = _this$state.packing,\n          registeredFacilityName = _this$state.registeredFacilityName,\n          productionFacilityName = _this$state.productionFacilityName,\n          healthDepartmentDirectory = _this$state.healthDepartmentDirectory,\n          testType = _this$state.testType,\n          listMethod = _this$state.listMethod,\n          description = _this$state.description,\n          hasTestType = _this$state.hasTestType;\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          handleClose = _this$props2.handleClose,\n          handleOKEditClose = _this$props2.handleOKEditClose,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n;\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        className: \"mb-16\",\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 22\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 45\n          }\n        }, \" * \"), t(\"reagent.name\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"name\",\n        value: (_this$state$item = this.state.item) === null || _this$state$item === void 0 ? void 0 : _this$state$item.name,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 22\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 45\n          }\n        }, \" * \"), t(\"Code\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"code\",\n        value: (_this$state$item2 = this.state.item) === null || _this$state$item2 === void 0 ? void 0 : _this$state$item2.code,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 22\n          }\n        }, t(\"Description\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        multiline: true,\n        rowsMax: 4,\n        name: \"description\",\n        value: (_this$state$item3 = this.state.item) === null || _this$state$item3 === void 0 ? void 0 : _this$state$item3.description,\n        validators: [\"checkMaxLength\"],\n        errorMessages: [t('MaxLength')],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 22\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 45\n          }\n        }, \" * \"), t(\"reagent.activeIngredients\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"activeIngredients\",\n        multiline: true,\n        rowsMax: 4,\n        value: (_this$state$item4 = this.state.item) === null || _this$state$item4 === void 0 ? void 0 : _this$state$item4.activeIngredients,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 22\n          }\n        }, t(\"reagent.dosageForms\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"dosageForms\",\n        value: (_this$state$item5 = this.state.item) === null || _this$state$item5 === void 0 ? void 0 : _this$state$item5.dosageForms,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 22\n          }\n        }, t(\"reagent.packing\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"packing\",\n        value: (_this$state$item6 = this.state.item) === null || _this$state$item6 === void 0 ? void 0 : _this$state$item6.packing,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(DateTimePicker, {\n        className: \"w-100\",\n        margin: \"none\",\n        id: \"mui-pickers-date\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 24\n          }\n        }, t(\"reagent.dateOfIssue\")),\n        inputVariant: \"standard\",\n        type: \"text\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        value: ((_this$state$item7 = this.state.item) === null || _this$state$item7 === void 0 ? void 0 : _this$state$item7.dateOfIssue) ? (_this$state$item8 = this.state.item) === null || _this$state$item8 === void 0 ? void 0 : _this$state$item8.dateOfIssue : new Date(),\n        onChange: this.handleDateOfIssueChange,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        inputVariant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(DateTimePicker, {\n        className: \"w-100\",\n        margin: \"none\",\n        id: \"mui-pickers-date\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 24\n          }\n        }, t(\"reagent.expirationDate\")),\n        inputVariant: \"standard\",\n        type: \"text\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        value: ((_this$state$item9 = this.state.item) === null || _this$state$item9 === void 0 ? void 0 : _this$state$item9.expirationDate) ? (_this$state$item10 = this.state.item) === null || _this$state$item10 === void 0 ? void 0 : _this$state$item10.expirationDate : new Date(),\n        onChange: this.handleExpirationDateChange,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        inputVariant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 22\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 45\n          }\n        }, \" * \"), t(\"reagent.registrationNumber\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"registrationNumber\",\n        value: (_this$state$item11 = this.state.item) === null || _this$state$item11 === void 0 ? void 0 : _this$state$item11.registrationNumber,\n        validators: [\"checkBox\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 22\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 45\n          }\n        }, \" * \"), t(\"reagent.registeredFacilityName\")),\n        onChange: this.handleChange,\n        type: \"textarea\",\n        multiline: true,\n        rowsMax: 4,\n        name: \"registeredFacilityName\",\n        value: (_this$state$item12 = this.state.item) === null || _this$state$item12 === void 0 ? void 0 : _this$state$item12.registeredFacilityName,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 22\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 45\n          }\n        }, \" * \"), t(\"reagent.productionFacilityName\")),\n        onChange: this.handleChange,\n        multiline: true,\n        rowsMax: 4,\n        type: \"text\",\n        name: \"productionFacilityName\",\n        value: (_this$state$item13 = this.state.item) === null || _this$state$item13 === void 0 ? void 0 : _this$state$item13.productionFacilityName,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        error: (_this$state$item14 = this.state.item) === null || _this$state$item14 === void 0 ? void 0 : _this$state$item14.hasTestType,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"testType\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 47\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 70\n        }\n      }, \" * \"), t(\"reagent.reagentType\"))), /*#__PURE__*/React.createElement(Select, {\n        value: (_this$state$item15 = this.state.item) === null || _this$state$item15 === void 0 ? void 0 : _this$state$item15.testType,\n        onClick: function onClick(event) {\n          return _this2.handleChange(event, \"testType\");\n        },\n        inputProps: {\n          name: \"testType\",\n          id: \"testType\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 15\n        }\n      }, listMethod.map(function (type) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: type.value,\n          value: type.value,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 19\n          }\n        }, type.name);\n      })), ((_this$state$item16 = this.state.item) === null || _this$state$item16 === void 0 ? void 0 : _this$state$item16.hasTestType) && /*#__PURE__*/React.createElement(FormHelperText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 48\n        }\n      }, t(\"general.errorMessages_required\"))))));\n    }\n  }]);\n\n  return ReagentInformation;\n}(Component);\n\nexport default ReagentInformation;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/Reagent/ReagentInformation.jsx"],"names":["React","Component","Dialog","Button","DialogActions","Grid","Checkbox","FormControlLabel","DialogTitle","TextField","DialogContent","FormControl","MenuItem","Select","InputLabel","FormHelperText","TextValidator","checkCode","addNewReagent","updateReagent","MuiPickersUtilsProvider","DateTimePicker","Autocomplete","LocalConstants","DateFnsUtils","Draggable","Paper","toast","configure","autoClose","draggable","limit","PaperComponent","props","ReagentInformation","state","name","code","description","registrationNumber","dateOfIssue","Date","expirationDate","activeIngredients","dosageForms","packing","registeredFacilityName","productionFacilityName","healthDepartmentDirectory","testType","isActive","isView","hasTestType","handleChange","event","source","persist","item","target","checked","setState","value","handleDateChange","date","handleDateOfIssueChange","handleExpirationDateChange","listMethod","EQAResultReportTypeMethod","Elisa","FastTest","ECL","SERODIA","open","handleClose","list","id","handleOKEditClose","t","i18n","color","map","type"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  DialogActions,\r\n  Grid,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  DialogTitle,\r\n  TextField,\r\n  DialogContent,\r\n  FormControl,\r\n  MenuItem,\r\n  Select,\r\n  InputLabel,\r\n  FormHelperText\r\n} from \"@material-ui/core\";\r\nimport { TextValidator } from \"react-material-ui-form-validator\";\r\nimport { checkCode, addNewReagent, updateReagent } from \"./ReagentService\";\r\nimport { MuiPickersUtilsProvider, DateTimePicker } from \"@material-ui/pickers\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport LocalConstants from \"./Constants\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport Draggable from 'react-draggable';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../../styles/views/_style.scss';\r\n\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit: 3\r\n});\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nclass ReagentInformation extends Component {\r\n  state = {\r\n    name: \"\",\r\n    code: \"\",\r\n    description: \"\",\r\n    registrationNumber: \"\",//Số đăng ký\r\n    dateOfIssue: new Date(), //Ngày cấp\r\n    expirationDate: new Date(), //Ngày hết hạn\r\n    activeIngredients: \"\", //Hoạt chất\r\n    dosageForms: \"\", //Dạng bào chế\r\n    packing: \"\", //Quy cách đóng gói\r\n    registeredFacilityName: \"\", //Tên cơ sở đăng ký\r\n    productionFacilityName: \"\", //Tên cơ sở sản xuất\r\n    healthDepartmentDirectory: true, //thuộc bộ y tế\r\n    testType: null, //Thuộc phương pháp xét nghiệm nào\r\n    isActive: false,\r\n    isView: false,\r\n    hasTestType: false\r\n  };\r\n\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    let { item } = this.state\r\n    if (source === \"switch\") {\r\n      item[\"isActive\"] = event.target.checked\r\n      this.setState({ item: item });\r\n      return;\r\n    }\r\n    if (source === \"active\") {\r\n      item[\"healthDepartmentDirectory\"] = event.target.checked\r\n      this.setState({ item: item });\r\n      return;\r\n    }\r\n    if (source === \"testType\") {\r\n      item[\"testType\"] = event.target.value\r\n      item[\"hasTestType\"] = false\r\n      this.setState({ item: item });\r\n    }\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n    item[name] = value\r\n    this.setState({\r\n      item: item\r\n    });\r\n    // this.setState({\r\n    //   [event.target.name]: event.target.value\r\n    // });\r\n  };\r\n\r\n  handleDateChange = (date, name) => {\r\n    let { item } = this.state\r\n    if (name === \"dateOfIssue\") {\r\n      item[\"dateOfIssue\"] = date\r\n    }\r\n    if (name === \"expirationDate\") {\r\n      item[\"expirationDate\"] = date\r\n    }\r\n\r\n    this.setState({\r\n      item: item\r\n    });\r\n  };\r\n  handleDateOfIssueChange = (date) => {\r\n    let { item } = this.state\r\n    item[\"dateOfIssue\"] = date\r\n    this.setState({\r\n      item: item\r\n    });\r\n  }\r\n\r\n  handleExpirationDateChange = (date) => {\r\n    let { item } = this.state\r\n    item[\"expirationDate\"] = date\r\n    this.setState({\r\n      item: item\r\n    });\r\n  }\r\n\r\n  list() {\r\n    let listMethod = [\r\n      { value: LocalConstants.EQAResultReportTypeMethod.Elisa, name: \"Elisa\" },\r\n      { value: LocalConstants.EQAResultReportTypeMethod.FastTest, name: \"Test nhanh\" },\r\n      { value: LocalConstants.EQAResultReportTypeMethod.ECL, name: \"Điện hóa phát quang\" },\r\n      { value: LocalConstants.EQAResultReportTypeMethod.SERODIA, name: \"Serodia\" },\r\n    ]\r\n    // console.log(listMethod);\r\n    this.setState({ listMethod: listMethod });\r\n  }\r\n\r\n\r\n  componentWillMount() {\r\n    let { open, handleClose, item } = this.props;\r\n    if (item == null) {\r\n      item = {}\r\n    }\r\n    this.setState({ item: item });\r\n    this.list();\r\n\r\n\r\n    // ValidatorForm.addValidationRule('checkMaxLength', (value) => {\r\n    //   if (value.length > 1020) {\r\n    //     return false;\r\n    //   }\r\n    //   return true;\r\n    // });\r\n\r\n    // ValidatorForm.addValidationRule('checkBox', (value) => {\r\n    //   if (this.state.healthDepartmentDirectory == true) {\r\n    //     if (value.length == 0) {\r\n    //       return false;\r\n    //     }\r\n    //   }\r\n    //   return true;\r\n    // });\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      id,\r\n      name,\r\n      code,\r\n      isView,\r\n      registrationNumber,//Số đăng ký\r\n      dateOfIssue, //Ngày cấp\r\n      expirationDate, //Ngày hết hạn\r\n      activeIngredients, //Hoạt chất\r\n      dosageForms, //Dạng bào chế\r\n      packing, //Quy cách đóng gói\r\n      registeredFacilityName, //Tên cơ sở đăng ký\r\n      productionFacilityName, //Tên cơ sở sản xuất\r\n      healthDepartmentDirectory,\r\n      testType,\r\n      listMethod,\r\n      description,\r\n      hasTestType\r\n    } = this.state;\r\n\r\n    let { open, handleClose, handleOKEditClose, t, i18n } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <Grid className=\"mb-16\" container spacing={2}>\r\n          <Grid item lg={6} md={6} sm={12} xs={12}>\r\n            <TextValidator\r\n              className=\"w-100\"\r\n              label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                {t(\"reagent.name\")}\r\n              </span>}\r\n              onChange={this.handleChange}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={this.state.item?.name}\r\n              validators={[\"required\"]}\r\n              errorMessages={[t(\"general.errorMessages_required\")]}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item lg={6} md={6} sm={12} xs={12}>\r\n            <TextValidator\r\n              className=\"w-100\"\r\n              label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                {t(\"Code\")}\r\n              </span>}\r\n              onChange={this.handleChange}\r\n              type=\"text\"\r\n              name=\"code\"\r\n              value={this.state.item?.code}\r\n              validators={[\"required\"]}\r\n              errorMessages={[t(\"general.errorMessages_required\")]}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item lg={6} md={6} sm={12} xs={12}>\r\n            <TextValidator\r\n              className=\"w-100\"\r\n              label={<span className=\"font\">{t(\"Description\")}</span>}\r\n              onChange={this.handleChange}\r\n              type=\"text\"\r\n              multiline\r\n              rowsMax={4}\r\n              name=\"description\"\r\n              value={this.state.item?.description}\r\n              validators={[\"checkMaxLength\"]}\r\n              errorMessages={[t('MaxLength')]}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item lg={6} md={6} sm={12} xs={12}>\r\n            <TextValidator\r\n              className=\"w-100\"\r\n              label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                {t(\"reagent.activeIngredients\")}\r\n              </span>}\r\n              onChange={this.handleChange}\r\n              type=\"text\"\r\n              name=\"activeIngredients\"\r\n              multiline\r\n              rowsMax={4}\r\n              value={this.state.item?.activeIngredients}\r\n              validators={[\"required\"]}\r\n              errorMessages={[t(\"general.errorMessages_required\")]}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item lg={6} md={6} sm={12} xs={12}>\r\n            <TextValidator\r\n              className=\"w-100\"\r\n              label={<span className=\"font\">{t(\"reagent.dosageForms\")}</span>}\r\n              onChange={this.handleChange}\r\n              type=\"text\"\r\n              name=\"dosageForms\"\r\n              value={this.state.item?.dosageForms}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item lg={6} md={6} sm={12} xs={12}>\r\n\r\n            <TextValidator\r\n              className=\"w-100\"\r\n              label={<span className=\"font\">{t(\"reagent.packing\")}</span>}\r\n              onChange={this.handleChange}\r\n              type=\"text\"\r\n              name=\"packing\"\r\n              value={this.state.item?.packing}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n\r\n          </Grid>\r\n\r\n          <Grid item lg={6} md={6} sm={12} xs={12}>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n              <DateTimePicker\r\n                className=\"w-100\"\r\n                margin=\"none\"\r\n                id=\"mui-pickers-date\"\r\n                label={<span className=\"font\">{t(\"reagent.dateOfIssue\")}</span>}\r\n                inputVariant=\"standard\"\r\n                type=\"text\"\r\n                autoOk={false}\r\n                format=\"dd/MM/yyyy\"\r\n                value={this.state.item?.dateOfIssue ? this.state.item?.dateOfIssue : new Date()}\r\n                onChange={this.handleDateOfIssueChange}\r\n                validators={[\"required\"]}\r\n                errorMessages={[t(\"general.errorMessages_required\")]}\r\n                inputVariant=\"outlined\"\r\n                size=\"small\"\r\n              />\r\n            </MuiPickersUtilsProvider>\r\n          </Grid>\r\n\r\n\r\n          <Grid item lg={6} md={6} sm={12} xs={12}>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n              <DateTimePicker\r\n                className=\"w-100\"\r\n                margin=\"none\"\r\n                id=\"mui-pickers-date\"\r\n                label={<span className=\"font\">{t(\"reagent.expirationDate\")}</span>}\r\n                inputVariant=\"standard\"\r\n                type=\"text\"\r\n                autoOk={false}\r\n                format=\"dd/MM/yyyy\"\r\n                value={this.state.item?.expirationDate ? this.state.item?.expirationDate : new Date()}\r\n                onChange={this.handleExpirationDateChange}\r\n                validators={[\"required\"]}\r\n                errorMessages={[t(\"general.errorMessages_required\")]}\r\n                inputVariant=\"outlined\"\r\n                size=\"small\"\r\n              />\r\n            </MuiPickersUtilsProvider>\r\n          </Grid>\r\n\r\n          <Grid item lg={6} md={6} sm={12} xs={12}>\r\n            <TextValidator\r\n              className=\"w-100\"\r\n              label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                {t(\"reagent.registrationNumber\")}\r\n              </span>}\r\n              onChange={this.handleChange}\r\n              type=\"text\"\r\n              name=\"registrationNumber\"\r\n              value={this.state.item?.registrationNumber}\r\n              validators={[\"checkBox\"]}\r\n              errorMessages={[t(\"general.errorMessages_required\")]}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item lg={6} md={6} sm={12} xs={12}>\r\n            <TextValidator\r\n              className=\"w-100\"\r\n              label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                {t(\"reagent.registeredFacilityName\")}\r\n              </span>}\r\n              onChange={this.handleChange}\r\n              type=\"textarea\"\r\n              multiline\r\n              rowsMax={4}\r\n              name=\"registeredFacilityName\"\r\n              value={this.state.item?.registeredFacilityName}\r\n              validators={[\"required\"]}\r\n              errorMessages={[t(\"general.errorMessages_required\")]}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item lg={6} md={6} sm={12} xs={12}>\r\n            <TextValidator\r\n              className=\"w-100\"\r\n              label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                {t(\"reagent.productionFacilityName\")}\r\n              </span>}\r\n              onChange={this.handleChange}\r\n              multiline\r\n              rowsMax={4}\r\n              type=\"text\"\r\n              name=\"productionFacilityName\"\r\n              value={this.state.item?.productionFacilityName}\r\n              validators={[\"required\"]}\r\n              errorMessages={[t(\"general.errorMessages_required\")]}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item lg={6} md={6} sm={12} xs={12}>\r\n            <FormControl className=\"w-100\" error={this.state.item?.hasTestType} variant=\"outlined\" size=\"small\">\r\n              <InputLabel htmlFor=\"testType\">{<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                {t(\"reagent.reagentType\")}\r\n              </span>}</InputLabel>\r\n              <Select\r\n                value={this.state.item?.testType}\r\n                onClick={event => this.handleChange(event, \"testType\")}\r\n                inputProps={{\r\n                  name: \"testType\",\r\n                  id: \"testType\"\r\n                }}\r\n\r\n              >\r\n                {listMethod.map(type => (\r\n                  <MenuItem key={type.value} value={type.value}>\r\n                    {type.name}\r\n                  </MenuItem>\r\n\r\n                ))}\r\n              </Select>\r\n              {this.state.item?.hasTestType && <FormHelperText>{t(\"general.errorMessages_required\")}</FormHelperText>}\r\n            </FormControl>\r\n          </Grid>\r\n\r\n          {/* <Grid item lg={6} md={6} sm={12} xs={12}>\r\n            <FormControlLabel\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              value={this.state.item?.healthDepartmentDirectory}\r\n              className=\"mb-16\"\r\n              name=\"healthDepartmentDirectory\"\r\n              onChange={healthDepartmentDirectory => this.handleChange(healthDepartmentDirectory, \"active\")}\r\n              control={<Checkbox\r\n                checked={this.state.item?.healthDepartmentDirectory}\r\n              />}\r\n              label={<span className=\"font\">{t(\"reagent.healthDepartmentDirectory\")}</span>}\r\n            />\r\n          </Grid> */}\r\n        </Grid>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ReagentInformation;\r\n"]},"metadata":{},"sourceType":"module"}