{"ast":null,"code":"import _regeneratorRuntime from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\EQAResultReportEclia\\\\EQAResultReportEcliaEditorDialog.jsx\";\nimport React, { Component } from \"react\";\nimport { Dialog, Button, Grid, TextField, Icon, IconButton, FormControl, DialogTitle, DialogContent, DialogActions, Paper, FormHelperText, MenuItem, Checkbox, Select, FormControlLabel } from \"@material-ui/core\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { technicianSearchByPage, saveItem, checkReagentByHealthOrgRound, getEQASampleTubeByHealthOrgEQARoundId } from \"./EQAResultReportEcliaService\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport ConstantList from \"../../appConfig\";\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\nimport HealthOrgEQARoundPopup from \"../Component/HealthOrgEQARound/HealthOrgEQARoundPopup\";\nimport EQAResultReportEcliaTabs from \"./EQAResultReportEcliaTabs\";\nimport { searchByPage as reagentSearchByPage } from \"../Reagent/ReagentService\";\nimport Draggable from \"react-draggable\";\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport { MuiPickersUtilsProvider, DateTimePicker, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport LocalConstants from \"./Constants\";\nimport MaterialTable, { MTableToolbar, Chip, MTableBody, MTableHeader } from \"material-table\";\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { getCurrentUser, getListHealthOrgByUser } from \"../User/UserService\";\nimport \"../../../styles/views/_loadding.scss\";\nimport \"../../../styles/views/_style.scss\";\nimport clsx from \"clsx\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { exportToExcel } from \"./EQAResultReportEcliaService\";\nimport { saveAs } from \"file-saver\";\nimport EQAResultReportEcliaPrint from \"./EQAResultReportEcliaPrint\";\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n});\n\nfunction PaperComponent(props) {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    handle: \"#draggable-dialog-title\",\n    cancel: '[class*=\"MuiDialogContent-root\"]',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  })));\n}\n\nvar EQAResultReportEcliaEditorDialog = /*#__PURE__*/function (_Component) {\n  _inherits(EQAResultReportEcliaEditorDialog, _Component);\n\n  var _super = _createSuper(EQAResultReportEcliaEditorDialog);\n\n  function EQAResultReportEcliaEditorDialog(props) {\n    var _this;\n\n    _classCallCheck(this, EQAResultReportEcliaEditorDialog);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isViewButton: false,\n      hasErrorHealthOrgRound: false,\n      hasErrorEQARound: false,\n      isUsingIQC: false,\n      isUsingControlLine: false,\n      eqaRound: \"\",\n      healthOrgRound: \"\",\n      reagentLot: \"\",\n      order: \"\",\n      reagent: null,\n      technician: null,\n      dateSubmitResults: null,\n      personBuyReagent: \"\",\n      details: [],\n      supplyOfReagent: \"\",\n      timeToResult: \"\",\n      reagentExpiryDate: null,\n      testDate: new Date(),\n      reagentUnBoxDate: null,\n      shouldOpenSearchDialog: false,\n      shouldOpenConfirmationDialog: false,\n      shouldOpenSearchEQASampleSearchDialog: false,\n      listHealthOrgRound: [],\n      listReagent: [],\n      listTechnician: [],\n      listEQARound: [],\n      isFinalResult: false,\n      isRoleAdmin: false,\n      typeMethod: 4,\n      loading: false,\n      checkTheStatus: false,\n      shouldOpenPrintDialog: false\n    };\n\n    _this.handleDateChange = function (date, name) {\n      _this.setState({\n        [name]: date\n      });\n    };\n\n    _this.handleDialogClose = function () {\n      _this.setState({\n        shouldOpenConfirmationDialog: false,\n        shouldOpenPrintDialog: false\n      });\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"isFinalResult\") {\n        _this.setState({\n          isFinalResult: event.target.checked\n        });\n      }\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.handleHealthOrgRoundChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n    };\n\n    _this.handleRowDataCellChange = function (rowData, event) {\n      var details = _this.state.details;\n      var t = _this.props.t;\n\n      if (details != null && details.length > 0) {\n        details.forEach(function (element) {\n          if (element.tableData != null && rowData != null && rowData.tableData != null && element.tableData.id == rowData.tableData.id) {\n            if (event.target.name == \"sCOvalue\") {\n              if (element.sCOvalue == \"\") {\n                element.result = \"\";\n              }\n\n              element.sCOvalue = event.target.value;\n            } else if (event.target.name == \"result\") {\n              if (element.sCOvalue == \"\") {\n                if (event.target.value === LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\n                  element.sCOvalue = \"\";\n                  element.result = event.target.value;\n                } else {\n                  toast.warning(t(\"EQAResultReportEclia.notScOvalue\"));\n                }\n              } else {\n                if (event.target.value === LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\n                  element.sCOvalue = \"\";\n                }\n\n                element.result = event.target.value;\n              }\n            }\n          }\n        });\n\n        _this.setState({\n          details: details\n        });\n      }\n    };\n\n    _this.openCircularProgress = function () {\n      _this.setState({\n        loading: true\n      });\n    };\n\n    _this.handleFormSubmit = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var isCheck, t, _this$state, checkTheStatus, item, _this$state$item, id, details, healthOrgRound, reagent, typeMethod, otherReagent;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.openCircularProgress();\n\n            case 2:\n              isCheck = false;\n              t = _this.props.t;\n              _this$state = _this.state, checkTheStatus = _this$state.checkTheStatus, item = _this$state.item;\n              _this$state$item = _this.state.item, id = _this$state$item.id, details = _this$state$item.details, healthOrgRound = _this$state$item.healthOrgRound, reagent = _this$state$item.reagent, typeMethod = _this$state$item.typeMethod, otherReagent = _this$state$item.otherReagent;\n\n              _this.setState({\n                isView: true,\n                isRoleAdmin: false,\n                isViewButton: true\n              }); //Check null ket qua\n\n\n              if (details != null && details.length > 0) {\n                details.forEach(function (el) {\n                  if (el.result === null || el.result === \"\") {\n                    isCheck = true;\n                  }\n                });\n              } else {\n                isCheck = true;\n              }\n\n              if (!isCheck) {\n                _context.next = 12;\n                break;\n              }\n\n              toast.info(t(\"EQAResultReportElisa.notResult\"));\n\n              _this.setState({\n                loading: false,\n                isRoleAdmin: true,\n                isView: false,\n                isViewButton: false\n              });\n\n              return _context.abrupt(\"return\");\n\n            case 12:\n              if (!(healthOrgRound == null || healthOrgRound.id == null || reagent == null || reagent.id == null)) {\n                _context.next = 16;\n                break;\n              }\n\n              toast.info(t(\"EQAResultReportElisa.notData\"));\n\n              _this.setState({\n                loading: false,\n                isRoleAdmin: true,\n                isView: false,\n                isViewButton: false\n              });\n\n              return _context.abrupt(\"return\");\n\n            case 16:\n              if (ConstantList.CHECK_ERROR_RESULT && !otherReagent) {\n                checkReagentByHealthOrgRound(id, healthOrgRound.id, reagent.id, typeMethod).then(function (res) {\n                  if (res.data) {\n                    toast.warning(t(\"EqaResult.dulicateReagent\"));\n\n                    _this.setState({\n                      loading: false,\n                      isRoleAdmin: true,\n                      isView: false,\n                      isViewButton: false\n                    });\n                  } else {\n                    if (checkTheStatus) {\n                      item[\"isFinalResult\"] = true;\n                      item[\"dateSubmitResults\"] = new Date();\n\n                      _this.setState({\n                        item: item\n                      });\n                    }\n\n                    if (id) {\n                      saveItem(_objectSpread({}, _this.state.item)).then(function (response) {\n                        if (response.data != null && response.status == 200) {\n                          _this.setState(_objectSpread({}, _this.state.item)); // this.props.handleOKEditClose();\n\n\n                          toast.success(t(\"mess_edit\"));\n\n                          _this.setState({\n                            loading: false,\n                            isRoleAdmin: true,\n                            isView: false,\n                            isViewButton: false\n                          });\n                        }\n                      }).catch(function () {\n                        toast.warning(t(\"mess_edit_error\"));\n\n                        _this.setState({\n                          loading: false,\n                          isRoleAdmin: true,\n                          isView: false,\n                          isViewButton: false\n                        });\n                      });\n                    } else {\n                      saveItem(_objectSpread({}, _this.state.item)).then(function (response) {\n                        if (response.data != null && response.status == 200) {\n                          _this.state.item.id = response.data.id;\n\n                          _this.setState(_objectSpread({}, _this.state.item)); // this.props.handleOKEditClose();\n\n\n                          toast.success(t(\"mess_add\"));\n\n                          _this.setState({\n                            loading: false,\n                            isRoleAdmin: true,\n                            isView: false,\n                            isViewButton: false\n                          });\n                        }\n                      }).catch(function () {\n                        toast.warning(t(\"mess_add_error\"));\n\n                        _this.setState({\n                          loading: false,\n                          isRoleAdmin: true,\n                          isView: false,\n                          isViewButton: false\n                        });\n                      });\n                    }\n                  }\n                });\n              } else {\n                if (id) {\n                  if (checkTheStatus) {\n                    item[\"isFinalResult\"] = true;\n                    item[\"dateSubmitResults\"] = new Date();\n\n                    _this.setState({\n                      item: item\n                    });\n                  }\n\n                  saveItem(_objectSpread({}, _this.state.item)).then(function (response) {\n                    if (response.data != null && response.status == 200) {\n                      _this.setState(_objectSpread({}, _this.state.item)); // this.props.handleOKEditClose();\n\n\n                      toast.success(t(\"mess_edit\"));\n\n                      _this.setState({\n                        loading: false,\n                        isRoleAdmin: true,\n                        isView: false,\n                        isViewButton: false\n                      });\n                    }\n                  }).catch(function () {\n                    toast.warning(t(\"mess_edit_error\"));\n\n                    _this.setState({\n                      loading: false,\n                      isRoleAdmin: true,\n                      isView: false,\n                      isViewButton: false\n                    });\n                  });\n                } else {\n                  saveItem(_objectSpread({}, _this.state.item)).then(function (response) {\n                    if (response.data != null && response.status == 200) {\n                      _this.state.item.id = response.data.id;\n\n                      _this.setState(_objectSpread({}, _this.state.item)); // this.props.handleOKEditClose();\n\n\n                      toast.success(t(\"mess_add\"));\n\n                      _this.setState({\n                        loading: false,\n                        isRoleAdmin: true,\n                        isView: false,\n                        isViewButton: false\n                      });\n                    }\n                  }).catch(function () {\n                    toast.warning(t(\"mess_add_error\"));\n\n                    _this.setState({\n                      loading: false,\n                      isRoleAdmin: true,\n                      isView: false,\n                      isViewButton: false\n                    });\n                  });\n                }\n              }\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.sendResults = function () {\n      var _this$state2 = _this.state,\n          item = _this$state2.item,\n          checkTheStatus = _this$state2.checkTheStatus;\n      checkTheStatus = true;\n\n      _this.setState({\n        checkTheStatus: checkTheStatus\n      }, function () {});\n    };\n\n    _this.handleHealthOrgRoundPopupClose = function () {\n      _this.setState({\n        shouldOpenHealthOrgRoundPopup: false\n      }, function () {});\n    };\n\n    _this.handleSelectHealthOrgRound = function (healthOrgRound) {\n      if (healthOrgRound && healthOrgRound.id) {\n        _this.setState({\n          healthOrgRound: healthOrgRound\n        }, function () {\n          var _this2 = this;\n\n          var _this$state3 = this.state,\n              healthOrgRound = _this$state3.healthOrgRound,\n              details = _this$state3.details;\n          details = [];\n          getEQASampleTubeByHealthOrgEQARoundId(healthOrgRound.id).then(function (result) {\n            var listEQASampleTube = result.data;\n\n            if (listEQASampleTube != null && listEQASampleTube.length > 0) {\n              listEQASampleTube.forEach(function (tube) {\n                var eQAResultReportDetail = {};\n                eQAResultReportDetail.sampleTube = tube;\n                eQAResultReportDetail.sCOvalue = 0;\n                eQAResultReportDetail.result = \"\";\n                details.push(eQAResultReportDetail);\n              });\n            }\n\n            _this2.setState({\n              details\n            });\n          });\n        });\n      }\n\n      _this.handleHealthOrgRoundPopupClose();\n    };\n\n    _this.selectReagent = function (reagent) {\n      if (reagent != null && reagent.id != null) {\n        _this.setState({\n          reagent: reagent\n        }, function () {});\n      }\n    };\n\n    _this.selectTechnician = function (technician) {\n      if (technician != null && technician.id != null) {\n        _this.setState({\n          technician: technician\n        }, function () {});\n      }\n    };\n\n    _this.notificationFinalResult = function () {\n      _this.setState({\n        shouldOpenConfirmationDialog: true\n      });\n    };\n\n    _this.handleFinalResult = function () {\n      if (_this.state.isFinalResult == null || !_this.state.isFinalResult) {\n        _this.setState({\n          isFinalResult: true,\n          dateSubmitResults: new Date()\n        }, function () {});\n\n        _this.handleDialogClose();\n      }\n\n      if (_this.state.isFinalResult) {\n        _this.setState({\n          isFinalResult: false,\n          dateSubmitResults: new Date()\n        }, function () {});\n\n        _this.handleDialogClose();\n      }\n    };\n\n    _this.handleDialogFinalResultClose = function () {\n      // this.setState({isFinalResult:false, dateSubmitResults: null},()=>{\n      // })\n      _this.handleDialogClose();\n    };\n\n    _this.handleExportExcel = function () {\n      var t = _this.props.t;\n      exportToExcel(_this.state.id).then(function (res) {\n        toast.info(_this.props.t(\"general.successExport\"));\n        var blob = new Blob([res.data], {\n          type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n        });\n        saveAs(blob, \"Ketqua.xlsx\");\n      }).catch(function (err) {// console.log(err);\n      }); // console.log(this.state);\n    };\n\n    _this.handleExportPDF = function () {\n      _this.setState({\n        shouldOpenPrintDialog: true\n      });\n    };\n\n    _this.handleOKEditClose = function () {\n      _this.setState({\n        shouldOpenPrintDialog: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(EQAResultReportEcliaEditorDialog, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item,\n          isRoleAdmin = _this$props.isRoleAdmin,\n          isView = _this$props.isView,\n          listHealthOrgRound = _this$props.listHealthOrgRound;\n      this.setState({\n        isRoleAdmin: isRoleAdmin,\n        isView: isView\n      });\n\n      if (item && item.details && item.details.length > 0) {\n        item.details.sort(function (a, b) {\n          return a.orderNumber > b.orderNumber ? 1 : a.orderNumber === b.orderNumber ? a.sampleTube.code > b.sampleTube.code ? 1 : -1 : -1;\n        });\n      }\n\n      if (item.id == null) {\n        item[\"id\"] = null;\n        item[\"typeMethod\"] = 4;\n        item[\"otherReagent\"] = false;\n      }\n\n      if (listHealthOrgRound != null && listHealthOrgRound.length > 0) {\n        item[\"healthOrgRound\"] = listHealthOrgRound[0];\n      }\n\n      this.setState({\n        item: item,\n        listHealthOrgRound: listHealthOrgRound\n      });\n      this.setState(_objectSpread({}, item), function () {});\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          handleClose = _this$props2.handleClose,\n          handleOKEditClose = _this$props2.handleOKEditClose,\n          isView = _this$props2.isView,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n;\n      var _this$state4 = this.state,\n          id = _this$state4.id,\n          isRoleAdmin = _this$state4.isRoleAdmin,\n          isViewButton = _this$state4.isViewButton,\n          isFinalResult = _this$state4.isFinalResult,\n          loading = _this$state4.loading;\n      return /*#__PURE__*/React.createElement(Dialog, {\n        open: open,\n        PaperComponent: PaperComponent,\n        maxWidth: \"lg\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: clsx(\"wrapperButton\", !loading && \"hidden\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(CircularProgress, {\n        className: \"buttonProgress\",\n        size: 24,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }\n      })), this.state.shouldOpenPrintDialog && /*#__PURE__*/React.createElement(EQAResultReportEcliaPrint, {\n        t: t,\n        i18n: i18n,\n        handleClose: this.handleDialogClose,\n        open: this.state.shouldOpenPrintDialog,\n        handleOKEditClose: this.handleOKEditClose,\n        item: this.state.item,\n        pdf: true // isRoleAdmin={this.state.isRoleAdmin}\n        // isView={this.state.isView}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DialogTitle, {\n        style: {\n          cursor: \"move\"\n        },\n        id: \"draggable-dialog-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"mb-20 styleColor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 13\n        }\n      }, !isView ? t(\"SaveUpdate\") : t(\"Details\")), /*#__PURE__*/React.createElement(IconButton, {\n        style: {\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\"\n        },\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        color: \"error\",\n        title: t(\"close\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 15\n        }\n      }, \"close\"))), /*#__PURE__*/React.createElement(DialogContent, {\n        dividers: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 11\n        }\n      }, this.state.shouldOpenConfirmationDialog && /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        title: t(\"confirm\"),\n        open: this.state.shouldOpenConfirmationDialog,\n        onConfirmDialogClose: this.handleDialogFinalResultClose,\n        onYesClick: this.handleFinalResult,\n        text: isFinalResult ? t(\"EqaResult.unFinalResultConfirm\") : t(\"EqaResult.FinalResultConfirm\"),\n        Yes: t(\"general.Yes\"),\n        No: t(\"general.No\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(EQAResultReportEcliaTabs, {\n        t: t,\n        i18n: i18n,\n        item: this.state.item,\n        isView: this.props.isView,\n        isRoleAdmin: this.props.isRoleAdmin,\n        listHealthOrgRound: this.props.listHealthOrgRound,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(DialogActions, {\n        spacing: 4,\n        className: \"flex flex-end flex-middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        type: \"submit\",\n        color: \"inherit\",\n        onClick: function onClick() {\n          return _this3.sendResults();\n        },\n        style: {\n          backgroundColor: \"#4caf50\",\n          color: \"#fff\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 13\n        }\n      }, t(\"EQAResultReportFastTest.sendResult\")), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        type: \"button\",\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 13\n        }\n      }, \" \", t(\"Cancel\")), (!isView || isRoleAdmin) && /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        disabled: isViewButton,\n        color: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 15\n        }\n      }, t(\"Save\")), this.state.id && /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\" // disabled={isViewButton}\n        ,\n        color: \"primary\",\n        type: \"button\",\n        onClick: this.handleExportPDF,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 15\n        }\n      }, t(\"Xuất PDF\")))));\n    }\n  }]);\n\n  return EQAResultReportEcliaEditorDialog;\n}(Component);\n\nexport default EQAResultReportEcliaEditorDialog;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/EQAResultReportEclia/EQAResultReportEcliaEditorDialog.jsx"],"names":["React","Component","Dialog","Button","Grid","TextField","Icon","IconButton","FormControl","DialogTitle","DialogContent","DialogActions","Paper","FormHelperText","MenuItem","Checkbox","Select","FormControlLabel","ValidatorForm","TextValidator","technicianSearchByPage","saveItem","checkReagentByHealthOrgRound","getEQASampleTubeByHealthOrgEQARoundId","Autocomplete","ConstantList","AsynchronousAutocomplete","HealthOrgEQARoundPopup","EQAResultReportEcliaTabs","searchByPage","reagentSearchByPage","Draggable","Breadcrumb","ConfirmationDialog","MuiPickersUtilsProvider","DateTimePicker","KeyboardDatePicker","DateFnsUtils","LocalConstants","MaterialTable","MTableToolbar","Chip","MTableBody","MTableHeader","useTranslation","withTranslation","Trans","toast","getCurrentUser","getListHealthOrgByUser","clsx","CircularProgress","exportToExcel","saveAs","EQAResultReportEcliaPrint","configure","autoClose","draggable","limit","PaperComponent","props","EQAResultReportEcliaEditorDialog","state","isViewButton","hasErrorHealthOrgRound","hasErrorEQARound","isUsingIQC","isUsingControlLine","eqaRound","healthOrgRound","reagentLot","order","reagent","technician","dateSubmitResults","personBuyReagent","details","supplyOfReagent","timeToResult","reagentExpiryDate","testDate","Date","reagentUnBoxDate","shouldOpenSearchDialog","shouldOpenConfirmationDialog","shouldOpenSearchEQASampleSearchDialog","listHealthOrgRound","listReagent","listTechnician","listEQARound","isFinalResult","isRoleAdmin","typeMethod","loading","checkTheStatus","shouldOpenPrintDialog","handleDateChange","date","name","setState","handleDialogClose","handleChange","event","source","persist","isActive","target","checked","value","handleHealthOrgRoundChange","handleRowDataCellChange","rowData","t","length","forEach","element","tableData","id","sCOvalue","result","EQAResultReportDetail_TestValue","Not_Implemented","warning","openCircularProgress","handleFormSubmit","isCheck","item","otherReagent","isView","el","info","CHECK_ERROR_RESULT","then","res","data","response","status","success","catch","sendResults","handleHealthOrgRoundPopupClose","shouldOpenHealthOrgRoundPopup","handleSelectHealthOrgRound","listEQASampleTube","tube","eQAResultReportDetail","sampleTube","push","selectReagent","selectTechnician","notificationFinalResult","handleFinalResult","handleDialogFinalResultClose","handleExportExcel","blob","Blob","type","err","handleExportPDF","handleOKEditClose","open","handleClose","sort","a","b","orderNumber","code","i18n","cursor","position","right","top","backgroundColor","color"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  TextField,\r\n  Icon,\r\n  IconButton,\r\n  FormControl,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Paper,\r\n  FormHelperText,\r\n  MenuItem,\r\n  Checkbox,\r\n  Select,\r\n  FormControlLabel,\r\n} from \"@material-ui/core\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport {\r\n  technicianSearchByPage,\r\n  saveItem,\r\n  checkReagentByHealthOrgRound,\r\n  getEQASampleTubeByHealthOrgEQARoundId,\r\n} from \"./EQAResultReportEcliaService\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport ConstantList from \"../../appConfig\";\r\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\r\nimport HealthOrgEQARoundPopup from \"../Component/HealthOrgEQARound/HealthOrgEQARoundPopup\";\r\nimport EQAResultReportEcliaTabs from \"./EQAResultReportEcliaTabs\";\r\nimport { searchByPage as reagentSearchByPage } from \"../Reagent/ReagentService\";\r\nimport Draggable from \"react-draggable\";\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  DateTimePicker,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport LocalConstants from \"./Constants\";\r\nimport MaterialTable, {\r\n  MTableToolbar,\r\n  Chip,\r\n  MTableBody,\r\n  MTableHeader,\r\n} from \"material-table\";\r\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { getCurrentUser, getListHealthOrgByUser } from \"../User/UserService\";\r\nimport \"../../../styles/views/_loadding.scss\";\r\nimport \"../../../styles/views/_style.scss\";\r\nimport clsx from \"clsx\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { exportToExcel } from \"./EQAResultReportEcliaService\";\r\nimport { saveAs } from \"file-saver\";\r\nimport EQAResultReportEcliaPrint from \"./EQAResultReportEcliaPrint\";\r\n\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit: 3,\r\n});\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#draggable-dialog-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nclass EQAResultReportEcliaEditorDialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  state = {\r\n    isViewButton: false,\r\n    hasErrorHealthOrgRound: false,\r\n    hasErrorEQARound: false,\r\n    isUsingIQC: false,\r\n    isUsingControlLine: false,\r\n    eqaRound: \"\",\r\n    healthOrgRound: \"\",\r\n    reagentLot: \"\",\r\n    order: \"\",\r\n    reagent: null,\r\n    technician: null,\r\n    dateSubmitResults: null,\r\n    personBuyReagent: \"\",\r\n    details: [],\r\n    supplyOfReagent: \"\",\r\n    timeToResult: \"\",\r\n    reagentExpiryDate: null,\r\n    testDate: new Date(),\r\n    reagentUnBoxDate: null,\r\n    shouldOpenSearchDialog: false,\r\n    shouldOpenConfirmationDialog: false,\r\n    shouldOpenSearchEQASampleSearchDialog: false,\r\n    listHealthOrgRound: [],\r\n    listReagent: [],\r\n    listTechnician: [],\r\n    listEQARound: [],\r\n    isFinalResult: false,\r\n    isRoleAdmin: false,\r\n    typeMethod: 4,\r\n    loading: false,\r\n    checkTheStatus: false,\r\n    shouldOpenPrintDialog: false,\r\n  };\r\n\r\n  handleDateChange = (date, name) => {\r\n    this.setState({\r\n      [name]: date,\r\n    });\r\n  };\r\n  handleDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenConfirmationDialog: false,\r\n      shouldOpenPrintDialog: false,\r\n    });\r\n  };\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n    if (source === \"isFinalResult\") {\r\n      this.setState({ isFinalResult: event.target.checked });\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleHealthOrgRoundChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n  };\r\n\r\n  handleRowDataCellChange = (rowData, event) => {\r\n    let { details } = this.state;\r\n    let { t } = this.props;\r\n    if (details != null && details.length > 0) {\r\n      details.forEach((element) => {\r\n        if (\r\n          element.tableData != null &&\r\n          rowData != null &&\r\n          rowData.tableData != null &&\r\n          element.tableData.id == rowData.tableData.id\r\n        ) {\r\n          if (event.target.name == \"sCOvalue\") {\r\n            if (element.sCOvalue == \"\") {\r\n              element.result = \"\";\r\n            }\r\n            element.sCOvalue = event.target.value;\r\n          } else if (event.target.name == \"result\") {\r\n            if (element.sCOvalue == \"\") {\r\n              if (\r\n                event.target.value ===\r\n                LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented\r\n              ) {\r\n                element.sCOvalue = \"\";\r\n                element.result = event.target.value;\r\n              } else {\r\n                toast.warning(t(\"EQAResultReportEclia.notScOvalue\"));\r\n              }\r\n            } else {\r\n              if (\r\n                event.target.value ===\r\n                LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented\r\n              ) {\r\n                element.sCOvalue = \"\";\r\n              }\r\n              element.result = event.target.value;\r\n            }\r\n          }\r\n        }\r\n      });\r\n      this.setState({ details: details });\r\n    }\r\n  };\r\n\r\n  openCircularProgress = () => {\r\n    this.setState({ loading: true });\r\n  };\r\n\r\n  handleFormSubmit = async () => {\r\n    await this.openCircularProgress();\r\n    let isCheck = false;\r\n    let { t } = this.props;\r\n    let { checkTheStatus, item } = this.state;\r\n    let {\r\n      id,\r\n      details,\r\n      healthOrgRound,\r\n      reagent,\r\n      typeMethod,\r\n      otherReagent,\r\n    } = this.state.item;\r\n    this.setState({ isView: true, isRoleAdmin: false, isViewButton: true });\r\n    //Check null ket qua\r\n    if (details != null && details.length > 0) {\r\n      details.forEach((el) => {\r\n        if (el.result === null || el.result === \"\") {\r\n          isCheck = true;\r\n        }\r\n      });\r\n    } else {\r\n      isCheck = true;\r\n    }\r\n    if (isCheck) {\r\n      toast.info(t(\"EQAResultReportElisa.notResult\"));\r\n      this.setState({\r\n        loading: false,\r\n        isRoleAdmin: true,\r\n        isView: false,\r\n        isViewButton: false,\r\n      });\r\n      return;\r\n    }\r\n\r\n    //Check null du lieu\r\n    if (\r\n      healthOrgRound == null ||\r\n      healthOrgRound.id == null ||\r\n      reagent == null ||\r\n      reagent.id == null\r\n    ) {\r\n      toast.info(t(\"EQAResultReportElisa.notData\"));\r\n      this.setState({\r\n        loading: false,\r\n        isRoleAdmin: true,\r\n        isView: false,\r\n        isViewButton: false,\r\n      });\r\n      return;\r\n    }\r\n    if (ConstantList.CHECK_ERROR_RESULT && !otherReagent) {\r\n      checkReagentByHealthOrgRound(\r\n        id,\r\n        healthOrgRound.id,\r\n        reagent.id,\r\n        typeMethod\r\n      ).then((res) => {\r\n        if (res.data) {\r\n          toast.warning(t(\"EqaResult.dulicateReagent\"));\r\n          this.setState({\r\n            loading: false,\r\n            isRoleAdmin: true,\r\n            isView: false,\r\n            isViewButton: false,\r\n          });\r\n        } else {\r\n          if (checkTheStatus) {\r\n            item[\"isFinalResult\"] = true;\r\n            item[\"dateSubmitResults\"] = new Date();\r\n            this.setState({ item: item });\r\n          }\r\n          if (id) {\r\n            saveItem({\r\n              ...this.state.item,\r\n            })\r\n              .then((response) => {\r\n                if (response.data != null && response.status == 200) {\r\n                  this.setState({ ...this.state.item });\r\n                  // this.props.handleOKEditClose();\r\n                  toast.success(t(\"mess_edit\"));\r\n                  this.setState({\r\n                    loading: false,\r\n                    isRoleAdmin: true,\r\n                    isView: false,\r\n                    isViewButton: false,\r\n                  });\r\n                }\r\n              })\r\n              .catch(() => {\r\n                toast.warning(t(\"mess_edit_error\"));\r\n                this.setState({\r\n                  loading: false,\r\n                  isRoleAdmin: true,\r\n                  isView: false,\r\n                  isViewButton: false,\r\n                });\r\n              });\r\n          } else {\r\n            saveItem({\r\n              ...this.state.item,\r\n            })\r\n              .then((response) => {\r\n                if (response.data != null && response.status == 200) {\r\n                  this.state.item.id = response.data.id;\r\n                  this.setState({ ...this.state.item });\r\n                  // this.props.handleOKEditClose();\r\n                  toast.success(t(\"mess_add\"));\r\n                  this.setState({\r\n                    loading: false,\r\n                    isRoleAdmin: true,\r\n                    isView: false,\r\n                    isViewButton: false,\r\n                  });\r\n                }\r\n              })\r\n              .catch(() => {\r\n                toast.warning(t(\"mess_add_error\"));\r\n                this.setState({\r\n                  loading: false,\r\n                  isRoleAdmin: true,\r\n                  isView: false,\r\n                  isViewButton: false,\r\n                });\r\n              });\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      if (id) {\r\n        if (checkTheStatus) {\r\n          item[\"isFinalResult\"] = true;\r\n          item[\"dateSubmitResults\"] = new Date();\r\n          this.setState({ item: item });\r\n        }\r\n        saveItem({\r\n          ...this.state.item,\r\n        })\r\n          .then((response) => {\r\n            if (response.data != null && response.status == 200) {\r\n              this.setState({ ...this.state.item });\r\n              // this.props.handleOKEditClose();\r\n              toast.success(t(\"mess_edit\"));\r\n              this.setState({\r\n                loading: false,\r\n                isRoleAdmin: true,\r\n                isView: false,\r\n                isViewButton: false,\r\n              });\r\n            }\r\n          })\r\n          .catch(() => {\r\n            toast.warning(t(\"mess_edit_error\"));\r\n            this.setState({\r\n              loading: false,\r\n              isRoleAdmin: true,\r\n              isView: false,\r\n              isViewButton: false,\r\n            });\r\n          });\r\n      } else {\r\n        saveItem({\r\n          ...this.state.item,\r\n        })\r\n          .then((response) => {\r\n            if (response.data != null && response.status == 200) {\r\n              this.state.item.id = response.data.id;\r\n              this.setState({ ...this.state.item });\r\n              // this.props.handleOKEditClose();\r\n              toast.success(t(\"mess_add\"));\r\n              this.setState({\r\n                loading: false,\r\n                isRoleAdmin: true,\r\n                isView: false,\r\n                isViewButton: false,\r\n              });\r\n            }\r\n          })\r\n          .catch(() => {\r\n            toast.warning(t(\"mess_add_error\"));\r\n            this.setState({\r\n              loading: false,\r\n              isRoleAdmin: true,\r\n              isView: false,\r\n              isViewButton: false,\r\n            });\r\n          });\r\n      }\r\n    }\r\n  };\r\n  sendResults = () => {\r\n    let { item, checkTheStatus } = this.state;\r\n    checkTheStatus = true;\r\n    this.setState({ checkTheStatus: checkTheStatus }, () => {});\r\n  };\r\n\r\n  componentWillMount() {\r\n    let {\r\n      open,\r\n      handleClose,\r\n      item,\r\n      isRoleAdmin,\r\n      isView,\r\n      listHealthOrgRound,\r\n    } = this.props;\r\n    this.setState({ isRoleAdmin: isRoleAdmin, isView: isView });\r\n    if (item && item.details && item.details.length > 0) {\r\n      item.details.sort((a, b) =>\r\n        a.orderNumber > b.orderNumber\r\n          ? 1\r\n          : a.orderNumber === b.orderNumber\r\n          ? a.sampleTube.code > b.sampleTube.code\r\n            ? 1\r\n            : -1\r\n          : -1\r\n      );\r\n    }\r\n    if (item.id == null) {\r\n      item[\"id\"] = null;\r\n      item[\"typeMethod\"] = 4;\r\n      item[\"otherReagent\"] = false;\r\n    }\r\n\r\n    if (listHealthOrgRound != null && listHealthOrgRound.length > 0) {\r\n      item[\"healthOrgRound\"] = listHealthOrgRound[0];\r\n    }\r\n    this.setState({ item: item, listHealthOrgRound: listHealthOrgRound });\r\n    this.setState(\r\n      {\r\n        ...item,\r\n      },\r\n      function () {}\r\n    );\r\n  }\r\n\r\n  handleHealthOrgRoundPopupClose = () => {\r\n    this.setState({ shouldOpenHealthOrgRoundPopup: false }, function () {});\r\n  };\r\n\r\n  handleSelectHealthOrgRound = (healthOrgRound) => {\r\n    if (healthOrgRound && healthOrgRound.id) {\r\n      this.setState({ healthOrgRound: healthOrgRound }, function () {\r\n        let { healthOrgRound, details } = this.state;\r\n        details = [];\r\n        getEQASampleTubeByHealthOrgEQARoundId(healthOrgRound.id).then(\r\n          (result) => {\r\n            let listEQASampleTube = result.data;\r\n            if (listEQASampleTube != null && listEQASampleTube.length > 0) {\r\n              listEQASampleTube.forEach((tube) => {\r\n                let eQAResultReportDetail = {};\r\n                eQAResultReportDetail.sampleTube = tube;\r\n                eQAResultReportDetail.sCOvalue = 0;\r\n                eQAResultReportDetail.result = \"\";\r\n                details.push(eQAResultReportDetail);\r\n              });\r\n            }\r\n            this.setState({ details });\r\n          }\r\n        );\r\n      });\r\n    }\r\n    this.handleHealthOrgRoundPopupClose();\r\n  };\r\n\r\n  selectReagent = (reagent) => {\r\n    if (reagent != null && reagent.id != null) {\r\n      this.setState({ reagent: reagent }, function () {});\r\n    }\r\n  };\r\n\r\n  selectTechnician = (technician) => {\r\n    if (technician != null && technician.id != null) {\r\n      this.setState({ technician: technician }, function () {});\r\n    }\r\n  };\r\n  notificationFinalResult = () => {\r\n    this.setState({ shouldOpenConfirmationDialog: true });\r\n  };\r\n  handleFinalResult = () => {\r\n    if (this.state.isFinalResult == null || !this.state.isFinalResult) {\r\n      this.setState(\r\n        { isFinalResult: true, dateSubmitResults: new Date() },\r\n        () => {}\r\n      );\r\n      this.handleDialogClose();\r\n    }\r\n    if (this.state.isFinalResult) {\r\n      this.setState(\r\n        { isFinalResult: false, dateSubmitResults: new Date() },\r\n        () => {}\r\n      );\r\n      this.handleDialogClose();\r\n    }\r\n  };\r\n  handleDialogFinalResultClose = () => {\r\n    // this.setState({isFinalResult:false, dateSubmitResults: null},()=>{\r\n    // })\r\n    this.handleDialogClose();\r\n  };\r\n\r\n  handleExportExcel = () => {\r\n    let { t } = this.props;\r\n    exportToExcel(this.state.id)\r\n      .then((res) => {\r\n        toast.info(this.props.t(\"general.successExport\"));\r\n        let blob = new Blob([res.data], {\r\n          type:\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n        });\r\n        saveAs(blob, \"Ketqua.xlsx\");\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err);\r\n      });\r\n    // console.log(this.state);\r\n  };\r\n  handleExportPDF = () => {\r\n    this.setState({\r\n      shouldOpenPrintDialog: true,\r\n    })\r\n  };\r\n\r\n  handleOKEditClose = () => {\r\n    this.setState({\r\n      shouldOpenPrintDialog: false,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let { open, handleClose, handleOKEditClose, isView, t, i18n } = this.props;\r\n    let { id, isRoleAdmin, isViewButton, isFinalResult, loading } = this.state;\r\n\r\n    return (\r\n      <Dialog\r\n        open={open}\r\n        PaperComponent={PaperComponent}\r\n        maxWidth={\"lg\"}\r\n        fullWidth={true}\r\n      >\r\n        <div className={clsx(\"wrapperButton\", !loading && \"hidden\")}>\r\n          <CircularProgress className=\"buttonProgress\" size={24} />\r\n        </div>\r\n        {this.state.shouldOpenPrintDialog && (\r\n          <EQAResultReportEcliaPrint\r\n            t={t}\r\n            i18n={i18n}\r\n            handleClose={this.handleDialogClose}\r\n            open={this.state.shouldOpenPrintDialog}\r\n            handleOKEditClose={this.handleOKEditClose}\r\n            item={this.state.item}\r\n            pdf={true}\r\n            // isRoleAdmin={this.state.isRoleAdmin}\r\n            // isView={this.state.isView}\r\n          />\r\n        )}\r\n        <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit}>\r\n          <DialogTitle style={{ cursor: \"move\" }} id=\"draggable-dialog-title\">\r\n            <span className=\"mb-20 styleColor\">\r\n              {!isView ? t(\"SaveUpdate\") : t(\"Details\")}\r\n            </span>\r\n            <IconButton\r\n              style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }}\r\n              onClick={() => handleClose()}\r\n            >\r\n              <Icon color=\"error\" title={t(\"close\")}>\r\n                close\r\n              </Icon>\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent dividers>\r\n            {this.state.shouldOpenConfirmationDialog && (\r\n              <ConfirmationDialog\r\n                title={t(\"confirm\")}\r\n                open={this.state.shouldOpenConfirmationDialog}\r\n                onConfirmDialogClose={this.handleDialogFinalResultClose}\r\n                onYesClick={this.handleFinalResult}\r\n                text={\r\n                  isFinalResult\r\n                    ? t(\"EqaResult.unFinalResultConfirm\")\r\n                    : t(\"EqaResult.FinalResultConfirm\")\r\n                }\r\n                Yes={t(\"general.Yes\")}\r\n                No={t(\"general.No\")}\r\n              />\r\n            )}\r\n            <Grid item xs={12}>\r\n              <EQAResultReportEcliaTabs\r\n                t={t}\r\n                i18n={i18n}\r\n                item={this.state.item}\r\n                isView={this.props.isView}\r\n                isRoleAdmin={this.props.isRoleAdmin}\r\n                listHealthOrgRound={this.props.listHealthOrgRound}\r\n              />\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions spacing={4} className=\"flex flex-end flex-middle\">\r\n            {/* <Button\r\n                variant=\"contained\"\r\n                // disabled={isViewButton}\r\n                color=\"primary\"\r\n                type=\"button\"\r\n                onClick={this.handleExportExcel}\r\n              >\r\n                {t(\"exportExcel\")}\r\n              </Button> */}\r\n         \r\n            <Button\r\n              variant=\"contained\"\r\n              type=\"submit\"\r\n              color=\"inherit\"\r\n              onClick={() => this.sendResults()}\r\n              style={{ backgroundColor: \"#4caf50\", color: \"#fff\" }}\r\n            >\r\n              {t(\"EQAResultReportFastTest.sendResult\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              type=\"button\"\r\n              onClick={() => handleClose()}\r\n            >\r\n              {\" \"}\r\n              {t(\"Cancel\")}\r\n            </Button>\r\n            {(!isView || isRoleAdmin) && (\r\n              <Button\r\n                variant=\"contained\"\r\n                disabled={isViewButton}\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n              >\r\n                {t(\"Save\")}\r\n              </Button>\r\n            )}\r\n            {this.state.id && (\r\n              <Button\r\n                variant=\"contained\"\r\n                // disabled={isViewButton}\r\n                color=\"primary\"\r\n                type=\"button\"\r\n                onClick={this.handleExportPDF}\r\n              >\r\n                {t(\"Xuất PDF\")}\r\n              </Button>\r\n            )}\r\n          </DialogActions>\r\n        </ValidatorForm>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EQAResultReportEcliaEditorDialog;\r\n"]},"metadata":{},"sourceType":"module"}