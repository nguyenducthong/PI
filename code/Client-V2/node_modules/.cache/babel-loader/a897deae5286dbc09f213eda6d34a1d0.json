{"ast":null,"code":"import _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\sessions\\\\SignUp_RegisterHealthOrg.jsx\";\nimport React, { Component } from \"react\";\nimport ConstantList from \"../../appConfig\";\nimport { Card, Checkbox, FormControlLabel, Grid, Button, InputAdornment, Select, Input, InputLabel, FormControl, MenuItem, FormHelperText, IconButton, Icon } from \"@material-ui/core\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { getAllEQARound, getAllHealthOrgType, signUpAndCreateHealthOrg, checkUsername, checkEmail } from \"./SessionService\";\nimport UploadFile from \"../utilities/UploadFile\";\nimport { connect } from \"react-redux\";\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { Link } from \"react-router-dom\";\ntoast.configure(); // function CheckBoxLable() {\n//   const { t, i18n } = useTranslation();\n//   return (\n//     <span>\n//       {t(\"sign_up.valid_checkbox_title\")}{\" \"}\n//       <i>\n//         <b> {t(\"sign_up.valid_checkbox_content\")} </b>\n//       </i>\n//     </span>\n//   );\n// }\n\nvar SignUp = /*#__PURE__*/function (_Component) {\n  _inherits(SignUp, _Component);\n\n  var _super = _createSuper(SignUp);\n\n  function SignUp(props) {\n    var _this;\n\n    _classCallCheck(this, SignUp);\n\n    _this = _super.call(this, props); // getAllEQARound().then((result) => {\n    //   let listEQARound = result.data.content;\n    //   this.setState({ listEQARound: listEQARound });\n    // });\n    // getAllHealthOrgType().then((result) => {\n    //   let listHealthOrgType = result.data.content;\n    //   this.setState({ listHealthOrgType: listHealthOrgType });\n    // });\n\n    _this.state = {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      re_password: \"\",\n      agreement: false,\n      confirmPassword: \"\",\n      isView: true,\n      eqaRound: null,\n      healthOrgType: null,\n      //listEQARound: [],\n      hasErrorEQARound: false,\n      //listHealthOrgType: [],\n      hasErrorHealthOrgType: false,\n      shouldOpenSignupSuccessDialog: false,\n      passwordIsMasked: true,\n      confirmPasswordIsMasked: true\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"checkbox\") {\n        _this.setState({\n          isView: !event.target.checked,\n          agreement: event.target.checked\n        });\n      }\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.handleSelectEQARound = function (itemSelected) {\n      var item = itemSelected.target.value;\n\n      _this.setState({\n        eqaRound: item\n      }, function () {});\n    };\n\n    _this.handleSelectHealthOrgType = function (itemSelected) {\n      var item = itemSelected.target.value;\n\n      _this.setState({\n        healthOrgType: item\n      }, function () {});\n    };\n\n    _this.handleFormSubmit = function (event) {\n      var registerDto = {};\n      var t = _this.props.t;\n      var _this$state = _this.state,\n          password = _this$state.password,\n          re_password = _this$state.re_password;\n      registerDto.email = _this.state.email.trim();\n      registerDto.username = _this.state.email.trim();\n\n      if (password.length < 8 && re_password.length < 8) {\n        toast.warning(t(\"sign_up.weak_password\"));\n        return;\n      } else {\n        if (password !== re_password) {\n          toast.warning(t(\"sign_up.duplicate_pass\"));\n          return;\n        }\n      }\n\n      checkUsername(registerDto).then(function (result) {\n        if (result && result.data && result.data != \"\") {\n          toast.error(t(\"sign_up.duplicate_email\"));\n        } else {\n          checkEmail(registerDto).then(function (result) {\n            if (result && result.data && result.data != \"\") {\n              toast.error(t(\"sign_up.duplicate_email\"));\n            } else {\n              signUpAndCreateHealthOrg(_this.state).then(function (result) {\n                if (result != null && result.data != null && result.data != \"\") {\n                  if (result.data.duplicateEmail) {\n                    toast.error(t(\"sign_up.duplicate_email\"));\n                  } else if (result.data.sendEmailFailed) {\n                    toast.error(t(\"sign_up.error_email\"));\n                  }\n                } else {\n                  toast.error(t(\"sign_up.error_signup\"));\n                }\n\n                toast.success(t(\"mess_SignUp\"));\n\n                _this.props.history.push(\"/session/signin\");\n              });\n            }\n          }, function (error) {\n            // alert('Có lỗi xảy ra khi đăng ký.');\n            toast.error(t(\"sign_up.error_signup\"));\n          });\n        }\n      }, function (error) {\n        // alert('Có lỗi xảy ra khi đăng ký.');\n        toast.error(t(\"sign_up.error_signup\"));\n      });\n    };\n\n    _this.togglePasswordMask = function () {\n      _this.setState(function (prevState) {\n        return {\n          passwordIsMasked: !prevState.passwordIsMasked\n        };\n      });\n    };\n\n    _this.toggleConfirmPasswordMask = function () {\n      _this.setState(function (prevState) {\n        return {\n          confirmPasswordIsMasked: !prevState.confirmPasswordIsMasked\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(SignUp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // custom rule will have name 'isPasswordMatch'\n      ValidatorForm.addValidationRule(\"isPasswordMatch\", function (value) {\n        if (value !== _this2.state.password) {\n          return false;\n        }\n\n        return true;\n      });\n      ValidatorForm.addValidationRule(\"isLengthNumber\", function (value) {\n        if (value.length > 10) {\n          return false;\n        }\n\n        return true;\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // remove rule when it is not needed\n      ValidatorForm.removeValidationRule(\"isPasswordMatch\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          t = _this$props.t,\n          i18n = _this$props.i18n;\n      var _this$state2 = this.state,\n          fax = _this$state2.fax,\n          officerPosion = _this$state2.officerPosion,\n          unitCodeOfProgramPEQAS = _this$state2.unitCodeOfProgramPEQAS,\n          name = _this$state2.name,\n          taxCodeOfTheUnit = _this$state2.taxCodeOfTheUnit,\n          description = _this$state2.description,\n          address = _this$state2.address,\n          healthOrgType = _this$state2.healthOrgType,\n          contactName = _this$state2.contactName,\n          contactPhone = _this$state2.contactPhone,\n          listEQARound = _this$state2.listEQARound,\n          eqaRound = _this$state2.eqaRound,\n          hasErrorEQARound = _this$state2.hasErrorEQARound,\n          listHealthOrgType = _this$state2.listHealthOrgType,\n          hasErrorHealthOrgType = _this$state2.hasErrorHealthOrgType,\n          username = _this$state2.username,\n          email = _this$state2.email,\n          password = _this$state2.password,\n          isView = _this$state2.isView,\n          re_password = _this$state2.re_password,\n          passwordIsMasked = _this$state2.passwordIsMasked,\n          confirmPasswordIsMasked = _this$state2.confirmPasswordIsMasked;\n      return /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"signup flex flex-center w-100 h-100vh\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-8\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        className: \"signup-card-customs position-relative y-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 2,\n        md: 2,\n        sm: 2,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-32 flex flex-center bg-light-gray flex-middle h-100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: \"/assets/images/illustrations/posting_photo.svg\",\n        alt: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 10,\n        md: 10,\n        sm: 10,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 12,\n        md: 12,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pt-16\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 25\n        }\n      }, t(\"sign_up.title_form\"))))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 12,\n        md: 12,\n        sm: 12,\n        xs: 12,\n        className: \"m-16\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        className: \"w-100\",\n        variant: \"outlined\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"sign_up.healthOrgName\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"name\",\n        value: name,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        className: \"w-100\",\n        variant: \"outlined\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"Email\")),\n        onChange: this.handleChange,\n        type: \"email\",\n        name: \"email\",\n        value: email,\n        validators: [\"required\", \"isEmail\"],\n        errorMessages: [t(\"general.errorMessages_required\"), t(\"general.errorMessages_email_valid\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"sign_up.taxCodeOfTheUnit\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"taxCodeOfTheUnit\",\n        value: taxCodeOfTheUnit,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"sign_up.unitCodeOfProgramPEQAS\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"unitCodeOfProgramPEQAS\",\n        value: unitCodeOfProgramPEQAS,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"sign_up.contactName\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"contactName\",\n        value: contactName,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"sign_up.officerPosion\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"officerPosion\",\n        value: officerPosion,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"sign_up.contactPhone\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"contactPhone\",\n        value: contactPhone,\n        validators: [\"required\", \"matchRegexp:^[0-9]*$\", \"isLengthNumber\"],\n        errorMessages: [t(\"general.errorMessages_required\"), t(\"general.errorMessages_phone_number_invalid\"), t(\"general.errorMessages_phone_number_invalid\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100\",\n        label: t(\"sign_up.fax\"),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"fax\",\n        value: fax,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 12,\n        md: 12,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"sign_up.address\")),\n        onChange: this.handleChange,\n        name: \"address\",\n        value: address,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"mb-16 w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"password\")),\n        variant: \"outlined\",\n        onChange: this.handleChange,\n        name: \"password\",\n        type: passwordIsMasked ? \"password\" : \"text\",\n        value: password,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        InputProps: {\n          endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n            position: \"end\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 31\n            }\n          }, /*#__PURE__*/React.createElement(IconButton, {\n            onClick: this.togglePasswordMask,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 33\n            }\n          }, passwordIsMasked ? /*#__PURE__*/React.createElement(Icon, {\n            color: \"primary\",\n            title: t(\"show_password\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 37\n            }\n          }, \"visibility_off\") : /*#__PURE__*/React.createElement(Icon, {\n            color: \"primary\",\n            title: t(\"hide_password\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 37\n            }\n          }, \"visibility\")))\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"mb-16 w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 29\n          }\n        }, \" * \"), t(\"re_password\")),\n        variant: \"outlined\",\n        onChange: this.handleChange,\n        name: \"re_password\",\n        type: confirmPasswordIsMasked ? \"password\" : \"text\",\n        value: re_password,\n        validators: [\"required\", \"isPasswordMatch\"],\n        errorMessages: [t(\"general.errorMessages_required\"), t(\"general.isPasswordMatch\")],\n        InputProps: {\n          endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n            position: \"end\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 31\n            }\n          }, /*#__PURE__*/React.createElement(IconButton, {\n            onClick: this.toggleConfirmPasswordMask,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 33\n            }\n          }, confirmPasswordIsMasked ? /*#__PURE__*/React.createElement(Icon, {\n            color: \"primary\",\n            title: t(\"show_password\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 487,\n              columnNumber: 37\n            }\n          }, \"visibility_off\") : /*#__PURE__*/React.createElement(Icon, {\n            color: \"primary\",\n            title: t(\"hide_password\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 37\n            }\n          }, \"visibility\")))\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 12,\n        md: 12,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"flex flex-middle mt-16\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"capitalize \",\n        variant: \"contained\",\n        color: \"primary\" // disabled= {isView}\n        ,\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 27\n        }\n      }, t(\"sign_up.title\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"ml-16 mr-8\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 27\n        }\n      }, t(\"or\")), /*#__PURE__*/React.createElement(Button, {\n        className: \"capitalize\",\n        variant: \"contained\",\n        onClick: function onClick() {\n          return _this3.props.history.push(ConstantList.ROOT_PATH + \"session/signin\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 27\n        }\n      }, t(\"sign_in.title\"))))))))))));\n    }\n  }]);\n\n  return SignUp;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {// setUser: PropTypes.func.isRequired\n  };\n};\n\nexport default connect(mapStateToProps, {})(SignUp);","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/sessions/SignUp_RegisterHealthOrg.jsx"],"names":["React","Component","ConstantList","Card","Checkbox","FormControlLabel","Grid","Button","InputAdornment","Select","Input","InputLabel","FormControl","MenuItem","FormHelperText","IconButton","Icon","ValidatorForm","TextValidator","getAllEQARound","getAllHealthOrgType","signUpAndCreateHealthOrg","checkUsername","checkEmail","UploadFile","connect","useTranslation","withTranslation","Trans","toast","Link","configure","SignUp","props","state","username","email","password","re_password","agreement","confirmPassword","isView","eqaRound","healthOrgType","hasErrorEQARound","hasErrorHealthOrgType","shouldOpenSignupSuccessDialog","passwordIsMasked","confirmPasswordIsMasked","handleChange","event","source","persist","setState","target","checked","name","value","handleSelectEQARound","itemSelected","item","handleSelectHealthOrgType","handleFormSubmit","registerDto","t","trim","length","warning","then","result","data","error","duplicateEmail","sendEmailFailed","success","history","push","togglePasswordMask","prevState","toggleConfirmPasswordMask","addValidationRule","removeValidationRule","i18n","fax","officerPosion","unitCodeOfProgramPEQAS","taxCodeOfTheUnit","description","address","contactName","contactPhone","listEQARound","listHealthOrgType","color","endAdornment","ROOT_PATH","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ConstantList from \"../../appConfig\";\nimport {\n  Card,\n  Checkbox,\n  FormControlLabel,\n  Grid,\n  Button,\n  InputAdornment,\n  Select,\n  Input,\n  InputLabel,\n  FormControl,\n  MenuItem,\n  FormHelperText,\n  IconButton,\n  Icon\n} from \"@material-ui/core\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport {\n  getAllEQARound,\n  getAllHealthOrgType,\n  signUpAndCreateHealthOrg,\n  checkUsername,\n  checkEmail\n} from \"./SessionService\";\nimport UploadFile from \"../utilities/UploadFile\";\nimport { connect } from \"react-redux\";\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { Link } from \"react-router-dom\";\n\ntoast.configure();\n// function CheckBoxLable() {\n//   const { t, i18n } = useTranslation();\n//   return (\n//     <span>\n//       {t(\"sign_up.valid_checkbox_title\")}{\" \"}\n//       <i>\n//         <b> {t(\"sign_up.valid_checkbox_content\")} </b>\n//       </i>\n//     </span>\n//   );\n// }\n\nclass SignUp extends Component {\n  constructor(props) {\n    super(props);\n\n    // getAllEQARound().then((result) => {\n    //   let listEQARound = result.data.content;\n    //   this.setState({ listEQARound: listEQARound });\n    // });\n\n    // getAllHealthOrgType().then((result) => {\n    //   let listHealthOrgType = result.data.content;\n    //   this.setState({ listHealthOrgType: listHealthOrgType });\n    // });\n  }\n\n  state = {\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    re_password: \"\",\n    agreement: false,\n    confirmPassword: \"\",\n    isView: true,\n    eqaRound: null,\n    healthOrgType: null,\n    //listEQARound: [],\n    hasErrorEQARound: false,\n    //listHealthOrgType: [],\n    hasErrorHealthOrgType: false,\n    shouldOpenSignupSuccessDialog: false,\n    passwordIsMasked: true,\n    confirmPasswordIsMasked: true\n  };\n\n  handleChange = (event, source) => {\n    event.persist();\n    if(source === \"checkbox\"){\n      this.setState({isView: !event.target.checked, agreement: event.target.checked });\n    }\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  handleSelectEQARound = itemSelected => {\n    let item = itemSelected.target.value;\n    this.setState({ eqaRound: item }, function() {});\n  };\n\n  handleSelectHealthOrgType = itemSelected => {\n    let item = itemSelected.target.value;\n    this.setState({ healthOrgType: item }, function() {});\n  };\n\n  handleFormSubmit = event => {\n    let registerDto = {};\n    let { t } = this.props;\n    let { password, re_password} = this.state;\n    registerDto.email = this.state.email.trim();\n    registerDto.username = this.state.email.trim();\n    if(password.length < 8 && re_password.length < 8){\n      toast.warning(t(\"sign_up.weak_password\"));\n      return\n    }else{\n      if(password !== re_password){\n        toast.warning(t(\"sign_up.duplicate_pass\"));\n        return\n      }\n    }\n    checkUsername(registerDto).then(\n      result => {\n        if (result && result.data && result.data != \"\") {\n          toast.error(t(\"sign_up.duplicate_email\"));\n        } else {\n          checkEmail(registerDto).then(\n            result => {\n              if (result && result.data && result.data != \"\") {\n                toast.error(t(\"sign_up.duplicate_email\"));\n              } else {\n                signUpAndCreateHealthOrg(this.state).then(result => {\n                  if (\n                    result != null &&\n                    result.data != null &&\n                    result.data != \"\"\n                  ) {\n                    if (result.data.duplicateEmail) {\n                      toast.error(t(\"sign_up.duplicate_email\"));\n                    } else if (result.data.sendEmailFailed) {\n                      toast.error(t(\"sign_up.error_email\"));\n                    }\n                  } else {\n                    toast.error(t(\"sign_up.error_signup\"));\n                  }\n\n                  toast.success(t(\"mess_SignUp\"));\n                  this.props.history.push(\"/session/signin\");\n                });\n              }\n            },\n            error => {\n              // alert('Có lỗi xảy ra khi đăng ký.');\n              toast.error(t(\"sign_up.error_signup\"));\n            }\n          );\n        }\n      },\n      error => {\n        // alert('Có lỗi xảy ra khi đăng ký.');\n        toast.error(t(\"sign_up.error_signup\"));\n      }\n    );\n  };\n\n  componentDidMount() {\n    // custom rule will have name 'isPasswordMatch'\n    ValidatorForm.addValidationRule(\"isPasswordMatch\", value => {\n      if (value !== this.state.password) {\n        return false;\n      }\n      return true;\n    });\n    ValidatorForm.addValidationRule(\"isLengthNumber\", value => {\n      if (value.length > 10) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  componentWillUnmount() {\n    // remove rule when it is not needed\n    ValidatorForm.removeValidationRule(\"isPasswordMatch\");\n  }\n\n  togglePasswordMask = () => {\n    this.setState(prevState => ({\n      passwordIsMasked: !prevState.passwordIsMasked\n    }));\n  };\n\n  toggleConfirmPasswordMask = () => {\n    this.setState(prevState => ({\n      confirmPasswordIsMasked: !prevState.confirmPasswordIsMasked\n    }));\n  };\n\n  render() {\n    const { t, i18n } = this.props;\n    let {\n      fax,\n      officerPosion,\n      unitCodeOfProgramPEQAS,\n      name,\n      taxCodeOfTheUnit,\n      description,\n      address,\n      healthOrgType,\n      contactName,\n      contactPhone,\n      listEQARound,\n      eqaRound,\n      hasErrorEQARound,\n      listHealthOrgType,\n      hasErrorHealthOrgType,\n      username,\n      email,\n      password,\n      isView,\n      //confirmPassword,\n      re_password,\n      passwordIsMasked,\n      confirmPasswordIsMasked\n    } = this.state;\n\n    return (\n      <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit}>\n        <div className=\"signup flex flex-center w-100 h-100vh\">\n          <div className=\"p-8\">\n            <Card className=\"signup-card-customs position-relative y-center\">\n              <Grid container>\n                <Grid item lg={2} md={2} sm={2} xs={12}>\n                  <div className=\"p-32 flex flex-center bg-light-gray flex-middle h-100\">\n                    <img\n                      src=\"/assets/images/illustrations/posting_photo.svg\"\n                      alt=\"\"\n                    />\n                  </div>\n                </Grid>\n                <Grid item lg={10} md={10} sm={10} xs={12}>\n                  <Grid container spacing={2}>\n                    <Grid item lg={12} md={12} sm={12} xs={12}>\n                      <div className=\"pt-16\">\n                        <h4 className=\"text-center\">\n                          {t(\"sign_up.title_form\")}\n                        </h4>\n                      </div>\n                    </Grid>\n                  </Grid>\n                  <Grid item lg={12} md={12} sm={12} xs={12} className=\"m-16\">\n                    <Grid container spacing={2}>\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\n                        <TextValidator\n                          size=\"small\"\n                          className=\"w-100\"\n                          variant=\"outlined\"\n                          label={\n                          <span>\n                            <span style={{ color: \"red\" }}> * </span>\n                            {t(\"sign_up.healthOrgName\")}\n                          </span>\n                          }\n                          onChange={this.handleChange}\n                          type=\"text\"\n                          name=\"name\"\n                          value={name}\n                          validators={[\"required\"]}\n                          errorMessages={[t(\"general.errorMessages_required\")]}\n                        />\n                      </Grid>\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\n                        <TextValidator\n                          size=\"small\"\n                          className=\"w-100\"\n                          variant=\"outlined\"\n                          label={\n                          <span>\n                            <span style={{ color: \"red\" }}> * </span>\n                            {t(\"Email\")}\n                          </span>\n                          }\n                          onChange={this.handleChange}\n                          type=\"email\"\n                          name=\"email\"\n                          value={email}\n                          validators={[\"required\", \"isEmail\"]}\n                          errorMessages={[\n                            t(\"general.errorMessages_required\"),\n                            t(\"general.errorMessages_email_valid\")\n                          ]}\n                        />\n                      </Grid>\n\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\n                        <TextValidator\n                          size=\"small\"\n                          variant=\"outlined\"\n                          className=\"w-100\"\n                          label={\n                          <span>\n                            <span style={{ color: \"red\" }}> * </span>\n                            {t(\"sign_up.taxCodeOfTheUnit\")}\n                          </span>\n                          }\n                          onChange={this.handleChange}\n                          type=\"text\"\n                          name=\"taxCodeOfTheUnit\"\n                          value={taxCodeOfTheUnit}\n                          validators={[\"required\"]}\n                          errorMessages={[t(\"general.errorMessages_required\")]}\n                        />\n                      </Grid>\n\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\n                        <TextValidator\n                          size=\"small\"\n                          variant=\"outlined\"\n                          className=\"w-100\"\n                          label={\n                          <span>\n                            <span style={{ color: \"red\" }}> * </span>\n                            {t(\"sign_up.unitCodeOfProgramPEQAS\")}\n                          </span>\n                          }\n                          onChange={this.handleChange}\n                          type=\"text\"\n                          name=\"unitCodeOfProgramPEQAS\"\n                          value={unitCodeOfProgramPEQAS}\n                          validators={[\"required\"]}\n                          errorMessages={[t(\"general.errorMessages_required\")]}\n                        />\n                      </Grid>\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\n                        <TextValidator\n                          size=\"small\"\n                          variant=\"outlined\"\n                          className=\"w-100\"\n                          label={\n                          <span>\n                            <span style={{ color: \"red\" }}> * </span>\n                            {t(\"sign_up.contactName\")}\n                          </span>\n                          }\n                          onChange={this.handleChange}\n                          type=\"text\"\n                          name=\"contactName\"\n                          value={contactName}\n                          validators={[\"required\"]}\n                          errorMessages={[t(\"general.errorMessages_required\")]}\n                        />\n                      </Grid>\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\n                        <TextValidator\n                          size=\"small\"\n                          variant=\"outlined\"\n                          className=\"w-100\"\n                          label={\n                          <span>\n                            <span style={{ color: \"red\" }}> * </span>\n                            {t(\"sign_up.officerPosion\")}\n                          </span>\n                          }\n                          onChange={this.handleChange}\n                          type=\"text\"\n                          name=\"officerPosion\"\n                          value={officerPosion}\n                          validators={[\"required\"]}\n                          errorMessages={[t(\"general.errorMessages_required\")]}\n                        />\n                      </Grid>\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\n                        <TextValidator\n                          size=\"small\"\n                          variant=\"outlined\"\n                          className=\"w-100\"\n                          label={\n                          <span>\n                            <span style={{ color: \"red\" }}> * </span>\n                            {t(\"sign_up.contactPhone\")}\n                          </span>\n                          }\n                          onChange={this.handleChange}\n                          type=\"text\"\n                          name=\"contactPhone\"\n                          value={contactPhone}\n                          validators={[\"required\", \"matchRegexp:^[0-9]*$\", \"isLengthNumber\"]}\n                          errorMessages={[\n                            t(\"general.errorMessages_required\"),\n                            t(\"general.errorMessages_phone_number_invalid\"),\n                            t(\"general.errorMessages_phone_number_invalid\")\n                          ]}\n                        />\n                      </Grid>\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\n                        <TextValidator\n                          size=\"small\"\n                          variant=\"outlined\"\n                          className=\"w-100\"\n                          label={t(\"sign_up.fax\")}\n                          onChange={this.handleChange}\n                          type=\"text\"\n                          name=\"fax\"\n                          value={fax}\n                        />\n                      </Grid>\n                      <Grid item lg={12} md={12} sm={12} xs={12}>\n                        <TextValidator\n                          size=\"small\"\n                          variant=\"outlined\"\n                          className=\"w-100\"\n                          label={\n                          <span>\n                            <span style={{ color: \"red\" }}> * </span>\n                            {t(\"sign_up.address\")}\n                          </span>\n                          }\n                          onChange={this.handleChange}\n                          name=\"address\"\n                          value={address}\n                          validators={[\"required\"]}\n                          errorMessages={[t(\"general.errorMessages_required\")]}\n                        />\n                      </Grid>\n\n                      <Grid item sm={6} xs={12}>\n                        <TextValidator\n                          className=\"mb-16 w-100\"\n                          label={\n                          <span>\n                            <span style={{ color: \"red\" }}> * </span>\n                            {t(\"password\")}\n                          </span>\n                          }\n                          variant=\"outlined\"\n                          onChange={this.handleChange}\n                          name=\"password\"\n                          type={passwordIsMasked ? \"password\" : \"text\"}\n                          value={password}\n                          validators={[\"required\"]}\n                          errorMessages={[t(\"general.errorMessages_required\")]}\n                          InputProps={{\n                            endAdornment: (\n                              <InputAdornment position=\"end\">\n                                <IconButton onClick={this.togglePasswordMask}>\n                                  {passwordIsMasked ? (\n                                    <Icon\n                                      color=\"primary\"\n                                      title={t(\"show_password\")}\n                                    >\n                                      visibility_off\n                                    </Icon>\n                                  ) : (\n                                    <Icon\n                                      color=\"primary\"\n                                      title={t(\"hide_password\")}\n                                    >\n                                      visibility\n                                    </Icon>\n                                  )}\n                                </IconButton>\n                              </InputAdornment>\n                            )\n                          }}\n                        />\n                      </Grid>\n                      <Grid item sm={6} xs={12}>\n                        <TextValidator\n                          className=\"mb-16 w-100\"\n                          label={\n                          <span>\n                            <span style={{ color: \"red\" }}> * </span>\n                            {t(\"re_password\")}\n                          </span>\n                          }\n                          variant=\"outlined\"\n                          onChange={this.handleChange}\n                          name=\"re_password\"\n                          type={confirmPasswordIsMasked ? \"password\" : \"text\"}\n                          value={re_password}\n                          validators={[\"required\", \"isPasswordMatch\"]}\n                          errorMessages={[\n                            t(\"general.errorMessages_required\"),\n                            t(\"general.isPasswordMatch\")\n                          ]}\n                          InputProps={{\n                            endAdornment: (\n                              <InputAdornment position=\"end\">\n                                <IconButton\n                                  onClick={this.toggleConfirmPasswordMask}\n                                >\n                                  {confirmPasswordIsMasked ? (\n                                    <Icon\n                                      color=\"primary\"\n                                      title={t(\"show_password\")}\n                                    >\n                                      visibility_off\n                                    </Icon>\n                                  ) : (\n                                    <Icon\n                                      color=\"primary\"\n                                      title={t(\"hide_password\")}\n                                    >\n                                      visibility\n                                    </Icon>\n                                  )}\n                                </IconButton>\n                              </InputAdornment>\n                            )\n                          }}\n                        />\n                      </Grid>\n\n                      {/* <Grid item lg={12} md={12} sm={12} xs={12}>\n                        <UploadFile\n                        />\n                      </Grid> */}\n                    </Grid>\n\n                    <Grid item lg={12} md={12} sm={12} xs={12}>\n                      <div>\n                        {/* <FormControlLabel\n                          className=\"w-100 mt-16\"\n                          name=\"agreement\"\n                          onChange={event => this.handleChange(event, \"checkbox\")}\n                          control={<Checkbox />}\n                          label={<CheckBoxLable />}\n                        /> */}\n                        <div className=\"flex flex-middle mt-16\">\n                          <Button\n                            className=\"capitalize \"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            // disabled= {isView}\n                            type=\"submit\"\n                          >\n                            {t(\"sign_up.title\")}\n                          </Button>\n                          <span className=\"ml-16 mr-8\">{t(\"or\")}</span>\n                          <Button\n                            className=\"capitalize\"\n                            variant=\"contained\"\n                            onClick={() =>\n                              this.props.history.push(\n                                ConstantList.ROOT_PATH + \"session/signin\"\n                              )\n                            }\n                          >\n                            {t(\"sign_in.title\")}\n                          </Button>\n                        </div>\n                      </div>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Card>\n          </div>\n        </div>\n      </ValidatorForm>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  // setUser: PropTypes.func.isRequired\n});\n\nexport default connect(mapStateToProps, {})(SignUp);\n"]},"metadata":{},"sourceType":"module"}