{"ast":null,"code":"import _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\EgretLayout\\\\EgretLayout.jsx\";\nimport React, { Component } from \"react\";\nimport { EgretLayouts } from \"./index\";\nimport { PropTypes } from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport { matchRoutes } from \"react-router-config\";\nimport { connect } from \"react-redux\";\nimport AppContext from \"app/appContext\";\nimport localStorageService from \"../services/localStorageService\";\nimport ConstantList from \"../appConfig\";\nimport history from \"history.js\";\nimport { setLayoutSettings, setDefaultSettings } from \"app/redux/actions/LayoutActions\";\nimport { isEqual, merge } from \"lodash\";\nimport { isMdScreen, getQueryParam } from \"utils\";\n\nvar EgretLayout = /*#__PURE__*/function (_Component) {\n  _inherits(EgretLayout, _Component);\n\n  var _super = _createSuper(EgretLayout);\n\n  function EgretLayout(props, context) {\n    var _this;\n\n    _classCallCheck(this, EgretLayout);\n\n    _this = _super.call(this, props);\n\n    _this.setLayoutFromQuery = function () {\n      try {\n        var settingsFromQuery = getQueryParam(\"settings\");\n        settingsFromQuery = settingsFromQuery ? JSON.parse(settingsFromQuery) : {};\n        var _this$props = _this.props,\n            settings = _this$props.settings,\n            _setLayoutSettings = _this$props.setLayoutSettings,\n            _setDefaultSettings = _this$props.setDefaultSettings;\n        var updatedSettings = merge({}, settings, settingsFromQuery);\n\n        _setLayoutSettings(updatedSettings);\n\n        _setDefaultSettings(updatedSettings);\n      } catch (e) {// console.log(\"Error! Set settings from query param\", e);\n      }\n    };\n\n    _this.listenWindowResize = function () {\n      var _this$props2 = _this.props,\n          settings = _this$props2.settings,\n          setLayoutSettings = _this$props2.setLayoutSettings;\n\n      if (settings.layout1Settings.leftSidebar.show) {\n        var mode = isMdScreen() ? \"close\" : \"full\";\n        setLayoutSettings(merge({}, settings, {\n          layout1Settings: {\n            leftSidebar: {\n              mode\n            }\n          }\n        }));\n      }\n    };\n\n    _this.appContext = context;\n\n    _this.updateSettingsFromRouter(); // Set settings from query (Only for demo purpose)\n\n\n    _this.setLayoutFromQuery();\n\n    return _this;\n  }\n\n  _createClass(EgretLayout, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.location.pathname !== prevProps.location.pathname) {\n        this.updateSettingsFromRouter();\n      }\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      if (window) {\n        // LISTEN WINDOW RESIZE\n        window.addEventListener(\"resize\", this.listenWindowResize);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (window) {\n        window.removeEventListener(\"resize\", this.listenWindowResize);\n      }\n    }\n  }, {\n    key: \"updateSettingsFromRouter\",\n    value: function updateSettingsFromRouter() {\n      var routes = this.appContext.routes;\n      var matched = matchRoutes(routes, this.props.location.pathname)[0];\n      var _this$props3 = this.props,\n          defaultSettings = _this$props3.defaultSettings,\n          settings = _this$props3.settings,\n          setLayoutSettings = _this$props3.setLayoutSettings;\n\n      if (matched && matched.route.settings) {\n        // ROUTE HAS SETTINGS\n        var updatedSettings = merge({}, settings, matched.route.settings);\n\n        if (!isEqual(settings, updatedSettings)) {\n          setLayoutSettings(updatedSettings); // console.log('Route has settings');\n        }\n      } else if (!isEqual(settings, defaultSettings)) {\n        setLayoutSettings(defaultSettings); // console.log('reset settings', defaultSettings);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var expire_time = localStorageService.getSessionItem(\"token_expire_time\");\n\n      if (expire_time != null) {\n        var dateObj = new Date(expire_time);\n        var isExpired = false;\n\n        if (dateObj != null) {\n          if (dateObj < Date.now()) {\n            isExpired = true;\n            localStorageService.removeItem(\"token_expire_time\");\n            history.push(ConstantList.LOGIN_PAGE);\n          }\n        }\n      }\n\n      var settings = this.props.settings;\n      var Layout = EgretLayouts[settings.activeLayout];\n      return /*#__PURE__*/React.createElement(Layout, Object.assign({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 12\n        }\n      }));\n    }\n  }]);\n\n  return EgretLayout;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    setLayoutSettings: PropTypes.func.isRequired,\n    setDefaultSettings: PropTypes.func.isRequired,\n    settings: state.layout.settings,\n    defaultSettings: state.layout.defaultSettings\n  };\n};\n\nEgretLayout.contextType = AppContext;\nexport default withRouter(connect(mapStateToProps, {\n  setLayoutSettings,\n  setDefaultSettings\n})(EgretLayout));","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/EgretLayout/EgretLayout.jsx"],"names":["React","Component","EgretLayouts","PropTypes","withRouter","matchRoutes","connect","AppContext","localStorageService","ConstantList","history","setLayoutSettings","setDefaultSettings","isEqual","merge","isMdScreen","getQueryParam","EgretLayout","props","context","setLayoutFromQuery","settingsFromQuery","JSON","parse","settings","updatedSettings","e","listenWindowResize","layout1Settings","leftSidebar","show","mode","appContext","updateSettingsFromRouter","prevProps","location","pathname","window","addEventListener","removeEventListener","routes","matched","defaultSettings","route","expire_time","getSessionItem","dateObj","Date","isExpired","now","removeItem","push","LOGIN_PAGE","Layout","activeLayout","mapStateToProps","state","func","isRequired","layout","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { EgretLayouts } from \"./index\";\nimport { PropTypes } from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport { matchRoutes } from \"react-router-config\";\nimport { connect } from \"react-redux\";\nimport AppContext from \"app/appContext\";\nimport localStorageService from \"../services/localStorageService\";\nimport ConstantList from \"../appConfig\";\nimport history from \"history.js\";\nimport {\n  setLayoutSettings,\n  setDefaultSettings\n} from \"app/redux/actions/LayoutActions\";\nimport { isEqual, merge } from \"lodash\";\nimport { isMdScreen, getQueryParam } from \"utils\";\n\nclass EgretLayout extends Component {\n  constructor(props, context) {\n    super(props);\n    this.appContext = context;\n    this.updateSettingsFromRouter();\n\n    // Set settings from query (Only for demo purpose)\n    this.setLayoutFromQuery();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {\n      this.updateSettingsFromRouter();\n    }\n  }\n\n  componentWillMount() {\n    if (window) {\n      // LISTEN WINDOW RESIZE\n      window.addEventListener(\"resize\", this.listenWindowResize);\n    }\n  }\n\n  componentWillUnmount() {\n    if (window) {\n      window.removeEventListener(\"resize\", this.listenWindowResize);\n    }\n  }\n\n  setLayoutFromQuery = () => {\n    try {\n      let settingsFromQuery = getQueryParam(\"settings\");\n      settingsFromQuery = settingsFromQuery\n        ? JSON.parse(settingsFromQuery)\n        : {};\n      let { settings, setLayoutSettings, setDefaultSettings } = this.props;\n      let updatedSettings = merge({}, settings, settingsFromQuery);\n\n      setLayoutSettings(updatedSettings);\n      setDefaultSettings(updatedSettings);\n    } catch (e) {\n      // console.log(\"Error! Set settings from query param\", e);\n    }\n  };\n\n  listenWindowResize = () => {\n    let { settings, setLayoutSettings } = this.props;\n\n    if (settings.layout1Settings.leftSidebar.show) {\n      let mode = isMdScreen() ? \"close\" : \"full\";\n      setLayoutSettings(\n        merge({}, settings, { layout1Settings: { leftSidebar: { mode } } })\n      );\n    }\n  };\n\n  updateSettingsFromRouter() {\n    const { routes } = this.appContext;\n    const matched = matchRoutes(routes, this.props.location.pathname)[0];\n    let { defaultSettings, settings, setLayoutSettings } = this.props;\n\n    if (matched && matched.route.settings) {\n      // ROUTE HAS SETTINGS\n      const updatedSettings = merge({}, settings, matched.route.settings);\n      if (!isEqual(settings, updatedSettings)) {\n        setLayoutSettings(updatedSettings);\n        // console.log('Route has settings');\n      }\n    } else if (!isEqual(settings, defaultSettings)) {\n      setLayoutSettings(defaultSettings);\n      // console.log('reset settings', defaultSettings);\n    }\n  }\n\n  render() {\n    let expire_time= localStorageService.getSessionItem(\"token_expire_time\");\n    if(expire_time!=null){     \n    let dateObj = new Date(expire_time);\n      var isExpired = false;\n      if(dateObj!=null){\n        if(dateObj<Date.now()){\n          isExpired=true;\n          localStorageService.removeItem(\"token_expire_time\");\n          history.push(ConstantList.LOGIN_PAGE);\n        }      \n      }\n    }\n\n    const { settings } = this.props;\n    const Layout = EgretLayouts[settings.activeLayout];\n    return <Layout {...this.props} />;\n  }\n}\n\nconst mapStateToProps = state => ({\n  setLayoutSettings: PropTypes.func.isRequired,\n  setDefaultSettings: PropTypes.func.isRequired,\n  settings: state.layout.settings,\n  defaultSettings: state.layout.defaultSettings\n});\n\nEgretLayout.contextType = AppContext;\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    { setLayoutSettings, setDefaultSettings }\n  )(EgretLayout)\n);\n"]},"metadata":{},"sourceType":"module"}