{"ast":null,"code":"import _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\TestPurpose\\\\TestPurposeEditorDialog.jsx\";\nimport React, { Component } from \"react\";\nimport { Dialog, Button, Grid, DialogTitle, DialogContent, DialogActions, Icon, IconButton } from \"@material-ui/core\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { checkCode, addNewTestPurpose, updateTestPurpose } from \"./TestPurposeService\";\nimport Draggable from 'react-draggable';\nimport Paper from '@material-ui/core/Paper';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../../../styles/views/_style.scss';\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n});\n\nfunction PaperComponent(props) {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    handle: \"#draggable-dialog-title\",\n    cancel: '[class*=\"MuiDialogContent-root\"]',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  })));\n}\n\nvar TestPurposeEditorDialog = /*#__PURE__*/function (_Component) {\n  _inherits(TestPurposeEditorDialog, _Component);\n\n  var _super = _createSuper(TestPurposeEditorDialog);\n\n  function TestPurposeEditorDialog() {\n    var _this;\n\n    _classCallCheck(this, TestPurposeEditorDialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      name: \"\",\n      code: \"\",\n      description: \"\",\n      isActive: false,\n      isView: false\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.handleFormSubmit = function () {\n      var _this$state = _this.state,\n          id = _this$state.id,\n          code = _this$state.code;\n      var t = _this.props.t;\n\n      _this.setState({\n        isView: true\n      });\n\n      checkCode(id, code).then(function (result) {\n        //Nếu trả về true là code đã được sử dụng\n        if (result.data) {\n          toast.warning(t('mess_code'));\n        } else {\n          //Nếu trả về false là code chưa sử dụng có thể dùng\n          if (id) {\n            updateTestPurpose(_objectSpread({}, _this.state)).then(function () {\n              _this.setState({\n                isView: false\n              });\n\n              toast.success(t('mess_edit'));\n            });\n          } else {\n            addNewTestPurpose(_objectSpread({}, _this.state)).then(function (response) {\n              if (response.data != null && response.status == 200) {\n                _this.state.id = response.data.id;\n\n                _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n                  isView: false\n                }));\n\n                toast.success(t('mess_add'));\n              }\n            });\n          }\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TestPurposeEditorDialog, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      //getUserById(this.props.uid).then(data => this.setState({ ...data.data }));\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item;\n      this.setState(item);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          id = _this$state2.id,\n          name = _this$state2.name,\n          code = _this$state2.code,\n          isView = _this$state2.isView,\n          description = _this$state2.description;\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          handleClose = _this$props2.handleClose,\n          handleOKEditClose = _this$props2.handleOKEditClose,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n;\n      return /*#__PURE__*/React.createElement(Dialog, {\n        open: open,\n        PaperComponent: PaperComponent,\n        maxWidth: 'sm',\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(DialogTitle, {\n        style: {\n          cursor: 'move'\n        },\n        id: \"draggable-dialog-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"mb-20 styleColor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }\n      }, \" \", (id ? t(\"update\") : t(\"Add\")) + \" \" + t(\"TestPurpose.title\"), \" \"), /*#__PURE__*/React.createElement(IconButton, {\n        style: {\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\"\n        },\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        color: \"error\",\n        title: t(\"close\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 112\n        }\n      }, \"close\"))), /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        style: {\n          overflowY: \"auto\",\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(DialogContent, {\n        dividers: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        className: \"\",\n        container: true,\n        spacing: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 mb-16\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 26\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 49\n          }\n        }, \" * \"), t(\"TestPurpose.name\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"name\",\n        value: name,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 mb-16\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 26\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 49\n          }\n        }, \" * \"), t(\"TestPurpose.code\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"code\",\n        value: code,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 mb-16\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 26\n          }\n        }, t(\"TestPurpose.description\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"description\",\n        value: description // validators={[\"required\"]}\n        // errorMessages={[t(\"general.errorMessages_required\")]}\n        ,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }\n      })))), /*#__PURE__*/React.createElement(DialogActions, {\n        spacing: 4,\n        className: \"flex flex-end flex-middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: function onClick() {\n          return _this2.props.handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }\n      }, t('Cancel')), !isView && /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 28\n        }\n      }, t('Save')))));\n    }\n  }]);\n\n  return TestPurposeEditorDialog;\n}(Component);\n\nexport default TestPurposeEditorDialog;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/TestPurpose/TestPurposeEditorDialog.jsx"],"names":["React","Component","Dialog","Button","Grid","DialogTitle","DialogContent","DialogActions","Icon","IconButton","ValidatorForm","TextValidator","checkCode","addNewTestPurpose","updateTestPurpose","Draggable","Paper","toast","configure","autoClose","draggable","limit","PaperComponent","props","TestPurposeEditorDialog","state","name","code","description","isActive","isView","handleChange","event","source","persist","setState","target","checked","value","handleFormSubmit","id","t","then","result","data","warning","success","response","status","open","handleClose","item","handleOKEditClose","i18n","cursor","position","right","top","overflowY","display","flexDirection","color"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions, Icon, IconButton\r\n} from \"@material-ui/core\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport { checkCode, addNewTestPurpose, updateTestPurpose } from \"./TestPurposeService\";\r\nimport Draggable from 'react-draggable';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../../styles/views/_style.scss';\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit:3\r\n});\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\nclass TestPurposeEditorDialog extends Component {\r\n  state = {\r\n    name: \"\",\r\n    code: \"\",\r\n    description:\"\",\r\n    isActive: false,\r\n    isView:false\r\n  };\r\n\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleFormSubmit = () => {\r\n    let { id, code } = this.state;\r\n    let { t } = this.props;\r\n    this.setState({isView: true});\r\n    checkCode(id, code).then((result) => {\r\n      //Nếu trả về true là code đã được sử dụng\r\n      if (result.data) {\r\n        toast.warning(t('mess_code'));\r\n      } else {\r\n        //Nếu trả về false là code chưa sử dụng có thể dùng\r\n        if (id) {\r\n            updateTestPurpose({\r\n            ...this.state\r\n          }).then(() => {\r\n            this.setState({isView: false});\r\n            toast.success(t('mess_edit'));\r\n          });\r\n        } else {\r\n            addNewTestPurpose({\r\n            ...this.state\r\n          }).then((response) => {\r\n            if(response.data != null && response.status == 200){\r\n              this.state.id = response.data.id\r\n              this.setState({...this.state, isView: false})\r\n              toast.success(t('mess_add'));\r\n            }\r\n         });\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  componentWillMount() {\r\n    //getUserById(this.props.uid).then(data => this.setState({ ...data.data }));\r\n    let { open, handleClose,item } = this.props;\r\n    this.setState(item);\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      id,\r\n      name,\r\n      code,\r\n      isView,\r\n      description\r\n    } = this.state;\r\n    let { open, handleClose, handleOKEditClose, t, i18n } = this.props;\r\n    return (\r\n      <Dialog open={open} PaperComponent={PaperComponent} maxWidth={'sm'} fullWidth={true}>\r\n        <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\r\n        <span className=\"mb-20 styleColor\"> {(id ? t(\"update\") : t(\"Add\")) + \" \" + t(\"TestPurpose.title\")} </span>\r\n        <IconButton style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }} onClick={() => handleClose()}><Icon color=\"error\"\r\n              title={t(\"close\")}>\r\n              close\r\n            </Icon>\r\n            </IconButton>\r\n        </DialogTitle>\r\n          <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit} style={{\r\n            overflowY: \"auto\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\"\r\n          }}>\r\n          <DialogContent dividers>\r\n            <Grid className=\"\" container spacing={4}>\r\n              <Grid item sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 mb-16\"\r\n                  label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"TestPurpose.name\")}\r\n                      </span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n                <TextValidator\r\n                  className=\"w-100 mb-16\"\r\n                  label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"TestPurpose.code\")}\r\n                      </span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"code\"\r\n                  value={code}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n                <TextValidator\r\n                  className=\"w-100 mb-16\"\r\n                  label={<span className=\"font\">{t(\"TestPurpose.description\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"description\"\r\n                  value={description}\r\n                  // validators={[\"required\"]}\r\n                  // errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            </DialogContent>\r\n            <DialogActions spacing={4} className=\"flex flex-end flex-middle\">\r\n              <Button \r\n                variant=\"contained\" \r\n                color=\"secondary\" \r\n                onClick={() => this.props.handleClose()}>\r\n                  {t('Cancel')}\r\n              </Button>\r\n              {(!isView && <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\">\r\n                {t('Save')}\r\n            </Button>)}\r\n            </DialogActions>\r\n          </ValidatorForm>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TestPurposeEditorDialog;\r\n"]},"metadata":{},"sourceType":"module"}