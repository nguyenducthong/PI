{"ast":null,"code":"import _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\LabelPrinting\\\\LabelPrinting.jsx\";\nimport React, { Component } from \"react\";\nimport { Grid, IconButton, Icon, TablePagination, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, TextField } from \"@material-ui/core\";\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\nimport { searchByPage as getAllEQARound } from \"../EQARound/EQARoundService.js\";\nimport { exportLabelsToExcel, getSampleSetByRoundID } from \"./LabelPrintingServices\";\nimport { saveAs } from \"file-saver\";\nimport { Helmet } from \"react-helmet\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nvar HealthOrgLevelTable = /*#__PURE__*/function (_Component) {\n  _inherits(HealthOrgLevelTable, _Component);\n\n  var _super = _createSuper(HealthOrgLevelTable);\n\n  function HealthOrgLevelTable() {\n    var _this;\n\n    _classCallCheck(this, HealthOrgLevelTable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      keyword: \"\",\n      rowsPerPage: 5,\n      page: 0,\n      shouldOpenConfirmationDialog: false,\n      totalElements: 0,\n      eqaRoundList: [],\n      currentRound: null,\n      sampleSetList: [],\n      selectedID: null\n    };\n\n    _this.updatePageData = function () {\n      var currentRound = _this.state.currentRound;\n\n      if (currentRound != null) {\n        getSampleSetByRoundID(currentRound.id).then(function (res) {\n          // console.log(\"DATA\", res.data);\n          _this.setState({\n            sampleSetList: res.data\n          });\n        });\n      } else {\n        _this.setState({\n          sampleSetList: []\n        });\n      }\n    };\n\n    _this.handleSelectEQARound = function (round) {\n      _this.setState({\n        currentRound: round\n      }, function () {\n        _this.updatePageData();\n      });\n    };\n\n    _this.handleExportToExcel = function (sampleSetID) {\n      exportLabelsToExcel(sampleSetID).then(function (result) {\n        var url = window.URL.createObjectURL(new Blob([result.data]));\n        var link = document.createElement(\"a\");\n        link.href = url;\n        link.setAttribute(\"download\", \"MaOng.xlsx\");\n        document.body.appendChild(link);\n        link.click();\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(HealthOrgLevelTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var searchObject = {\n        pageIndex: 0,\n        pageSize: 1000000\n      };\n      getAllEQARound(searchObject).then(function (res) {\n        _this2.setState({\n          eqaRoundList: res.data.content\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this,\n          _sampleSetList$;\n\n      var _this$props = this.props,\n          t = _this$props.t,\n          i18n = _this$props.i18n;\n      var _this$state = this.state,\n          currentRound = _this$state.currentRound,\n          eqaRoundList = _this$state.eqaRoundList,\n          sampleSetList = _this$state.sampleSetList;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"m-sm-30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Helmet, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"title\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }\n      }, t(\"LabelPrinting.title\"), \" | \", t(\"web_site\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mb-sm-30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Breadcrumb, {\n        routeSegments: [{\n          name: t(\"LabelPrinting.title\")\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 5,\n        md: 5,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Autocomplete, {\n        size: \"small\",\n        id: \"combo-box\",\n        options: eqaRoundList,\n        className: \"flex-end\",\n        getOptionLabel: function getOptionLabel(option) {\n          return option.code != null && typeof option.code != \"undefined\" ? option.code : \"\";\n        },\n        onChange: function onChange(event, newValue) {\n          return _this3.handleSelectEQARound(newValue);\n        },\n        value: currentRound,\n        renderInput: function renderInput(params) {\n          return /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n            label: t(\"EQAResultReportConclusion.select_eqa_round\"),\n            variant: \"outlined\",\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }\n          }));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TableContainer, {\n        component: Paper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Table, {\n        \"aria-label\": \"simple table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TableHead, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TableRow, {\n        style: {\n          color: '#fff'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          color: '#fff',\n          width: \"90px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 19\n        }\n      }, t(\"LabelPrinting.export_to_excel\")), /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          color: '#fff'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }\n      }, t(\"LabelPrinting.sample_set_name\")), /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          color: '#fff'\n        },\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }\n      }, t(\"LabelPrinting.sample_set_detail_code\")), (_sampleSetList$ = sampleSetList[0]) === null || _sampleSetList$ === void 0 ? void 0 : _sampleSetList$.details.map(function (data, index) {\n        var _sampleSetList$2;\n\n        if (index != ((_sampleSetList$2 = sampleSetList[0]) === null || _sampleSetList$2 === void 0 ? void 0 : _sampleSetList$2.details.length) - 1) return /*#__PURE__*/React.createElement(TableCell, {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 32\n          }\n        }, \" \");\n      }))), sampleSetList.length > 0 && /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 19\n        }\n      }, sampleSetList.map(function (data) {\n        return /*#__PURE__*/React.createElement(TableRow, {\n          key: data.id,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(TableCell, {\n          component: \"th\",\n          scope: \"row\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 25\n          }\n        }, data.name), data.details.map(function (childData) {\n          return /*#__PURE__*/React.createElement(TableCell, {\n            key: childData.id,\n            align: \"left\",\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 27\n            }\n          }, childData.code);\n        }));\n      })))))));\n    }\n  }]);\n\n  return HealthOrgLevelTable;\n}(Component);\n\nexport default HealthOrgLevelTable;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/LabelPrinting/LabelPrinting.jsx"],"names":["React","Component","Grid","IconButton","Icon","TablePagination","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","TextField","Breadcrumb","ConfirmationDialog","Autocomplete","useTranslation","withTranslation","Trans","searchByPage","getAllEQARound","exportLabelsToExcel","getSampleSetByRoundID","saveAs","Helmet","toast","HealthOrgLevelTable","state","keyword","rowsPerPage","page","shouldOpenConfirmationDialog","totalElements","eqaRoundList","currentRound","sampleSetList","selectedID","updatePageData","id","then","res","setState","data","handleSelectEQARound","round","handleExportToExcel","sampleSetID","result","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","searchObject","pageIndex","pageSize","content","props","t","i18n","name","option","code","event","newValue","params","backgroundColor","color","width","details","map","index","length","childData"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Grid,\n  IconButton,\n  Icon,\n  TablePagination,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  TextField\n} from \"@material-ui/core\";\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\nimport { searchByPage as getAllEQARound } from \"../EQARound/EQARoundService.js\";\nimport {\n  exportLabelsToExcel,\n  getSampleSetByRoundID\n} from \"./LabelPrintingServices\";\nimport { saveAs } from \"file-saver\";\nimport { Helmet } from \"react-helmet\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nclass HealthOrgLevelTable extends Component {\n  state = {\n    keyword: \"\",\n    rowsPerPage: 5,\n    page: 0,\n    shouldOpenConfirmationDialog: false,\n    totalElements: 0,\n    eqaRoundList: [],\n    currentRound: null,\n    sampleSetList: [],\n    selectedID: null\n  };\n\n  updatePageData = () => {\n    const { currentRound } = this.state;\n    if (currentRound != null) {\n      getSampleSetByRoundID(currentRound.id).then(res => {\n        // console.log(\"DATA\", res.data);\n        this.setState({\n          sampleSetList: res.data\n        });\n      });\n    } else {\n      this.setState({\n        sampleSetList: []\n      });\n    }\n  };\n\n  componentDidMount() {\n    const searchObject = { pageIndex: 0, pageSize: 1000000 };\n    getAllEQARound(searchObject).then(res => {\n      this.setState({ eqaRoundList: res.data.content });\n    });\n  }\n\n  handleSelectEQARound = round => {\n    this.setState(\n      {\n        currentRound: round\n      },\n      () => {\n        this.updatePageData();\n      }\n    );\n  };\n\n  handleExportToExcel = sampleSetID => {\n    exportLabelsToExcel(sampleSetID).then(result => {\n      const url = window.URL.createObjectURL(new Blob([result.data]));\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.setAttribute(\"download\", \"MaOng.xlsx\");\n      document.body.appendChild(link);\n      link.click();\n    });\n  };\n\n  render() {\n    const { t, i18n } = this.props;\n    const { currentRound, eqaRoundList, sampleSetList } = this.state;\n    return (\n      <div className=\"m-sm-30\">\n        <Helmet>\n          <title>\n            {t(\"LabelPrinting.title\")} | {t(\"web_site\")}\n          </title>\n        </Helmet>\n        <div className=\"mb-sm-30\">\n          <Breadcrumb routeSegments={[{ name: t(\"LabelPrinting.title\") }]} />\n        </div>\n\n        <Grid container spacing={3}>\n          <Grid item lg={5} md={5} sm={12} xs={12}>\n            <Autocomplete\n              size=\"small\"\n              id=\"combo-box\"\n              options={eqaRoundList}\n              className=\"flex-end\"\n              getOptionLabel={option =>\n                option.code != null && typeof option.code != \"undefined\"\n                  ? option.code\n                  : \"\"\n              }\n              onChange={(event, newValue) =>\n                this.handleSelectEQARound(newValue)\n              }\n              value={currentRound}\n              renderInput={params => (\n                <TextField\n                  {...params}\n                  label={t(\"EQAResultReportConclusion.select_eqa_round\")}\n                  variant=\"outlined\"\n                />\n              )}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TableContainer component={Paper}>\n              <Table aria-label=\"simple table\">\n                <TableHead style ={{backgroundColor: '#358600',\n                  color:'#fff',}}>\n                  <TableRow style ={{color:'#fff',}}>\n                  <TableCell style ={{color:'#fff', width: \"90px\"}}>{t(\"LabelPrinting.export_to_excel\")}</TableCell>\n                    <TableCell style ={{color:'#fff',}}>{t(\"LabelPrinting.sample_set_name\")}</TableCell>\n                    <TableCell style ={{color:'#fff',}} align=\"left\">\n                      {t(\"LabelPrinting.sample_set_detail_code\")}\n                    </TableCell>\n                    {sampleSetList[0]?.details.map((data, index) => {\n                      if (index != sampleSetList[0]?.details.length - 1)\n                        return <TableCell> </TableCell>;\n                    })}\n                    {/* <TableCell>{t(\"LabelPrinting.export_to_excel\")}</TableCell> */}\n                  </TableRow>\n                </TableHead>\n                {sampleSetList.length > 0 && (\n                  <TableBody>\n                  \n                    {sampleSetList.map(data => (\n                      <TableRow key={data.id}>\n                      {/* <TableCell>\n                          <IconButton size=\"small\"\n                            onClick={() => this.handleExportToExcel(data.id)}\n                          >\n                            <Icon fontSize=\"small\"\n                              title={t(\"LabelPrinting.export_to_excel\")}\n                              color=\"primary\"\n                            >\n                              get_app\n                            </Icon>\n                          </IconButton>\n                        </TableCell> */}\n                        <TableCell component=\"th\" scope=\"row\">\n                          {data.name}\n                        </TableCell>\n                        {data.details.map(childData => (\n                          <TableCell key={childData.id} align=\"left\">\n                            {childData.code}\n                            {/* ({childData.sample.code}) */}\n                          </TableCell>\n                        ))}\n                        {/* <TableCell>\n                          <IconButton\n                            onClick={() => this.handleExportToExcel(data.id)}\n                          >\n                            <Icon\n                              title={t(\"LabelPrinting.export_to_excel\")}\n                              color=\"primary\"\n                            >\n                              get_app\n                            </Icon>\n                          </IconButton>\n                        </TableCell> */}\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                )}\n              </Table>\n            </TableContainer>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default HealthOrgLevelTable;\n"]},"metadata":{},"sourceType":"module"}