{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _TableCell = _interopRequireDefault(require(\"@material-ui/core/TableCell\"));\n\nvar _TableRow = _interopRequireDefault(require(\"@material-ui/core/TableRow\"));\n\nvar _Typography = _interopRequireDefault(require(\"@material-ui/core/Typography\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _utils = require(\"../utils\");\n\nvar CommonValues = _interopRequireWildcard(require(\"../utils/common-values\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/* eslint-enable no-unused-vars */\n\n\nvar MTableEditRow = /*#__PURE__*/function (_React$Component) {\n  (0, _inherits2[\"default\"])(MTableEditRow, _React$Component);\n\n  var _super = _createSuper(MTableEditRow);\n\n  function MTableEditRow(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, MTableEditRow);\n    _this = _super.call(this, props);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleSave\", function () {\n      var newData = _this.state.data;\n      delete newData.tableData;\n\n      _this.props.onEditingApproved(_this.props.mode, _this.state.data, _this.props.data);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleKeyDown\", function (e) {\n      if (e.keyCode === 13 && e.target.type !== \"textarea\") {\n        _this.handleSave();\n      } else if (e.keyCode === 13 && e.target.type === \"textarea\" && e.shiftKey) {\n        _this.handleSave();\n      } else if (e.keyCode === 27) {\n        _this.props.onEditingCanceled(_this.props.mode, _this.props.data);\n      }\n    });\n    _this.state = {\n      data: props.data ? JSON.parse(JSON.stringify(props.data)) : _this.createRowData()\n    };\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(MTableEditRow, [{\n    key: \"createRowData\",\n    value: function createRowData() {\n      return this.props.columns.filter(function (column) {\n        return \"initialEditValue\" in column && column.field;\n      }).reduce(function (prev, column) {\n        prev[column.field] = column.initialEditValue;\n        return prev;\n      }, {});\n    }\n  }, {\n    key: \"renderColumns\",\n    value: function renderColumns() {\n      var _this2 = this;\n\n      var size = CommonValues.elementSize(this.props);\n      var mapArr = this.props.columns.filter(function (columnDef) {\n        return !columnDef.hidden && !(columnDef.tableData.groupOrder > -1);\n      }).sort(function (a, b) {\n        return a.tableData.columnOrder - b.tableData.columnOrder;\n      }).map(function (columnDef, index) {\n        var value = typeof _this2.state.data[columnDef.field] !== \"undefined\" ? _this2.state.data[columnDef.field] : (0, _utils.byString)(_this2.state.data, columnDef.field);\n\n        var getCellStyle = function getCellStyle(columnDef, value) {\n          var cellStyle = {\n            color: \"inherit\"\n          };\n\n          if (typeof columnDef.cellStyle === \"function\") {\n            cellStyle = (0, _objectSpread2[\"default\"])({}, cellStyle, columnDef.cellStyle(value, _this2.props.data));\n          } else {\n            cellStyle = (0, _objectSpread2[\"default\"])({}, cellStyle, columnDef.cellStyle);\n          }\n\n          if (columnDef.disableClick) {\n            cellStyle.cursor = \"default\";\n          }\n\n          return (0, _objectSpread2[\"default\"])({}, cellStyle);\n        };\n\n        var style = {};\n\n        if (index === 0) {\n          style.paddingLeft = 24 + _this2.props.level * 20;\n        }\n\n        var allowEditing = false;\n\n        if (columnDef.editable === undefined) {\n          allowEditing = true;\n        }\n\n        if (columnDef.editable === \"always\") {\n          allowEditing = true;\n        }\n\n        if (columnDef.editable === \"onAdd\" && _this2.props.mode === \"add\") {\n          allowEditing = true;\n        }\n\n        if (columnDef.editable === \"onUpdate\" && _this2.props.mode === \"update\") {\n          allowEditing = true;\n        }\n\n        if (typeof columnDef.editable === \"function\") {\n          allowEditing = columnDef.editable(columnDef, _this2.props.data);\n        }\n\n        if (!columnDef.field || !allowEditing) {\n          var readonlyValue = _this2.props.getFieldValue(_this2.state.data, columnDef);\n\n          return /*#__PURE__*/React.createElement(_this2.props.components.Cell, {\n            size: size,\n            icons: _this2.props.icons,\n            columnDef: columnDef,\n            value: readonlyValue,\n            key: columnDef.tableData.id,\n            rowData: _this2.props.data,\n            style: getCellStyle(columnDef, value)\n          });\n        } else {\n          var editComponent = columnDef.editComponent,\n              cellProps = (0, _objectWithoutProperties2[\"default\"])(columnDef, [\"editComponent\"]);\n          var EditComponent = editComponent || _this2.props.components.EditField;\n          var error = {\n            isValid: true,\n            helperText: \"\"\n          };\n\n          if (columnDef.validate) {\n            var validateResponse = columnDef.validate(_this2.state.data);\n\n            switch ((0, _typeof2[\"default\"])(validateResponse)) {\n              case \"object\":\n                error = (0, _objectSpread2[\"default\"])({}, validateResponse);\n                break;\n\n              case \"boolean\":\n                error = {\n                  isValid: validateResponse,\n                  helperText: \"\"\n                };\n                break;\n\n              case \"string\":\n                error = {\n                  isValid: false,\n                  helperText: validateResponse\n                };\n                break;\n            }\n          }\n\n          return /*#__PURE__*/React.createElement(_TableCell[\"default\"], {\n            size: size,\n            key: columnDef.tableData.id,\n            align: [\"numeric\"].indexOf(columnDef.type) !== -1 ? \"right\" : \"left\",\n            style: getCellStyle(columnDef, value)\n          }, /*#__PURE__*/React.createElement(EditComponent, {\n            key: columnDef.tableData.id,\n            columnDef: cellProps,\n            value: value,\n            error: !error.isValid,\n            helperText: error.helperText,\n            locale: _this2.props.localization.dateTimePickerLocalization,\n            rowData: _this2.state.data,\n            onChange: function onChange(value) {\n              var data = (0, _objectSpread2[\"default\"])({}, _this2.state.data);\n              (0, _utils.setByString)(data, columnDef.field, value); // data[columnDef.field] = value;\n\n              _this2.setState({\n                data: data\n              }, function () {\n                if (_this2.props.onBulkEditRowChanged) {\n                  _this2.props.onBulkEditRowChanged(_this2.props.data, data);\n                }\n              });\n            },\n            onRowDataChange: function onRowDataChange(data) {\n              _this2.setState({\n                data: data\n              }, function () {\n                if (_this2.props.onBulkEditRowChanged) {\n                  _this2.props.onBulkEditRowChanged(_this2.props.data, data);\n                }\n              });\n            }\n          }));\n        }\n      });\n      return mapArr;\n    }\n  }, {\n    key: \"renderActions\",\n    value: function renderActions() {\n      var _this3 = this;\n\n      if (this.props.mode === \"bulk\") {\n        return /*#__PURE__*/React.createElement(_TableCell[\"default\"], {\n          padding: \"none\",\n          key: \"key-actions-column\"\n        });\n      }\n\n      var size = CommonValues.elementSize(this.props);\n      var localization = (0, _objectSpread2[\"default\"])({}, MTableEditRow.defaultProps.localization, this.props.localization);\n      var isValid = this.props.columns.every(function (column) {\n        if (column.validate) {\n          var response = column.validate(_this3.state.data);\n\n          switch ((0, _typeof2[\"default\"])(response)) {\n            case \"object\":\n              return response.isValid;\n\n            case \"string\":\n              return response.length === 0;\n\n            case \"boolean\":\n              return response;\n          }\n        } else {\n          return true;\n        }\n      });\n      var actions = [{\n        icon: this.props.icons.Check,\n        tooltip: localization.saveTooltip,\n        disabled: !isValid,\n        onClick: this.handleSave\n      }, {\n        icon: this.props.icons.Clear,\n        tooltip: localization.cancelTooltip,\n        onClick: function onClick() {\n          _this3.props.onEditingCanceled(_this3.props.mode, _this3.props.data);\n        }\n      }];\n      return /*#__PURE__*/React.createElement(_TableCell[\"default\"], {\n        size: size,\n        padding: \"none\",\n        key: \"key-actions-column\",\n        style: (0, _objectSpread2[\"default\"])({\n          width: 42 * actions.length,\n          padding: \"0px 5px\"\n        }, this.props.options.editCellStyle)\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\"\n        }\n      }, /*#__PURE__*/React.createElement(this.props.components.Actions, {\n        data: this.props.data,\n        actions: actions,\n        components: this.props.components,\n        size: size\n      })));\n    }\n  }, {\n    key: \"getStyle\",\n    value: function getStyle() {\n      var style = {\n        // boxShadow: '1px 1px 1px 1px rgba(0,0,0,0.2)',\n        borderBottom: \"1px solid red\"\n      };\n      return style;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var size = CommonValues.elementSize(this.props);\n      var localization = (0, _objectSpread2[\"default\"])({}, MTableEditRow.defaultProps.localization, this.props.localization);\n      var columns;\n\n      if (this.props.mode === \"add\" || this.props.mode === \"update\" || this.props.mode === \"bulk\") {\n        columns = this.renderColumns();\n      } else {\n        var colSpan = this.props.columns.filter(function (columnDef) {\n          return !columnDef.hidden && !(columnDef.tableData.groupOrder > -1);\n        }).length;\n        columns = [/*#__PURE__*/React.createElement(_TableCell[\"default\"], {\n          size: size,\n          padding: this.props.options.actionsColumnIndex === 0 ? \"none\" : undefined,\n          key: \"key-edit-cell\",\n          colSpan: colSpan\n        }, /*#__PURE__*/React.createElement(_Typography[\"default\"], {\n          variant: \"h6\"\n        }, localization.deleteText))];\n      }\n\n      if (this.props.options.selection) {\n        columns.splice(0, 0, /*#__PURE__*/React.createElement(_TableCell[\"default\"], {\n          padding: \"none\",\n          key: \"key-selection-cell\"\n        }));\n      }\n\n      if (this.props.isTreeData) {\n        columns.splice(0, 0, /*#__PURE__*/React.createElement(_TableCell[\"default\"], {\n          padding: \"none\",\n          key: \"key-tree-data-cell\"\n        }));\n      }\n\n      if (this.props.options.actionsColumnIndex === -1) {\n        columns.push(this.renderActions());\n      } else if (this.props.options.actionsColumnIndex >= 0) {\n        var endPos = 0;\n\n        if (this.props.options.selection) {\n          endPos = 1;\n        }\n\n        if (this.props.isTreeData) {\n          endPos = 1;\n\n          if (this.props.options.selection) {\n            columns.splice(1, 1);\n          }\n        }\n\n        columns.splice(this.props.options.actionsColumnIndex + endPos, 0, this.renderActions());\n      } // Lastly we add detail panel icon\n\n\n      if (this.props.detailPanel) {\n        var aligment = this.props.options.detailPanelColumnAlignment;\n        var index = aligment === \"left\" ? 0 : columns.length;\n        columns.splice(index, 0, /*#__PURE__*/React.createElement(_TableCell[\"default\"], {\n          padding: \"none\",\n          key: \"key-detail-panel-cell\"\n        }));\n      }\n\n      this.props.columns.filter(function (columnDef) {\n        return columnDef.tableData.groupOrder > -1;\n      }).forEach(function (columnDef) {\n        columns.splice(0, 0, /*#__PURE__*/React.createElement(_TableCell[\"default\"], {\n          padding: \"none\",\n          key: \"key-group-cell\" + columnDef.tableData.id\n        }));\n      });\n      var _this$props = this.props,\n          detailPanel = _this$props.detailPanel,\n          isTreeData = _this$props.isTreeData,\n          onRowClick = _this$props.onRowClick,\n          onRowSelected = _this$props.onRowSelected,\n          onTreeExpandChanged = _this$props.onTreeExpandChanged,\n          onToggleDetailPanel = _this$props.onToggleDetailPanel,\n          onEditingApproved = _this$props.onEditingApproved,\n          onEditingCanceled = _this$props.onEditingCanceled,\n          getFieldValue = _this$props.getFieldValue,\n          components = _this$props.components,\n          icons = _this$props.icons,\n          columnsProp = _this$props.columns,\n          localizationProp = _this$props.localization,\n          options = _this$props.options,\n          actions = _this$props.actions,\n          errorState = _this$props.errorState,\n          onBulkEditRowChanged = _this$props.onBulkEditRowChanged,\n          rowProps = (0, _objectWithoutProperties2[\"default\"])(_this$props, [\"detailPanel\", \"isTreeData\", \"onRowClick\", \"onRowSelected\", \"onTreeExpandChanged\", \"onToggleDetailPanel\", \"onEditingApproved\", \"onEditingCanceled\", \"getFieldValue\", \"components\", \"icons\", \"columns\", \"localization\", \"options\", \"actions\", \"errorState\", \"onBulkEditRowChanged\"]);\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_TableRow[\"default\"], (0, _extends2[\"default\"])({\n        onKeyDown: this.handleKeyDown\n      }, rowProps, {\n        style: this.getStyle()\n      }), columns));\n    }\n  }]);\n  return MTableEditRow;\n}(React.Component);\n\nexports[\"default\"] = MTableEditRow;\nMTableEditRow.defaultProps = {\n  actions: [],\n  index: 0,\n  options: {},\n  path: [],\n  localization: {\n    saveTooltip: \"Save\",\n    cancelTooltip: \"Cancel\",\n    deleteText: \"Are you sure you want to delete this row?\"\n  },\n  onBulkEditRowChanged: function onBulkEditRowChanged() {}\n};\nMTableEditRow.propTypes = {\n  actions: _propTypes[\"default\"].array,\n  icons: _propTypes[\"default\"].any.isRequired,\n  index: _propTypes[\"default\"].number.isRequired,\n  data: _propTypes[\"default\"].object,\n  detailPanel: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].func, _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].oneOfType([_propTypes[\"default\"].object, _propTypes[\"default\"].func]))]),\n  options: _propTypes[\"default\"].object.isRequired,\n  onRowSelected: _propTypes[\"default\"].func,\n  path: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].number),\n  columns: _propTypes[\"default\"].array,\n  onRowClick: _propTypes[\"default\"].func,\n  onEditingApproved: _propTypes[\"default\"].func,\n  onEditingCanceled: _propTypes[\"default\"].func,\n  localization: _propTypes[\"default\"].object,\n  getFieldValue: _propTypes[\"default\"].func,\n  errorState: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].object, _propTypes[\"default\"].bool]),\n  onBulkEditRowChanged: _propTypes[\"default\"].func\n};","map":null,"metadata":{},"sourceType":"script"}