{"ast":null,"code":"import css from './css';\nimport hyphenate from './hyphenate';\nimport isTransform from './isTransform';\nimport transitionEnd from './transitionEnd';\nvar reset = {\n  transition: '',\n  'transition-duration': '',\n  'transition-delay': '',\n  'transition-timing-function': ''\n}; // super lean animate function for transitions\n// doesn't support all translations to keep it matching the jquery API\n\n/**\n * code in part from: Zepto 1.1.4 | zeptojs.com/license\n */\n\nfunction _animate(_ref) {\n  var node = _ref.node,\n      properties = _ref.properties,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === void 0 ? 200 : _ref$duration,\n      easing = _ref.easing,\n      callback = _ref.callback;\n  var cssProperties = [];\n  var cssValues = {};\n  var transforms = '';\n  Object.keys(properties).forEach(function (key) {\n    var value = properties[key];\n    if (isTransform(key)) transforms += key + \"(\" + value + \") \";else {\n      cssValues[key] = value;\n      cssProperties.push(hyphenate(key));\n    }\n  });\n\n  if (transforms) {\n    cssValues.transform = transforms;\n    cssProperties.push('transform');\n  }\n\n  function done(event) {\n    if (event.target !== event.currentTarget) return;\n    css(node, reset);\n    if (callback) callback.call(this, event);\n  }\n\n  if (duration > 0) {\n    cssValues.transition = cssProperties.join(', ');\n    cssValues['transition-duration'] = duration / 1000 + \"s\";\n    cssValues['transition-delay'] = '0s';\n    cssValues['transition-timing-function'] = easing || 'linear';\n  }\n\n  var removeListener = transitionEnd(node, done, duration); // eslint-disable-next-line no-unused-expressions\n\n  node.clientLeft; // trigger page reflow\n\n  css(node, cssValues);\n  return {\n    cancel: function cancel() {\n      removeListener();\n      css(node, reset);\n    }\n  };\n}\n\nfunction animate(nodeOrOptions, properties, duration, easing, callback) {\n  if (!('nodeType' in nodeOrOptions)) {\n    return _animate(nodeOrOptions);\n  }\n\n  if (!properties) {\n    throw new Error('must include properties to animate');\n  }\n\n  if (typeof easing === 'function') {\n    callback = easing;\n    easing = '';\n  }\n\n  return _animate({\n    node: nodeOrOptions,\n    properties: properties,\n    duration: duration,\n    easing: easing,\n    callback: callback\n  });\n}\n\nexport default animate;","map":null,"metadata":{},"sourceType":"module"}