{"ast":null,"code":"import _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\User\\\\UserEditorDialog.jsx\";\nimport React, { Component } from \"react\";\nimport EQAHealthOrgSearchMultipleDialog from \"../EQAHealthOrgRoundRegister/EQAHealthOrgSearchMultipleDialog\";\nimport { Dialog, Button, Grid, InputLabel, FormControl, MenuItem, Select, InputAdornment, Checkbox, TextField, DialogActions, FormControlLabel, DialogTitle, DialogContent, TablePagination, IconButton, Icon } from \"@material-ui/core\";\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport MaterialTable, { MTableToolbar, Chip, MTableBody, MTableHeader } from \"material-table\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { getUserByUsername, getUserByEmail, saveUser, addNewUser, getAllRoles, saveHealthOrgByUser, getListHealthOrgByUser } from \"./UserService\";\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\nimport Draggable from 'react-draggable';\nimport Paper from '@material-ui/core/Paper';\nimport '../../../styles/views/_loadding.scss';\nimport clsx from 'clsx';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../../../styles/views/_style.scss';\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n});\n\nfunction PaperComponent(props) {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    handle: \"#draggable-dialog-title\",\n    cancel: '[class*=\"MuiDialogContent-root\"]',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  })));\n}\n\nfunction MaterialButton(props) {\n  var item = props.item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      return props.onSelect(item, 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    color: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"delete\")));\n}\n\nvar UserEditorDialog = /*#__PURE__*/function (_Component) {\n  _inherits(UserEditorDialog, _Component);\n\n  var _super = _createSuper(UserEditorDialog);\n\n  function UserEditorDialog(props) {\n    var _this;\n\n    _classCallCheck(this, UserEditorDialog);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isAddNew: false,\n      listRole: [],\n      isView: false,\n      roles: [],\n      active: true,\n      email: '',\n      person: {},\n      username: '',\n      changePass: true,\n      password: '',\n      passwordIsMasked: true,\n      confirmPassword: '',\n      page: 0,\n      rowsPerPage: 5,\n      selectedHealthOrg: [],\n      shouldOpenHealthOrgSearchMultipleDialog: false,\n      shouldOpenConfirmationDialog: false,\n      loading: false\n    };\n    _this.listGender = [{\n      id: 'M',\n      name: 'Nam'\n    }, {\n      id: 'F',\n      name: 'Nữ'\n    }, {\n      id: 'U',\n      name: 'Không rõ'\n    }];\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"changePass\") {\n        _this.setState({\n          changePass: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"active\") {\n        _this.setState({\n          active: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"displayName\") {\n        var person = _this.state.person;\n        person = person ? person : {};\n        person.displayName = event.target.value;\n\n        _this.setState({\n          person: person\n        });\n\n        return;\n      }\n\n      if (source === \"gender\") {\n        var _person = _this.state.person;\n        _person = _person ? _person : {};\n        _person.gender = event.target.value;\n\n        _this.setState({\n          person: _person\n        });\n\n        return;\n      }\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.togglePasswordMask = function () {\n      _this.setState(function (prevState) {\n        return {\n          passwordIsMasked: !prevState.passwordIsMasked\n        };\n      });\n    };\n\n    _this.handleFormSubmit = function () {\n      _this.setState({\n        loading: true\n      });\n\n      var id = _this.state.id;\n      var t = _this.props.t; // this.setState({isView: true});    \n\n      getUserByUsername(_this.state.username).then(function (data) {\n        if (id) {\n          if (data.data && data.data.id && data.data.id !== id) {\n            //alert(\"Tên đăng nhập đã tồn tại!\");\n            toast.warning(t(\"general.duplicateUsername\"));\n\n            _this.setState({\n              loading: false\n            });\n\n            return;\n          }\n        } else {\n          if (data.data && data.data.id) {\n            toast.warning(t(\"general.duplicateUsername\"));\n\n            _this.setState({\n              loading: false\n            });\n\n            return;\n          }\n        } // getUserByEmail({email: this.state.email}).then((res) => {\n        //   if (id) {\n        //     if ((res.data && res.data.id && res.data.id !== id)) {\n        //       //alert(\"Tên đăng nhập đã tồn tại!\");\n        //       toast.warning(t(\"general.duplicateEmail\"));\n        //       this.setState({ loading: false });\n        //       return;\n        //     }\n        //   }\n        //   else {\n        //     if ((res.data && res.data.id)) {\n        //       toast.warning(t(\"general.duplicateEmail\"));\n        //       this.setState({ loading: false });\n        //       return;\n        //     }\n        //   }\n\n\n        if (id) {\n          saveUser(_objectSpread({}, _this.state)).then(function (data) {\n            _this.setState({\n              isView: true,\n              loading: false\n            });\n\n            var healthOrgIdList = [];\n\n            for (var i = 0; i < _this.state.selectedHealthOrg.length; i++) {\n              var listHealthOrgId = _this.state.selectedHealthOrg[i];\n              healthOrgIdList.push(listHealthOrgId.id);\n            }\n\n            saveHealthOrgByUser(data.data.id, healthOrgIdList).then(function (response) {});\n            toast.success(t(\"mess_edit\")); // this.props.handleOKEditClose();\n          });\n        } else {\n          saveUser(_objectSpread({}, _this.state)).then(function (data) {\n            _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n              isView: true,\n              loading: false\n            }));\n\n            var healthOrgIdList = [];\n\n            for (var i = 0; i < _this.state.selectedHealthOrg.length; i++) {\n              var listHealthOrgId = _this.state.selectedHealthOrg[i];\n              healthOrgIdList.push(listHealthOrgId.id);\n            }\n\n            saveHealthOrgByUser(data.data.id, healthOrgIdList).then(function (response) {});\n            _this.state.id = data.data.id;\n\n            _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n              isView: true,\n              loading: false\n            }));\n\n            toast.success(t(\"mess_add\")); // this.props.handleOKEditClose();\n          });\n        }\n      }).catch(function () {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.selectRoles = function (rolesSelected) {\n      _this.setState({\n        roles: rolesSelected\n      }, function () {});\n    };\n\n    _this.handleHealthOrgSearchDialogClose = function () {\n      _this.setState({\n        shouldOpenHealthOrgSearchMultipleDialog: false,\n        shouldOpenConfirmationDialog: false\n      });\n    };\n\n    _this.handleSelectHealthOrg = function (item) {\n      _this.setState({\n        selectedHealthOrg: item\n      });\n\n      _this.handleHealthOrgSearchDialogClose();\n    };\n\n    _this.handleChangePage = function (event, newPage) {\n      _this.setState({\n        page: newPage\n      });\n    };\n\n    _this.handleChangeRowsPerPage = function (event) {\n      _this.setState({\n        rowsPerPage: event.target.value,\n        page: 0\n      });\n    };\n\n    _this.handleDelete = function (id) {\n      var selectedHealthOrg = _this.state.selectedHealthOrg;\n      selectedHealthOrg = selectedHealthOrg.filter(function (row) {\n        return row.id !== id;\n      });\n\n      _this.setState({\n        selectedHealthOrg\n      });\n    };\n\n    _this.handleDeleteAll = function (data) {\n      var deleteIdList = data.map(function (row) {\n        return row.id;\n      });\n\n      _this.setState({\n        deleteIdList,\n        shouldOpenConfirmationDialog: true\n      });\n    };\n\n    _this.handleConfirmationResponse = function () {\n      var selectedHealthOrg = _this.state.selectedHealthOrg.filter(function (row) {\n        return !_this.state.deleteIdList.includes(row.id);\n      });\n\n      _this.setState({\n        selectedHealthOrg,\n        shouldOpenConfirmationDialog: false\n      });\n    };\n\n    getAllRoles().then(function (result) {\n      var listRole = result.data;\n\n      _this.setState({\n        listRole: listRole\n      });\n    });\n    return _this;\n  }\n\n  _createClass(UserEditorDialog, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item;\n      this.setState(item);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // custom rule will have name 'isPasswordMatch'\n      var item = this.props.item;\n      ValidatorForm.addValidationRule('isPasswordMatch', function (value) {\n        if (value !== _this2.state.password) {\n          return false;\n        }\n\n        return true;\n      });\n      getAllRoles().then(function (_ref) {\n        var data = _ref.data;\n\n        _this2.setState({\n          listRole: data\n        });\n      });\n\n      if (item != null && item.id != null) {\n        getListHealthOrgByUser(item.id).then(function (_ref2) {\n          var data = _ref2.data;\n\n          _this2.setState({\n            selectedHealthOrg: data\n          });\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          handleClose = _this$props2.handleClose,\n          handleOKEditClose = _this$props2.handleOKEditClose,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n;\n      var _this$state = this.state,\n          id = _this$state.id,\n          isAddNew = _this$state.isAddNew,\n          listRole = _this$state.listRole,\n          passwordIsMasked = _this$state.passwordIsMasked,\n          roles = _this$state.roles,\n          active = _this$state.active,\n          isView = _this$state.isView,\n          email = _this$state.email,\n          person = _this$state.person,\n          username = _this$state.username,\n          changePass = _this$state.changePass,\n          password = _this$state.password,\n          confirmPassword = _this$state.confirmPassword,\n          page = _this$state.page,\n          rowsPerPage = _this$state.rowsPerPage,\n          selectedHealthOrg = _this$state.selectedHealthOrg,\n          shouldOpenHealthOrgSearchMultipleDialog = _this$state.shouldOpenHealthOrgSearchMultipleDialog,\n          loading = _this$state.loading;\n      var currentSelectedHealthOrg = selectedHealthOrg.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\n      var columns = [{\n        title: t(\"Name\"),\n        field: \"name\",\n        width: \"150\",\n        headerStyle: {\n          minWidth: \"250px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\"\n        },\n        cellStyle: {\n          minWidth: \"250px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        }\n      }, {\n        title: t(\"Code\"),\n        field: \"code\",\n        align: \"left\",\n        width: \"150\",\n        headerStyle: {\n          minWidth: \"250px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\"\n        },\n        cellStyle: {\n          minWidth: \"250px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        }\n      }, {\n        title: t(\"Action\"),\n        field: \"custom\",\n        align: \"left\",\n        width: \"250\",\n        headerStyle: {\n          minWidth: \"250px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\"\n        },\n        cellStyle: {\n          minWidth: \"250px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        cellStyle: {\n          whiteSpace: \"nowrap\"\n        },\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(MaterialButton, {\n            item: rowData,\n            onSelect: function onSelect(rowData, method) {\n              if (method === 1) {\n                _this3.handleDelete(rowData.id);\n              } else {\n                alert(\"Call Selected Here:\" + rowData.id);\n              }\n            },\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 11\n            }\n          });\n        }\n      }];\n      return /*#__PURE__*/React.createElement(Dialog, {\n        open: open,\n        PaperComponent: PaperComponent,\n        maxWidth: 'md',\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: clsx(\"wrapperButton\", !loading && 'hidden'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(CircularProgress, {\n        className: \"buttonProgress\",\n        size: 24,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(DialogTitle, {\n        style: {\n          cursor: 'move'\n        },\n        id: \"draggable-dialog-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"mb-20 styleColor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 9\n        }\n      }, \" \", (id ? t(\"update\") : t(\"Add\")) + \" \" + t(\"user.title\"), \" \"), /*#__PURE__*/React.createElement(IconButton, {\n        style: {\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\"\n        },\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        color: \"error\",\n        title: t(\"close\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 112\n        }\n      }, \"close\"))), /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        style: {\n          overflowY: \"auto\",\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DialogContent, {\n        dividers: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        className: \"mb-16\",\n        container: true,\n        spacing: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 mb-16\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 23\n          }\n        }, \" * \"), t('user.displayName')),\n        onChange: function onChange(displayName) {\n          return _this3.handleChange(displayName, \"displayName\");\n        },\n        type: \"text\",\n        name: \"name\",\n        value: person ? person.displayName : '',\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        fullWidth: true,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"gender-simple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 56\n        }\n      }, t('user.gender'))), /*#__PURE__*/React.createElement(Select, {\n        value: person ? person.gender : '',\n        onChange: function onChange(gender) {\n          return _this3.handleChange(gender, \"gender\");\n        },\n        inputProps: {\n          name: \"gender\",\n          id: \"gender-simple\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 19\n        }\n      }, this.listGender.map(function (item) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: item.id,\n          value: item.id,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 30\n          }\n        }, item.name);\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        InputProps: {\n          readOnly: !isAddNew\n        },\n        className: \"w-100 mb-16\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 23\n          }\n        }, \" * \"), t('user.username')),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"username\",\n        value: username,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 mb-16\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"Email\")),\n        onChange: this.handleChange,\n        type: \"email\",\n        name: \"email\",\n        value: email,\n        validators: [\"required\", \"isEmail\"],\n        errorMessages: [t(\"general.errorMessages_required\"), t(\"general.errorMessages_email_valid\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 15\n        }\n      }, listRole && /*#__PURE__*/React.createElement(Autocomplete, {\n        variant: \"outlined\",\n        size: \"small\",\n        style: {\n          width: '100%'\n        },\n        multiple: true,\n        id: \"combo-box-demo\",\n        defaultValue: roles,\n        options: listRole,\n        getOptionSelected: function getOptionSelected(option, value) {\n          return option.id === value.id;\n        },\n        getOptionLabel: function getOptionLabel(option) {\n          return option.authority;\n        },\n        onChange: function onChange(event, value) {\n          _this3.selectRoles(value);\n        },\n        renderInput: function renderInput(params) {\n          return /*#__PURE__*/React.createElement(TextValidator, Object.assign({}, params, {\n            value: roles,\n            label: /*#__PURE__*/React.createElement(\"span\", {\n              className: \"font\",\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 511,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(\"span\", {\n              style: {\n                color: \"red\"\n              },\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 512,\n                columnNumber: 27\n              }\n            }, \" * \"), t('user.role')),\n            fullWidth: true,\n            validators: [\"required\"],\n            errorMessages: [t('user.please_select_permission')],\n            variant: \"outlined\",\n            size: \"small\",\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 21\n            }\n          }));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 31\n        }\n      })), !isAddNew && /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormControlLabel, {\n        variant: \"outlined\",\n        size: \"small\",\n        value: changePass,\n        className: \"mb-16\",\n        name: \"changePass\",\n        onChange: function onChange(changePass) {\n          return _this3.handleChange(changePass, \"changePass\");\n        },\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          checked: changePass,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 28\n          }\n        }),\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 26\n          }\n        }, t(\"user.changePass\")),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControlLabel, {\n        variant: \"outlined\",\n        size: \"small\",\n        value: active,\n        className: \"mb-16\",\n        name: \"active\",\n        onChange: function onChange(active) {\n          return _this3.handleChange(active, \"active\");\n        },\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          checked: active,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 28\n          }\n        }),\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 26\n          }\n        }, t(\"user.active\")),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 17\n        }\n      })), changePass != null && changePass == true ? /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        className: \"mb-16 w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 29\n          }\n        }, \" * \"), t('password')),\n        variant: \"outlined\",\n        onChange: this.handleChange,\n        name: \"password\",\n        type: passwordIsMasked ? \"password\" : \"text\",\n        value: password,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        InputProps: {\n          endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n            position: \"end\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 579,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(IconButton, {\n            onClick: this.togglePasswordMask,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 31\n            }\n          }, passwordIsMasked ? /*#__PURE__*/React.createElement(Icon, {\n            color: \"primary\",\n            title: t(\"show_password\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 582,\n              columnNumber: 35\n            }\n          }, \"visibility_off\") : /*#__PURE__*/React.createElement(Icon, {\n            color: \"primary\",\n            title: t(\"hide_password\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 589,\n              columnNumber: 37\n            }\n          }, \"visibility\")))\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 23\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"mb-16 w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 29\n          }\n        }, \" * \"), t('re_password')),\n        variant: \"outlined\",\n        size: \"small\",\n        onChange: this.handleChange,\n        name: \"confirmPassword\",\n        type: passwordIsMasked ? \"password\" : \"text\",\n        value: confirmPassword,\n        validators: ['required', 'isPasswordMatch'],\n        errorMessages: [t(\"general.errorMessages_required\"), t(\"general.isPasswordMatch\")],\n        InputProps: {\n          endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n            position: \"end\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 621,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(IconButton, {\n            onClick: this.togglePasswordMask,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 31\n            }\n          }, passwordIsMasked ? /*#__PURE__*/React.createElement(Icon, {\n            color: \"primary\",\n            title: t(\"show_password\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 624,\n              columnNumber: 35\n            }\n          }, \"visibility_off\") : /*#__PURE__*/React.createElement(Icon, {\n            color: \"primary\",\n            title: t(\"hide_password\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 631,\n              columnNumber: 37\n            }\n          }, \"visibility\")))\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 23\n        }\n      }))) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 19\n        }\n      }), /*#__PURE__*/React.createElement(\"fieldset\", {\n        style: {\n          width: \"100%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"legend\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 26\n        }\n      }, t(\"EQAHealthOrgRoundRegister.orgUnit\"))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        container: true,\n        spacing: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 651,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"align-bottom\",\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick() {\n          return _this3.setState({\n            shouldOpenHealthOrgSearchMultipleDialog: true\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 21\n        }\n      }, t(\"Select\"))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MaterialTable, {\n        title: t(\"EQAHealthOrgRoundRegister.listOrgUnit\"),\n        columns: columns,\n        data: currentSelectedHealthOrg // options={{\n        //   selection: true,\n        //   actionsColumnIndex: -1,\n        //   paging: false,\n        //   search: false\n        // }}\n        ,\n        onSelectionChange: function onSelectionChange(rows) {\n          _this3.data = rows;\n        },\n        options: {\n          selection: false,\n          actionsColumnIndex: -1,\n          paging: false,\n          search: false,\n          rowStyle: function rowStyle(rowData, index) {\n            return {\n              backgroundColor: index % 2 === 1 ? '#EEE' : '#FFF'\n            };\n          },\n          headerStyle: {\n            backgroundColor: '#358600',\n            color: '#fff'\n          },\n          padding: 'dense',\n          toolbar: false\n        },\n        localization: {\n          body: {\n            emptyDataSourceMessage: \"\".concat(t(\"general.emptyDataMessageTable\"))\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        title: t(\"confirm\"),\n        open: this.state.shouldOpenConfirmationDialog,\n        onConfirmDialogClose: this.handleHealthOrgSearchDialogClose,\n        onYesClick: this.handleConfirmationResponse,\n        text: t(\"DeleteConfirm\"),\n        Yes: t(\"general.Yes\"),\n        No: t(\"general.No\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(TablePagination, {\n        align: \"left\",\n        className: \"px-16\",\n        rowsPerPageOptions: [5, 10, 25],\n        component: \"div\",\n        labelRowsPerPage: t('general.rows_per_page'),\n        labelDisplayedRows: function labelDisplayedRows(_ref3) {\n          var from = _ref3.from,\n              to = _ref3.to,\n              count = _ref3.count;\n          return \"\".concat(from, \"-\").concat(to, \" \").concat(t('general.of'), \" \").concat(count !== -1 ? count : \"more than \".concat(to));\n        },\n        count: selectedHealthOrg.length,\n        rowsPerPage: this.state.rowsPerPage,\n        page: this.state.page,\n        backIconButtonProps: {\n          \"aria-label\": \"Previous Page\"\n        },\n        nextIconButtonProps: {\n          \"aria-label\": \"Next Page\"\n        },\n        onChangePage: this.handleChangePage,\n        onChangeRowsPerPage: this.handleChangeRowsPerPage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 21\n        }\n      })))), shouldOpenHealthOrgSearchMultipleDialog && /*#__PURE__*/React.createElement(EQAHealthOrgSearchMultipleDialog, {\n        open: this.state.shouldOpenHealthOrgSearchMultipleDialog,\n        handleSelect: this.handleSelectHealthOrg,\n        selectedHealthOrg: selectedHealthOrg,\n        handleClose: this.handleHealthOrgSearchDialogClose,\n        t: t,\n        i18n: i18n,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(DialogActions, {\n        spacing: 4,\n        className: \"flex flex-end flex-middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 748,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: function onClick() {\n          return _this3.props.handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 13\n        }\n      }, t('Cancel')), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        disabled: loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 13\n        }\n      }, t('Save')))));\n    }\n  }]);\n\n  return UserEditorDialog;\n}(Component);\n\nexport default UserEditorDialog;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/User/UserEditorDialog.jsx"],"names":["React","Component","EQAHealthOrgSearchMultipleDialog","Dialog","Button","Grid","InputLabel","FormControl","MenuItem","Select","InputAdornment","Checkbox","TextField","DialogActions","FormControlLabel","DialogTitle","DialogContent","TablePagination","IconButton","Icon","Breadcrumb","ConfirmationDialog","MaterialTable","MTableToolbar","Chip","MTableBody","MTableHeader","Autocomplete","ValidatorForm","TextValidator","getUserByUsername","getUserByEmail","saveUser","addNewUser","getAllRoles","saveHealthOrgByUser","getListHealthOrgByUser","AsynchronousAutocomplete","Draggable","Paper","clsx","CircularProgress","toast","configure","autoClose","draggable","limit","PaperComponent","props","MaterialButton","item","onSelect","UserEditorDialog","state","isAddNew","listRole","isView","roles","active","email","person","username","changePass","password","passwordIsMasked","confirmPassword","page","rowsPerPage","selectedHealthOrg","shouldOpenHealthOrgSearchMultipleDialog","shouldOpenConfirmationDialog","loading","listGender","id","name","handleChange","event","source","persist","setState","isActive","target","checked","displayName","value","gender","togglePasswordMask","prevState","handleFormSubmit","t","then","data","warning","healthOrgIdList","i","length","listHealthOrgId","push","response","success","catch","selectRoles","rolesSelected","handleHealthOrgSearchDialogClose","handleSelectHealthOrg","handleChangePage","newPage","handleChangeRowsPerPage","handleDelete","filter","row","handleDeleteAll","deleteIdList","map","handleConfirmationResponse","includes","result","open","handleClose","addValidationRule","handleOKEditClose","i18n","currentSelectedHealthOrg","slice","columns","title","field","width","headerStyle","minWidth","paddingLeft","paddingRight","cellStyle","textAlign","align","whiteSpace","render","rowData","method","alert","cursor","position","right","top","overflowY","display","flexDirection","color","readOnly","option","authority","params","endAdornment","rows","selection","actionsColumnIndex","paging","search","rowStyle","index","backgroundColor","padding","toolbar","body","emptyDataSourceMessage","from","to","count"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport EQAHealthOrgSearchMultipleDialog from \"../EQAHealthOrgRoundRegister/EQAHealthOrgSearchMultipleDialog\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  InputLabel,\r\n  FormControl,\r\n  MenuItem,\r\n  Select,\r\n  InputAdornment,\r\n  Checkbox,\r\n  TextField,\r\n  DialogActions,\r\n  FormControlLabel,\r\n  DialogTitle,\r\n  DialogContent,\r\n  TablePagination,\r\n  IconButton,\r\n  Icon\r\n} from \"@material-ui/core\";\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport MaterialTable, {\r\n  MTableToolbar,\r\n  Chip,\r\n  MTableBody,\r\n  MTableHeader\r\n} from \"material-table\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport { getUserByUsername, getUserByEmail, saveUser, addNewUser, getAllRoles, saveHealthOrgByUser, getListHealthOrgByUser } from \"./UserService\";\r\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\r\nimport Draggable from 'react-draggable';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport '../../../styles/views/_loadding.scss';\r\nimport clsx from 'clsx';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../../styles/views/_style.scss';\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit: 3\r\n});\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\nfunction MaterialButton(props) {\r\n  const item = props.item;\r\n  return (\r\n    <div>\r\n      <IconButton onClick={() => props.onSelect(item, 1)}>\r\n        <Icon color=\"error\">delete</Icon>\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nclass UserEditorDialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    getAllRoles().then((result) => {\r\n      let listRole = result.data;\r\n      this.setState({ listRole: listRole });\r\n    });\r\n  }\r\n  state = {\r\n    isAddNew: false,\r\n    listRole: [],\r\n    isView: false,\r\n    roles: [],\r\n    active: true,\r\n    email: '',\r\n    person: {},\r\n    username: '',\r\n    changePass: true,\r\n    password: '',\r\n    passwordIsMasked: true,\r\n    confirmPassword: '',\r\n    page: 0,\r\n    rowsPerPage: 5,\r\n    selectedHealthOrg: [],\r\n    shouldOpenHealthOrgSearchMultipleDialog: false,\r\n    shouldOpenConfirmationDialog: false,\r\n    loading: false,\r\n  };\r\n\r\n  listGender = [\r\n    { id: 'M', name: 'Nam' },\r\n    { id: 'F', name: 'Nữ' },\r\n    { id: 'U', name: 'Không rõ' }\r\n  ]\r\n\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n    if (source === \"changePass\") {\r\n      this.setState({ changePass: event.target.checked });\r\n      return;\r\n    }\r\n    if (source === \"active\") {\r\n      this.setState({ active: event.target.checked });\r\n      return;\r\n    }\r\n    if (source === \"displayName\") {\r\n      let { person } = this.state;\r\n      person = person ? person : {};\r\n      person.displayName = event.target.value;\r\n      this.setState({ person: person });\r\n      return;\r\n    }\r\n    if (source === \"gender\") {\r\n      let { person } = this.state;\r\n      person = person ? person : {};\r\n      person.gender = event.target.value;\r\n      this.setState({ person: person });\r\n      return;\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n  togglePasswordMask = () => {\r\n    this.setState(prevState => ({\r\n      passwordIsMasked: !prevState.passwordIsMasked\r\n    }));\r\n  };\r\n  handleFormSubmit = () => {\r\n    this.setState({ loading: true })\r\n    let { id } = this.state;\r\n    let { t } = this.props;\r\n    // this.setState({isView: true});    \r\n    getUserByUsername(this.state.username).then((data) => {\r\n      if (id) {\r\n        if ((data.data && data.data.id && data.data.id !== id)) {\r\n          //alert(\"Tên đăng nhập đã tồn tại!\");\r\n          toast.warning(t(\"general.duplicateUsername\"));\r\n          this.setState({ loading: false });\r\n          return;\r\n        }\r\n      }\r\n      else {\r\n        if ((data.data && data.data.id)) {\r\n          toast.warning(t(\"general.duplicateUsername\"));\r\n          this.setState({ loading: false });\r\n          return;\r\n        }\r\n      }\r\n\r\n      // getUserByEmail({email: this.state.email}).then((res) => {\r\n      //   if (id) {\r\n      //     if ((res.data && res.data.id && res.data.id !== id)) {\r\n      //       //alert(\"Tên đăng nhập đã tồn tại!\");\r\n      //       toast.warning(t(\"general.duplicateEmail\"));\r\n      //       this.setState({ loading: false });\r\n      //       return;\r\n      //     }\r\n      //   }\r\n      //   else {\r\n      //     if ((res.data && res.data.id)) {\r\n      //       toast.warning(t(\"general.duplicateEmail\"));\r\n      //       this.setState({ loading: false });\r\n      //       return;\r\n      //     }\r\n      //   }\r\n\r\n        if (id) {\r\n          saveUser({\r\n            ...this.state,\r\n          }).then((data) => {\r\n            this.setState({ isView: true, loading: false });\r\n            let healthOrgIdList = [];\r\n            for (let i = 0; i < this.state.selectedHealthOrg.length; i++) {\r\n              const listHealthOrgId = this.state.selectedHealthOrg[i];\r\n              healthOrgIdList.push(listHealthOrgId.id);\r\n            }\r\n            saveHealthOrgByUser(data.data.id, healthOrgIdList).then((response) => {\r\n\r\n            });\r\n            toast.success(t(\"mess_edit\"));\r\n            // this.props.handleOKEditClose();\r\n          });\r\n        } else {\r\n          saveUser({\r\n            ...this.state,\r\n          }).then((data) => {\r\n            this.setState({...this.state, isView: true, loading: false });\r\n            let healthOrgIdList = [];\r\n            for (let i = 0; i < this.state.selectedHealthOrg.length; i++) {\r\n              const listHealthOrgId = this.state.selectedHealthOrg[i];\r\n              healthOrgIdList.push(listHealthOrgId.id);\r\n            }\r\n            saveHealthOrgByUser(data.data.id, healthOrgIdList).then((response) => {\r\n\r\n            });\r\n            this.state.id = data.data.id;\r\n            this.setState({...this.state, isView: true, loading: false });\r\n            toast.success(t(\"mess_add\"));\r\n            // this.props.handleOKEditClose();\r\n          });\r\n        }\r\n    }).catch(()=>{\r\n      this.setState({ loading: false });\r\n    });\r\n  };\r\n\r\n  selectRoles = (rolesSelected) => {\r\n    this.setState({ roles: rolesSelected }, function () {\r\n    });\r\n  }\r\n\r\n  componentWillMount() {\r\n    let { open, handleClose, item } = this.props;\r\n    this.setState(item);\r\n  }\r\n\r\n\r\n\r\n  handleHealthOrgSearchDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenHealthOrgSearchMultipleDialog: false,\r\n      shouldOpenConfirmationDialog: false\r\n    });\r\n  };\r\n  handleSelectHealthOrg = item => {\r\n    this.setState({ selectedHealthOrg: item });\r\n    this.handleHealthOrgSearchDialogClose();\r\n  };\r\n\r\n  componentDidMount() {\r\n    // custom rule will have name 'isPasswordMatch'\r\n    let { item } = this.props;\r\n\r\n    ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\r\n      if (value !== this.state.password) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n\r\n    getAllRoles().then(({ data }) => {\r\n      this.setState({\r\n        listRole: data\r\n      });\r\n    });\r\n\r\n    if (item != null && item.id != null) {\r\n      getListHealthOrgByUser(item.id).then(({ data }) => {\r\n        this.setState({\r\n          selectedHealthOrg: data\r\n        })\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  handleChangePage = (event, newPage) => {\r\n    this.setState({\r\n      page: newPage\r\n    });\r\n  };\r\n\r\n  handleChangeRowsPerPage = event => {\r\n    this.setState({\r\n      rowsPerPage: event.target.value,\r\n      page: 0\r\n    });\r\n  };\r\n\r\n  handleDelete = id => {\r\n    let selectedHealthOrg = this.state.selectedHealthOrg;\r\n    selectedHealthOrg = selectedHealthOrg.filter(row => row.id !== id);\r\n    this.setState({\r\n      selectedHealthOrg\r\n    });\r\n  };\r\n  handleDeleteAll = data => {\r\n    const deleteIdList = data.map(row => row.id);\r\n    this.setState({\r\n      deleteIdList,\r\n      shouldOpenConfirmationDialog: true\r\n    });\r\n  };\r\n\r\n  handleConfirmationResponse = () => {\r\n    const selectedHealthOrg = this.state.selectedHealthOrg.filter(\r\n      row => !this.state.deleteIdList.includes(row.id)\r\n    );\r\n    this.setState({\r\n      selectedHealthOrg,\r\n      shouldOpenConfirmationDialog: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { open, handleClose, handleOKEditClose, t, i18n } = this.props;\r\n    let {\r\n      id,\r\n      isAddNew,\r\n      listRole,\r\n      passwordIsMasked,\r\n      roles,\r\n      active,\r\n      isView,\r\n      email,\r\n      person,\r\n      username,\r\n      changePass,\r\n      password,\r\n      confirmPassword,\r\n      page,\r\n      rowsPerPage,\r\n      selectedHealthOrg,\r\n      shouldOpenHealthOrgSearchMultipleDialog, loading\r\n    } = this.state;\r\n\r\n\r\n\r\n    const currentSelectedHealthOrg = selectedHealthOrg.slice(\r\n      page * rowsPerPage,\r\n      page * rowsPerPage + rowsPerPage\r\n    );\r\n    let columns = [\r\n      { title: t(\"Name\"), field: \"name\", width: \"150\",\r\n      headerStyle: {\r\n        minWidth:\"250px\",\r\n        paddingLeft: \"10px\",\r\n        paddingRight: \"0px\",\r\n      },\r\n      cellStyle: {\r\n        minWidth:\"250px\",\r\n        paddingLeft: \"10px\",\r\n        paddingRight: \"0px\",\r\n        textAlign: \"left\",\r\n      }, \r\n     },\r\n      { title: t(\"Code\"), field: \"code\", align: \"left\", width: \"150\",\r\n      headerStyle: {\r\n        minWidth:\"250px\",\r\n        paddingLeft: \"10px\",\r\n        paddingRight: \"0px\",\r\n      },\r\n      cellStyle: {\r\n        minWidth:\"250px\",\r\n        paddingLeft: \"10px\",\r\n        paddingRight: \"0px\",\r\n        textAlign: \"left\",\r\n      }, \r\n    },\r\n      {\r\n        title: t(\"Action\"),\r\n        field: \"custom\",\r\n        align: \"left\",\r\n        width: \"250\",\r\n        headerStyle: {\r\n          minWidth:\"250px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n        },\r\n        cellStyle: {\r\n          minWidth:\"250px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n          textAlign: \"left\",\r\n        }, \r\n        cellStyle: { whiteSpace: \"nowrap\" },\r\n        render: rowData => (\r\n          <MaterialButton\r\n            item={rowData}\r\n            onSelect={(rowData, method) => {\r\n              if (method === 1) {\r\n                this.handleDelete(rowData.id);\r\n              } else {\r\n                alert(\"Call Selected Here:\" + rowData.id);\r\n              }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    ];\r\n    return (\r\n      <Dialog open={open} PaperComponent={PaperComponent} maxWidth={'md'} fullWidth={true}>\r\n        <div className={clsx(\"wrapperButton\", !loading && 'hidden')} >\r\n          <CircularProgress className=\"buttonProgress\" size={24} />\r\n        </div>\r\n        <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\r\n        <span className=\"mb-20 styleColor\"> {(id ? t(\"update\") : t(\"Add\")) + \" \" + t(\"user.title\")} </span>\r\n        <IconButton style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }} onClick={() => handleClose()}><Icon color=\"error\"\r\n              title={t(\"close\")}>\r\n              close\r\n        </Icon>\r\n        </IconButton>\r\n        </DialogTitle>\r\n        <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit} style={{\r\n          overflowY: \"auto\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\"\r\n        }}>\r\n          <DialogContent dividers>\r\n            <Grid className=\"mb-16\" container spacing={1}>\r\n              <Grid item lg={6} md={6} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 mb-16\"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t('user.displayName')}\r\n                    </span>\r\n                  }\r\n                  onChange={displayName => this.handleChange(displayName, \"displayName\")}\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  value={person ? person.displayName : ''}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={6} md={6} sm={12} xs={12}>\r\n                <FormControl fullWidth={true} variant=\"outlined\"\r\n                  size=\"small\">\r\n                  <InputLabel htmlFor=\"gender-simple\">{<span className=\"font\">{t('user.gender')}</span>}</InputLabel>\r\n                  <Select\r\n                    value={person ? person.gender : ''}\r\n                    onChange={gender => this.handleChange(gender, \"gender\")}\r\n                    inputProps={{\r\n                      name: \"gender\",\r\n                      id: \"gender-simple\"\r\n                    }}\r\n                  >\r\n                    {this.listGender.map(item => {\r\n                      return <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>;\r\n                    })}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item lg={6} md={6} sm={12} xs={12}>\r\n                <TextValidator\r\n                  InputProps={{\r\n                    readOnly: !isAddNew,\r\n                  }}\r\n                  className=\"w-100 mb-16\"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t('user.username')}\r\n                    </span>\r\n                  }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"username\"\r\n                  value={username}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={6} md={6} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 mb-16\"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"Email\")}\r\n                    </span>\r\n                  }\r\n                  onChange={this.handleChange}\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  validators={[\"required\", \"isEmail\"]}\r\n                  errorMessages={[\r\n                    t(\"general.errorMessages_required\"),\r\n                    t(\"general.errorMessages_email_valid\")\r\n                  ]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item sm={12} xs={12}>\r\n                {listRole && (<Autocomplete\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  style={{ width: '100%' }}\r\n                  multiple\r\n                  id=\"combo-box-demo\"\r\n                  defaultValue={roles}\r\n                  options={listRole}\r\n                  getOptionSelected={(option, value) => option.id === value.id}\r\n                  getOptionLabel={(option) => option.authority}\r\n                  onChange={(event, value) => {\r\n                    this.selectRoles(value);\r\n                  }}\r\n                  renderInput={(params) =>\r\n                    <TextValidator\r\n                      {...params}\r\n                      value={roles}\r\n                      label={\r\n                        <span className=\"font\">\r\n                          <span style={{ color: \"red\" }}> * </span>\r\n                          {t('user.role')}\r\n                        </span>\r\n                      }\r\n                      fullWidth\r\n                      validators={[\"required\"]}\r\n                      errorMessages={[t('user.please_select_permission')]}\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                    />}\r\n                    \r\n                />)}\r\n              </Grid>\r\n\r\n\r\n\r\n              {!isAddNew && <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                <FormControlLabel\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  value={changePass}\r\n                  className=\"mb-16\"\r\n                  name=\"changePass\"\r\n                  onChange={changePass => this.handleChange(changePass, \"changePass\")}\r\n                  control={<Checkbox\r\n                    checked={changePass}\r\n                  />}\r\n                  label={<span className=\"font\">{t(\"user.changePass\")}</span>}\r\n                />\r\n              </Grid>}\r\n              <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                <FormControlLabel\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  value={active}\r\n                  className=\"mb-16\"\r\n                  name=\"active\"\r\n                  onChange={active => this.handleChange(active, \"active\")}\r\n                  control={<Checkbox\r\n                    checked={active}\r\n                  />}\r\n                  label={<span className=\"font\">{t(\"user.active\")}</span>}\r\n                />\r\n              </Grid>\r\n              {\r\n                (changePass != null && changePass == true)\r\n                  ?\r\n                  <Grid container spacing={2}>\r\n                    <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                      <TextValidator\r\n                        size=\"small\"\r\n                        className=\"mb-16 w-100\"\r\n                        label={\r\n                          <span className=\"font\">\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t('password')}\r\n                          </span>\r\n                        }\r\n                        variant=\"outlined\"\r\n                        onChange={this.handleChange}\r\n                        name=\"password\"\r\n                        type={passwordIsMasked ? \"password\" : \"text\"}\r\n                        value={password}\r\n                        validators={[\"required\"]}\r\n                        errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        InputProps={{\r\n                          endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                              <IconButton onClick={this.togglePasswordMask}>\r\n                                {passwordIsMasked ? (\r\n                                  <Icon\r\n                                    color=\"primary\"\r\n                                    title={t(\"show_password\")}\r\n                                  >\r\n                                    visibility_off\r\n                                  </Icon>\r\n                                ) : (\r\n                                    <Icon\r\n                                      color=\"primary\"\r\n                                      title={t(\"hide_password\")}\r\n                                    >\r\n                                      visibility\r\n                                    </Icon>\r\n                                  )}\r\n                              </IconButton>\r\n                            </InputAdornment>\r\n                          )\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                      <TextValidator\r\n                        className=\"mb-16 w-100\"\r\n                        label={\r\n                          <span className=\"font\">\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t('re_password')}\r\n                          </span>\r\n                        }\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={this.handleChange}\r\n                        name=\"confirmPassword\"\r\n                        type={passwordIsMasked ? \"password\" : \"text\"}\r\n                        value={confirmPassword}\r\n                        validators={['required', 'isPasswordMatch']}\r\n                        errorMessages={[t(\"general.errorMessages_required\"), t(\"general.isPasswordMatch\")]}\r\n                        InputProps={{\r\n                          endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                              <IconButton onClick={this.togglePasswordMask}>\r\n                                {passwordIsMasked ? (\r\n                                  <Icon\r\n                                    color=\"primary\"\r\n                                    title={t(\"show_password\")}\r\n                                  >\r\n                                    visibility_off\r\n                                  </Icon>\r\n                                ) : (\r\n                                    <Icon\r\n                                      color=\"primary\"\r\n                                      title={t(\"hide_password\")}\r\n                                    >\r\n                                      visibility\r\n                                    </Icon>\r\n                                  )}\r\n                              </IconButton>\r\n                            </InputAdornment>\r\n                          )\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  :\r\n                  <div></div>\r\n              }\r\n              <fieldset style={{ width: \"100%\" }}>\r\n                <legend>{<span className=\"font\">{t(\"EQAHealthOrgRoundRegister.orgUnit\")}</span>}</legend>\r\n                <Grid item container spacing={3} sm={12} xs={12}>\r\n                  <Grid item xs={12}>\r\n                    <Button\r\n                      className=\"align-bottom\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={() =>\r\n                        this.setState({\r\n                          shouldOpenHealthOrgSearchMultipleDialog: true\r\n                        })\r\n                      }\r\n                    >\r\n                      {t(\"Select\")}\r\n                    </Button>\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <MaterialTable\r\n                      title={t(\"EQAHealthOrgRoundRegister.listOrgUnit\")}\r\n                      columns={columns}\r\n                      data={currentSelectedHealthOrg}\r\n                      // options={{\r\n                      //   selection: true,\r\n                      //   actionsColumnIndex: -1,\r\n                      //   paging: false,\r\n                      //   search: false\r\n                      // }}\r\n                      onSelectionChange={rows => {\r\n                        this.data = rows;\r\n                      }}\r\n                      options={{\r\n                        selection: false,\r\n                        actionsColumnIndex: -1,\r\n                        paging: false,\r\n                        search: false,\r\n                        rowStyle: (rowData, index) => ({\r\n                          backgroundColor: (index % 2 === 1) ? '#EEE' : '#FFF',\r\n                        }),\r\n                        headerStyle: {\r\n                          backgroundColor: '#358600',\r\n                          color: '#fff',\r\n                        },\r\n                        padding: 'dense',\r\n                        toolbar: false\r\n                      }}\r\n                      localization={{\r\n                        body: {\r\n                          emptyDataSourceMessage: `${t(\r\n                            \"general.emptyDataMessageTable\"\r\n                          )}`,\r\n                        },\r\n                      }}\r\n                    />\r\n\r\n                    <ConfirmationDialog\r\n                      title={t(\"confirm\")}\r\n                      open={this.state.shouldOpenConfirmationDialog}\r\n                      onConfirmDialogClose={this.handleHealthOrgSearchDialogClose}\r\n                      onYesClick={this.handleConfirmationResponse}\r\n                      text={t(\"DeleteConfirm\")}\r\n                      Yes={t(\"general.Yes\")}\r\n                      No={t(\"general.No\")}\r\n                    />\r\n\r\n                    <TablePagination\r\n                      align=\"left\"\r\n                      className=\"px-16\"\r\n                      rowsPerPageOptions={[5, 10, 25]}\r\n                      component=\"div\"\r\n                      labelRowsPerPage={t('general.rows_per_page')}\r\n                      labelDisplayedRows={({ from, to, count }) => `${from}-${to} ${t('general.of')} ${count !== -1 ? count : `more than ${to}`}`}\r\n                      count={selectedHealthOrg.length}\r\n                      rowsPerPage={this.state.rowsPerPage}\r\n                      page={this.state.page}\r\n                      backIconButtonProps={{\r\n                        \"aria-label\": \"Previous Page\"\r\n                      }}\r\n                      nextIconButtonProps={{\r\n                        \"aria-label\": \"Next Page\"\r\n                      }}\r\n                      onChangePage={this.handleChangePage}\r\n                      onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </fieldset>\r\n              {shouldOpenHealthOrgSearchMultipleDialog && (\r\n                <EQAHealthOrgSearchMultipleDialog\r\n                  open={this.state.shouldOpenHealthOrgSearchMultipleDialog}\r\n                  handleSelect={this.handleSelectHealthOrg}\r\n                  selectedHealthOrg={selectedHealthOrg}\r\n                  handleClose={this.handleHealthOrgSearchDialogClose}\r\n                  t={t}\r\n                  i18n={i18n}\r\n                />\r\n              )}\r\n            </Grid>\r\n          </DialogContent>\r\n\r\n          <DialogActions spacing={4} className=\"flex flex-end flex-middle\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={() => this.props.handleClose()}>\r\n              {t('Cancel')}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n              disabled={loading}\r\n            >\r\n              {t('Save')}\r\n            </Button>\r\n          </DialogActions>\r\n        </ValidatorForm>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserEditorDialog;\r\n"]},"metadata":{},"sourceType":"module"}