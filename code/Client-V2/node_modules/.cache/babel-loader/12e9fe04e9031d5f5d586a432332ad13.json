{"ast":null,"code":"import _toConsumableArray from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\AdministrativeUnit\\\\React15TabulatorSample.js\";\nimport React from \"react\";\nimport \"./styles.css\"; // import \"react-tabulator/lib/styles.css\"; // default theme\n\nimport \"react-tabulator/lib/css/bootstrap/tabulator_bootstrap.min.css\"; // use Theme(s)\n// for React 16.4.x use: import { ReactTabulator }\n//import { React15Tabulator } from \"react-tabulator\"; // for React 15.x\n\nimport { React15Tabulator, reactFormatter } from \"react-tabulator\"; // for React 15.x\n\nimport { saveAs } from 'file-saver';\nimport { getAllAdministrativeUnits, deleteAdministrativeUnit, getByPage } from \"./AdministrativeUnitService\";\nimport AdministrativeUnitEditorDialog from \"./AdministrativeUnitEditorDialog\";\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport ConstantList from \"../../appConfig\";\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\nimport { IconButton, Table, TableHead, TableBody, TableRow, TableCell, Icon, TablePagination, TableContainer, Button, Card } from \"@material-ui/core\";\nvar columns = [{\n  title: \"Name\",\n  field: \"name\",\n  width: \"20%\"\n}, {\n  title: \"Age\",\n  field: \"age\",\n  align: \"left\",\n  formatter: \"progress\",\n  width: \"20%\"\n}, {\n  title: \"Favourite Color\",\n  field: \"col\",\n  width: \"20%\"\n}, {\n  title: \"Date Of Birth\",\n  field: \"dob\",\n  align: \"center\",\n  width: 150\n}, {\n  title: \"Rating\",\n  field: \"rating\",\n  align: \"center\",\n  formatter: \"star\",\n  width: 150\n}, {\n  title: \"Passed?\",\n  field: \"passed\",\n  align: \"center\",\n  formatter: \"tickCross\",\n  width: 150\n}]; // const columns = [\n//   { title: \"Name\", field: \"name\", width: \"30%\"},\n//   { title: \"Code\", field: \"code\", align: \"left\", formatter: \"progress\" , width: \"40%\" },\n//   { title: \"Level\", field: \"level\" , width: \"30%\"  },\n// ];\n\nfunction SimpleButton(props) {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t,\n      i18n = _useTranslation.i18n;\n\n  var cellData = props.cell._cell.row.data;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      return props.onSelect(cellData, 0);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, t(\"Edit\")), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      return props.onSelect(cellData, 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, t(\"Delete\")));\n} // function GetColumns(){\n//   const { t, i18n } = useTranslation();\n//   const columns = [\n//     { title: t(\"Name\"), field: \"name\", width: \"150\"},\n//     { title: t(\"Code\"), field: \"code\", align: \"left\", width: \"150\"},\n//     { title: t(\"Level\"), field: \"level\", width: \"150\"},\n//     { title: t(\"IsActive\"), field: \"isActive\", width: \"20%\"},\n//     {\n//       title: t(\"Action\"),\n//       field: \"custom\",\n//       align: \"left\",\n//       width: \"250\",\n//       formatter: reactFormatter(\n//         <SimpleButton\n//           onSelect={(item, method) => {\n//             if(method===0){\n//               this.setState({ selectedItem: item, shouldOpenEditorDialog: true});\n//             }else {\n//               this.handleDeleteAdministrativeUnit(item.id);\n//             }\n//           }}\n//         />\n//       )\n//     }\n//   ];\n//   return columns;\n// }\n\n\nfunction DeleteData(cellData) {\n  alert(cellData.id);\n}\n\nvar data = [{\n  id: 1,\n  name: \"Oli Bob\",\n  age: \"12\",\n  col: \"red\",\n  dob: \"\",\n  rating: 5,\n  passed: true\n}, {\n  id: 2,\n  name: \"Mary May\",\n  age: \"1\",\n  col: \"green\",\n  dob: \"14/05/1989\",\n  rating: 4,\n  passed: true\n}, {\n  id: 3,\n  name: \"Christine Lobowski\",\n  age: \"42\",\n  col: \"green\",\n  dob: \"22/05/1985\",\n  rating: 4,\n  passed: false\n}, {\n  id: 4,\n  name: \"Brendon Philips\",\n  age: \"125\",\n  col: \"red\",\n  dob: \"01/08/1980\",\n  rating: 4.5,\n  passed: true\n}, {\n  id: 5,\n  name: \"Margret Marmajuke\",\n  age: \"16\",\n  col: \"yellow\",\n  dob: \"31/01/1999\",\n  rating: 4,\n  passed: false\n}, {\n  id: 6,\n  name: \"Van Ng\",\n  age: \"37\",\n  col: \"green\",\n  dob: \"06/15/1982\",\n  rating: 4,\n  passed: true\n}, {\n  id: 7,\n  name: \"Duc Ng\",\n  age: \"37\",\n  col: \"yellow\",\n  dob: \"10/15/1982\",\n  rating: 4,\n  passed: true\n}]; // Editable Example:\n\nvar colorOptions = {\n  [\"\"]: \"&nbsp;\",\n  red: \"red\",\n  green: \"green\",\n  yellow: \"yellow\"\n};\nvar editableColumns = [{\n  title: \"Name\",\n  field: \"name\",\n  width: 150,\n  editor: \"input\",\n  headerFilter: \"input\"\n}, {\n  title: \"Age\",\n  field: \"age\",\n  align: \"left\",\n  formatter: \"progress\",\n  editor: \"progress\"\n}, {\n  title: \"Favourite Color\",\n  field: \"col\",\n  editor: \"autocomplete\",\n  editorParams: {\n    allowEmpty: true,\n    showListOnEmpty: true,\n    values: colorOptions\n  },\n  headerFilter: \"select\",\n  headerFilterParams: {\n    values: colorOptions\n  }\n}, {\n  title: \"Date Of Birth\",\n  field: \"dob\",\n  align: \"center\",\n  editor: \"input\"\n}, {\n  title: \"Rating\",\n  field: \"rating\",\n  align: \"center\",\n  formatter: \"star\",\n  editor: true\n}, {\n  title: \"Passed?\",\n  field: \"passed\",\n  align: \"center\",\n  formatter: \"tickCross\",\n  editor: true\n}];\n\nvar React15TabulatorSample = /*#__PURE__*/function (_React$Component) {\n  _inherits(React15TabulatorSample, _React$Component);\n\n  var _super = _createSuper(React15TabulatorSample);\n\n  function React15TabulatorSample() {\n    var _this;\n\n    _classCallCheck(this, React15TabulatorSample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.ref = null;\n    _this.state = {\n      rowsPerPage: 3,\n      page: 0,\n      data: [],\n      totalElements: 0,\n      administrativeList: [],\n      shouldOpenEditorDialog: false,\n      shouldOpenConfirmationDialog: false\n    };\n\n    _this.SimpleButton = function (props) {\n      var cellData = props.cell._cell.row.data;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 12\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return props.onSelect(cellData, 0);\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 7\n        }\n      }, \"Edit\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return props.onSelect(cellData, 1);\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 7\n        }\n      }, \"Delete\"));\n    };\n\n    _this.setPage = function (page) {\n      _this.setState({\n        page\n      });\n    };\n\n    _this.setRowsPerPage = function (event) {\n      _this.setState({\n        rowsPerPage: event.target.value,\n        page: 0\n      });\n\n      _this.updatePageData(0, event.target.value);\n    };\n\n    _this.handleChangePage = function (event, newPage) {\n      _this.setPage(newPage); //alert(newPage+\"/\"+this.state.page);\n\n\n      _this.updatePageData(newPage, _this.state.rowsPerPage);\n    };\n\n    _this.handleDownload = function () {\n      var blob = new Blob([\"Hello, world!\"], {\n        type: \"text/plain;charset=utf-8\"\n      });\n      saveAs(blob, \"hello world.txt\");\n    };\n\n    _this.handleDialogClose = function () {\n      _this.setState({\n        shouldOpenEditorDialog: false,\n        shouldOpenConfirmationDialog: false\n      });\n\n      _this.setPage(0);\n\n      _this.updatePageData(_this.state.page, _this.state.rowsPerPage);\n    };\n\n    _this.handleDeleteAdministrativeUnit = function (id) {\n      _this.setState({\n        id,\n        shouldOpenConfirmationDialog: true\n      });\n    };\n\n    _this.handleConfirmationResponse = function () {\n      //alert(this.state.id);\n      deleteAdministrativeUnit(_this.state.id).then(function () {\n        _this.handleDialogClose();\n      });\n    };\n\n    _this.handleEditItem = function (item) {\n      _this.setState({\n        item: item,\n        shouldOpenEditorDialog: true\n      });\n    };\n\n    _this.updatePageData = function (pageIndex, pageSize) {\n      getByPage(pageIndex, pageSize).then(function (_ref) {\n        var data = _ref.data;\n        return _this.setState({\n          administrativeList: _toConsumableArray(data.content),\n          totalElements: data.totalElements\n        });\n      });\n    };\n\n    _this.rowClick = function (e, row) {\n      console.log(\"ref table: \", _this.ref.table); // this is the Tabulator table instance\n\n      console.log(\"rowClick id: ${row.getData().id}\", row, e);\n    };\n\n    _this.setData = function () {\n      _this.setState({\n        data: _this.state.administrativeList\n      });\n    };\n\n    _this.clearData = function () {\n      _this.setState({\n        data: []\n      });\n    };\n\n    _this.GetColumns = function (col) {\n      return col;\n    };\n\n    _this.rowClick = function (e, row) {\n      //alert(row.getData().name);\n      _this.setState({\n        item: row.getData()\n      });\n\n      console.log(\"ref table: \", _this.ref.table); // this is the Tabulator table instance\n\n      console.log(\"rowClick id: ${row.getData().id}\", row, e);\n\n      _this.setState({\n        selectedName: row.getData().name\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(React15TabulatorSample, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updatePageData(this.state.page, this.state.rowsPerPage);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          t = _this$props.t,\n          i18n = _this$props.i18n;\n      var columns = [{\n        title: t(\"Name\"),\n        field: \"name\",\n        width: \"150\"\n      }, {\n        title: t(\"Code\"),\n        field: \"code\",\n        align: \"left\",\n        width: \"150\"\n      }, {\n        title: t(\"Level\"),\n        field: \"level\",\n        width: \"150\"\n      }, {\n        title: t(\"IsActive\"),\n        field: \"isActive\",\n        width: \"20%\"\n      }, {\n        title: t(\"Action\"),\n        field: \"custom\",\n        align: \"left\",\n        width: \"250\",\n        formatter: reactFormatter( /*#__PURE__*/React.createElement(SimpleButton, {\n          onSelect: function onSelect(item, method) {\n            if (method === 0) {\n              _this2.setState({\n                selectedItem: item,\n                shouldOpenEditorDialog: true\n              });\n            } else {\n              _this2.handleDeleteAdministrativeUnit(item.id);\n            }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 11\n          }\n        }))\n      }];\n      var options = {\n        height: \"90%\",\n        movableRows: false\n      };\n      var _this$state = this.state,\n          rowsPerPage = _this$state.rowsPerPage,\n          page = _this$state.page,\n          administrativeList = _this$state.administrativeList,\n          shouldOpenConfirmationDialog = _this$state.shouldOpenConfirmationDialog,\n          shouldOpenEditorDialog = _this$state.shouldOpenEditorDialog;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"mb-16\",\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick() {\n          return _this2.setState({\n            shouldOpenEditorDialog: true,\n            item: {}\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 9\n        }\n      }, t('AdministrativeUnitTable.AddNew')), shouldOpenEditorDialog && /*#__PURE__*/React.createElement(AdministrativeUnitEditorDialog, {\n        handleClose: this.handleDialogClose,\n        open: this.state.shouldOpenEditorDialog,\n        item: this.state.item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }\n      }), shouldOpenConfirmationDialog && /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        open: shouldOpenConfirmationDialog,\n        onConfirmDialogClose: this.handleDialogClose,\n        onYesClick: this.handleConfirmationResponse,\n        text: \"Are you sure to delete?\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(React15Tabulator, {\n        ref: function ref(_ref2) {\n          return _this2.ref = _ref2;\n        },\n        columns: columns,\n        data: administrativeList,\n        rowClick: this.rowClick,\n        options: options,\n        \"data-custom-attr\": \"test-custom-attribute\",\n        className: \"custom-css-class\",\n        resizableColumns: \"false\",\n        movableColumns: \"false\",\n        scrollToColumnIfVisible: \"true\",\n        selectableRollingSelection: \"false\" //min-width=\"750px\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(TablePagination, {\n        align: \"left\",\n        className: \"px-16\",\n        rowsPerPageOptions: [1, 2, 3, 5, 10, 25],\n        component: \"div\",\n        count: this.state.totalElements,\n        rowsPerPage: this.state.rowsPerPage,\n        page: this.state.page,\n        backIconButtonProps: {\n          \"aria-label\": \"Previous Page\"\n        },\n        nextIconButtonProps: {\n          \"aria-label\": \"Next Page\"\n        },\n        onChangePage: this.handleChangePage,\n        onChangeRowsPerPage: this.setRowsPerPage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }\n      }));\n    }\n  }]);\n\n  return React15TabulatorSample;\n}(React.Component);\n\nexport default React15TabulatorSample;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/AdministrativeUnit/React15TabulatorSample.js"],"names":["React","React15Tabulator","reactFormatter","saveAs","getAllAdministrativeUnits","deleteAdministrativeUnit","getByPage","AdministrativeUnitEditorDialog","Breadcrumb","ConfirmationDialog","ConstantList","useTranslation","withTranslation","Trans","IconButton","Table","TableHead","TableBody","TableRow","TableCell","Icon","TablePagination","TableContainer","Button","Card","columns","title","field","width","align","formatter","SimpleButton","props","t","i18n","cellData","cell","_cell","row","data","onSelect","DeleteData","alert","id","name","age","col","dob","rating","passed","colorOptions","red","green","yellow","editableColumns","editor","headerFilter","editorParams","allowEmpty","showListOnEmpty","values","headerFilterParams","React15TabulatorSample","ref","state","rowsPerPage","page","totalElements","administrativeList","shouldOpenEditorDialog","shouldOpenConfirmationDialog","setPage","setState","setRowsPerPage","event","target","value","updatePageData","handleChangePage","newPage","handleDownload","blob","Blob","type","handleDialogClose","handleDeleteAdministrativeUnit","handleConfirmationResponse","then","handleEditItem","item","pageIndex","pageSize","content","rowClick","e","console","log","table","setData","clearData","GetColumns","getData","selectedName","method","selectedItem","options","height","movableRows","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\n// import \"react-tabulator/lib/styles.css\"; // default theme\r\nimport \"react-tabulator/lib/css/bootstrap/tabulator_bootstrap.min.css\"; // use Theme(s)\r\n\r\n// for React 16.4.x use: import { ReactTabulator }\r\n//import { React15Tabulator } from \"react-tabulator\"; // for React 15.x\r\nimport { React15Tabulator, reactFormatter } from \"react-tabulator\"; // for React 15.x\r\n\r\nimport { saveAs } from 'file-saver';\r\nimport { getAllAdministrativeUnits, deleteAdministrativeUnit, getByPage } from \"./AdministrativeUnitService\";\r\nimport AdministrativeUnitEditorDialog from \"./AdministrativeUnitEditorDialog\";\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport ConstantList from \"../../appConfig\";\r\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\r\nimport {\r\n  IconButton,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Icon,\r\n  TablePagination,\r\n  TableContainer,\r\n  Button,\r\n  Card\r\n} from \"@material-ui/core\";\r\nconst columns = [\r\n  { title: \"Name\", field: \"name\", width: \"20%\"},\r\n  { title: \"Age\", field: \"age\", align: \"left\", formatter: \"progress\" , width: \"20%\" },\r\n  { title: \"Favourite Color\", field: \"col\" , width: \"20%\"  },\r\n  { title: \"Date Of Birth\", field: \"dob\", align: \"center\" , width: 150 },\r\n  { title: \"Rating\", field: \"rating\", align: \"center\", formatter: \"star\" , width: 150 },\r\n  { title: \"Passed?\", field: \"passed\", align: \"center\", formatter: \"tickCross\" , width: 150 }\r\n];\r\n// const columns = [\r\n//   { title: \"Name\", field: \"name\", width: \"30%\"},\r\n//   { title: \"Code\", field: \"code\", align: \"left\", formatter: \"progress\" , width: \"40%\" },\r\n//   { title: \"Level\", field: \"level\" , width: \"30%\"  },\r\n// ];\r\n\r\nfunction SimpleButton(props) {\r\n  const { t, i18n } = useTranslation();\r\n  const cellData = props.cell._cell.row.data;\r\n  return <div> \r\n    <button onClick={() => props.onSelect(cellData,0)}>{t(\"Edit\")}</button> \r\n    <button onClick={() => props.onSelect(cellData,1)}>{t(\"Delete\")}</button> \r\n    </div>;\r\n}\r\n\r\n// function GetColumns(){\r\n//   const { t, i18n } = useTranslation();\r\n//   const columns = [\r\n//     { title: t(\"Name\"), field: \"name\", width: \"150\"},\r\n//     { title: t(\"Code\"), field: \"code\", align: \"left\", width: \"150\"},\r\n//     { title: t(\"Level\"), field: \"level\", width: \"150\"},\r\n//     { title: t(\"IsActive\"), field: \"isActive\", width: \"20%\"},\r\n//     {\r\n//       title: t(\"Action\"),\r\n//       field: \"custom\",\r\n//       align: \"left\",\r\n//       width: \"250\",\r\n//       formatter: reactFormatter(\r\n//         <SimpleButton\r\n//           onSelect={(item, method) => {\r\n//             if(method===0){\r\n//               this.setState({ selectedItem: item, shouldOpenEditorDialog: true});\r\n//             }else {\r\n//               this.handleDeleteAdministrativeUnit(item.id);\r\n//             }\r\n//           }}\r\n//         />\r\n//       )\r\n//     }\r\n//   ];\r\n//   return columns;\r\n// }\r\nfunction DeleteData(cellData){\r\n  alert(cellData.id);\r\n}\r\nconst data = [\r\n  {\r\n    id: 1,\r\n    name: \"Oli Bob\",\r\n    age: \"12\",\r\n    col: \"red\",\r\n    dob: \"\",\r\n    rating: 5,\r\n    passed: true\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Mary May\",\r\n    age: \"1\",\r\n    col: \"green\",\r\n    dob: \"14/05/1989\",\r\n    rating: 4,\r\n    passed: true\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Christine Lobowski\",\r\n    age: \"42\",\r\n    col: \"green\",\r\n    dob: \"22/05/1985\",\r\n    rating: 4,\r\n    passed: false\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Brendon Philips\",\r\n    age: \"125\",\r\n    col: \"red\",\r\n    dob: \"01/08/1980\",\r\n    rating: 4.5,\r\n    passed: true\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Margret Marmajuke\",\r\n    age: \"16\",\r\n    col: \"yellow\",\r\n    dob: \"31/01/1999\",\r\n    rating: 4,\r\n    passed: false\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"Van Ng\",\r\n    age: \"37\",\r\n    col: \"green\",\r\n    dob: \"06/15/1982\",\r\n    rating: 4,\r\n    passed: true\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"Duc Ng\",\r\n    age: \"37\",\r\n    col: \"yellow\",\r\n    dob: \"10/15/1982\",\r\n    rating: 4,\r\n    passed: true\r\n  }\r\n];\r\n\r\n// Editable Example:\r\nconst colorOptions = {\r\n  [\"\"]: \"&nbsp;\",\r\n  red: \"red\",\r\n  green: \"green\",\r\n  yellow: \"yellow\"\r\n};\r\nconst editableColumns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    width: 150,\r\n    editor: \"input\",\r\n    headerFilter: \"input\"\r\n  },\r\n  {\r\n    title: \"Age\",\r\n    field: \"age\",\r\n    align: \"left\",\r\n    formatter: \"progress\",\r\n    editor: \"progress\"\r\n  },\r\n  {\r\n    title: \"Favourite Color\",\r\n    field: \"col\",\r\n    editor: \"autocomplete\",\r\n    editorParams: {\r\n      allowEmpty: true,\r\n      showListOnEmpty: true,\r\n      values: colorOptions\r\n    },\r\n    headerFilter: \"select\",\r\n    headerFilterParams: { values: colorOptions }\r\n  },\r\n  { title: \"Date Of Birth\", field: \"dob\", align: \"center\", editor: \"input\" },\r\n  {\r\n    title: \"Rating\",\r\n    field: \"rating\",\r\n    align: \"center\",\r\n    formatter: \"star\",\r\n    editor: true\r\n  },\r\n  {\r\n    title: \"Passed?\",\r\n    field: \"passed\",\r\n    align: \"center\",\r\n    formatter: \"tickCross\",\r\n    editor: true\r\n  }\r\n];\r\n\r\nclass React15TabulatorSample extends React.Component {\r\n  ref = null;\r\n  state = {\r\n    rowsPerPage: 3,\r\n    page: 0,\r\n    data: [],\r\n    totalElements:0,\r\n    administrativeList: [],\r\n    shouldOpenEditorDialog: false,\r\n    shouldOpenConfirmationDialog: false\r\n  };\r\n  SimpleButton=(props)=>{\r\n    const cellData = props.cell._cell.row.data;\r\n    return <div> \r\n      <button onClick={() => props.onSelect(cellData,0)}>Edit</button> \r\n      <button onClick={() => props.onSelect(cellData,1)}>Delete</button> \r\n      </div>;\r\n  }\r\n  setPage = page => {\r\n    this.setState({ page });\r\n  };\r\n\r\n  setRowsPerPage = event => {\r\n    this.setState({ rowsPerPage: event.target.value, page:0});\r\n    this.updatePageData(0,event.target.value);\r\n  };\r\n\r\n  handleChangePage = (event, newPage) => {\r\n    this.setPage(newPage);\r\n    //alert(newPage+\"/\"+this.state.page);\r\n    this.updatePageData(newPage,this.state.rowsPerPage);\r\n  };\r\n  handleDownload = () => {\r\n    var blob = new Blob([\"Hello, world!\"], {type: \"text/plain;charset=utf-8\"});\r\n    saveAs(blob, \"hello world.txt\");    \r\n  }\r\n  handleDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenEditorDialog: false,\r\n      shouldOpenConfirmationDialog: false\r\n    });\r\n    this.setPage(0);\r\n    this.updatePageData(this.state.page,this.state.rowsPerPage);\r\n  };\r\n\r\n  handleDeleteAdministrativeUnit = id => {\r\n    this.setState({\r\n      id,\r\n      shouldOpenConfirmationDialog: true\r\n    });\r\n  };\r\n\r\n  handleConfirmationResponse = () => {\r\n    //alert(this.state.id);\r\n    deleteAdministrativeUnit(this.state.id).then(() => {\r\n      this.handleDialogClose();\r\n    });\r\n  };\r\n  handleEditItem = item => {\r\n    this.setState({\r\n      item:item,\r\n      shouldOpenEditorDialog: true\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    this.updatePageData(this.state.page,this.state.rowsPerPage);\r\n  }\r\n\r\n  updatePageData = (pageIndex, pageSize) => { \r\n    getByPage(pageIndex,pageSize).then(({ data }) => this.setState({\r\n       administrativeList: [...data.content], totalElements:data.totalElements\r\n      }));\r\n  };\r\n\r\n\r\n\r\n  rowClick = (e, row) => {\r\n    console.log(\"ref table: \", this.ref.table); // this is the Tabulator table instance\r\n    console.log(\"rowClick id: ${row.getData().id}\", row, e);\r\n  };\r\n\r\n  setData = () => {\r\n    this.setState({ data:this.state.administrativeList });\r\n  };\r\n\r\n  clearData = () => {\r\n    this.setState({ data: [] });\r\n  };\r\n  GetColumns = (col)=>{\r\n    return col;\r\n  } \r\n  \r\n\r\n  rowClick = (e, row) => {\r\n    //alert(row.getData().name);\r\n    this.setState({item:row.getData()});\r\n    console.log(\"ref table: \", this.ref.table); // this is the Tabulator table instance\r\n    console.log(\"rowClick id: ${row.getData().id}\", row, e);\r\n    this.setState({ selectedName: row.getData().name });\r\n  };\r\n  render() {\r\n    const { t, i18n } = this.props;\r\n    let columns = [\r\n      { title: t(\"Name\"), field: \"name\", width: \"150\"},\r\n      { title: t(\"Code\"), field: \"code\", align: \"left\", width: \"150\"},\r\n      { title: t(\"Level\"), field: \"level\", width: \"150\"},\r\n      { title: t(\"IsActive\"), field: \"isActive\", width: \"20%\"},\r\n      {\r\n        title: t(\"Action\"),\r\n        field: \"custom\",\r\n        align: \"left\",\r\n        width: \"250\",\r\n        formatter: reactFormatter(\r\n          <SimpleButton\r\n            onSelect={(item, method) => {\r\n              if(method===0){\r\n                this.setState({ selectedItem: item, shouldOpenEditorDialog: true});\r\n              }else {\r\n                this.handleDeleteAdministrativeUnit(item.id);\r\n              }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    ];\r\n    const options = {\r\n      height: \"90%\",\r\n      movableRows: false\r\n    };\r\n  let {\r\n      rowsPerPage,\r\n      page,\r\n      administrativeList,\r\n      shouldOpenConfirmationDialog,\r\n      shouldOpenEditorDialog\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        <Button\r\n          className=\"mb-16\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => this.setState({ shouldOpenEditorDialog: true,item:{} })}\r\n        >\r\n          {t('AdministrativeUnitTable.AddNew')}\r\n        </Button>          \r\n          {shouldOpenEditorDialog && (\r\n            <AdministrativeUnitEditorDialog\r\n              handleClose={this.handleDialogClose}\r\n              open={this.state.shouldOpenEditorDialog}\r\n              item={this.state.item}\r\n            />\r\n          )}   \r\n          \r\n          {shouldOpenConfirmationDialog && (\r\n            <ConfirmationDialog\r\n              open={shouldOpenConfirmationDialog}\r\n              onConfirmDialogClose={this.handleDialogClose}\r\n              onYesClick={this.handleConfirmationResponse}\r\n              text=\"Are you sure to delete?\"\r\n            />\r\n          )\r\n          }     \r\n        <React15Tabulator\r\n          ref={ref => (this.ref = ref)}\r\n          columns={columns}\r\n          data={administrativeList}\r\n          rowClick={this.rowClick}\r\n          options={options}\r\n          data-custom-attr=\"test-custom-attribute\"\r\n          className=\"custom-css-class\"\r\n          resizableColumns=\"false\" movableColumns=\"false\" scrollToColumnIfVisible=\"true\" selectableRollingSelection=\"false\"\r\n          //min-width=\"750px\"\r\n        />\r\n        {/* <Pagination/> */}\r\n      \r\n          <TablePagination\r\n            align=\"left\"\r\n            className=\"px-16\"\r\n            rowsPerPageOptions={[1,2,3,5, 10, 25]}\r\n            component=\"div\"\r\n            count={this.state.totalElements}\r\n            rowsPerPage={this.state.rowsPerPage}\r\n            page={this.state.page}\r\n            backIconButtonProps={{\r\n              \"aria-label\": \"Previous Page\"\r\n            }}\r\n            nextIconButtonProps={{\r\n              \"aria-label\": \"Next Page\"\r\n            }}\r\n            onChangePage={this.handleChangePage}\r\n            onChangeRowsPerPage={this.setRowsPerPage}\r\n          />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default React15TabulatorSample;\r\n"]},"metadata":{},"sourceType":"module"}