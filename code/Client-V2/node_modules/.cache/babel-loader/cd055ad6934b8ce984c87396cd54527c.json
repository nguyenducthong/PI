{"ast":null,"code":"import _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\EQAHealthOrg\\\\EQAHealthOrgEditorDialog.jsx\";\nimport React, { Component } from \"react\";\nimport { Dialog, Button, Grid, DialogActions, FormControlLabel, InputAdornment, Checkbox, FormHelperText, Icon, IconButton } from \"@material-ui/core\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport { ValidatorForm, TextValidator, TextField, SelectValidator } from \"react-material-ui-form-validator\";\nimport { getByPage, deleteItem, saveItem, getItemById, checkCode, checkEmail } from \"./EQAHealthOrgService\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Input from \"@material-ui/core/Input\";\nimport AdministrativeUnitsPopup from './AdministrativeUnitSearchDialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Draggable from 'react-draggable';\nimport Paper from '@material-ui/core/Paper';\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\nimport { MuiPickersUtilsProvider, DateTimePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../../../styles/views/_loadding.scss';\nimport clsx from 'clsx';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport '../../../styles/views/_style.scss';\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n});\n\nfunction PaperComponent(props) {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    handle: \"#draggable-dialog-title\",\n    cancel: '[class*=\"MuiDialogContent-root\"]',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  })));\n}\n\nvar EQAHealthOrgEditorDialog = /*#__PURE__*/function (_Component) {\n  _inherits(EQAHealthOrgEditorDialog, _Component);\n\n  var _super = _createSuper(EQAHealthOrgEditorDialog);\n\n  function EQAHealthOrgEditorDialog() {\n    var _this;\n\n    _classCallCheck(this, EQAHealthOrgEditorDialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      name: \"\",\n      taxCodeOfTheUnit: \"\",\n      code: \"\",\n      specifyLevel: \"\",\n      positiveAffirmativeRight: true,\n      shouldOpenSearchDialog: false,\n      shouldOpenConfirmationDialog: false,\n      unitCodeOfProgramPEQAS: \"\",\n      administrativeUnit: \"\",\n      fax: \"\",\n      isView: false,\n      shouldOpenAdministrativeUnitsPopup: false,\n      sampleReceiptDate: new Date(),\n      sampleRecipient: \"\",\n      specifySampleStatus: \"\",\n      specifyQualification: \"\",\n      isManualSetCode: false,\n      hasErrorLever: false,\n      loading: false\n    };\n\n    _this.handleDateChange = function (date) {\n      _this.setState({\n        sampleReceiptDate: date\n      });\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"positiveAffirmativeRight\") {\n        _this.setState({\n          positiveAffirmativeRight: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"isManualSetCode\") {\n        _this.setState({\n          isManualSetCode: event.target.checked\n        });\n\n        return;\n      }\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.handleChangeAdministrativeUnitPopupClose = function () {\n      _this.setState({\n        shouldOpenAdministrativeUnitsPopup: false\n      }, function () {});\n    };\n\n    _this.handleSelectAdministrativeUnit = function (administrativeUnit) {\n      if (administrativeUnit && administrativeUnit.id) {\n        _this.setState({\n          administrativeUnit\n        });\n\n        _this.handleChangeAdministrativeUnitPopupClose();\n      }\n    };\n\n    _this.handleFormSubmit = function () {\n      var _this$state = _this.state,\n          id = _this$state.id,\n          code = _this$state.code,\n          isManualSetCode = _this$state.isManualSetCode,\n          email = _this$state.email,\n          hasErrorLever = _this$state.hasErrorLever,\n          levelId = _this$state.levelId;\n      var t = _this.props.t;\n\n      _this.setState({\n        loading: true\n      });\n\n      if (email != null) {\n        checkEmail(id, email).then(function (res) {\n          if (res.data) {\n            toast.warning(t(\"sign_up.duplicate_email\"));\n\n            _this.setState({\n              loading: false\n            });\n\n            return;\n          } else {\n            if (isManualSetCode) {\n              checkCode(id, code).then(function (result) {\n                if (result.data) {\n                  toast.warning(t(\"EQAHealthOrg.duplicateCode\"));\n\n                  _this.setState({\n                    loading: false\n                  });\n                } else {\n                  if (id) {\n                    saveItem(_objectSpread({}, _this.state)).then(function () {\n                      toast.success(t('mess_edit'));\n\n                      _this.setState({\n                        loading: false\n                      });\n                    });\n                  } else {\n                    saveItem(_objectSpread({}, _this.state)).then(function (response) {\n                      if (response.data != null && response.status == 200) {\n                        _this.state.id = response.data.id;\n                        toast.success(t('mess_add'));\n\n                        _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n                          loading: false\n                        }));\n                      }\n                    });\n                  }\n                }\n              });\n            } else {\n              if (id) {\n                saveItem(_objectSpread({}, _this.state)).then(function () {\n                  // this.props.handleOKEditClose();\n                  _this.setState({\n                    loading: false\n                  });\n\n                  toast.success(t('mess_edit'));\n                });\n              } else {\n                saveItem(_objectSpread({}, _this.state)).then(function (response) {\n                  if (response.data != null && response.status == 200) {\n                    _this.state.id = response.data.id;\n                    toast.success(t('mess_add'));\n\n                    _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n                      loading: false\n                    }));\n                  }\n                });\n              }\n            }\n          }\n        });\n      } else {\n        if (isManualSetCode) {\n          checkCode(id, code).then(function (result) {\n            if (result.data) {\n              toast.warning(t(\"EQAHealthOrg.duplicateCode\"));\n\n              _this.setState({\n                loading: false\n              });\n            } else {\n              if (id) {\n                saveItem(_objectSpread({}, _this.state)).then(function () {\n                  // this.props.handleOKEditClose();\n                  toast.success(t('mess_edit'));\n\n                  _this.setState({\n                    loading: false\n                  });\n                });\n              } else {\n                saveItem(_objectSpread({}, _this.state)).then(function (response) {\n                  if (response.data != null && response.status == 200) {\n                    _this.state.id = response.data.id;\n                    toast.success(t('mess_add'));\n\n                    _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n                      loading: false\n                    }));\n                  }\n                });\n              }\n            }\n          });\n        } else {\n          if (id) {\n            saveItem(_objectSpread({}, _this.state)).then(function () {\n              // this.props.handleOKEditClose();\n              toast.success(t('mess_edit'));\n\n              _this.setState({\n                loading: false\n              });\n            });\n          } else {\n            saveItem(_objectSpread({}, _this.state)).then(function (response) {\n              if (response.data != null && response.status == 200) {\n                _this.state.id = response.data.id;\n                toast.success(t('mess_add'));\n\n                _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n                  loading: false\n                }));\n              }\n            });\n          }\n        }\n      }\n    };\n\n    _this.handleSearchDialogClose = function () {\n      _this.setState({\n        shouldOpenSearchDialog: false\n      });\n    };\n\n    _this.handleSearchOrgTypeDialogClose = function () {\n      _this.setState({\n        shouldOpenSearchOrgTypeDialog: false\n      });\n    };\n\n    _this.handleSelectHealthOrgType = function (item) {\n      _this.setState({\n        healthOrgType: item\n      });\n\n      _this.handleSearchOrgTypeDialogClose();\n    };\n\n    _this.handleSelectAdministrativeUnitType = function (item) {\n      _this.setState({\n        administrativeUnit: item\n      });\n\n      _this.handleSearchDialogClose();\n    };\n\n    return _this;\n  }\n\n  _createClass(EQAHealthOrgEditorDialog, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item,\n          isHealthOrg = _this$props.isHealthOrg;\n      this.setState(_objectSpread(_objectSpread({}, this.props.item), {}, {\n        isHealthOrg: isHealthOrg\n      }), function () {});\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ValidatorForm.addValidationRule(\"isLengthNumber\", function (value) {\n        if (value.length > 10) {\n          return false;\n        }\n\n        return true;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          id = _this$state2.id,\n          name = _this$state2.name,\n          code = _this$state2.code,\n          isManualSetCode = _this$state2.isManualSetCode,\n          address = _this$state2.address,\n          isView = _this$state2.isView,\n          contactName = _this$state2.contactName,\n          shouldOpenAdministrativeUnitsPopup = _this$state2.shouldOpenAdministrativeUnitsPopup,\n          contactPhone = _this$state2.contactPhone,\n          administrativeUnit = _this$state2.administrativeUnit,\n          email = _this$state2.email,\n          officerPosion = _this$state2.officerPosion,\n          unitCodeOfProgramPEQAS = _this$state2.unitCodeOfProgramPEQAS,\n          fax = _this$state2.fax,\n          sampleRecipient = _this$state2.sampleRecipient,\n          specifySampleStatus = _this$state2.specifySampleStatus,\n          specifyLevel = _this$state2.specifyLevel,\n          taxCodeOfTheUnit = _this$state2.taxCodeOfTheUnit,\n          loading = _this$state2.loading,\n          positiveAffirmativeRight = _this$state2.positiveAffirmativeRight,\n          specifyQualification = _this$state2.specifyQualification;\n      var searchObject = {\n        pageIndex: 0,\n        pageSize: 1000000\n      };\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          handleClose = _this$props2.handleClose,\n          handleOKEditClose = _this$props2.handleOKEditClose,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n,\n          isHealthOrg = _this$props2.isHealthOrg;\n      return /*#__PURE__*/React.createElement(Dialog, {\n        open: open,\n        PaperComponent: PaperComponent,\n        maxWidth: \"lg\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: clsx(\"wrapperButton\", !loading && 'hidden'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(CircularProgress, {\n        className: \"buttonProgress\",\n        size: 24,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(DialogTitle, {\n        style: {\n          cursor: 'move'\n        },\n        id: \"draggable-dialog-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"mb-20 styleColor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }\n      }, \" \", (id ? t(\"update\") : t(\"Add\")) + \" \" + t(\"EQAHealthOrg.title\"), \" \"), /*#__PURE__*/React.createElement(IconButton, {\n        style: {\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\"\n        },\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        color: \"error\",\n        title: t(\"close\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 114\n        }\n      }, \"close\"))), /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        style: {\n          overflowY: \"auto\",\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DialogContent, {\n        dividers: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        className: \"\",\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.taxCodeOfTheUnit\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"taxCodeOfTheUnit\",\n        value: taxCodeOfTheUnit,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.unitCodeOfProgramPEQAS\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"unitCodeOfProgramPEQAS\",\n        value: unitCodeOfProgramPEQAS,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EQAHealthOrg.Name\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"name\",\n        value: name,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 17\n        }\n      })), !isHealthOrg && /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormControlLabel, {\n        variant: \"outlined\",\n        size: \"small\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 26\n          }\n        }, t('EQAHealthOrg.isManualSetCode')),\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          checked: isManualSetCode,\n          onChange: function onChange(isManualSetCode) {\n            return _this2.handleChange(isManualSetCode, \"isManualSetCode\");\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 28\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.Code\")),\n        onChange: this.handleChange,\n        disabled: !isManualSetCode,\n        type: \"text\",\n        name: \"code\",\n        value: code,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EQAHealthOrg.AdministrativeUnit\")),\n        name: \"administrativeUnit\",\n        value: administrativeUnit ? administrativeUnit.name : \"\",\n        InputProps: {\n          endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n            position: \"end\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            size: 'small',\n            disabled: isView,\n            className: \"align-bottom\",\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: function onClick() {\n              return _this2.setState({\n                shouldOpenAdministrativeUnitsPopup: true\n              });\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 25\n            }\n          }, t('Select')))\n        },\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 17\n        }\n      }), shouldOpenAdministrativeUnitsPopup && /*#__PURE__*/React.createElement(AdministrativeUnitsPopup, {\n        open: shouldOpenAdministrativeUnitsPopup,\n        handleSelect: this.handleSelectAdministrativeUnit,\n        item: administrativeUnit,\n        handleClose: this.handleChangeAdministrativeUnitPopupClose,\n        t: t,\n        i18n: i18n,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EQAHealthOrg.Address\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"address\",\n        value: address,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.fax\")),\n        onChange: this.handleChange,\n        type: \"fax\",\n        name: \"fax\",\n        value: fax,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.ContactName\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"contactName\",\n        value: contactName,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.officerPosion\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"officerPosion\",\n        value: officerPosion,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.contactPhone\")),\n        onChange: this.handleChange,\n        type: \"number\",\n        name: \"contactPhone\",\n        value: contactPhone,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EQAHealthOrg.email\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"email\",\n        value: email,\n        validators: [\"required\", \"isEmail\"],\n        errorMessages: [t(\"general.errorMessages_required\"), t(\"general.errorMessages_email_valid\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.specifyQualification\") + \"(\" + t(\"if\") + \")\"),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"specifyQualification\",\n        value: specifyQualification,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 26\n          }\n        }, t(\"EQAHealthOrg.specifyLevel\")),\n        name: \"specifyLevel\",\n        onChange: this.handleChange,\n        value: specifyLevel,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 17\n        }\n      })))), /*#__PURE__*/React.createElement(DialogActions, {\n        spacing: 4,\n        className: \"flex flex-end flex-middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 13\n        }\n      }, t('Cancel')), !isView && /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 26\n        }\n      }, t('Save')))));\n    }\n  }]);\n\n  return EQAHealthOrgEditorDialog;\n}(Component);\n\nexport default EQAHealthOrgEditorDialog;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/EQAHealthOrg/EQAHealthOrgEditorDialog.jsx"],"names":["React","Component","Dialog","Button","Grid","DialogActions","FormControlLabel","InputAdornment","Checkbox","FormHelperText","Icon","IconButton","KeyboardDatePicker","ValidatorForm","TextValidator","TextField","SelectValidator","getByPage","deleteItem","saveItem","getItemById","checkCode","checkEmail","FormControl","Select","MenuItem","InputLabel","Input","AdministrativeUnitsPopup","DialogContent","DialogTitle","Draggable","Paper","AsynchronousAutocomplete","MuiPickersUtilsProvider","DateTimePicker","DateFnsUtils","toast","clsx","CircularProgress","configure","autoClose","draggable","limit","PaperComponent","props","EQAHealthOrgEditorDialog","state","name","taxCodeOfTheUnit","code","specifyLevel","positiveAffirmativeRight","shouldOpenSearchDialog","shouldOpenConfirmationDialog","unitCodeOfProgramPEQAS","administrativeUnit","fax","isView","shouldOpenAdministrativeUnitsPopup","sampleReceiptDate","Date","sampleRecipient","specifySampleStatus","specifyQualification","isManualSetCode","hasErrorLever","loading","handleDateChange","date","setState","handleChange","event","source","persist","isActive","target","checked","value","handleChangeAdministrativeUnitPopupClose","handleSelectAdministrativeUnit","id","handleFormSubmit","email","levelId","t","then","res","data","warning","result","success","response","status","handleSearchDialogClose","handleSearchOrgTypeDialogClose","shouldOpenSearchOrgTypeDialog","handleSelectHealthOrgType","item","healthOrgType","handleSelectAdministrativeUnitType","open","handleClose","isHealthOrg","addValidationRule","length","address","contactName","contactPhone","officerPosion","searchObject","pageIndex","pageSize","handleOKEditClose","i18n","cursor","position","right","top","overflowY","display","flexDirection","color","endAdornment"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  DialogActions,\r\n  FormControlLabel,\r\n  InputAdornment, Checkbox, FormHelperText, Icon, IconButton\r\n} from \"@material-ui/core\";\r\nimport {\r\n  KeyboardDatePicker\r\n} from \"@material-ui/pickers\";\r\nimport { ValidatorForm, TextValidator, TextField, SelectValidator } from \"react-material-ui-form-validator\";\r\nimport { getByPage, deleteItem, saveItem, getItemById, checkCode, checkEmail } from \"./EQAHealthOrgService\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport AdministrativeUnitsPopup from './AdministrativeUnitSearchDialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Draggable from 'react-draggable';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\r\nimport { MuiPickersUtilsProvider, DateTimePicker } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../../styles/views/_loadding.scss';\r\nimport clsx from 'clsx';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport '../../../styles/views/_style.scss';\r\n\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit: 3\r\n});\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\nclass EQAHealthOrgEditorDialog extends Component {\r\n  state = {\r\n    name: \"\",\r\n    taxCodeOfTheUnit: \"\",\r\n    code: \"\",\r\n    specifyLevel: \"\",\r\n    positiveAffirmativeRight: true,\r\n    shouldOpenSearchDialog: false,\r\n    shouldOpenConfirmationDialog: false,\r\n    unitCodeOfProgramPEQAS: \"\",\r\n    administrativeUnit: \"\",\r\n    fax: \"\",\r\n    isView: false,\r\n    shouldOpenAdministrativeUnitsPopup: false,\r\n    sampleReceiptDate: new Date(),\r\n    sampleRecipient: \"\", specifySampleStatus: \"\", specifyQualification: \"\",\r\n    isManualSetCode: false,\r\n    hasErrorLever: false,\r\n    loading: false\r\n  };\r\n  handleDateChange = date => {\r\n    this.setState({ sampleReceiptDate: date });\r\n  };\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n\r\n    if (source === \"positiveAffirmativeRight\") {\r\n      this.setState({ positiveAffirmativeRight: event.target.checked });\r\n      return;\r\n    }\r\n\r\n    if (source === \"isManualSetCode\") {\r\n      this.setState({ isManualSetCode: event.target.checked });\r\n      return;\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleChangeAdministrativeUnitPopupClose = () => {\r\n    this.setState({ shouldOpenAdministrativeUnitsPopup: false }, function () {\r\n    });\r\n  }\r\n\r\n  handleSelectAdministrativeUnit = (administrativeUnit) => {\r\n    if (administrativeUnit && administrativeUnit.id) {\r\n      this.setState({ administrativeUnit });\r\n      this.handleChangeAdministrativeUnitPopupClose();\r\n    }\r\n  }\r\n\r\n  handleFormSubmit = () => {\r\n    let { id, code, isManualSetCode, email, hasErrorLever, levelId } = this.state;\r\n    let { t } = this.props;\r\n    this.setState({ loading: true });\r\n\r\n    if (email != null) {\r\n      checkEmail(id, email).then(res => {\r\n        if (res.data) {\r\n          toast.warning(t(\"sign_up.duplicate_email\"));\r\n          this.setState({ loading: false });\r\n          return\r\n        } else {\r\n          if (isManualSetCode) {\r\n            checkCode(id, code).then(result => {\r\n              if (result.data) {\r\n                toast.warning(t(\"EQAHealthOrg.duplicateCode\"));\r\n                this.setState({ loading: false });\r\n              } else {\r\n                if (id) {\r\n                  saveItem({\r\n                    ...this.state\r\n                  }).then(() => {\r\n                    toast.success(t('mess_edit'));\r\n                    this.setState({ loading: false });\r\n                  });\r\n                } else {\r\n                  saveItem({\r\n                    ...this.state\r\n                  }).then((response) => {\r\n                    if (response.data != null && response.status == 200) {\r\n                      this.state.id = response.data.id;\r\n                      toast.success(t('mess_add'));\r\n                      this.setState({ ...this.state, loading: false });\r\n                    }\r\n                  });\r\n                }\r\n              }\r\n            })\r\n          } else {\r\n            if (id) {\r\n              saveItem({\r\n                ...this.state\r\n              }).then(() => {\r\n                // this.props.handleOKEditClose();\r\n                this.setState({ loading: false });\r\n                toast.success(t('mess_edit'));\r\n              });\r\n\r\n            } else {\r\n              saveItem({\r\n                ...this.state\r\n              }).then((response) => {\r\n                if (response.data != null && response.status == 200) {\r\n                  this.state.id = response.data.id;\r\n                  toast.success(t('mess_add'));\r\n                  this.setState({ ...this.state, loading: false });\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      })\r\n    } else {\r\n      if (isManualSetCode) {\r\n        checkCode(id, code).then(result => {\r\n          if (result.data) {\r\n            toast.warning(t(\"EQAHealthOrg.duplicateCode\"));\r\n            this.setState({ loading: false });\r\n          } else {\r\n            if (id) {\r\n              saveItem({\r\n                ...this.state\r\n              }).then(() => {\r\n                // this.props.handleOKEditClose();\r\n                toast.success(t('mess_edit'));\r\n                this.setState({ loading: false });\r\n              });\r\n            } else {\r\n              saveItem({\r\n                ...this.state\r\n              }).then((response) => {\r\n                if (response.data != null && response.status == 200) {\r\n                  this.state.id = response.data.id;\r\n                  toast.success(t('mess_add'));\r\n                  this.setState({ ...this.state, loading: false });\r\n                }\r\n              });\r\n            }\r\n          }\r\n        })\r\n      } else {\r\n        if (id) {\r\n          saveItem({\r\n            ...this.state\r\n          }).then(() => {\r\n            // this.props.handleOKEditClose();\r\n            toast.success(t('mess_edit'));\r\n            this.setState({ loading: false });\r\n          });\r\n\r\n        } else {\r\n          saveItem({\r\n            ...this.state\r\n          }).then((response) => {\r\n            if (response.data != null && response.status == 200) {\r\n              this.state.id = response.data.id;\r\n              toast.success(t('mess_add'));\r\n              this.setState({ ...this.state, loading: false });\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    let { open, handleClose, item, isHealthOrg } = this.props;\r\n    this.setState({\r\n      ...this.props.item, isHealthOrg: isHealthOrg\r\n    }, function () {\r\n  \r\n    }\r\n    );\r\n  }\r\n  componentDidMount() {\r\n    ValidatorForm.addValidationRule(\"isLengthNumber\", value => {\r\n      if (value.length > 10) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n  }\r\n\r\n  handleSearchDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenSearchDialog: false\r\n    });\r\n  };\r\n  handleSearchOrgTypeDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenSearchOrgTypeDialog: false\r\n    });\r\n  };\r\n  handleSelectHealthOrgType = (item) => {\r\n    this.setState({ healthOrgType: item });\r\n    this.handleSearchOrgTypeDialogClose();\r\n  }\r\n  handleSelectAdministrativeUnitType = (item) => {\r\n    this.setState({ administrativeUnit: item });\r\n    this.handleSearchDialogClose();\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      id,\r\n      name,\r\n      code,\r\n      isManualSetCode,\r\n      address,\r\n      isView,\r\n      contactName, shouldOpenAdministrativeUnitsPopup,\r\n      contactPhone, \r\n      administrativeUnit,\r\n      email, officerPosion, unitCodeOfProgramPEQAS, fax,\r\n     sampleRecipient, specifySampleStatus, specifyLevel, taxCodeOfTheUnit,\r\n      loading, positiveAffirmativeRight, specifyQualification\r\n    } = this.state;\r\n    let searchObject = { pageIndex: 0, pageSize: 1000000 };\r\n    let { open, handleClose, handleOKEditClose, t, i18n, isHealthOrg } = this.props;\r\n\r\n    return (\r\n      <Dialog open={open} PaperComponent={PaperComponent} maxWidth=\"lg\" fullWidth={true}>\r\n        <div className={clsx(\"wrapperButton\", !loading && 'hidden')} >\r\n          <CircularProgress className=\"buttonProgress\" size={24} />\r\n        </div>\r\n        <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\r\n          <span className=\"mb-20 styleColor\"> {(id ? t(\"update\") : t(\"Add\")) + \" \" + t(\"EQAHealthOrg.title\")} </span>\r\n          <IconButton style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }} onClick={() => handleClose()}><Icon color=\"error\"\r\n            title={t(\"close\")}>\r\n            close\r\n            </Icon>\r\n          </IconButton>\r\n        </DialogTitle>\r\n        <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit} style={{\r\n          overflowY: \"auto\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\"\r\n        }}>\r\n          <DialogContent dividers>\r\n            <Grid className=\"\" container spacing={2}>\r\n            \r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.taxCodeOfTheUnit\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"taxCodeOfTheUnit\"\r\n                  value={taxCodeOfTheUnit}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.unitCodeOfProgramPEQAS\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"unitCodeOfProgramPEQAS\"\r\n                  value={unitCodeOfProgramPEQAS}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EQAHealthOrg.Name\")}\r\n                    </span>\r\n                  }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              {!isHealthOrg && (<Grid item lg={4} md={4} sm={6} xs={12}>\r\n                <FormControlLabel\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  label={<span className=\"font\">{t('EQAHealthOrg.isManualSetCode')}</span>}\r\n                  control={<Checkbox checked={isManualSetCode}\r\n                    onChange={(isManualSetCode) =>\r\n                      this.handleChange(isManualSetCode, \"isManualSetCode\")\r\n                    }\r\n                  />}\r\n                />\r\n              </Grid>)}\r\n              <Grid item lg={4} md={4} sm={6} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.Code\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  disabled={!isManualSetCode}\r\n                  type=\"text\"\r\n                  name=\"code\"\r\n                  value={code}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n{/* \r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <FormControlLabel\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  disabled={isHealthOrg}\r\n                  label={<span style={{ fontSize: \"115%\" }} className=\"font\">{t('EQAHealthOrg.positiveAffirmativeRight')}</span>}\r\n                  control={<Checkbox checked={positiveAffirmativeRight}\r\n                    onChange={(positiveAffirmativeRight) =>\r\n                      this.handleChange(positiveAffirmativeRight, \"positiveAffirmativeRight\")\r\n                    }\r\n                  />}\r\n                />\r\n       \r\n              </Grid> */}\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  size=\"small\"\r\n                  className=\"w-100 \"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EQAHealthOrg.AdministrativeUnit\")}\r\n                    </span>\r\n                  }\r\n                  name=\"administrativeUnit\"\r\n                  value={administrativeUnit ? administrativeUnit.name : \"\"}\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <Button\r\n                          size={'small'}\r\n                          disabled={isView}\r\n                          className=\"align-bottom\"\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={() => this.setState({ shouldOpenAdministrativeUnitsPopup: true })}\r\n                        >\r\n                          {t('Select')}\r\n                        </Button>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n                {shouldOpenAdministrativeUnitsPopup && (\r\n                  <AdministrativeUnitsPopup\r\n                    open={shouldOpenAdministrativeUnitsPopup}\r\n                    handleSelect={this.handleSelectAdministrativeUnit}\r\n                    item={administrativeUnit}\r\n                    handleClose={this.handleChangeAdministrativeUnitPopupClose}\r\n                    t={t} i18n={i18n}\r\n                  ></AdministrativeUnitsPopup>\r\n                )\r\n                }\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EQAHealthOrg.Address\")}\r\n                    </span>\r\n                  }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"address\"\r\n                  value={address}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.fax\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"fax\"\r\n                  name=\"fax\"\r\n                  value={fax}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.ContactName\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"contactName\"\r\n                  value={contactName}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.officerPosion\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"officerPosion\"\r\n                  value={officerPosion}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.contactPhone\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"number\"\r\n                  name=\"contactPhone\"\r\n                  value={contactPhone}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EQAHealthOrg.email\")}\r\n                    </span>\r\n                  }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  validators={[\"required\", \"isEmail\"]}\r\n                  errorMessages={[\r\n                    t(\"general.errorMessages_required\"),\r\n                    t(\"general.errorMessages_email_valid\")\r\n                  ]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              {/* <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <FormControl className=\"w-100\" variant=\"outlined\" size=\"small\">\r\n                  <InputLabel htmlFor=\"qualification\">{<span className=\"font\">{t(\"EQAHealthOrg.qualification\")}</span>}</InputLabel>\r\n                  <Select\r\n                    value={qualificationId}\r\n                    onChange={event => this.handleChangeQualification(event)}\r\n                    inputProps={{\r\n                      name: \"qualification\",\r\n                      id: \"qualification\"\r\n                    }}\r\n\r\n                  >\r\n                    {qualificationSelect.map(type => (\r\n                      <MenuItem key={type.id} value={type.id}>\r\n                        {type.name}\r\n                      </MenuItem>\r\n\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid> */}\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.specifyQualification\") + \"(\" + t(\"if\") + \")\"}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"specifyQualification\"\r\n                  value={specifyQualification}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              {/* <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <FormControl className=\"w-100\" error={hasErrorLever} variant=\"outlined\" size=\"small\">\r\n                  <InputLabel htmlFor=\"levelHealOrg\"><span className=\"font\">\r\n                    <span style={{ color: \"red\" }}> * </span>\r\n                    {t(\"EQAHealthOrg.levelHealOrg\")}\r\n                  </span></InputLabel>\r\n                  <Select\r\n                    value={levelId}\r\n                    onChange={event => this.handleChangelevel(event)}\r\n                    inputProps={{\r\n                      name: \"level\",\r\n                      id: \"level\"\r\n                    }}\r\n                  >{levelHealOrg.map(type => (\r\n                    <MenuItem key={type.id} value={type.id}>\r\n                      {type.name}\r\n                    </MenuItem>\r\n                  ))}\r\n\r\n                  </Select>\r\n                  {hasErrorLever && <FormHelperText>{t(\"general.errorMessages_required\")}</FormHelperText>}\r\n                </FormControl>\r\n              </Grid> */}\r\n\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAHealthOrg.specifyLevel\")}</span>}\r\n                  name=\"specifyLevel\"\r\n                  onChange={this.handleChange}\r\n                  value={specifyLevel}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n\r\n          </DialogContent>\r\n          <DialogActions spacing={4} className=\"flex flex-end flex-middle\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={() => handleClose()}>\r\n              {t('Cancel')}\r\n            </Button>\r\n            {(!isView && <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\">\r\n              {t('Save')}\r\n            </Button>)}\r\n          </DialogActions>\r\n        </ValidatorForm>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EQAHealthOrgEditorDialog;\r\n"]},"metadata":{},"sourceType":"module"}