{"ast":null,"code":"import _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\utilities\\\\AsynchronousAutocomplete.jsx\";\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\n\nfunction sleep() {\n  var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return new Promise(function (resolve) {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport default function Asynchronous(props) {\n  var _this = this;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      options = _React$useState4[0],\n      setOptions = _React$useState4[1]; //kiểu return trả về của hàm search. Mặc định là return kiểu page. ('list' - trả về 1 list)\n\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      size = _React$useState6[0],\n      setSize = _React$useState6[1]; // tên trường nhận kích thước của thẻ\n\n\n  var _React$useState7 = React.useState(''),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      typeReturnFunction = _React$useState8[0],\n      setTypeReturnFunction = _React$useState8[1];\n\n  var _React$useState9 = React.useState(''),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      displayLable = _React$useState10[0],\n      setDisplayLable = _React$useState10[1]; // tên trường để hiển thị ra cho người dùng chọn (mặc định sẽ là code)\n\n\n  var _React$useState11 = React.useState([]),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      defaultValue = _React$useState12[0],\n      setDefaultValue = _React$useState12[1]; //giá trị mặc định ban đầu\n\n\n  var _React$useState13 = React.useState([]),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      className = _React$useState14[0],\n      setClassName = _React$useState14[1]; //class của thẻ Autocomplete\n\n\n  var _React$useState15 = React.useState([]),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      variant = _React$useState16[0],\n      setVariant = _React$useState16[1]; //kiểu hiển thị của thẻ TextValidator\n\n\n  var _React$useState17 = React.useState(false),\n      _React$useState18 = _slicedToArray(_React$useState17, 2),\n      multiple = _React$useState18[0],\n      setMultiple = _React$useState18[1]; //chọn nhiều hay chọn 1\n\n\n  var _React$useState19 = React.useState([]),\n      _React$useState20 = _slicedToArray(_React$useState19, 2),\n      validators = _React$useState20[0],\n      setValidators = _React$useState20[1]; // Truyền vào kiểu validators muốn check\n\n\n  var _React$useState21 = React.useState([]),\n      _React$useState22 = _slicedToArray(_React$useState21, 2),\n      errorMessages = _React$useState22[0],\n      setErrorMessages = _React$useState22[1]; //Text hiển thị khi check validators (theo thứ tự các validators truyền vào)\n\n\n  var loading = open && options.length === 0; //tạm thời không sử dụng selectChildName.\n\n  var _React$useState23 = React.useState(''),\n      _React$useState24 = _slicedToArray(_React$useState23, 2),\n      selectChildName = _React$useState24[0],\n      setSelectChildName = _React$useState24[1]; //Nếu muốn so sánh id object bên trong của value thì truyền tên object bên trong Ex: selectChildName = {'objectName'}\n\n\n  React.useEffect(function () {\n    var active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return props.searchFunction(props.searchObject);\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return props.typeReturnFunction && props.typeReturnFunction == 'list' ? response.data : response.data.content;\n\n            case 5:\n              data = _context.sent;\n\n              if (active) {\n                setOptions(data);\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n\n    return function () {\n      active = false;\n    };\n  }, [loading]);\n  React.useEffect(function () {\n    if (!open) {\n      setOptions([]);\n      setTypeReturnFunction([]);\n      setDisplayLable([]);\n      setDefaultValue([]);\n      setMultiple([]);\n      setVariant([]);\n      setSelectChildName([]);\n      setClassName([]);\n      setValidators([]);\n      setErrorMessages([]);\n      setSize([]);\n    }\n  }, [open]);\n  return /*#__PURE__*/React.createElement(Autocomplete, {\n    id: \"asynchronous-demo\",\n    className: props.className ? props.className : \"w-100\",\n    open: open,\n    autoComplete: true,\n    autoHighlight: true,\n    multiple: props.multiple,\n    onChange: function onChange(event, value, reason, details) {\n      var list = [];\n\n      if (props.selectChildName) {\n        value.forEach(function (item) {\n          if (item.id == details.option.id) {\n            list.push({\n              [props.selectChildName]: item\n            });\n          } else {\n            list.push(item);\n          }\n        });\n      } else {\n        list = value;\n      }\n\n      props.onSelect(list, props.onSelectOptions);\n    },\n    onOpen: function onOpen() {\n      setOpen(true);\n    },\n    onClose: function onClose() {\n      setOpen(false);\n    },\n    getOptionSelected: function getOptionSelected(option, value) {\n      return props.selectChildName && option[props.selectChildName] ? option[props.selectChildName].id === value[props.selectChildName].id : option.id === value.id;\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return option ? props.selectChildName && option[props.selectChildName] ? props.displayLable ? option[props.selectChildName][props.displayLable] : option[props.selectChildName].code : props.displayLable ? option[props.displayLable] : option.code : '';\n    },\n    options: options,\n    defaultValue: props.defaultValue ? props.defaultValue : null,\n    loading: loading,\n    disabled: props.disabled,\n    renderInput: function renderInput(params) {\n      return /*#__PURE__*/React.createElement(TextValidator, Object.assign({}, params, {\n        label: props.label,\n        value: props.value ? props.value : null,\n        validators: props.validators ? props.validators : [],\n        errorMessages: props.errorMessages ? props.errorMessages : \"\",\n        variant: props.variant ? props.variant : \"standard\",\n        size: props.size ? props.size : \"medium\",\n        InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n          endAdornment: /*#__PURE__*/React.createElement(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }\n          }, loading ? /*#__PURE__*/React.createElement(CircularProgress, {\n            color: \"inherit\",\n            size: 10,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 28\n            }\n          }) : null, params.InputProps.endAdornment)\n        }),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }\n      }));\n    } // renderOption={(option, { inputValue }) => {\n    //   const matches = match((option) => (props.selectChildName && option[props.selectChildName]) ? ((props.displayLable) ? option[props.selectChildName][props.displayLable] : option[props.selectChildName].code) : ((props.displayLable) ? option[props.displayLable] : option.code), inputValue);\n    //   const parts = parse((option) => (props.selectChildName && option[props.selectChildName]) ? ((props.displayLable) ? option[props.selectChildName][props.displayLable] : option[props.selectChildName].code) : ((props.displayLable) ? option[props.displayLable] : option.code), matches);\n    //   return (\n    //     <div>\n    //       {parts.map((part, index) => (\n    //         <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\n    //           {part.text}\n    //         </span>\n    //       ))}\n    //     </div>\n    //   );\n    // }}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/utilities/AsynchronousAutocomplete.jsx"],"names":["React","TextField","Autocomplete","CircularProgress","ValidatorForm","TextValidator","sleep","delay","Promise","resolve","setTimeout","Asynchronous","props","useState","open","setOpen","options","setOptions","size","setSize","typeReturnFunction","setTypeReturnFunction","displayLable","setDisplayLable","defaultValue","setDefaultValue","className","setClassName","variant","setVariant","multiple","setMultiple","validators","setValidators","errorMessages","setErrorMessages","loading","length","selectChildName","setSelectChildName","useEffect","active","undefined","searchFunction","searchObject","response","data","content","event","value","reason","details","list","forEach","item","id","option","push","onSelect","onSelectOptions","code","disabled","params","label","InputProps","endAdornment"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\n\r\nfunction sleep(delay = 0) {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n}\r\n\r\nexport default function Asynchronous(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [options, setOptions] = React.useState([]);\r\n\r\n  //kiểu return trả về của hàm search. Mặc định là return kiểu page. ('list' - trả về 1 list)\r\n  const [size, setSize] = React.useState(''); // tên trường nhận kích thước của thẻ\r\n  const [typeReturnFunction, setTypeReturnFunction] = React.useState('');\r\n  const [displayLable, setDisplayLable] = React.useState('');   // tên trường để hiển thị ra cho người dùng chọn (mặc định sẽ là code)\r\n  const [defaultValue, setDefaultValue] = React.useState([]); //giá trị mặc định ban đầu\r\n  const [className, setClassName] = React.useState([]); //class của thẻ Autocomplete\r\n  const [variant, setVariant] = React.useState([]);     //kiểu hiển thị của thẻ TextValidator\r\n  const [multiple, setMultiple] = React.useState(false);  //chọn nhiều hay chọn 1\r\n  const [validators, setValidators] = React.useState([]);   // Truyền vào kiểu validators muốn check\r\n  const [errorMessages, setErrorMessages] = React.useState([]); //Text hiển thị khi check validators (theo thứ tự các validators truyền vào)\r\n  const loading = open && options.length === 0;\r\n  //tạm thời không sử dụng selectChildName.\r\n  const [selectChildName, setSelectChildName] = React.useState(''); //Nếu muốn so sánh id object bên trong của value thì truyền tên object bên trong Ex: selectChildName = {'objectName'}\r\n  React.useEffect(() => {\r\n    let active = true;\r\n\r\n    if (!loading) {\r\n      return undefined;\r\n    }\r\n    (async () => {\r\n      //searchFunction: hàm search data\r\n      //searchObject: object chứa các thuộc tính search bên trong\r\n      const response = await props.searchFunction(props.searchObject)\r\n      const data = await ((props.typeReturnFunction && props.typeReturnFunction == 'list') ? response.data : response.data.content);\r\n      if (active) {\r\n        setOptions(data);\r\n      }\r\n    })();\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [loading]);\r\n\r\n  React.useEffect(() => {\r\n    if (!open) {\r\n      setOptions([]);\r\n      setTypeReturnFunction([]);\r\n      setDisplayLable([]);\r\n      setDefaultValue([]);\r\n      setMultiple([]);\r\n      setVariant([]);\r\n      setSelectChildName([]);\r\n      setClassName([]);\r\n      setValidators([]);\r\n      setErrorMessages([]);\r\n      setSize([]);\r\n    }\r\n  }, [open]);\r\n  return (\r\n    <Autocomplete\r\n      id=\"asynchronous-demo\"\r\n      className={props.className ? props.className : \"w-100\"}\r\n      open={open}\r\n      autoComplete\r\n      autoHighlight={true}\r\n      multiple={props.multiple}\r\n      onChange={(event, value, reason, details) => {\r\n        let list = [];\r\n        if (props.selectChildName) {\r\n          value.forEach(item => {\r\n            if (item.id == details.option.id) {\r\n              list.push({ [props.selectChildName]: item });\r\n            } else {\r\n              list.push(item);\r\n            }\r\n          });\r\n        }\r\n        else {\r\n          list = value;\r\n        }\r\n        props.onSelect(list, props.onSelectOptions);\r\n      }}\r\n      onOpen={() => {\r\n        setOpen(true);\r\n      }}\r\n      onClose={() => {\r\n        setOpen(false);\r\n      }}\r\n      getOptionSelected={(option, value) => (props.selectChildName && option[props.selectChildName]) ? option[props.selectChildName].id === value[props.selectChildName].id : option.id === value.id}\r\n      getOptionLabel={(option) => option ? ((props.selectChildName && option[props.selectChildName]) ? ((props.displayLable) ? option[props.selectChildName][props.displayLable] : option[props.selectChildName].code) : ((props.displayLable) ? option[props.displayLable] : option.code)) : ''}\r\n      options={options}\r\n      defaultValue={props.defaultValue ? props.defaultValue : null}\r\n      loading={loading}\r\n      disabled = {props.disabled}\r\n      renderInput={(params) => (\r\n        <TextValidator\r\n          {...params}\r\n          label={props.label}\r\n          value={props.value ? props.value : null}\r\n          validators={props.validators ? props.validators : []}\r\n          errorMessages={props.errorMessages ? props.errorMessages : \"\"}\r\n          variant={props.variant ? props.variant : \"standard\"}\r\n          size = {props.size ? props.size : \"medium\"}\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <React.Fragment>\r\n                {loading ? <CircularProgress color=\"inherit\" size={10} /> : null}\r\n                {params.InputProps.endAdornment}\r\n              </React.Fragment>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n    // renderOption={(option, { inputValue }) => {\r\n    //   const matches = match((option) => (props.selectChildName && option[props.selectChildName]) ? ((props.displayLable) ? option[props.selectChildName][props.displayLable] : option[props.selectChildName].code) : ((props.displayLable) ? option[props.displayLable] : option.code), inputValue);\r\n    //   const parts = parse((option) => (props.selectChildName && option[props.selectChildName]) ? ((props.displayLable) ? option[props.selectChildName][props.displayLable] : option[props.selectChildName].code) : ((props.displayLable) ? option[props.displayLable] : option.code), matches);\r\n    //   return (\r\n    //     <div>\r\n    //       {parts.map((part, index) => (\r\n    //         <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\r\n    //           {part.text}\r\n    //         </span>\r\n    //       ))}\r\n    //     </div>\r\n    //   );\r\n    // }}\r\n    />\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}