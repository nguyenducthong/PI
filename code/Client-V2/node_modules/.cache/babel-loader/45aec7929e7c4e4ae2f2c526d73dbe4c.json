{"ast":null,"code":"import _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\EQAResultReportConclusionAll\\\\EQAResultReportConclusionDialog.jsx\";\nimport React, { Component } from \"react\";\nimport { Dialog, Button, Grid, TextField, Icon, IconButton, FormControl, DialogTitle, DialogContent, DialogActions, Paper, Checkbox, MenuItem, Select, FormControlLabel } from \"@material-ui/core\";\nimport { getAllResultByHealthOrgEQARoundId, getResultReportById } from \"../ResultsOfTheUnits/ResultsOfTheUnitsService\";\nimport MaterialTable, { MTableToolbar, Chip, MTableBody, MTableHeader } from 'material-table';\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { getItemById, updateResultReportConclusionBySampleTube, updateFinalResultStatus, deleteItem } from \"./EQAResultReportConclusionAllServices\";\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport Draggable from 'react-draggable';\nimport moment from \"moment\";\nimport EQAResultReportElisaDialog from \"../EQAResultReportElisa/EQAResultReportElisaDialog\";\nimport EQAResultReportFastTestEditorDialog from \"../EQAResultReportFastTest/EQAResultReportFastTestEditorDialog\";\nimport EQAResultReportSerodiaDialog from \"../EQAResultReportSerodia/EQAResultReportSerodiaDialog\";\nimport EQAResultReportEcliaEditorDialog from \"../EQAResultReportEclia/EQAResultReportEcliaEditorDialog\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../../../styles/views/_style.scss';\ntoast.configure({\n  autoClose: 3000,\n  draggable: false,\n  limit: 3\n});\n\nfunction PaperComponent(props) {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    handle: \"#draggable-dialog-title\",\n    cancel: '[class*=\"MuiDialogContent-root\"]',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  })));\n}\n\nvar EQAResultReportConclusionDialog = /*#__PURE__*/function (_Component) {\n  _inherits(EQAResultReportConclusionDialog, _Component);\n\n  var _super = _createSuper(EQAResultReportConclusionDialog);\n\n  function EQAResultReportConclusionDialog() {\n    var _this;\n\n    _classCallCheck(this, EQAResultReportConclusionDialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      name: \"\",\n      code: \"\",\n      description: \"\",\n      itemList: [],\n      item: {},\n      listSample: [],\n      listResult: [],\n      shouldOpenViewDialogElisa: false,\n      shouldOpenViewDialogFastTest: false,\n      shouldOpenViewDialogSerodia: false,\n      shouldOpenViewDialogEclia: false,\n      isActive: false,\n      shouldOpenConfirmationDialog: false,\n      shouldOpenConfirmationDelete: false\n    };\n    _this.Results = [{\n      id: -2,\n      name: \"Không thực hiện\"\n    }, {\n      id: -1,\n      name: \"Âm tính\"\n    }, {\n      id: 0,\n      name: \"Không xác định\"\n    }, {\n      id: 1,\n      name: \"Dương tính\"\n    }, {\n      id: 2,\n      name: \"PXN gửi mẫu khẳng định\"\n    }];\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.handleConfirmationResponse = function () {\n      var t = _this.props.t;\n      deleteItem(_this.state.id).then(function (res) {\n        if (res.data == true) {\n          toast.success(t(\"EqaResult.deleteSuccess\"));\n\n          _this.props.handleOKEditClose();\n        } else {\n          toast.warning(t('EqaResult.deleteError'));\n        }\n\n        _this.props.handleOKEditClose();\n      }).catch(function (err) {\n        toast.warning(t('EqaResult.error'));\n\n        _this.props.handleOKEditClose();\n      });\n    };\n\n    _this.handleDialogClose = function () {\n      _this.setState({\n        shouldOpenViewDialogElisa: false,\n        shouldOpenViewDialogFastTest: false,\n        shouldOpenViewDialogSerodia: false,\n        shouldOpenViewDialogEclia: false,\n        shouldOpenConfirmationDialog: false,\n        shouldOpenConfirmationDelete: false\n      });\n    };\n\n    _this.handleFormSubmit = function () {\n      var t = _this.props.t;\n      var _this$state = _this.state,\n          details = _this$state.details,\n          healthOrgRound = _this$state.healthOrgRound,\n          isFinalResult = _this$state.isFinalResult,\n          listData = _this$state.listData,\n          id = _this$state.id;\n\n      if (details.length === 0) {\n        toast.warn(t(\"EQAResultReportConclusion.no_data\"));\n      } else {\n        // updateResultReportConclusionBySampleTube(\n        //   listData,\n        //   healthOrgRound.id,\n        //   isFinalResult\n        // )\n        //   .then(res => {\n        //     this.props.handleOKEditClose();\n        //     toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\n        //     // window.location.reload();\n        //   })\n        //   .catch(err => {\n        //     toast.error(t(\"EQAResultReportConclusion.update_result_error\"));\n        //   });\n        updateFinalResultStatus(id, isFinalResult).then(function (res) {\n          // this.props.handleOKEditClose();\n          toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\n        }).catch(function (err) {\n          toast.error(t(\"EQAResultReportConclusion.update_result_error\"));\n        });\n      }\n    };\n\n    _this.notificationFinalResult = function () {\n      // if(this.state.isFinalResult){\n      _this.setState({\n        shouldOpenConfirmationDialog: true\n      }); // } \n\n    };\n\n    _this.notificationDelete = function () {\n      _this.setState({\n        shouldOpenConfirmationDelete: true\n      });\n    };\n\n    _this.handleDialogFinalResultClose = function () {\n      // this.setState({isFinalResult:false},()=>{\n      // })\n      _this.handleDialogClose();\n    };\n\n    _this.handleFinalResult = function () {\n      if (_this.state.isFinalResult == null || !_this.state.isFinalResult) {\n        _this.setState({\n          isFinalResult: true,\n          dateSubmitResults: new Date()\n        }, function () {});\n\n        _this.handleDialogClose();\n      }\n\n      if (_this.state.isFinalResult) {\n        _this.setState({\n          isFinalResult: false,\n          dateSubmitResults: new Date()\n        }, function () {});\n\n        _this.handleDialogClose();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(EQAResultReportConclusionDialog, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item;\n      var listData = [];\n      var p = {};\n\n      if (item && item.details && item.details.length > 0) {\n        item.details.sort(function (a, b) {\n          return a.orderNumber > b.orderNumber ? 1 : a.orderNumber === b.orderNumber ? a.sampleTube.code > b.sampleTube.code ? 1 : -1 : -1;\n        });\n        item.details.forEach(function (element) {\n          p.tubeID = element.sampleTube.id;\n          p.tubeCode = element.sampleTube.code;\n          p.result = element.result;\n          listData.push(p);\n        });\n      }\n\n      this.setState({\n        listData: listData\n      });\n      this.setState(_objectSpread({}, item), function () {});\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          handleClose = _this$props2.handleClose,\n          handleOKEditClose = _this$props2.handleOKEditClose,\n          isView = _this$props2.isView,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n;\n      var _this$state2 = this.state,\n          id = _this$state2.id,\n          supplyOfReagent = _this$state2.supplyOfReagent,\n          shouldOpenHealthOrgRoundPopup = _this$state2.shouldOpenHealthOrgRoundPopup,\n          personBuyReagent = _this$state2.personBuyReagent,\n          reagent = _this$state2.reagent,\n          reagentLot = _this$state2.reagentLot,\n          orderTest = _this$state2.orderTest,\n          reagentExpiryDate = _this$state2.reagentExpiryDate,\n          testDate = _this$state2.testDate,\n          technician = _this$state2.technician,\n          note = _this$state2.note,\n          healthOrgRound = _this$state2.healthOrgRound,\n          isFinalResult = _this$state2.isFinalResult,\n          incubationPeriod = _this$state2.incubationPeriod,\n          incubationTempWithPlus = _this$state2.incubationTempWithPlus,\n          incubationPeriodWithPlus = _this$state2.incubationPeriodWithPlus,\n          incubationTempWithSubstrate = _this$state2.incubationTempWithSubstrate,\n          incubationPeriodWithSubstrate = _this$state2.incubationPeriodWithSubstrate,\n          details = _this$state2.details;\n      var columns = [{\n        title: t(\"EQAResultReportEclia.sample_code\"),\n        field: \"sampleTube.code\",\n        align: \"left\",\n        width: \"50\"\n      }, {\n        title: t(\"EQAResultReportEclia.result\"),\n        field: \"result\",\n        align: \"left\",\n        width: \"150\",\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(FormControl, {\n            className: \"w-80\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(Select, {\n            value: rowData.result,\n            disabled: true //onChange={result => this.handleRowDataCellChange(rowData, result)}\n            ,\n            inputProps: {\n              name: \"result\",\n              id: \"result-simple\"\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(MenuItem, {\n            value: \"\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"em\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 34\n            }\n          }, \"None\"), \" \"), _this2.Results.map(function (item) {\n            return /*#__PURE__*/React.createElement(MenuItem, {\n              key: item.id,\n              value: item.id,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 24\n              }\n            }, item.name);\n          })));\n        }\n      }];\n      return /*#__PURE__*/React.createElement(Dialog, {\n        open: open,\n        PaperComponent: PaperComponent,\n        maxWidth: \"lg\",\n        scroll: 'paper',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        style: {\n          overflowY: \"auto\",\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DialogTitle, {\n        style: {\n          cursor: 'move'\n        },\n        id: \"draggable-dialog-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"mb-20 styleColor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }\n      }, t(\"EQAResultReportConclusionAll.result_detail\")), /*#__PURE__*/React.createElement(IconButton, {\n        style: {\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\"\n        },\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        color: \"error\",\n        title: t(\"close\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 116\n        }\n      }, \"close\"))), /*#__PURE__*/React.createElement(DialogContent, {\n        dividers: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }\n      }, this.state.shouldOpenConfirmationDialog && /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        title: t(\"confirm\"),\n        open: this.state.shouldOpenConfirmationDialog,\n        onConfirmDialogClose: this.handleDialogFinalResultClose,\n        onYesClick: this.handleFinalResult,\n        text: isFinalResult ? t(\"EqaResult.unFinalResultConfirm\") : t(\"EqaResult.FinalResultConfirm\"),\n        Yes: t(\"general.Yes\"),\n        No: t(\"general.No\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 17\n        }\n      }), this.state.shouldOpenConfirmationDelete && /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        title: t(\"confirm\"),\n        open: this.state.shouldOpenConfirmationDelete,\n        onConfirmDialogClose: this.handleDialogFinalResultClose,\n        onYesClick: this.handleConfirmationResponse,\n        text: t('DeleteConfirm'),\n        Yes: t(\"general.Yes\"),\n        No: t(\"general.No\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        md: 8,\n        sm: 8,\n        xs: 8,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        disabled: isView,\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 26\n          }\n        }, t(\"EQAResultReportConclusionAll.health_org\")),\n        variant: \"outlined\",\n        id: \"healthOrgRound\",\n        className: \"w-100\",\n        value: healthOrgRound != null && healthOrgRound.healthOrg ? healthOrgRound.healthOrg.name : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        md: 4,\n        sm: 4,\n        xs: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControlLabel, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          style: {\n            fontWeight: \"bold\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 26\n          }\n        }, \" \", t('EQAResultReportFastTest.isFinalResult')),\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          checked: isFinalResult,\n          onClick: function onClick(isFinalResult) {\n            return _this2.notificationFinalResult(isFinalResult);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 28\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MaterialTable, {\n        title: t('List'),\n        data: details,\n        columns: columns,\n        options: {\n          selection: false,\n          paging: false,\n          search: false,\n          headerStyle: {\n            whiteSpace: 'nowrap'\n          }\n        },\n        components: {\n          Toolbar: function Toolbar(props) {\n            return /*#__PURE__*/React.createElement(MTableToolbar, Object.assign({}, props, {\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 23\n              }\n            }));\n          }\n        },\n        onSelectionChange: function onSelectionChange(rows) {\n          _this2.data = rows; // this.setState({selectedItems:rows});\n        },\n        localization: {\n          body: {\n            emptyDataSourceMessage: \"\".concat(t(\"general.emptyDataMessageTable\"))\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 17\n        }\n      })))), /*#__PURE__*/React.createElement(DialogActions, {\n        spacing: 4,\n        className: \"flex flex-end flex-middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        className: \"\",\n        color: \"secondary\",\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 13\n        }\n      }, \" \", t('Cancel')), /*#__PURE__*/React.createElement(Button, {\n        style: {\n          backgroundColor: \"#ffeb3b\"\n        },\n        variant: \"contained\",\n        onClick: function onClick() {\n          return _this2.notificationDelete();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }\n      }, \" \", t('Delete'), \" \"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }\n      }, t('Save')))));\n    }\n  }]);\n\n  return EQAResultReportConclusionDialog;\n}(Component);\n\nexport default EQAResultReportConclusionDialog;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/EQAResultReportConclusionAll/EQAResultReportConclusionDialog.jsx"],"names":["React","Component","Dialog","Button","Grid","TextField","Icon","IconButton","FormControl","DialogTitle","DialogContent","DialogActions","Paper","Checkbox","MenuItem","Select","FormControlLabel","getAllResultByHealthOrgEQARoundId","getResultReportById","MaterialTable","MTableToolbar","Chip","MTableBody","MTableHeader","ValidatorForm","TextValidator","getItemById","updateResultReportConclusionBySampleTube","updateFinalResultStatus","deleteItem","useTranslation","withTranslation","Trans","Breadcrumb","ConfirmationDialog","Draggable","moment","EQAResultReportElisaDialog","EQAResultReportFastTestEditorDialog","EQAResultReportSerodiaDialog","EQAResultReportEcliaEditorDialog","toast","configure","autoClose","draggable","limit","PaperComponent","props","EQAResultReportConclusionDialog","state","name","code","description","itemList","item","listSample","listResult","shouldOpenViewDialogElisa","shouldOpenViewDialogFastTest","shouldOpenViewDialogSerodia","shouldOpenViewDialogEclia","isActive","shouldOpenConfirmationDialog","shouldOpenConfirmationDelete","Results","id","handleChange","event","source","persist","setState","target","checked","value","handleConfirmationResponse","t","then","res","data","success","handleOKEditClose","warning","catch","err","handleDialogClose","handleFormSubmit","details","healthOrgRound","isFinalResult","listData","length","warn","error","notificationFinalResult","notificationDelete","handleDialogFinalResultClose","handleFinalResult","dateSubmitResults","Date","open","handleClose","p","sort","a","b","orderNumber","sampleTube","forEach","element","tubeID","tubeCode","result","push","isView","i18n","supplyOfReagent","shouldOpenHealthOrgRoundPopup","personBuyReagent","reagent","reagentLot","orderTest","reagentExpiryDate","testDate","technician","note","incubationPeriod","incubationTempWithPlus","incubationPeriodWithPlus","incubationTempWithSubstrate","incubationPeriodWithSubstrate","columns","title","field","align","width","render","rowData","map","overflowY","display","flexDirection","cursor","position","right","top","healthOrg","fontWeight","selection","paging","search","headerStyle","whiteSpace","Toolbar","rows","body","emptyDataSourceMessage","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  TextField,\r\n  Icon,\r\n  IconButton,\r\n  FormControl,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Paper,\r\n  Checkbox,\r\n  MenuItem,\r\n  Select, FormControlLabel,\r\n} from \"@material-ui/core\";\r\nimport { getAllResultByHealthOrgEQARoundId, getResultReportById } from \"../ResultsOfTheUnits/ResultsOfTheUnitsService\";\r\nimport MaterialTable, { MTableToolbar, Chip, MTableBody, MTableHeader } from 'material-table';\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport { getItemById, updateResultReportConclusionBySampleTube, updateFinalResultStatus, deleteItem } from \"./EQAResultReportConclusionAllServices\";\r\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport Draggable from 'react-draggable';\r\nimport moment from \"moment\";\r\nimport EQAResultReportElisaDialog from \"../EQAResultReportElisa/EQAResultReportElisaDialog\";\r\nimport EQAResultReportFastTestEditorDialog from \"../EQAResultReportFastTest/EQAResultReportFastTestEditorDialog\";\r\nimport EQAResultReportSerodiaDialog from \"../EQAResultReportSerodia/EQAResultReportSerodiaDialog\";\r\nimport EQAResultReportEcliaEditorDialog from \"../EQAResultReportEclia/EQAResultReportEcliaEditorDialog\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../../styles/views/_style.scss';\r\n\r\ntoast.configure({\r\n  autoClose: 3000,\r\n  draggable: false,\r\n  limit: 3\r\n});\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\nclass EQAResultReportConclusionDialog extends Component {\r\n\r\n\r\n  state = {\r\n    name: \"\",\r\n    code: \"\",\r\n    description: \"\",\r\n    itemList: [],\r\n    item: {},\r\n    listSample: [],\r\n    listResult: [],\r\n    shouldOpenViewDialogElisa: false,\r\n    shouldOpenViewDialogFastTest: false,\r\n    shouldOpenViewDialogSerodia: false,\r\n    shouldOpenViewDialogEclia: false,\r\n    isActive: false,\r\n    shouldOpenConfirmationDialog: false,\r\n    shouldOpenConfirmationDelete: false\r\n  };\r\n  Results = [\r\n    { id: -2, name: \"Không thực hiện\" },\r\n    { id: -1, name: \"Âm tính\" },\r\n    { id: 0, name: \"Không xác định\" },\r\n    { id: 1, name: \"Dương tính\" },\r\n    { id: 2, name: \"PXN gửi mẫu khẳng định\" }\r\n  ];\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  componentWillMount() {\r\n    let { open, handleClose, item } = this.props;\r\n    let listData = []\r\n    let p = {}\r\n    if (item && item.details && item.details.length > 0) {\r\n      item.details.sort((a, b) => (a.orderNumber > b.orderNumber) ? 1 : (a.orderNumber === b.orderNumber) ? ((a.sampleTube.code > b.sampleTube.code) ? 1 : -1) : -1);\r\n      item.details.forEach(element => {\r\n        p.tubeID = element.sampleTube.id\r\n        p.tubeCode = element.sampleTube.code\r\n        p.result = element.result\r\n        listData.push(p)\r\n      })\r\n    }\r\n    this.setState({\r\n      listData: listData\r\n    })\r\n\r\n    this.setState({\r\n      ...item\r\n    }, function () {\r\n    });\r\n  }\r\n  handleConfirmationResponse = () => {\r\n    let { t } = this.props;\r\n\r\n    deleteItem(this.state.id).then((res) => {\r\n      if (res.data == true) {\r\n        toast.success(t(\"EqaResult.deleteSuccess\"));\r\n        this.props.handleOKEditClose();\r\n      } else {\r\n        toast.warning(t('EqaResult.deleteError'));\r\n      }\r\n      this.props.handleOKEditClose();\r\n    }).catch((err) => {\r\n      toast.warning(t('EqaResult.error'));\r\n      this.props.handleOKEditClose();\r\n    });\r\n  };\r\n\r\n  handleDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenViewDialogElisa: false,\r\n      shouldOpenViewDialogFastTest: false,\r\n      shouldOpenViewDialogSerodia: false,\r\n      shouldOpenViewDialogEclia: false,\r\n      shouldOpenConfirmationDialog: false,\r\n      shouldOpenConfirmationDelete: false\r\n    });\r\n  };\r\n\r\n  handleFormSubmit = () => {\r\n    const { t } = this.props;\r\n    const {\r\n      details,\r\n      healthOrgRound,\r\n      isFinalResult,\r\n      listData,\r\n      id\r\n    } = this.state;\r\n    if (details.length === 0) {\r\n      toast.warn(t(\"EQAResultReportConclusion.no_data\"));\r\n    } else {\r\n      // updateResultReportConclusionBySampleTube(\r\n      //   listData,\r\n      //   healthOrgRound.id,\r\n      //   isFinalResult\r\n      // )\r\n      //   .then(res => {\r\n      //     this.props.handleOKEditClose();\r\n      //     toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\r\n      //     // window.location.reload();\r\n      //   })\r\n      //   .catch(err => {\r\n      //     toast.error(t(\"EQAResultReportConclusion.update_result_error\"));\r\n      //   });\r\n      updateFinalResultStatus(id, isFinalResult).then(res => {\r\n        // this.props.handleOKEditClose();\r\n        toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\r\n      })\r\n        .catch(err => {\r\n          toast.error(t(\"EQAResultReportConclusion.update_result_error\"));\r\n        });\r\n    }\r\n\r\n  };\r\n  notificationFinalResult = () => {\r\n    // if(this.state.isFinalResult){\r\n    this.setState({ shouldOpenConfirmationDialog: true })\r\n    // } \r\n  }\r\n\r\n  notificationDelete = () => {\r\n    this.setState({ shouldOpenConfirmationDelete: true })\r\n  }\r\n  handleDialogFinalResultClose = () => {\r\n    // this.setState({isFinalResult:false},()=>{\r\n    // })\r\n    this.handleDialogClose()\r\n  }\r\n  handleFinalResult = () => {\r\n\r\n    if (this.state.isFinalResult == null || !this.state.isFinalResult) {\r\n      this.setState({ isFinalResult: true, dateSubmitResults: new Date() }, () => {\r\n      })\r\n      this.handleDialogClose()\r\n    }\r\n    if (this.state.isFinalResult) {\r\n      this.setState({ isFinalResult: false, dateSubmitResults: new Date() }, () => {\r\n      })\r\n      this.handleDialogClose()\r\n    }\r\n  }\r\n  render() {\r\n    let { open, handleClose, handleOKEditClose, isView, t, i18n } = this.props;\r\n    let {\r\n      id,\r\n      supplyOfReagent,\r\n      shouldOpenHealthOrgRoundPopup,\r\n      personBuyReagent,\r\n      reagent,\r\n      reagentLot,\r\n      orderTest,\r\n      reagentExpiryDate,\r\n      testDate,\r\n      technician,\r\n      note,\r\n      healthOrgRound,\r\n      isFinalResult,\r\n      incubationPeriod,\r\n      incubationTempWithPlus,\r\n      incubationPeriodWithPlus,\r\n      incubationTempWithSubstrate,\r\n      incubationPeriodWithSubstrate,\r\n      details\r\n    } = this.state;\r\n\r\n    let columns = [\r\n      {\r\n        title: t(\"EQAResultReportEclia.sample_code\"), field: \"sampleTube.code\", align: \"left\", width: \"50\"\r\n      },\r\n      {\r\n        title: t(\"EQAResultReportEclia.result\"), field: \"result\", align: \"left\", width: \"150\",\r\n        render: rowData =>\r\n          <FormControl className=\"w-80\">\r\n            <Select\r\n              value={rowData.result}\r\n              disabled={true}\r\n              //onChange={result => this.handleRowDataCellChange(rowData, result)}\r\n              inputProps={{\r\n                name: \"result\",\r\n                id: \"result-simple\"\r\n              }}\r\n            >\r\n              <MenuItem value=''><em>None</em> </MenuItem>\r\n              {this.Results.map(item => {\r\n                return <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>;\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n      }\r\n    ];\r\n    return (\r\n      <Dialog open={open} PaperComponent={PaperComponent} maxWidth={\"lg\"} scroll={'paper'} >\r\n        <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit}\r\n          style={{\r\n            overflowY: \"auto\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\"\r\n          }}>\r\n          <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\r\n            <span className=\"mb-20 styleColor\">{t(\"EQAResultReportConclusionAll.result_detail\")}</span>\r\n            <IconButton style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }} onClick={() => handleClose()}><Icon color=\"error\"\r\n              title={t(\"close\")}>\r\n              close\r\n            </Icon>\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent dividers>\r\n            <Grid container spacing={2}>\r\n              {this.state.shouldOpenConfirmationDialog && (\r\n                <ConfirmationDialog\r\n                  title={t(\"confirm\")}\r\n                  open={this.state.shouldOpenConfirmationDialog}\r\n                  onConfirmDialogClose={this.handleDialogFinalResultClose}\r\n                  onYesClick={this.handleFinalResult}\r\n                  text={isFinalResult ? t(\"EqaResult.unFinalResultConfirm\") : t(\"EqaResult.FinalResultConfirm\")}\r\n                  Yes={t(\"general.Yes\")}\r\n                  No={t(\"general.No\")}\r\n                />\r\n              )}\r\n\r\n              {this.state.shouldOpenConfirmationDelete && (\r\n                <ConfirmationDialog\r\n                  title={t(\"confirm\")}\r\n                  open={this.state.shouldOpenConfirmationDelete}\r\n                  onConfirmDialogClose={this.handleDialogFinalResultClose}\r\n                  onYesClick={this.handleConfirmationResponse}\r\n                  text={t('DeleteConfirm')}\r\n                  Yes={t(\"general.Yes\")}\r\n                  No={t(\"general.No\")}\r\n                />\r\n              )}\r\n              <Grid item md={8} sm={8} xs={8}>\r\n                <TextValidator\r\n                  size=\"small\"\r\n                  disabled={isView}\r\n                  label={<span className=\"font\">{t(\"EQAResultReportConclusionAll.health_org\")}</span>}\r\n                  variant=\"outlined\"\r\n                  id=\"healthOrgRound\"\r\n                  className=\"w-100\"\r\n                  value={(healthOrgRound != null && healthOrgRound.healthOrg) ? healthOrgRound.healthOrg.name : ''}\r\n                />\r\n              </Grid>\r\n\r\n              {/* <Grid item md={12} sm={12} xs={12}>\r\n                <TextValidator\r\n                  size=\"small\"\r\n                  disabled={isView}\r\n                  label={t(\"EQAResultReportConclusionAll.technician\")}\r\n                  id=\"technician\"\r\n                  className=\"w-100\"\r\n                  value={technician != null ? technician.displayName : ''}\r\n                />\r\n              </Grid> */}\r\n              {/* <Grid item md={8} sm={6} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100\"\r\n                  label={t(\"SampleManagement.serum-bottle.note\")}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"note\"\r\n                  value={note ? note : \"\"}\r\n                />\r\n              </Grid> */}\r\n\r\n              <Grid item md={4} sm={4} xs={4}>\r\n                <FormControlLabel\r\n                  label={<span className=\"font\" style={{ fontWeight : \"bold\"}}> {t('EQAResultReportFastTest.isFinalResult')}</span>}\r\n                  control={<Checkbox checked={isFinalResult}\r\n                    onClick={(isFinalResult) =>\r\n                      this.notificationFinalResult(isFinalResult)\r\n                    }\r\n                  />}\r\n\r\n                />\r\n              </Grid>\r\n              <Grid item sm={12} xs={12}>\r\n                <MaterialTable\r\n                  title={t('List')}\r\n                  data={details}\r\n                  columns={columns}\r\n\r\n                  options={{\r\n                    selection: false,\r\n                    paging: false,\r\n                    search: false,\r\n                    headerStyle: { whiteSpace: 'nowrap' }\r\n                  }}\r\n                  components={{\r\n                    Toolbar: props => (\r\n                      <MTableToolbar {...props} />\r\n                    ),\r\n                  }}\r\n                  onSelectionChange={(rows) => {\r\n                    this.data = rows;\r\n                    // this.setState({selectedItems:rows});\r\n                  }}\r\n                  localization={{\r\n                    body: {\r\n                      emptyDataSourceMessage: `${t(\r\n                        \"general.emptyDataMessageTable\"\r\n                      )}`,\r\n                    },\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions spacing={4} className=\"flex flex-end flex-middle\">\r\n            <Button variant=\"contained\" className=\"\" color=\"secondary\" onClick={() => handleClose()}> {t('Cancel')}</Button>\r\n            <Button style={{ backgroundColor: \"#ffeb3b\" }} variant=\"contained\" onClick={() => this.notificationDelete()}> {t('Delete')} </Button>\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\" >\r\n              {t('Save')}\r\n            </Button>\r\n          </DialogActions>\r\n        </ValidatorForm>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EQAResultReportConclusionDialog;\r\n"]},"metadata":{},"sourceType":"module"}