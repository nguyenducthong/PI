{"ast":null,"code":"import _createForOfIteratorHelper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\ReferenceResults\\\\ReferenceResults.jsx\";\nimport { InputAdornment, Input, Grid, Button, Select, MenuItem, TextField, Table, TableHead, TableRow, FormControlLabel, Paper, TableContainer, Checkbox, TableCell, FormControl, TableBody } from \"@material-ui/core\";\nimport shortid from \"shortid\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\nimport { searchByPage as getAllEQARound } from \"../EQARound/EQARoundService\"; // import { getListHealthOrgEQARoundByEQARoundIdAndUser } from \"../EQAResultReportConclusion/EQAResultReportConclusionServices\";\n\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport { exportToExcel, getListGroupReferenceResultByRoundId, getEQASample, getResultConclusionEQARoundId, getListReferenceResultByRoundId } from \"./ReferenceResultsServices\";\nimport { Helmet } from \"react-helmet\";\nimport { saveAs } from 'file-saver';\nimport { toast } from \"react-toastify\";\nimport ReferenceResultsDialog from \"./ReferenceResultsDialog\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { getCurrentUser } from \"../User/UserService\";\nimport { updateResultReportConclusionBySampleTube } from \"../EQAResultReportConclusion/EQAResultReportConclusionServices\";\nimport { getEQASampleTubeResultConclusionDtoByHealthOrgEQARoundId } from \"../EQAResultReportConclusion/EQAResultReportConclusionServices\";\nimport { getAllResultByHealthOrgManagementEQARoundId, getResultReportById, getItemById } from \"../ResultsOfTheUnits/ResultsOfTheUnitsService\";\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n});\n\nvar ReferenceResults = /*#__PURE__*/function (_React$Component) {\n  _inherits(ReferenceResults, _React$Component);\n\n  var _super = _createSuper(ReferenceResults);\n\n  function ReferenceResults(props) {\n    var _this;\n\n    _classCallCheck(this, ReferenceResults);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      sampleTubeResultConclusionList: [],\n      listEQARound: [],\n      currentRound: null,\n      healthOrgEQARoundList: [],\n      currentHealthOrgEQARound: null,\n      shouldOpenConfirmationDialog: false,\n      isFinalResult: false,\n      shouldOpenEQAResultReportDialog: false,\n      listSample: [],\n      isCheckUpdate: false,\n      shouldView: false\n    };\n\n    _this.handleOpenConfirmationDialog = function () {\n      var t = _this.props.t;\n\n      if (_this.state.currentRound == null || _this.state.currentRound.id == null) {\n        toast.warn(t(\"EQASampleSet.please_select_eqa_round\"));\n        return;\n      }\n\n      _this.setState({\n        shouldOpenConfirmationDialog: true\n      });\n    };\n\n    _this.handleDialogClose = function () {\n      _this.setState({\n        shouldOpenConfirmationDialog: false,\n        shouldOpenEQAResultReportDialog: false\n      }, function () {\n        _this.handleSelectEQARound(_this.state.currentRound);\n      });\n    };\n\n    _this.handleSelectEQARound = function (value) {\n      if (value != null && value != \"\") {\n        getListGroupReferenceResultByRoundId(value.id).then(function (res) {\n          if (res.data != null && res.data.length > 0) {\n            res.data.sort(function (a, b) {\n              return a.reagent.name > b.reagent.name ? 1 : -1;\n            });\n          }\n\n          _this.setState({\n            currentHealthOrgEQARound: null,\n            currentRound: value,\n            listGroupReferenceResult: res.data\n          }, function () {\n            getListReferenceResultByRoundId(value.id).then(function (res) {\n              if (res.data != null && res.data.length > 0) {\n                res.data.sort(function (a, b) {\n                  return a.reagent.name > b.reagent.name ? 1 : -1;\n                });\n              }\n\n              _this.setState({\n                currentHealthOrgEQARound: null,\n                currentRound: value,\n                listReferenceResult: res.data\n              }, function () {\n                getEQASample(value.id).then(function (data) {\n                  var p = {};\n                  var listSample = [];\n\n                  var list = _toConsumableArray(data.data);\n\n                  list.forEach(function (element) {\n                    p = _objectSpread({}, element.eqaSample);\n                    listSample.push(p);\n                  });\n\n                  _this.setState({\n                    sample: null,\n                    listSample: list\n                  }, function () {});\n                });\n                getResultConclusionEQARoundId(value.id).then(function (res) {\n                  _this.setState({\n                    currentHealthOrgEQARound: null,\n                    resultConclusionList: res.data,\n                    currentRound: value\n                  }, function () {});\n                });\n              });\n            });\n          });\n        });\n      } else {\n        _this.setState({\n          currentRound: null,\n          currentHealthOrgEQARound: null,\n          healthOrgEQARoundList: [],\n          listSample: []\n        });\n      }\n    };\n\n    _this.handleChangeResult = function (result, id) {\n      var sampleTubeResultConclusionList = _this.state.sampleTubeResultConclusionList;\n\n      var _iterator = _createForOfIteratorHelper(sampleTubeResultConclusionList),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var dto = _step.value;\n\n          if (dto.tubeID === id) {\n            dto.result = result;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      _this.setState({\n        sampleTubeResultConclusionList\n      });\n    };\n\n    _this.handleChangeNote = function (note, id) {\n      var sampleTubeResultConclusionList = _this.state.sampleTubeResultConclusionList;\n\n      var _iterator2 = _createForOfIteratorHelper(sampleTubeResultConclusionList),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var dto = _step2.value;\n\n          if (dto.tubeID === id) {\n            dto.note = note;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      _this.setState({\n        sampleTubeResultConclusionList\n      });\n    };\n\n    _this.handleConfirmUpdateResult = function () {\n      var t = _this.props.t;\n      var _this$state = _this.state,\n          sampleTubeResultConclusionList = _this$state.sampleTubeResultConclusionList,\n          currentHealthOrgEQARound = _this$state.currentHealthOrgEQARound;\n\n      if (sampleTubeResultConclusionList.length === 0) {\n        toast.warn(t(\"EQAResultReportConclusion.no_data\"));\n      } else {\n        updateResultReportConclusionBySampleTube(sampleTubeResultConclusionList, currentHealthOrgEQARound.id).then(function (res) {\n          toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\n        }).catch(function (err) {\n          toast.error(t(\"EQAResultReportConclusion.update_result_error\"));\n        });\n      }\n\n      _this.setState({\n        shouldOpenConfirmationDialog: false\n      });\n    };\n\n    _this.resultValue = function (rowDataID) {\n      var item = _this.state.sampleTubeResultConclusionList.find(function (dto) {\n        return dto.tubeID === rowDataID;\n      });\n\n      if (typeof item != \"undefined\") {\n        return item.result != null ? item.result : \"\";\n      }\n\n      return \"\";\n    };\n\n    _this.noteValue = function (rowDataID) {\n      var item = _this.state.sampleTubeResultConclusionList.find(function (dto) {\n        return dto.tubeID === rowDataID;\n      });\n\n      if (typeof item != \"undefined\") {\n        return item.note != null ? item.note : \"\";\n      }\n\n      return \"\";\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"isFinalResult\") {\n        _this.setState({\n          isFinalResult: event.target.checked\n        });\n      }\n    };\n\n    _this.handleOKEditClose = function () {\n      _this.setState({\n        shouldOpenEQAResultReportDialog: false,\n        shouldOpenConfirmationDialog: false,\n        shouldOpenConfirmationEditDialog: false\n      }, function () {\n        _this.handleSelectEQARound(_this.state.currentRound);\n      }); // this.setPage(0);\n\n    };\n\n    _this.exportToExcel = function () {\n      var t = _this.props.t;\n      var searchObject = {};\n\n      if (_this.state.currentRound == null || _this.state.currentRound.id == \"\") {\n        toast.warn(t(\"EQASampleSet.please_select_eqa_round\"));\n        return;\n      }\n\n      exportToExcel(_this.state.currentRound ? _this.state.currentRound.id : \"\").then(function (res) {\n        var blob = new Blob([res.data], {\n          type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n        });\n        saveAs(blob, 'EQAResultReport.xlsx');\n      }).catch(function (err) {});\n    };\n\n    return _this;\n  }\n\n  _createClass(ReferenceResults, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {}\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var searchObject = {\n        pageIndex: 0,\n        pageSize: 1000000\n      };\n      getAllEQARound(searchObject).then(function (res) {\n        _this2.setState({\n          listEQARound: res.data.content\n        });\n      }, function () {});\n    }\n  }, {\n    key: \"renderRowHead\",\n    value: function renderRowHead() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          onSelectEvent = _this$props.onSelectEvent,\n          handleDelete = _this$props.handleDelete,\n          handleClick = _this$props.handleClick;\n      var listGroupReferenceResult = this.state.listGroupReferenceResult;\n      var titleCell = null;\n\n      if (listGroupReferenceResult != null && listGroupReferenceResult.length > 0) {\n        listGroupReferenceResult.forEach(function (item) {\n          if (!titleCell) {\n            titleCell = /*#__PURE__*/React.createElement(TableCell, {\n              key: shortid.generate(),\n              className: \"px-0\",\n              align: \"left\",\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 23\n              }\n            }, _this3.getTypeMethodName(item.typeMethod));\n          } else {\n            titleCell += /*#__PURE__*/React.createElement(TableCell, {\n              key: shortid.generate(),\n              className: \"px-0\",\n              align: \"left\",\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 24\n              }\n            }, _this3.getTypeMethodName(item.typeMethod));\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 7\n        }\n      }, listGroupReferenceResult.map(function (item, index) {\n        return _this3.renderColHeadFirst(item);\n      }));\n    }\n  }, {\n    key: \"getTypeMethodName\",\n    value: function getTypeMethodName(text, type) {\n      var t = this.props.t;\n\n      if (type == 1) {\n        return text;\n      } else if (type == 2) {\n        return text;\n      } else if (type == 3) {\n        return text;\n      } else if (type == 4) {\n        return text;\n      } else if (type == 5) {\n        return t('ReferenceResults.conclusion');\n      }\n    }\n  }, {\n    key: \"renderColHeadFirst\",\n    value: function renderColHeadFirst(item) {\n      if (item.reagent != null) {\n        item.title = this.getTypeMethodName(item.reagent.name, item.typeMethod);\n      } else {\n        item.title = this.getTypeMethodName(\"\", item.typeMethod);\n      } //item.title = this.getTypeMethodName(item.reagent.name,item.typeMethod);\n\n\n      return this.renderHeadCells(item);\n    }\n  }, {\n    key: \"renderHeadCells\",\n    value: function renderHeadCells(item) {\n      if (item == null) {\n        item = {};\n      } // if(item.)\n\n\n      var titleCell = /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff',\n          borderRightStyle: \"solid\",\n          textAlign: \"center\"\n        },\n        key: shortid.generate(),\n        className: \"px-0\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 21\n        }\n      }, item.title);\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 7\n        }\n      }, titleCell);\n    }\n  }, {\n    key: \"renderResultDetails\",\n    value: function renderResultDetails(sample, index) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 9\n        }\n      }, this.renderSample(sample, index)));\n    }\n  }, {\n    key: \"renderSample\",\n    value: function renderSample(item, index) {\n      var _reference,\n          _reference2,\n          _reference3,\n          _reference4,\n          _reference5,\n          _this4 = this;\n\n      var t = this.props.t;\n      var sttCell = /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 19\n        }\n      }, index + 1);\n      var titleCell = /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        align: \"center\",\n        style: {\n          textAlign: \"center\",\n          width: \"40px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 21\n        }\n      }, item ? item.code : '');\n      var _this$state2 = this.state,\n          listReferenceResult = _this$state2.listReferenceResult,\n          listGroupReferenceResult = _this$state2.listGroupReferenceResult,\n          resultConclusionList = _this$state2.resultConclusionList;\n      var listData = [];\n      var str = \"\";\n      var cellContentByMethod = [];\n      var reference = null;\n      listReferenceResult.forEach(function (result) {\n        var content = null;\n\n        if (result != null && result.sample != null && item && item.id == result.sample.id) {\n          content = result;\n          cellContentByMethod.push(content);\n        }\n      });\n      resultConclusionList && resultConclusionList.forEach(function (e) {\n        if (e != null && e.sampleID != null && item && item.id == e.sampleID) {\n          reference = e;\n        }\n      });\n\n      if (cellContentByMethod.length == listGroupReferenceResult.length) {\n        listData = cellContentByMethod;\n      }\n\n      if (cellContentByMethod.length < listGroupReferenceResult.length) {\n        listGroupReferenceResult.forEach(function (e) {\n          var p = null;\n          cellContentByMethod.forEach(function (el) {\n            if (e.reagent.id == el.reagent.id) {\n              p = el;\n            }\n          });\n          listData.push(p);\n        });\n      }\n\n      var resultCell = /*#__PURE__*/React.createElement(TableCell, {\n        key: shortid.generate(),\n        className: \"px-0\",\n        align: \"center\",\n        style: {\n          borderRightStyle: \"solid\",\n          borderRightColor: \"white\",\n          width: \"100px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 22\n        }\n      }, ((_reference = reference) === null || _reference === void 0 ? void 0 : _reference.referenceResult) == 1 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4  text-white px-8 py-2 \",\n        style: {\n          backgroundColor: \"#f44336\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }\n      }, t('result.positive')) : ((_reference2 = reference) === null || _reference2 === void 0 ? void 0 : _reference2.referenceResult) == -2 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-light-gray px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 15\n        }\n      }, t('result.none')) : ((_reference3 = reference) === null || _reference3 === void 0 ? void 0 : _reference3.referenceResult) == -1 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4  px-8 py-2 \",\n        style: {\n          backgroundColor: \"#3366FF\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 19\n        }\n      }, t('result.negative')) : ((_reference4 = reference) === null || _reference4 === void 0 ? void 0 : _reference4.referenceResult) == 0 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-light-gray px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 23\n        }\n      }, t('result.indertermine')) : ((_reference5 = reference) === null || _reference5 === void 0 ? void 0 : _reference5.referenceResult) == -3 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-light-gray px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 27\n        }\n      }, t('result.noEvaluate')) : \"\");\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 7\n        }\n      }, titleCell, listData.map(function (cell, index) {\n        return _this4.renderCells(cell, index);\n      }), resultCell);\n    }\n  }, {\n    key: \"renderCells\",\n    value: function renderCells(item) {\n      var _this$props2 = this.props,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n;\n\n      if (item == null) {\n        item = {};\n      }\n\n      var contentCell = /*#__PURE__*/React.createElement(TableCell, {\n        key: shortid.generate(),\n        className: \"px-0\",\n        align: \"center\",\n        style: {\n          borderRightStyle: \"solid\",\n          borderRightColor: \"white\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 23\n        }\n      }, item.referenceResult == 1 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4  text-white px-8 py-2 \",\n        style: {\n          backgroundColor: \"#f44336\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }\n      }, t('result.positive')) : item.referenceResult == -2 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-light-gray px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 15\n        }\n      }, t('result.none')) : item.referenceResult == -1 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4  px-8 py-2 \",\n        style: {\n          backgroundColor: \"#3366FF\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 19\n        }\n      }, t('result.negative')) : item.referenceResult == 0 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-light-gray px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 23\n        }\n      }, t('result.indertermine')) : item.referenceResult == -3 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-light-gray px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 27\n        }\n      }, t('result.noEvaluate')) : \"\");\n      var officialResultCell = /*#__PURE__*/React.createElement(TableCell, {\n        key: shortid.generate(),\n        className: \"px-0\",\n        align: \"center\",\n        style: {\n          borderRightStyle: \"solid\",\n          borderRightColor: \"white\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 30\n        }\n      }, item.officialResult == 1 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4  text-white px-8 py-2 \",\n        style: {\n          backgroundColor: \"#f44336\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }\n      }, t('result.positive')) : item.officialResult == -2 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-light-gray px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 15\n        }\n      }, t('result.none')) : item.officialResult == -1 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4  px-8 py-2 \",\n        style: {\n          backgroundColor: \"#3366FF\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 19\n        }\n      }, t('result.negative')) : item.officialResult == 0 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-light-gray px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 23\n        }\n      }, t('result.indertermine')) : item.officialResult == -3 ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-light-gray px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 27\n        }\n      }, t('result.noEvaluate')) : \"\");\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 7\n        }\n      }, contentCell);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var _this$props3 = this.props,\n          t = _this$props3.t,\n          i18n = _this$props3.i18n;\n      var _this$state3 = this.state,\n          listEQARound = _this$state3.listEQARound,\n          currentRound = _this$state3.currentRound,\n          sampleTubeResultConclusionList = _this$state3.sampleTubeResultConclusionList,\n          healthOrgEQARoundList = _this$state3.healthOrgEQARoundList,\n          currentHealthOrgEQARound = _this$state3.currentHealthOrgEQARound,\n          resultConclusionList = _this$state3.resultConclusionList,\n          shouldOpenConfirmationDialog = _this$state3.shouldOpenConfirmationDialog,\n          listGroupReferenceResult = _this$state3.listGroupReferenceResult,\n          isFinalResult = _this$state3.isFinalResult,\n          listSample = _this$state3.listSample,\n          listResult = _this$state3.listResult,\n          listReferenceResult = _this$state3.listReferenceResult;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"m-sm-30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mb-sm-30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Helmet, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"title\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 13\n        }\n      }, t(\"ReferenceResults.title\"), \" | \", t(\"web_site\"))), /*#__PURE__*/React.createElement(Breadcrumb, {\n        routeSegments: [{\n          name: t(\"ReportResult.title\"),\n          path: \"/directory/apartment\"\n        }, {\n          name: t(\"ReferenceResults.title\")\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 9\n        }\n      }, this.state.shouldOpenConfirmationDialog && /*#__PURE__*/React.createElement(ReferenceResultsDialog, {\n        t: t,\n        i18n: i18n,\n        open: this.state.shouldOpenConfirmationDialog,\n        handleClose: this.handleDialogClose,\n        roundId: this.state.currentRound.id,\n        resultConclusionLists: this.state.resultConclusionList ? this.state.resultConclusionList : [],\n        handleOKEditClose: this.handleOKEditClose,\n        listGroupReferenceResult: this.state.listGroupReferenceResult,\n        listReferenceResult: this.state.listReferenceResult,\n        listSample: this.state.listSample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        md: 4,\n        sm: 4,\n        xs: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Autocomplete, {\n        size: \"small\",\n        id: \"combo-box\",\n        options: listEQARound,\n        className: \"flex-end\",\n        getOptionLabel: function getOptionLabel(option) {\n          return option.code != null && typeof option.code != \"undefined\" ? option.code : \"\";\n        },\n        onChange: function onChange(event, newValue) {\n          return _this5.handleSelectEQARound(newValue);\n        },\n        value: currentRound,\n        renderInput: function renderInput(params) {\n          return /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n            label: t(\"EQAResultReportConclusion.select_eqa_round\"),\n            variant: \"outlined\",\n            __self: _this5,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 17\n            }\n          }));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        md: 8,\n        sm: 8,\n        xs: 8,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"mr-16 mb-16\",\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: this.handleOpenConfirmationDialog,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 13\n        }\n      }, t(\"EQAResultReportConclusion.update_result\")), /*#__PURE__*/React.createElement(Button, {\n        className: \"mb-16\",\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: this.exportToExcel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 13\n        }\n      }, t('general.exportToExcel'))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 11\n        }\n      }, this.state.listSample.length == 0 && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 52\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 13\n        }\n      }, this.state.listSample && this.state.listSample.length != 0 && /*#__PURE__*/React.createElement(Paper, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 81\n        }\n      }, /*#__PURE__*/React.createElement(TableContainer, {\n        style: {\n          maxHeight: \"1000px\",\n          width: \"100%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        style: {\n          width: \"100%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(TableHead, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          width: \"40px\",\n          color: '#fff',\n          borderRightStyle: \"solid\"\n        },\n        rowSpan: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 25\n        }\n      }, t('ResultsOfTheUnits.set')), /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          color: '#fff',\n          textAlign: \"center\",\n          textTransform: \"uppercase\",\n          borderRightStyle: \"solid\"\n        },\n        colSpan: listGroupReferenceResult.length + 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 25\n        }\n      }, t('EqaResult.reagentName'))), /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 23\n        }\n      }, listGroupReferenceResult && this.renderRowHead(), /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          backgroundColor: '#358600',\n          width: \"100px\",\n          color: '#fff',\n          borderRightStyle: \"solid\"\n        },\n        rowSpan: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 25\n        }\n      }, t('EQAResultReportConclusion.final_conclusion')))), /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 21\n        }\n      }, listSample && listSample.map(function (sample, index) {\n        return _this5.renderResultDetails(sample, index);\n      })))))))));\n    }\n  }]);\n\n  return ReferenceResults;\n}(React.Component);\n\nexport default ReferenceResults;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/ReferenceResults/ReferenceResults.jsx"],"names":["InputAdornment","Input","Grid","Button","Select","MenuItem","TextField","Table","TableHead","TableRow","FormControlLabel","Paper","TableContainer","Checkbox","TableCell","FormControl","TableBody","shortid","createMuiTheme","React","Component","ReactDOM","MaterialTable","MTableToolbar","useTranslation","withTranslation","Trans","searchByPage","getAllEQARound","Breadcrumb","ConfirmationDialog","exportToExcel","getListGroupReferenceResultByRoundId","getEQASample","getResultConclusionEQARoundId","getListReferenceResultByRoundId","Helmet","saveAs","toast","ReferenceResultsDialog","Autocomplete","getCurrentUser","updateResultReportConclusionBySampleTube","getEQASampleTubeResultConclusionDtoByHealthOrgEQARoundId","getAllResultByHealthOrgManagementEQARoundId","getResultReportById","getItemById","configure","autoClose","draggable","limit","ReferenceResults","props","state","sampleTubeResultConclusionList","listEQARound","currentRound","healthOrgEQARoundList","currentHealthOrgEQARound","shouldOpenConfirmationDialog","isFinalResult","shouldOpenEQAResultReportDialog","listSample","isCheckUpdate","shouldView","handleOpenConfirmationDialog","t","id","warn","setState","handleDialogClose","handleSelectEQARound","value","then","res","data","length","sort","a","b","reagent","name","listGroupReferenceResult","listReferenceResult","p","list","forEach","element","eqaSample","push","sample","resultConclusionList","handleChangeResult","result","dto","tubeID","handleChangeNote","note","handleConfirmUpdateResult","success","catch","err","error","resultValue","rowDataID","item","find","noteValue","handleChange","event","source","persist","isActive","target","checked","handleOKEditClose","shouldOpenConfirmationEditDialog","searchObject","blob","Blob","type","pageIndex","pageSize","content","onSelectEvent","handleDelete","handleClick","titleCell","generate","getTypeMethodName","typeMethod","map","index","renderColHeadFirst","text","title","renderHeadCells","backgroundColor","color","borderRightStyle","textAlign","renderSample","sttCell","width","code","listData","str","cellContentByMethod","reference","e","sampleID","el","resultCell","borderRightColor","referenceResult","cell","renderCells","i18n","contentCell","officialResultCell","officialResult","listResult","path","option","newValue","params","maxHeight","textTransform","renderRowHead","renderResultDetails"],"mappings":"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","sourcesContent":["import {\r\n  InputAdornment,\r\n  Input,\r\n  Grid,\r\n  Button,\r\n  Select, MenuItem,\r\n  TextField, Table, TableHead, TableRow,\r\n  FormControlLabel, Paper, TableContainer,\r\n  Checkbox, TableCell, FormControl, TableBody\r\n} from \"@material-ui/core\";\r\nimport shortid from \"shortid\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\r\nimport { searchByPage as getAllEQARound } from \"../EQARound/EQARoundService\";\r\n// import { getListHealthOrgEQARoundByEQARoundIdAndUser } from \"../EQAResultReportConclusion/EQAResultReportConclusionServices\";\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport { exportToExcel, getListGroupReferenceResultByRoundId, getEQASample, getResultConclusionEQARoundId, getListReferenceResultByRoundId } from \"./ReferenceResultsServices\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { saveAs } from 'file-saver';\r\nimport { toast } from \"react-toastify\";\r\nimport ReferenceResultsDialog from \"./ReferenceResultsDialog\"\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { getCurrentUser } from \"../User/UserService\"\r\nimport { updateResultReportConclusionBySampleTube } from \"../EQAResultReportConclusion/EQAResultReportConclusionServices\";\r\nimport { getEQASampleTubeResultConclusionDtoByHealthOrgEQARoundId } from \"../EQAResultReportConclusion/EQAResultReportConclusionServices\";\r\nimport { getAllResultByHealthOrgManagementEQARoundId, getResultReportById, getItemById } from \"../ResultsOfTheUnits/ResultsOfTheUnitsService\";\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit: 3\r\n});\r\nclass ReferenceResults extends React.Component {\r\n  state = {\r\n    sampleTubeResultConclusionList: [],\r\n    listEQARound: [],\r\n    currentRound: null,\r\n    healthOrgEQARoundList: [],\r\n    currentHealthOrgEQARound: null,\r\n    shouldOpenConfirmationDialog: false,\r\n    isFinalResult: false,\r\n    shouldOpenEQAResultReportDialog: false,\r\n    listSample: [],\r\n    isCheckUpdate: false,\r\n    shouldView: false\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentWillMount() {\r\n\r\n\r\n  }\r\n  componentDidMount() {\r\n    const searchObject = { pageIndex: 0, pageSize: 1000000 };\r\n    getAllEQARound(searchObject).then(res => {\r\n      this.setState({ listEQARound: res.data.content });\r\n    }, () => {\r\n\r\n    });\r\n  }\r\n\r\n  handleOpenConfirmationDialog = () => {\r\n    const { t } = this.props;\r\n    if (this.state.currentRound == null || this.state.currentRound.id == null) {\r\n      toast.warn(t(\"EQASampleSet.please_select_eqa_round\"))\r\n      return\r\n    }\r\n    this.setState({\r\n      shouldOpenConfirmationDialog: true\r\n    });\r\n  }\r\n  handleDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenConfirmationDialog: false,\r\n      shouldOpenEQAResultReportDialog: false,\r\n    }, () => {\r\n      this.handleSelectEQARound(this.state.currentRound)\r\n    });\r\n  };\r\n\r\n  handleSelectEQARound = value => {\r\n    if (value != null && value != \"\") {\r\n      getListGroupReferenceResultByRoundId(value.id).then(res => {\r\n        if (res.data != null && res.data.length > 0) {\r\n          res.data.sort((a, b) => (a.reagent.name > b.reagent.name) ? 1 : -1);\r\n        }\r\n\r\n        this.setState({\r\n          currentHealthOrgEQARound: null,\r\n          currentRound: value,\r\n          listGroupReferenceResult: res.data,\r\n        }, () => {\r\n          getListReferenceResultByRoundId(value.id).then(res => {\r\n            if (res.data != null && res.data.length > 0) {\r\n              res.data.sort((a, b) => (a.reagent.name > b.reagent.name) ? 1 : -1);\r\n            }\r\n            this.setState({\r\n              currentHealthOrgEQARound: null,\r\n              currentRound: value,\r\n              listReferenceResult: res.data,\r\n            }, () => {\r\n              getEQASample(value.id).then((data) => {\r\n                let p = {}\r\n                let listSample = []\r\n                let list = [...data.data]\r\n                list.forEach(element => {\r\n                  p = { ...element.eqaSample }\r\n                  listSample.push(p)\r\n                });\r\n                this.setState({ sample: null, listSample: list }, () => {\r\n                })\r\n\r\n              })\r\n              getResultConclusionEQARoundId(value.id).then(res => {\r\n                this.setState({\r\n                  currentHealthOrgEQARound: null,\r\n                  resultConclusionList: res.data,\r\n                  currentRound: value,\r\n                }, () => {\r\n                });\r\n              });\r\n            });\r\n          });\r\n        })\r\n      })\r\n\r\n\r\n    } else {\r\n      this.setState({\r\n        currentRound: null,\r\n        currentHealthOrgEQARound: null,\r\n        healthOrgEQARoundList: [],\r\n        listSample: []\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n\r\n  handleChangeResult = (result, id) => {\r\n    let { sampleTubeResultConclusionList } = this.state;\r\n    for (let dto of sampleTubeResultConclusionList) {\r\n      if (dto.tubeID === id) {\r\n        dto.result = result;\r\n      }\r\n    }\r\n    this.setState({\r\n      sampleTubeResultConclusionList\r\n    });\r\n  };\r\n\r\n  handleChangeNote = (note, id) => {\r\n    let { sampleTubeResultConclusionList } = this.state;\r\n    for (let dto of sampleTubeResultConclusionList) {\r\n      if (dto.tubeID === id) {\r\n        dto.note = note;\r\n      }\r\n    }\r\n    this.setState({\r\n      sampleTubeResultConclusionList\r\n    });\r\n  };\r\n\r\n  handleConfirmUpdateResult = () => {\r\n    const { t } = this.props;\r\n    const {\r\n      sampleTubeResultConclusionList,\r\n      currentHealthOrgEQARound\r\n    } = this.state;\r\n\r\n    if (sampleTubeResultConclusionList.length === 0) {\r\n      toast.warn(t(\"EQAResultReportConclusion.no_data\"));\r\n    } else {\r\n      updateResultReportConclusionBySampleTube(\r\n        sampleTubeResultConclusionList,\r\n        currentHealthOrgEQARound.id\r\n      )\r\n        .then(res => {\r\n          toast.success(t(\"EQAResultReportConclusion.update_result_success\"));\r\n        })\r\n        .catch(err => {\r\n          toast.error(t(\"EQAResultReportConclusion.update_result_error\"));\r\n        });\r\n    }\r\n    this.setState({\r\n      shouldOpenConfirmationDialog: false\r\n    });\r\n  };\r\n\r\n  resultValue = rowDataID => {\r\n    const item = this.state.sampleTubeResultConclusionList.find(\r\n      dto => dto.tubeID === rowDataID\r\n    );\r\n    if (typeof item != \"undefined\") {\r\n      return item.result != null ? item.result : \"\";\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  noteValue = rowDataID => {\r\n    const item = this.state.sampleTubeResultConclusionList.find(\r\n      dto => dto.tubeID === rowDataID\r\n    );\r\n    if (typeof item != \"undefined\") {\r\n      return item.note != null ? item.note : \"\";\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n    if (source === \"isFinalResult\") {\r\n      this.setState({ isFinalResult: event.target.checked })\r\n    }\r\n\r\n  };\r\n\r\n  handleOKEditClose = () => {\r\n    this.setState({\r\n      shouldOpenEQAResultReportDialog: false,\r\n      shouldOpenConfirmationDialog: false,\r\n      shouldOpenConfirmationEditDialog: false,\r\n    }, () => {\r\n      this.handleSelectEQARound(this.state.currentRound)\r\n    });\r\n    // this.setPage(0);\r\n  };\r\n\r\n  renderRowHead() {\r\n    let { onSelectEvent, handleDelete, handleClick } = this.props;\r\n    let { listGroupReferenceResult } = this.state;\r\n    let titleCell = null;\r\n    if (listGroupReferenceResult != null && listGroupReferenceResult.length > 0) {\r\n      listGroupReferenceResult.forEach(item => {\r\n        if (!titleCell) {\r\n          titleCell = <TableCell key={shortid.generate()} className=\"px-0\" align=\"left\">\r\n            {this.getTypeMethodName(item.typeMethod)}\r\n          </TableCell>\r\n        } else {\r\n          titleCell += <TableCell key={shortid.generate()} className=\"px-0\" align=\"left\" >\r\n            {this.getTypeMethodName(item.typeMethod)}\r\n          </TableCell>\r\n        }\r\n      });\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {listGroupReferenceResult.map((item, index) => this.renderColHeadFirst(item))}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  getTypeMethodName(text, type) {\r\n    let { t } = this.props;\r\n    if (type == 1) {\r\n      return text;\r\n    } else if (type == 2) {\r\n      return text;\r\n    } else if (type == 3) {\r\n      return text;\r\n    } else if (type == 4) {\r\n      return text;\r\n    } else if (type == 5) {\r\n      return t('ReferenceResults.conclusion');\r\n    }\r\n  }\r\n  renderColHeadFirst(item) {\r\n    if (item.reagent != null) {\r\n      item.title = this.getTypeMethodName(item.reagent.name, item.typeMethod);\r\n    } else {\r\n      item.title = this.getTypeMethodName(\"\", item.typeMethod);\r\n    }\r\n    //item.title = this.getTypeMethodName(item.reagent.name,item.typeMethod);\r\n    return (\r\n      this.renderHeadCells(item)\r\n    )\r\n  }\r\n  renderHeadCells(item) {\r\n    if (item == null) {\r\n      item = {};\r\n    }\r\n    // if(item.)\r\n    let titleCell = <TableCell style={{\r\n      backgroundColor: '#358600',\r\n      color: '#fff', borderRightStyle: \"solid\", textAlign: \"center\"\r\n    }}\r\n      key={shortid.generate()}\r\n      className=\"px-0\" align=\"left\" >\r\n      {item.title}\r\n    </TableCell>\r\n    return (\r\n      <React.Fragment>\r\n        {titleCell}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  renderResultDetails(sample, index) {\r\n    return (\r\n      <React.Fragment>\r\n        <TableRow>\r\n          {this.renderSample(sample, index)}\r\n        </TableRow>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  renderSample(item, index) {\r\n    let { t } = this.props\r\n    let sttCell = <TableCell className=\"px-0\" align=\"center\">\r\n      {index + 1}\r\n    </TableCell>\r\n    let titleCell = <TableCell className=\"px-0\" align=\"center\" style={{ textAlign: \"center\", width: \"40px\" }}>\r\n      {item ? item.code : ''}\r\n    </TableCell>\r\n\r\n    let { listReferenceResult, listGroupReferenceResult, resultConclusionList } = this.state;\r\n    let listData = []\r\n    let str = \"\"\r\n    let cellContentByMethod = [];\r\n    let reference = null\r\n    listReferenceResult.forEach(result => {\r\n      let content = null;\r\n      if (result != null && result.sample != null && item && item.id == result.sample.id) {\r\n        content = result\r\n        cellContentByMethod.push(content);\r\n\r\n      }\r\n\r\n    });\r\n    resultConclusionList && resultConclusionList.forEach(e => {\r\n      if (e != null && e.sampleID != null && item && item.id == e.sampleID) {\r\n        reference = e\r\n      }\r\n    })\r\n\r\n    if (cellContentByMethod.length == listGroupReferenceResult.length) {\r\n      listData = cellContentByMethod\r\n    }\r\n    if (cellContentByMethod.length < listGroupReferenceResult.length) {\r\n      listGroupReferenceResult.forEach(e => {\r\n        let p = null;\r\n        cellContentByMethod.forEach(el => {\r\n          if (e.reagent.id == el.reagent.id) {\r\n            p = el\r\n          }\r\n        })\r\n        listData.push(p)\r\n      })\r\n    }\r\n\r\n\r\n    let resultCell = <TableCell key={shortid.generate()} className=\"px-0\" align=\"center\" style={{ borderRightStyle: \"solid\", borderRightColor: \"white\", width: \"100px\" }}>\r\n      {\r\n        reference?.referenceResult == 1 ? (\r\n          <small className=\"border-radius-4  text-white px-8 py-2 \" style={{ backgroundColor: \"#f44336\" }}>\r\n\r\n            {t('result.positive')}\r\n\r\n          </small>\r\n        ) : (\r\n            reference?.referenceResult == -2 ? (\r\n              <small className=\"border-radius-4 bg-light-gray px-8 py-2 \">{t('result.none')}</small>\r\n            ) : (\r\n                reference?.referenceResult == -1 ? (\r\n                  <small className=\"border-radius-4  px-8 py-2 \" style={{ backgroundColor: \"#3366FF\" }}>{t('result.negative')}</small>\r\n                ) : (\r\n                    reference?.referenceResult == 0 ? (\r\n                      <small className=\"border-radius-4 bg-light-gray px-8 py-2 \">{t('result.indertermine')}</small>\r\n                    ) : (\r\n                        reference?.referenceResult == -3 ? (\r\n                          <small className=\"border-radius-4 bg-light-gray px-8 py-2 \">{t('result.noEvaluate')}</small>\r\n\r\n                        ) : (\r\n\r\n                            (\"\")\r\n                          )\r\n                      )\r\n                  )\r\n              )\r\n\r\n          )\r\n      }\r\n    </TableCell>\r\n    return (\r\n      <React.Fragment>\r\n        {titleCell}\r\n        {listData.map((cell, index) => this.renderCells(cell, index))}\r\n        {resultCell}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  renderCells(item) {\r\n    let { t, i18n } = this.props;\r\n    if (item == null) {\r\n      item = {};\r\n    }\r\n    let contentCell = <TableCell key={shortid.generate()} className=\"px-0\" align=\"center\" style={{ borderRightStyle: \"solid\", borderRightColor: \"white\" }}>\r\n      {\r\n        item.referenceResult == 1 ? (\r\n          <small className=\"border-radius-4  text-white px-8 py-2 \" style={{ backgroundColor: \"#f44336\" }}>\r\n\r\n            {t('result.positive')}\r\n\r\n          </small>\r\n        ) : (\r\n            item.referenceResult == -2 ? (\r\n              <small className=\"border-radius-4 bg-light-gray px-8 py-2 \">{t('result.none')}</small>\r\n            ) : (\r\n                item.referenceResult == -1 ? (\r\n                  <small className=\"border-radius-4  px-8 py-2 \" style={{ backgroundColor: \"#3366FF\" }}>{t('result.negative')}</small>\r\n                ) : (\r\n                    item.referenceResult == 0 ? (\r\n                      <small className=\"border-radius-4 bg-light-gray px-8 py-2 \">{t('result.indertermine')}</small>\r\n                    ) : (\r\n                        item.referenceResult == -3 ? (\r\n                          <small className=\"border-radius-4 bg-light-gray px-8 py-2 \">{t('result.noEvaluate')}</small>\r\n\r\n                        ) : (\r\n\r\n                            (\"\")\r\n                          )\r\n                      )\r\n                  )\r\n              )\r\n\r\n          )\r\n      }\r\n    </TableCell>\r\n\r\n    let officialResultCell = <TableCell key={shortid.generate()} className=\"px-0\" align=\"center\" style={{ borderRightStyle: \"solid\", borderRightColor: \"white\" }}>\r\n      {\r\n        item.officialResult == 1 ? (\r\n          <small className=\"border-radius-4  text-white px-8 py-2 \" style={{ backgroundColor: \"#f44336\" }}>\r\n\r\n            {t('result.positive')}\r\n\r\n          </small>\r\n        ) : (\r\n\r\n\r\n            item.officialResult == -2 ? (\r\n              <small className=\"border-radius-4 bg-light-gray px-8 py-2 \">{t('result.none')}</small>\r\n            ) : (\r\n                item.officialResult == -1 ? (\r\n                  <small className=\"border-radius-4  px-8 py-2 \" style={{ backgroundColor: \"#3366FF\" }}>{t('result.negative')}</small>\r\n                ) : (\r\n                    item.officialResult == 0 ? (\r\n                      <small className=\"border-radius-4 bg-light-gray px-8 py-2 \">{t('result.indertermine')}</small>\r\n                    ) : (\r\n                        item.officialResult == -3 ? (\r\n                          <small className=\"border-radius-4 bg-light-gray px-8 py-2 \">{t('result.noEvaluate')}</small>\r\n\r\n                        ) : (\r\n\r\n                            (\"\")\r\n                          )\r\n                      )\r\n                  )\r\n              )\r\n\r\n          )\r\n      }\r\n    </TableCell>\r\n    return (\r\n      <React.Fragment>\r\n        {contentCell}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  exportToExcel = () => {\r\n    const { t } = this.props;\r\n    let searchObject = {}\r\n    if (this.state.currentRound == null || this.state.currentRound.id == \"\") {\r\n      toast.warn(t(\"EQASampleSet.please_select_eqa_round\"))\r\n      return\r\n    }\r\n    exportToExcel(this.state.currentRound ? this.state.currentRound.id : \"\").then((res) => {\r\n      let blob = new Blob([res.data], {\r\n        type:\r\n          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n      })\r\n      saveAs(blob, 'EQAResultReport.xlsx')\r\n    })\r\n      .catch((err) => {\r\n      })\r\n  }\r\n  render() {\r\n    const { t, i18n } = this.props;\r\n\r\n    const {\r\n      listEQARound,\r\n      currentRound,\r\n      sampleTubeResultConclusionList,\r\n      healthOrgEQARoundList,\r\n      currentHealthOrgEQARound, resultConclusionList,\r\n      shouldOpenConfirmationDialog, listGroupReferenceResult,\r\n      isFinalResult, listSample, listResult, listReferenceResult\r\n    } = this.state;\r\n\r\n\r\n    return (\r\n      <div className=\"m-sm-30\">\r\n        <div className=\"mb-sm-30\">\r\n          <Helmet>\r\n            <title>\r\n              {t(\"ReferenceResults.title\")} | {t(\"web_site\")}\r\n            </title>\r\n          </Helmet>\r\n          <Breadcrumb\r\n            routeSegments={[{ name: t(\"ReportResult.title\"), path: \"/directory/apartment\" }, { name: t(\"ReferenceResults.title\") }]}\r\n          />\r\n        </div>\r\n        <Grid container spacing={2}>\r\n          {this.state.shouldOpenConfirmationDialog && (\r\n            <ReferenceResultsDialog t={t} i18n={i18n}\r\n              open={this.state.shouldOpenConfirmationDialog}\r\n              handleClose={this.handleDialogClose}\r\n              roundId={this.state.currentRound.id}\r\n              resultConclusionLists={this.state.resultConclusionList ? this.state.resultConclusionList : []}\r\n              handleOKEditClose={this.handleOKEditClose}\r\n              listGroupReferenceResult={this.state.listGroupReferenceResult}\r\n              listReferenceResult={this.state.listReferenceResult}\r\n              listSample={this.state.listSample}\r\n            />\r\n          )}\r\n          <Grid item md={4} sm={4} xs={4}>\r\n            <Autocomplete\r\n              size=\"small\"\r\n              id=\"combo-box\"\r\n              options={listEQARound}\r\n              className=\"flex-end\"\r\n              getOptionLabel={option =>\r\n                option.code != null && typeof option.code != \"undefined\"\r\n                  ? option.code\r\n                  : \"\"\r\n              }\r\n              onChange={(event, newValue) =>\r\n                this.handleSelectEQARound(newValue)\r\n              }\r\n              value={currentRound}\r\n              renderInput={params => (\r\n                <TextField\r\n                  {...params}\r\n                  label={t(\"EQAResultReportConclusion.select_eqa_round\")}\r\n                  variant=\"outlined\"\r\n                />\r\n              )}\r\n            />\r\n          </Grid>\r\n\r\n          {/* <Grid item md={4} sm={4} xs={12}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={this.handleOpenConfirmationDialog}\r\n              >\r\n                {t(\"EQAResultReportConclusion.update_result\")}\r\n              </Button>\r\n          </Grid> */}\r\n          <Grid item md={8} sm={8} xs={8} spacing={2}>\r\n            <Button\r\n              className =\"mr-16 mb-16\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={this.handleOpenConfirmationDialog}\r\n            >\r\n              {t(\"EQAResultReportConclusion.update_result\")}\r\n            </Button>\r\n            <Button\r\n              className=\"mb-16\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={this.exportToExcel}\r\n            >\r\n              {t('general.exportToExcel')}\r\n            </Button>\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            {this.state.listSample.length == 0 && (<div>\r\n              {/* <h3>{t(\"EQAResultReportConclusion.no_data\")}</h3> */}\r\n            </div>)}\r\n            <div>\r\n              {(this.state.listSample && this.state.listSample.length != 0) && (<Paper>\r\n                <TableContainer style={{ maxHeight: \"1000px\", width: \"100%\" }}>\r\n                  <Table stickyHeader aria-label=\"sticky table\" style={{ width: \"100%\" }} >\r\n                    <TableHead style={{\r\n                      backgroundColor: '#358600',\r\n                      color: '#fff'\r\n                    }}>\r\n\r\n                      <TableRow>\r\n                        <TableCell style={{\r\n                          backgroundColor: '#358600', width: \"40px\",\r\n                          color: '#fff', borderRightStyle: \"solid\"\r\n                        }}\r\n                          rowSpan={2}>{t('ResultsOfTheUnits.set')}</TableCell>\r\n                        <TableCell style={{\r\n                          backgroundColor: '#358600',\r\n                          color: '#fff', textAlign: \"center\", textTransform: \"uppercase\", borderRightStyle: \"solid\"\r\n                        }}\r\n                          colSpan={listGroupReferenceResult.length + 1}>{t('EqaResult.reagentName')}</TableCell>\r\n                      </TableRow>\r\n                      <TableRow>\r\n\r\n                        {\r\n                          (listGroupReferenceResult && this.renderRowHead())\r\n                        }\r\n                        <TableCell style={{\r\n                          backgroundColor: '#358600', width: \"100px\",\r\n                          color: '#fff', borderRightStyle: \"solid\"\r\n                        }}\r\n                          rowSpan={2}>{t('EQAResultReportConclusion.final_conclusion')}</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                      {\r\n                        (listSample && listSample.map((sample, index) => this.renderResultDetails(sample, index)))\r\n                      }\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              </Paper>)}\r\n            </div>\r\n\r\n            {/* <MaterialTable\r\n                title={t(\"EQAResultReportConclusion.title\")}\r\n                data={sampleTubeResultConclusionList}\r\n                columns={columns}\r\n                \r\n                options={{\r\n                  selection: false,\r\n                  actionsColumnIndex: -1,\r\n                  paging: false,\r\n                  search: false\r\n                }}\r\n                components={{\r\n                  Toolbar: props => <MTableToolbar {...props} />\r\n                }}\r\n              /> */}\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ReferenceResults;\r\n"]},"metadata":{},"sourceType":"module"}