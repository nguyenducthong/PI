{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2016 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { transformValueToString } from '../utils/data-utils';\nimport { getAttributeFunctor } from '../utils/scales-utils';\n/**\n * Format title by detault.\n * @param {Array} values List of values.\n * @returns {*} Formatted value or undefined.\n */\n\nfunction defaultTitleFormat(values) {\n  var value = getFirstNonEmptyValue(values);\n\n  if (value) {\n    return {\n      title: 'x',\n      value: transformValueToString(value.x)\n    };\n  }\n}\n/**\n * Format items by default.\n * @param {Array} values Array of values.\n * @returns {*} Formatted list of items.\n */\n\n\nfunction defaultItemsFormat(values) {\n  return values.map(function (v, i) {\n    if (v) {\n      return {\n        value: v.y,\n        title: i\n      };\n    }\n  });\n}\n/**\n * Get the first non-empty item from an array.\n * @param {Array} values Array of values.\n * @returns {*} First non-empty value or undefined.\n */\n\n\nfunction getFirstNonEmptyValue(values) {\n  return (values || []).find(function (v) {\n    return Boolean(v);\n  });\n}\n\nvar Crosshair = function (_PureComponent) {\n  _inherits(Crosshair, _PureComponent);\n\n  function Crosshair() {\n    _classCallCheck(this, Crosshair);\n\n    return _possibleConstructorReturn(this, (Crosshair.__proto__ || Object.getPrototypeOf(Crosshair)).apply(this, arguments));\n  }\n\n  _createClass(Crosshair, [{\n    key: '_renderCrosshairItems',\n\n    /**\n     * Render crosshair items (title + value for each series).\n     * @returns {*} Array of React classes with the crosshair values.\n     * @private\n     */\n    value: function _renderCrosshairItems() {\n      var _props = this.props,\n          values = _props.values,\n          itemsFormat = _props.itemsFormat;\n      var items = itemsFormat(values);\n\n      if (!items) {\n        return null;\n      }\n\n      return items.filter(function (i) {\n        return i;\n      }).map(function renderValue(item, i) {\n        return React.createElement('div', {\n          className: 'rv-crosshair__item',\n          key: 'item' + i\n        }, React.createElement('span', {\n          className: 'rv-crosshair__item__title'\n        }, item.title), ': ', React.createElement('span', {\n          className: 'rv-crosshair__item__value'\n        }, item.value));\n      });\n    }\n    /**\n     * Render crosshair title.\n     * @returns {*} Container with the crosshair title.\n     * @private\n     */\n\n  }, {\n    key: '_renderCrosshairTitle',\n    value: function _renderCrosshairTitle() {\n      var _props2 = this.props,\n          values = _props2.values,\n          titleFormat = _props2.titleFormat,\n          style = _props2.style;\n      var titleItem = titleFormat(values);\n\n      if (!titleItem) {\n        return null;\n      }\n\n      return React.createElement('div', {\n        className: 'rv-crosshair__title',\n        key: 'title',\n        style: style.title\n      }, React.createElement('span', {\n        className: 'rv-crosshair__title__title'\n      }, titleItem.title), ': ', React.createElement('span', {\n        className: 'rv-crosshair__title__value'\n      }, titleItem.value));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props3 = this.props,\n          children = _props3.children,\n          className = _props3.className,\n          values = _props3.values,\n          marginTop = _props3.marginTop,\n          marginLeft = _props3.marginLeft,\n          innerWidth = _props3.innerWidth,\n          innerHeight = _props3.innerHeight,\n          style = _props3.style;\n      var value = getFirstNonEmptyValue(values);\n\n      if (!value) {\n        return null;\n      }\n\n      var x = getAttributeFunctor(this.props, 'x');\n      var innerLeft = x(value);\n      var _props$orientation = this.props.orientation,\n          orientation = _props$orientation === undefined ? innerLeft > innerWidth / 2 ? 'left' : 'right' : _props$orientation;\n      var left = marginLeft + innerLeft;\n      var top = marginTop;\n      var innerClassName = 'rv-crosshair__inner rv-crosshair__inner--' + orientation;\n      return React.createElement('div', {\n        className: 'rv-crosshair ' + className,\n        style: {\n          left: left + 'px',\n          top: top + 'px'\n        }\n      }, React.createElement('div', {\n        className: 'rv-crosshair__line',\n        style: _extends({\n          height: innerHeight + 'px'\n        }, style.line)\n      }), React.createElement('div', {\n        className: innerClassName\n      }, children ? children : React.createElement('div', {\n        className: 'rv-crosshair__inner__content',\n        style: style.box\n      }, React.createElement('div', null, this._renderCrosshairTitle(), this._renderCrosshairItems()))));\n    }\n  }], [{\n    key: 'defaultProps',\n    get: function get() {\n      return {\n        titleFormat: defaultTitleFormat,\n        itemsFormat: defaultItemsFormat,\n        style: {\n          line: {},\n          title: {},\n          box: {}\n        }\n      };\n    }\n  }, {\n    key: 'propTypes',\n    get: function get() {\n      return {\n        className: PropTypes.string,\n        values: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.object])),\n        series: PropTypes.object,\n        innerWidth: PropTypes.number,\n        innerHeight: PropTypes.number,\n        marginLeft: PropTypes.number,\n        marginTop: PropTypes.number,\n        orientation: PropTypes.oneOf(['left', 'right']),\n        itemsFormat: PropTypes.func,\n        titleFormat: PropTypes.func,\n        style: PropTypes.shape({\n          line: PropTypes.object,\n          title: PropTypes.object,\n          box: PropTypes.object\n        })\n      };\n    }\n  }]);\n\n  return Crosshair;\n}(PureComponent);\n\nCrosshair.displayName = 'Crosshair';\nexport default Crosshair;","map":null,"metadata":{},"sourceType":"module"}