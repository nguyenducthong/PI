{"ast":null,"code":"import _toConsumableArray from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\CheckPoint\\\\CheckPoint.jsx\";\nimport React, { Component } from \"react\";\nimport { IconButton, Grid, Icon, TablePagination, Button, FormControl, MenuItem, Select, FormHelperText, InputLabel, Input, InputAdornment } from \"@material-ui/core\";\nimport MaterialTable, { MTableToolbar, Chip, MTableBody, MTableHeader } from 'material-table';\nimport { searchByDto, getItemById, search as searchPlanning, getEQARoundsByPlanning, checkPoint as checkPointHealthOrg, checkPointByHealthOrgEQARound } from \"./CheckPointService\";\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\nimport SearchIcon from '@material-ui/icons/Search';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { saveAs } from 'file-saver';\nimport { Link } from \"react-router-dom\";\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport { getCurrentUser, getListHealthOrgByUser } from \"../User/UserService\";\nimport CheckPointDialog from \"./CheckPointDialog\";\nimport { Helmet } from 'react-helmet';\nimport { toast } from \"react-toastify\";\ntoast.configure({\n  autoClose: 2000,\n  draggable: false,\n  limit: 3 //etc you get the idea\n\n});\n\nfunction MaterialButton(props) {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t,\n      i18n = _useTranslation.i18n;\n\n  var item = props.item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      return props.onSelect(item, 0);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(VisibilityIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 35\n    }\n  }))), props.isRoleAdmin && /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      return props.onSelect(item, 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 32\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, \"edit\")));\n}\n\nvar CheckPoint = /*#__PURE__*/function (_Component) {\n  _inherits(CheckPoint, _Component);\n\n  var _super = _createSuper(CheckPoint);\n\n  function CheckPoint() {\n    var _this;\n\n    _classCallCheck(this, CheckPoint);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      rowsPerPage: 10,\n      page: 0,\n      qualificationList: [],\n      item: {},\n      roundId: '',\n      listYear: [],\n      listEQARound: [],\n      listPlanning: [],\n      currentYear: new Date().getFullYear(),\n      shouldOpenViewDetailDialog: false,\n      shouldOpenConfirmationDialog: false,\n      selectAllItem: false,\n      selectedList: [],\n      totalElements: 0,\n      statusSentResults: null,\n      shouldOpenConfirmationDeleteAllDialog: false,\n      keyword: ''\n    };\n    _this.numSelected = 0;\n    _this.rowCount = 0;\n    _this.currentYear = new Date().getFullYear();\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"PlanningId\") {\n        _this.getEQARoundsByPlanning(event.target.value);\n\n        return;\n      }\n\n      if (source === \"roundId\") {\n        _this.handleChangeEQARound(event.target.value);\n\n        return;\n      }\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.setPage = function (page) {\n      _this.setState({\n        page\n      }, function () {\n        this.updatePageData();\n      });\n    };\n\n    _this.clearKeyword = function () {\n      _this.search();\n\n      _this.setState({\n        keyword: ''\n      }, function () {});\n    };\n\n    _this.handleTextChange = function (event) {\n      _this.setState({\n        keyword: event.target.value\n      }, function () {});\n    };\n\n    _this.handleKeyDownEnterSearch = function (e) {\n      if (e.key === 'Enter') {\n        _this.search();\n      }\n    };\n\n    _this.setRowsPerPage = function (event) {\n      _this.setState({\n        rowsPerPage: event.target.value,\n        page: 0\n      }, function () {\n        this.updatePageData();\n      });\n    };\n\n    _this.handleChangePage = function (event, newPage) {\n      _this.setPage(newPage);\n    };\n\n    _this.handleChangeEQARound = function (eQARoundIdSelected) {\n      if (eQARoundIdSelected != null && eQARoundIdSelected != '') {\n        _this.setState({\n          roundId: eQARoundIdSelected,\n          itemList: []\n        }, function () {\n          this.search();\n        });\n      }\n    };\n\n    _this.updatePageData = function () {\n      var searchObject = {};\n      searchObject.isCheckPoint = true;\n      searchObject.text = _this.state.keyword;\n      searchObject.pageIndex = _this.state.page + 1;\n      searchObject.pageSize = _this.state.rowsPerPage;\n      searchObject.roundId = _this.state.roundId;\n      searchObject.statusSentResults = _this.state.statusSentResults;\n      searchByDto(searchObject, _this.state.page, _this.state.rowsPerPage).then(function (_ref) {\n        var data = _ref.data;\n\n        _this.setState({\n          itemList: _toConsumableArray(data.content),\n          totalElements: data.totalElements\n        });\n      });\n    };\n\n    _this.handleDownload = function () {\n      var blob = new Blob([\"Hello, world!\"], {\n        type: \"text/plain;charset=utf-8\"\n      });\n      saveAs(blob, \"hello world.txt\");\n    };\n\n    _this.handleDialogClose = function () {\n      _this.setState({\n        shouldOpenViewDetailDialog: false,\n        shouldOpenConfirmationDialog: false,\n        shouldOpenConfirmationDeleteAllDialog: false\n      });\n    };\n\n    _this.handleOKEditClose = function () {\n      _this.setState({\n        shouldOpenViewDetailDialog: false,\n        shouldOpenConfirmationDialog: false\n      });\n\n      _this.updatePageData();\n    };\n\n    _this.handleDeleteResultsOfTheUnits = function (id) {\n      _this.setState({\n        id,\n        shouldOpenConfirmationDialog: true\n      });\n    };\n\n    _this.handleEditResultsOfTheUnits = function (item) {\n      getItemById(item.id).then(function (result) {\n        _this.setState({\n          item: result.data,\n          shouldOpenViewDetailDialog: true\n        });\n      });\n    };\n\n    _this.getEQARoundsByPlanning = function (PlanningId) {\n      _this.setState({\n        PlanningId: PlanningId,\n        listEQARound: [],\n        itemList: []\n      }, function () {\n        var _this2 = this;\n\n        getEQARoundsByPlanning(PlanningId).then(function (_ref2) {\n          var data = _ref2.data;\n\n          if (data != null && data.length > 0) {\n            _this2.setState({\n              listEQARound: _toConsumableArray(data),\n              roundId: data[0].id\n            }, function () {\n              this.handleChangeEQARound(data[0].id);\n            });\n          }\n        });\n      });\n    };\n\n    _this.handleEditItem = function (item) {\n      _this.setState({\n        item: item,\n        shouldOpenViewDetailDialog: true\n      });\n    };\n\n    _this.checkPoint = function () {\n      var t = _this.props.t;\n\n      if (_this.state.roundId == null || _this.state.roundId == \"\") {\n        toast.warn(t(\"EQASampleSet.please_select_eqa_round\"));\n        return;\n      }\n\n      var healthOrg = \"00000000-0000-0000-0000-000000000000\";\n      checkPointHealthOrg(_this.state.roundId, healthOrg).then(function (res) {\n        window.location.reload();\n      }); // this.render()\n    };\n\n    return _this;\n  }\n\n  _createClass(CheckPoint, [{\n    key: \"search\",\n    value: function search() {\n      this.setState({\n        page: 0\n      }, function () {\n        var _this3 = this;\n\n        var searchObject = {};\n        searchObject.isCheckPoint = true;\n        searchObject.text = this.state.keyword;\n        searchObject.pageIndex = this.state.page + 1;\n        searchObject.pageSize = this.state.rowsPerPage;\n        searchObject.roundId = this.state.roundId;\n        searchObject.statusSentResults = this.state.statusSentResults;\n        searchByDto(searchObject, this.state.page, this.state.rowsPerPage).then(function (_ref3) {\n          var data = _ref3.data;\n\n          _this3.setState({\n            itemList: _toConsumableArray(data.content),\n            totalElements: data.totalElements\n          });\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this4 = this;\n\n      var searchObject = {\n        pageIndex: 1,\n        pageSize: 100\n      };\n      searchPlanning(searchObject).then(function (_ref4) {\n        var data = _ref4.data;\n\n        _this4.setState({\n          listPlanning: _toConsumableArray(data.content)\n        });\n      }); // this.search();\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this5 = this;\n\n      getCurrentUser().then(function (res) {\n        var checkRoleAdmin = false;\n        res.data.roles.forEach(function (el) {\n          if (el.name == \"ROLE_ADMIN\" || el.authority == \"ROLE_ADMIN\") {\n            checkRoleAdmin = true;\n          }\n\n          if (el.name == \"ROLE_HEALTH_ORG\" || el.authority == \"ROLE_HEALTH_ORG\") {\n            _this5.setState({\n              statusSentResults: true\n            }, function () {\n              _this5.search();\n            });\n          } else {\n            _this5.search();\n          }\n\n          if (checkRoleAdmin) {\n            _this5.setState({\n              isRoleAdmin: true,\n              isView: true\n            });\n          }\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var _this$props = this.props,\n          t = _this$props.t,\n          i18n = _this$props.i18n;\n      var _this$state = this.state,\n          hasErrorCurrentYear = _this$state.hasErrorCurrentYear,\n          hasErrorRound = _this$state.hasErrorRound,\n          currentYear = _this$state.currentYear,\n          listYear = _this$state.listYear,\n          listPlanning = _this$state.listPlanning,\n          rowsPerPage = _this$state.rowsPerPage,\n          page = _this$state.page,\n          totalElements = _this$state.totalElements,\n          itemList = _this$state.itemList,\n          listEQARound = _this$state.listEQARound,\n          PlanningId = _this$state.PlanningId,\n          roundId = _this$state.roundId,\n          keyword = _this$state.keyword,\n          item = _this$state.item,\n          shouldOpenConfirmationDialog = _this$state.shouldOpenConfirmationDialog,\n          shouldOpenViewDetailDialog = _this$state.shouldOpenViewDetailDialog,\n          isRoleAdmin = _this$state.isRoleAdmin,\n          shouldOpenConfirmationDeleteAllDialog = _this$state.shouldOpenConfirmationDeleteAllDialog;\n      var title = t('ResultsOfTheUnits.list_unit') + \" (\" + totalElements + \" \" + t('ResultsOfTheUnits.unit') + \")\";\n      var columns = [{\n        title: t(\"viewDetail\"),\n        field: \"custom\",\n        align: \"center\",\n        width: \"50\",\n        headerStyle: {\n          minWidth: \"150px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\"\n        },\n        cellStyle: {\n          minWidth: \"150px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(MaterialButton, {\n            item: rowData,\n            isRoleAdmin: _this6.state.isRoleAdmin,\n            onSelect: function onSelect(rowData, method) {\n              if (method === 0) {\n                getItemById(rowData.id).then(function (_ref5) {\n                  var data = _ref5.data;\n\n                  _this6.setState({\n                    item: data,\n                    healthOrgRoundId: rowData.id,\n                    shouldOpenViewDetailDialog: true\n                  });\n                });\n              } else if (method === 1) {\n                if (_this6.state.roundId == null || _this6.state.roundId == \"\") {\n                  toast.warn(t(\"EQASampleSet.please_select_eqa_round\"));\n                  return;\n                }\n\n                checkPointHealthOrg(_this6.state.roundId, rowData.id).then(function (res) {\n                  window.location.reload();\n                });\n              } else {\n                alert('Call Selected Here:' + rowData.id);\n              }\n            },\n            __self: _this6,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 36\n            }\n          });\n        }\n      }, {\n        title: t(\"ResultsOfTheUnits.STT\"),\n        width: \"50\",\n        align: \"left\",\n        headerStyle: {\n          minWidth: \"150px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\"\n        },\n        cellStyle: {\n          minWidth: \"150px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        render: function render(rowData) {\n          return page * rowsPerPage + (rowData.tableData.id + 1);\n        }\n      }, {\n        title: t(\"ResultsOfTheUnits.health_org_code\"),\n        field: \"healthOrg.code\",\n        align: \"left\",\n        width: \"150\",\n        headerStyle: {\n          minWidth: \"150px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\"\n        },\n        cellStyle: {\n          minWidth: \"150px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        }\n      }, {\n        title: t(\"ResultsOfTheUnits.health_org_name\"),\n        field: \"healthOrg.name\",\n        align: \"left\",\n        width: \"250\",\n        headerStyle: {\n          minWidth: \"150px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\"\n        },\n        cellStyle: {\n          minWidth: \"150px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        }\n      }, // { title: t(\"ResultsOfTheUnits.set\"), field: \"sampleSet.name\", align: \"left\", width: \"150\" },\n      // {\n      //     title: t(\"ResultsOfTheUnits.hasResult.title\"), field: \"hasResult\", align: \"left\", width: \"150\",\n      //     render: rowData =>\n      //         rowData.hasResult == true ? (\n      //             <small className=\"border-radius-4 bg-primary text-white px-8 py-2 \">\n      //                 {t('ResultsOfTheUnits.hasResult.true')}\n      //             </small>\n      //         ) : (\n      //                 <small className=\"border-radius-4 bg-light-gray px-8 py-2 \">\n      //                     {t('ResultsOfTheUnits.hasResult.false')}\n      //                 </small>\n      //             )\n      // },\n      {\n        title: t(\"ResultsOfTheUnits.point\"),\n        field: \"point\",\n        align: \"left\",\n        width: \"150\"\n      }];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        fullWidth: true,\n        error: hasErrorCurrentYear,\n        size: \"small\",\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"planning-simple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 29\n        }\n      }, t('ResultsOfTheUnits.eqaPlanning')), /*#__PURE__*/React.createElement(Select, {\n        label: t('ResultsOfTheUnits.eqaPlanning'),\n        value: PlanningId,\n        onChange: function onChange(PlanningId) {\n          return _this6.handleChange(PlanningId, 'PlanningId');\n        },\n        required: true,\n        inputProps: {\n          name: \"planning\",\n          id: \"planning-simple\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 29\n        }\n      }, listPlanning.map(function (item) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: item.id,\n          value: item.id,\n          __self: _this6,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 44\n          }\n        }, item.name);\n      })), hasErrorCurrentYear && /*#__PURE__*/React.createElement(FormHelperText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 53\n        }\n      }, t(\"general.errorMessages_required\")))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        fullWidth: true,\n        error: hasErrorRound,\n        size: \"small\",\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"round-simple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 29\n        }\n      }, t('ResultsOfTheUnits.round')), /*#__PURE__*/React.createElement(Select, {\n        label: t('ResultsOfTheUnits.round'),\n        value: roundId,\n        onChange: function onChange(roundId) {\n          return _this6.handleChange(roundId, 'roundId');\n        },\n        required: true,\n        inputProps: {\n          name: \"round\",\n          id: \"round-simple\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 29\n        }\n      }, listEQARound.map(function (item) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: item.id,\n          value: item.id,\n          __self: _this6,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 44\n          }\n        }, item.code);\n      })), hasErrorRound && /*#__PURE__*/React.createElement(FormHelperText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 47\n        }\n      }, t(\"general.errorMessages_required\")))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"standard-adornment-amount\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Input, {\n        label: t('EnterSearch'),\n        type: \"text\",\n        name: \"keyword\",\n        className: \"mt-8 stylePlaceholder\",\n        id: \"standard-adornment-amount\",\n        value: keyword,\n        onKeyDown: this.handleKeyDownEnterSearch,\n        onChange: this.handleTextChange,\n        placeholder: t(\"general.enterSearch\"),\n        startAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Link, {\n          to: \"#\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(SearchIcon, {\n          onClick: function onClick() {\n            return _this6.search(keyword);\n          },\n          style: {\n            position: \"absolute\",\n            top: \"0\",\n            right: \"0\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 45\n          }\n        }))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 29\n        }\n      }))), this.state.isRoleAdmin && /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"ml-32 align-bottom\",\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: this.checkPoint,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 25\n        }\n      }, t(\"ResultsOfTheUnits.checkPoint\"))), shouldOpenViewDetailDialog && /*#__PURE__*/React.createElement(CheckPointDialog, {\n        t: t,\n        i18n: i18n,\n        handleClose: this.handleDialogClose,\n        open: shouldOpenViewDetailDialog,\n        handleOKEditClose: this.handleOKEditClose,\n        item: item,\n        healthOrgRoundId: this.state.healthOrgRoundId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(MaterialTable, {\n        title: title,\n        data: itemList,\n        columns: columns,\n        parentChildData: function parentChildData(row, rows) {\n          var list = rows.find(function (a) {\n            return a.id === row.parentId;\n          });\n          return list;\n        },\n        options: {\n          selection: false,\n          actionsColumnIndex: -1,\n          paging: false,\n          search: false,\n          rowStyle: function rowStyle(rowData) {\n            return {\n              backgroundColor: rowData.tableData.id % 2 === 1 ? '#EEE' : '#FFF'\n            };\n          },\n          maxBodyHeight: '450px',\n          minBodyHeight: '370px',\n          headerStyle: {\n            backgroundColor: '#358600',\n            color: '#fff'\n          },\n          padding: 'dense',\n          toolbar: false\n        },\n        components: {\n          Toolbar: function Toolbar(props) {\n            return /*#__PURE__*/React.createElement(MTableToolbar, Object.assign({}, props, {\n              __self: _this6,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 508,\n                columnNumber: 37\n              }\n            }));\n          }\n        },\n        onSelectionChange: function onSelectionChange(rows) {\n          _this6.data = rows;\n        },\n        localization: {\n          body: {\n            emptyDataSourceMessage: \"\".concat(t(\"general.emptyDataMessageTable\"))\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(TablePagination, {\n        align: \"left\",\n        className: \"px-16\",\n        rowsPerPageOptions: [1, 2, 3, 5, 10, 25, 50, 100],\n        component: \"div\",\n        labelRowsPerPage: t('general.rows_per_page'),\n        labelDisplayedRows: function labelDisplayedRows(_ref6) {\n          var from = _ref6.from,\n              to = _ref6.to,\n              count = _ref6.count;\n          return \"\".concat(from, \"-\").concat(to, \" \").concat(t('general.of'), \" \").concat(count !== -1 ? count : \"more than \".concat(to));\n        },\n        count: totalElements,\n        rowsPerPage: rowsPerPage,\n        page: page,\n        backIconButtonProps: {\n          \"aria-label\": \"Previous Page\"\n        },\n        nextIconButtonProps: {\n          \"aria-label\": \"Next Page\"\n        },\n        onChangePage: this.handleChangePage,\n        onChangeRowsPerPage: this.setRowsPerPage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 25\n        }\n      }))));\n    }\n  }]);\n\n  return CheckPoint;\n}(Component);\n\nexport default CheckPoint;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/CheckPoint/CheckPoint.jsx"],"names":["React","Component","IconButton","Grid","Icon","TablePagination","Button","FormControl","MenuItem","Select","FormHelperText","InputLabel","Input","InputAdornment","MaterialTable","MTableToolbar","Chip","MTableBody","MTableHeader","searchByDto","getItemById","search","searchPlanning","getEQARoundsByPlanning","checkPoint","checkPointHealthOrg","checkPointByHealthOrgEQARound","Breadcrumb","ConfirmationDialog","useTranslation","withTranslation","Trans","SearchIcon","CloseIcon","saveAs","Link","VisibilityIcon","getCurrentUser","getListHealthOrgByUser","CheckPointDialog","Helmet","toast","configure","autoClose","draggable","limit","MaterialButton","props","t","i18n","item","onSelect","isRoleAdmin","CheckPoint","state","rowsPerPage","page","qualificationList","roundId","listYear","listEQARound","listPlanning","currentYear","Date","getFullYear","shouldOpenViewDetailDialog","shouldOpenConfirmationDialog","selectAllItem","selectedList","totalElements","statusSentResults","shouldOpenConfirmationDeleteAllDialog","keyword","numSelected","rowCount","handleChange","event","source","persist","target","value","handleChangeEQARound","setState","name","setPage","updatePageData","clearKeyword","handleTextChange","handleKeyDownEnterSearch","e","key","setRowsPerPage","handleChangePage","newPage","eQARoundIdSelected","itemList","searchObject","isCheckPoint","text","pageIndex","pageSize","then","data","content","handleDownload","blob","Blob","type","handleDialogClose","handleOKEditClose","handleDeleteResultsOfTheUnits","id","handleEditResultsOfTheUnits","result","PlanningId","length","handleEditItem","warn","healthOrg","res","window","location","reload","checkRoleAdmin","roles","forEach","el","authority","isView","hasErrorCurrentYear","hasErrorRound","title","columns","field","align","width","headerStyle","minWidth","paddingLeft","paddingRight","cellStyle","textAlign","render","rowData","method","healthOrgRoundId","alert","tableData","map","code","position","top","right","row","rows","list","find","a","parentId","selection","actionsColumnIndex","paging","rowStyle","backgroundColor","maxBodyHeight","minBodyHeight","color","padding","toolbar","Toolbar","body","emptyDataSourceMessage","from","to","count"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n    IconButton,\r\n    Grid,\r\n    Icon,\r\n    TablePagination,\r\n    Button,\r\n    FormControl,\r\n    MenuItem,\r\n    Select,\r\n    FormHelperText,\r\n    InputLabel,\r\n    Input,\r\n    InputAdornment\r\n} from \"@material-ui/core\";\r\nimport MaterialTable, { MTableToolbar, Chip, MTableBody, MTableHeader } from 'material-table';\r\nimport { searchByDto, getItemById, search as searchPlanning, getEQARoundsByPlanning, checkPoint as checkPointHealthOrg, checkPointByHealthOrgEQARound } from \"./CheckPointService\";\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { saveAs } from 'file-saver';\r\nimport { Link } from \"react-router-dom\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport { getCurrentUser, getListHealthOrgByUser } from \"../User/UserService\"\r\nimport CheckPointDialog from \"./CheckPointDialog\";\r\nimport { Helmet } from 'react-helmet';\r\nimport { toast } from \"react-toastify\";\r\ntoast.configure({\r\n    autoClose: 2000,\r\n    draggable: false,\r\n    limit: 3\r\n    //etc you get the idea\r\n});\r\nfunction MaterialButton(props) {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    const item = props.item;\r\n    return <div>\r\n        <IconButton onClick={() => props.onSelect(item, 0)}>\r\n            <Icon color=\"primary\"><VisibilityIcon /></Icon>\r\n        </IconButton>\r\n        {props.isRoleAdmin && (<IconButton onClick={() => props.onSelect(item, 1)}>\r\n            <Icon color=\"primary\">edit</Icon>\r\n        </IconButton>)}\r\n    </div>;\r\n}\r\n\r\nclass CheckPoint extends Component {\r\n    state = {\r\n        rowsPerPage: 10,\r\n        page: 0,\r\n        qualificationList: [],\r\n        item: {},\r\n        roundId: '',\r\n        listYear: [],\r\n        listEQARound: [],\r\n        listPlanning: [],\r\n        currentYear: new Date().getFullYear(),\r\n        shouldOpenViewDetailDialog: false,\r\n        shouldOpenConfirmationDialog: false,\r\n        selectAllItem: false,\r\n        selectedList: [],\r\n        totalElements: 0,\r\n        statusSentResults: null,\r\n        shouldOpenConfirmationDeleteAllDialog: false,\r\n        keyword: ''\r\n    };\r\n    numSelected = 0;\r\n    rowCount = 0;\r\n\r\n    currentYear = new Date().getFullYear();\r\n\r\n    handleChange = (event, source) => {\r\n        event.persist();\r\n        if (source === \"PlanningId\") {\r\n            this.getEQARoundsByPlanning(event.target.value);\r\n            return;\r\n        }\r\n        if (source === \"roundId\") {\r\n            this.handleChangeEQARound(event.target.value);\r\n            return;\r\n        }\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    };\r\n\r\n\r\n\r\n    setPage = page => {\r\n        this.setState({ page }, function () {\r\n            this.updatePageData();\r\n        })\r\n    };\r\n\r\n    clearKeyword = () => {\r\n        this.search()\r\n        this.setState({ keyword: '' }, function () {\r\n        });\r\n    };\r\n\r\n    handleTextChange = event => {\r\n        this.setState({ keyword: event.target.value }, function () {\r\n        });\r\n    };\r\n\r\n    handleKeyDownEnterSearch = e => {\r\n        if (e.key === 'Enter') {\r\n            this.search();\r\n        }\r\n    };\r\n\r\n    setRowsPerPage = event => {\r\n        this.setState({ rowsPerPage: event.target.value, page: 0 }, function () {\r\n            this.updatePageData();\r\n        });\r\n    };\r\n\r\n    handleChangePage = (event, newPage) => {\r\n        this.setPage(newPage);\r\n    };\r\n\r\n    handleChangeEQARound = (eQARoundIdSelected) => {\r\n        if (eQARoundIdSelected != null && eQARoundIdSelected != '') {\r\n            this.setState({ roundId: eQARoundIdSelected, itemList: [] }, function () {\r\n                this.search();\r\n            });\r\n        }\r\n    };\r\n\r\n    search() {\r\n        this.setState({ page: 0 }, function () {\r\n            var searchObject = {};\r\n            searchObject.isCheckPoint = true\r\n            searchObject.text = this.state.keyword;\r\n            searchObject.pageIndex = this.state.page + 1;\r\n            searchObject.pageSize = this.state.rowsPerPage;\r\n            searchObject.roundId = this.state.roundId;\r\n            searchObject.statusSentResults = this.state.statusSentResults;\r\n            searchByDto(searchObject, this.state.page, this.state.rowsPerPage).then(({ data }) => {\r\n                this.setState({ itemList: [...data.content], totalElements: data.totalElements })\r\n            });\r\n        });\r\n    }\r\n\r\n    updatePageData = () => {\r\n        var searchObject = {};\r\n        searchObject.isCheckPoint = true\r\n        searchObject.text = this.state.keyword;\r\n        searchObject.pageIndex = this.state.page + 1;\r\n        searchObject.pageSize = this.state.rowsPerPage;\r\n        searchObject.roundId = this.state.roundId;\r\n        searchObject.statusSentResults = this.state.statusSentResults;\r\n        searchByDto(searchObject, this.state.page, this.state.rowsPerPage).then(({ data }) => {\r\n            this.setState({ itemList: [...data.content], totalElements: data.totalElements })\r\n        });\r\n    };\r\n\r\n    handleDownload = () => {\r\n        var blob = new Blob([\"Hello, world!\"], { type: \"text/plain;charset=utf-8\" });\r\n        saveAs(blob, \"hello world.txt\");\r\n    }\r\n    handleDialogClose = () => {\r\n        this.setState({\r\n            shouldOpenViewDetailDialog: false,\r\n            shouldOpenConfirmationDialog: false,\r\n            shouldOpenConfirmationDeleteAllDialog: false\r\n        });\r\n    };\r\n\r\n    handleOKEditClose = () => {\r\n        this.setState({\r\n            shouldOpenViewDetailDialog: false,\r\n            shouldOpenConfirmationDialog: false\r\n        });\r\n        this.updatePageData();\r\n    };\r\n\r\n    handleDeleteResultsOfTheUnits = id => {\r\n        this.setState({\r\n            id,\r\n            shouldOpenConfirmationDialog: true\r\n        });\r\n    };\r\n\r\n    handleEditResultsOfTheUnits = item => {\r\n        getItemById(item.id).then((result) => {\r\n            this.setState({\r\n                item: result.data,\r\n                shouldOpenViewDetailDialog: true\r\n            });\r\n        });\r\n    };\r\n\r\n    getEQARoundsByPlanning = PlanningId => {\r\n        this.setState({ PlanningId: PlanningId, listEQARound: [], itemList: [] }, function () {\r\n            getEQARoundsByPlanning(PlanningId).then(({ data }) => {\r\n                if (data != null && data.length > 0) {\r\n                    this.setState({ listEQARound: [...data], roundId: data[0].id }, function () {\r\n                        this.handleChangeEQARound(data[0].id);\r\n                    });\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        var searchObject = { pageIndex: 1, pageSize: 100 };\r\n        searchPlanning(searchObject).then(({ data }) => {\r\n            this.setState({ listPlanning: [...data.content] });\r\n        });\r\n        // this.search();\r\n    }\r\n    componentWillMount() {\r\n        getCurrentUser().then(res => {\r\n            let checkRoleAdmin = false\r\n            res.data.roles.forEach(el => {\r\n                if (el.name == \"ROLE_ADMIN\" || el.authority == \"ROLE_ADMIN\") {\r\n                    checkRoleAdmin = true\r\n                }\r\n                if(el.name == \"ROLE_HEALTH_ORG\" || el.authority == \"ROLE_HEALTH_ORG\"){\r\n                    this.setState({statusSentResults : true},()=>{\r\n                        this.search();\r\n                    })\r\n                }else{\r\n                    this.search();\r\n                }\r\n                if (checkRoleAdmin) {\r\n                    this.setState({ isRoleAdmin: true, isView: true })\r\n                }\r\n            })\r\n        })\r\n    }\r\n    handleEditItem = item => {\r\n        this.setState({\r\n            item: item,\r\n            shouldOpenViewDetailDialog: true\r\n        });\r\n    };\r\n    checkPoint = () => {\r\n        let { t } = this.props;\r\n        if (this.state.roundId == null || this.state.roundId == \"\") {\r\n            toast.warn(t(\"EQASampleSet.please_select_eqa_round\"))\r\n            return\r\n        }\r\n        let healthOrg = \"00000000-0000-0000-0000-000000000000\";\r\n        checkPointHealthOrg(this.state.roundId, healthOrg).then(res => {\r\n            window.location.reload();\r\n        })\r\n        // this.render()\r\n    }\r\n    render() {\r\n        const { t, i18n } = this.props;\r\n        let {\r\n            hasErrorCurrentYear,\r\n            hasErrorRound,\r\n            currentYear,\r\n            listYear,\r\n            listPlanning,\r\n            rowsPerPage,\r\n            page,\r\n            totalElements,\r\n            itemList,\r\n            listEQARound,\r\n            PlanningId,\r\n            roundId,\r\n            keyword,\r\n            item,\r\n            shouldOpenConfirmationDialog,\r\n            shouldOpenViewDetailDialog, isRoleAdmin,\r\n            shouldOpenConfirmationDeleteAllDialog\r\n        } = this.state;\r\n\r\n        let title = t('ResultsOfTheUnits.list_unit') + \" (\" + totalElements + \" \" + t('ResultsOfTheUnits.unit') + \")\";\r\n\r\n        let columns = [\r\n            {\r\n                title: t(\"viewDetail\"),\r\n                field: \"custom\",\r\n                align: \"center\",\r\n                width: \"50\",\r\n                headerStyle: {\r\n                    minWidth: \"150px\",\r\n                    paddingLeft: \"10px\",\r\n                    paddingRight: \"0px\",\r\n                },\r\n                cellStyle: {\r\n                    minWidth: \"150px\",\r\n                    paddingLeft: \"10px\",\r\n                    paddingRight: \"0px\",\r\n                    textAlign: \"left\",\r\n                },\r\n                render: rowData => <MaterialButton item={rowData} isRoleAdmin={this.state.isRoleAdmin}\r\n                    onSelect={(rowData, method) => {\r\n                        if (method === 0) {\r\n                            getItemById(rowData.id).then(({ data }) => {\r\n                                this.setState({\r\n                                    item: data,\r\n                                    healthOrgRoundId: rowData.id,\r\n                                    shouldOpenViewDetailDialog: true\r\n                                });\r\n                            })\r\n                        } else if (method === 1) {\r\n                            if (this.state.roundId == null || this.state.roundId == \"\") {\r\n                                toast.warn(t(\"EQASampleSet.please_select_eqa_round\"))\r\n                                return\r\n                            }\r\n                            checkPointHealthOrg(this.state.roundId, rowData.id).then(res => {\r\n                                window.location.reload();\r\n                            })\r\n\r\n                        } else {\r\n                            alert('Call Selected Here:' + rowData.id);\r\n                        }\r\n                    }}\r\n                />\r\n            },\r\n            {\r\n                title: t(\"ResultsOfTheUnits.STT\"), width: \"50\", align: \"left\",\r\n                headerStyle: {\r\n                    minWidth: \"150px\",\r\n                    paddingLeft: \"10px\",\r\n                    paddingRight: \"0px\",\r\n                },\r\n                cellStyle: {\r\n                    minWidth: \"150px\",\r\n                    paddingLeft: \"10px\",\r\n                    paddingRight: \"0px\",\r\n                    textAlign: \"left\",\r\n                },\r\n                render: rowData => ((page) * rowsPerPage) + (rowData.tableData.id + 1)\r\n            },\r\n            {\r\n                title: t(\"ResultsOfTheUnits.health_org_code\"), field: \"healthOrg.code\", align: \"left\", width: \"150\",\r\n                headerStyle: {\r\n                    minWidth: \"150px\",\r\n                    paddingLeft: \"10px\",\r\n                    paddingRight: \"0px\",\r\n                },\r\n                cellStyle: {\r\n                    minWidth: \"150px\",\r\n                    paddingLeft: \"10px\",\r\n                    paddingRight: \"0px\",\r\n                    textAlign: \"left\",\r\n                },\r\n            },\r\n            {\r\n                title: t(\"ResultsOfTheUnits.health_org_name\"), field: \"healthOrg.name\", align: \"left\", width: \"250\",\r\n                headerStyle: {\r\n                    minWidth: \"150px\",\r\n                    paddingLeft: \"10px\",\r\n                    paddingRight: \"0px\",\r\n                },\r\n                cellStyle: {\r\n                    minWidth: \"150px\",\r\n                    paddingLeft: \"10px\",\r\n                    paddingRight: \"0px\",\r\n                    textAlign: \"left\",\r\n                },\r\n            },\r\n            // { title: t(\"ResultsOfTheUnits.set\"), field: \"sampleSet.name\", align: \"left\", width: \"150\" },\r\n            // {\r\n            //     title: t(\"ResultsOfTheUnits.hasResult.title\"), field: \"hasResult\", align: \"left\", width: \"150\",\r\n            //     render: rowData =>\r\n            //         rowData.hasResult == true ? (\r\n            //             <small className=\"border-radius-4 bg-primary text-white px-8 py-2 \">\r\n            //                 {t('ResultsOfTheUnits.hasResult.true')}\r\n            //             </small>\r\n            //         ) : (\r\n            //                 <small className=\"border-radius-4 bg-light-gray px-8 py-2 \">\r\n            //                     {t('ResultsOfTheUnits.hasResult.false')}\r\n            //                 </small>\r\n            //             )\r\n            // },\r\n            { title: t(\"ResultsOfTheUnits.point\"), field: \"point\", align: \"left\", width: \"150\" },\r\n        ];\r\n\r\n        return (\r\n            <div className=\"\">\r\n                {/* <Helmet>\r\n                    <title>{t(\"ResultsOfTheUnits.title\")} | {t(\"web_site\")}</title>\r\n                </Helmet>\r\n                <div className=\"mb-sm-30\">\r\n                    <Breadcrumb routeSegments={[{ name: t(\"ReportResult.title\"), path: \"/directory/apartment\" },{ name: t('ResultsOfTheUnits.title') }]} />\r\n                </div> */}\r\n\r\n                <Grid container spacing={3}>\r\n                    <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                        <FormControl fullWidth={true} error={hasErrorCurrentYear} size=\"small\" variant=\"outlined\">\r\n                            <InputLabel htmlFor=\"planning-simple\">{t('ResultsOfTheUnits.eqaPlanning')}</InputLabel>\r\n                            <Select\r\n                                label={t('ResultsOfTheUnits.eqaPlanning')}\r\n                                value={PlanningId}\r\n                                onChange={PlanningId => (this.handleChange(PlanningId, 'PlanningId'))}\r\n                                required={true}\r\n                                inputProps={{\r\n                                    name: \"planning\",\r\n                                    id: \"planning-simple\"\r\n                                }}\r\n                            >\r\n                                {listPlanning.map(item => {\r\n                                    return <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>;\r\n                                })}\r\n                            </Select>\r\n                            {hasErrorCurrentYear && <FormHelperText>{t(\"general.errorMessages_required\")}</FormHelperText>}\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                        <FormControl fullWidth={true} error={hasErrorRound} size=\"small\" variant=\"outlined\">\r\n                            <InputLabel htmlFor=\"round-simple\">{t('ResultsOfTheUnits.round')}</InputLabel>\r\n                            <Select\r\n                                label={t('ResultsOfTheUnits.round')}\r\n                                value={roundId}\r\n                                onChange={roundId => (this.handleChange(roundId, 'roundId'))}\r\n                                required={true}\r\n                                inputProps={{\r\n                                    name: \"round\",\r\n                                    id: \"round-simple\"\r\n                                }}\r\n                            >\r\n                                {listEQARound.map(item => {\r\n                                    return <MenuItem key={item.id} value={item.id}>{item.code}</MenuItem>;\r\n                                })}\r\n                            </Select>\r\n                            {hasErrorRound && <FormHelperText>{t(\"general.errorMessages_required\")}</FormHelperText>}\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item lg={3} md={3} sm={6} xs={12}>\r\n                        <FormControl fullWidth>\r\n                            <InputLabel htmlFor=\"standard-adornment-amount\"></InputLabel>\r\n                            <Input\r\n                                label={t('EnterSearch')}\r\n                                type=\"text\"\r\n                                name=\"keyword\"\r\n                                className=\"mt-8 stylePlaceholder\"\r\n                                id=\"standard-adornment-amount\"\r\n                                value={keyword}\r\n                                onKeyDown={this.handleKeyDownEnterSearch}\r\n                                onChange={this.handleTextChange}\r\n                                placeholder={t(\"general.enterSearch\")}\r\n                                startAdornment={\r\n                                    <InputAdornment>\r\n                                        <Link to=\"#\">\r\n                                            <SearchIcon\r\n                                                onClick={() => this.search(keyword)}\r\n                                                style={{\r\n                                                    position: \"absolute\",\r\n                                                    top: \"0\",\r\n                                                    right: \"0\"\r\n                                                }}\r\n                                            />\r\n                                        </Link>\r\n                                    </InputAdornment>\r\n                                }\r\n                            />\r\n                        </FormControl>\r\n\r\n\r\n                    </Grid>\r\n                    {this.state.isRoleAdmin && (<Grid item lg={3} md={3} sm={6} xs={12}>\r\n                        <Button\r\n                            className=\"ml-32 align-bottom\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={this.checkPoint}\r\n                        >\r\n                            {t(\"ResultsOfTheUnits.checkPoint\")}\r\n                        </Button>\r\n                    </Grid>)}\r\n                    {shouldOpenViewDetailDialog && (\r\n                        <CheckPointDialog t={t} i18n={i18n}\r\n                            handleClose={this.handleDialogClose}\r\n                            open={shouldOpenViewDetailDialog}\r\n                            handleOKEditClose={this.handleOKEditClose}\r\n                            item={item}\r\n                            healthOrgRoundId={this.state.healthOrgRoundId}\r\n                        />\r\n                    )}\r\n                    <Grid item xs={12}>\r\n                        <MaterialTable\r\n                            title={title}\r\n                            data={itemList}\r\n                            columns={columns}\r\n                            parentChildData={(row, rows) => {\r\n                                var list = rows.find(a => a.id === row.parentId);\r\n                                return list;\r\n                            }}\r\n                            options={{\r\n                                selection: false,\r\n                                actionsColumnIndex: -1,\r\n                                paging: false,\r\n                                search: false,\r\n                                rowStyle: rowData => ({\r\n                                    backgroundColor: (rowData.tableData.id % 2 === 1) ? '#EEE' : '#FFF',\r\n                                }),\r\n                                maxBodyHeight: '450px',\r\n                                minBodyHeight: '370px',\r\n                                headerStyle: {\r\n                                    backgroundColor: '#358600',\r\n                                    color: '#fff',\r\n                                },\r\n                                padding: 'dense',\r\n                                toolbar: false\r\n                            }}\r\n                            components={{\r\n                                Toolbar: props => (\r\n                                    <MTableToolbar {...props} />\r\n                                ),\r\n                            }}\r\n                            onSelectionChange={(rows) => {\r\n                                this.data = rows;\r\n                            }}\r\n                            localization={{\r\n                                body: {\r\n                                emptyDataSourceMessage: `${t(\r\n                                    \"general.emptyDataMessageTable\"\r\n                                )}`,\r\n                                },\r\n                            }}\r\n                        />\r\n                        <TablePagination\r\n                            align=\"left\"\r\n                            className=\"px-16\"\r\n                            rowsPerPageOptions={[1, 2, 3, 5, 10, 25, 50, 100]}\r\n                            component=\"div\"\r\n                            labelRowsPerPage={t('general.rows_per_page')}\r\n                            labelDisplayedRows={({ from, to, count }) => `${from}-${to} ${t('general.of')} ${count !== -1 ? count : `more than ${to}`}`}\r\n                            count={totalElements}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            backIconButtonProps={{\r\n                                \"aria-label\": \"Previous Page\"\r\n                            }}\r\n                            nextIconButtonProps={{\r\n                                \"aria-label\": \"Next Page\"\r\n                            }}\r\n                            onChangePage={this.handleChangePage}\r\n                            onChangeRowsPerPage={this.setRowsPerPage}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CheckPoint;\r\n"]},"metadata":{},"sourceType":"module"}