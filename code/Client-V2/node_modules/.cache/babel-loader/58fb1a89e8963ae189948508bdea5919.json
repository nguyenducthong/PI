{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n\nfunction escapeForRegExp(query) {\n  return query.replace(/[-\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\nfunction markIt(input, query) {\n  if (query) {\n    var regex = RegExp(escapeForRegExp(query), 'gi');\n    input = input.replace(regex, '<mark>$&</mark>');\n  }\n\n  return {\n    __html: input\n  };\n}\n\nfunction filterSuggestions(query, suggestions, length, suggestionsFilter, noSuggestionsText) {\n  if (!suggestionsFilter) {\n    var regex = new RegExp(\"(?:^|\\\\s)\" + escapeForRegExp(query), 'i');\n\n    suggestionsFilter = function suggestionsFilter(item) {\n      return regex.test(item.name);\n    };\n  }\n\n  var filtered = suggestions.filter(function (item) {\n    return suggestionsFilter(item, query);\n  }).slice(0, length);\n\n  if (filtered.length === 0 && noSuggestionsText) {\n    filtered.push({\n      id: 0,\n      name: noSuggestionsText,\n      disabled: true,\n      disableMarkIt: true\n    });\n  }\n\n  return filtered;\n}\n\nvar Suggestions = /*@__PURE__*/function (superclass) {\n  function Suggestions(props) {\n    superclass.call(this, props);\n    this.state = {\n      options: filterSuggestions(this.props.query, this.props.suggestions, this.props.maxSuggestionsLength, this.props.suggestionsFilter, this.props.noSuggestionsText)\n    };\n  }\n\n  if (superclass) Suggestions.__proto__ = superclass;\n  Suggestions.prototype = Object.create(superclass && superclass.prototype);\n  Suggestions.prototype.constructor = Suggestions;\n\n  Suggestions.prototype.componentWillReceiveProps = function componentWillReceiveProps(newProps) {\n    this.setState({\n      options: filterSuggestions(newProps.query, newProps.suggestions, newProps.maxSuggestionsLength, newProps.suggestionsFilter, newProps.noSuggestionsText)\n    });\n  };\n\n  Suggestions.prototype.handleMouseDown = function handleMouseDown(item, e) {\n    // focus is shifted on mouse down but calling preventDefault prevents this\n    e.preventDefault();\n    this.props.addTag(item);\n  };\n\n  Suggestions.prototype.render = function render() {\n    var this$1 = this;\n\n    if (!this.props.expandable || !this.state.options.length) {\n      return null;\n    }\n\n    var options = this.state.options.map(function (item, i) {\n      var key = this$1.props.listboxId + \"-\" + i;\n      var classNames = [];\n\n      if (this$1.props.selectedIndex === i) {\n        classNames.push(this$1.props.classNames.suggestionActive);\n      }\n\n      if (item.disabled) {\n        classNames.push(this$1.props.classNames.suggestionDisabled);\n      }\n\n      return React.createElement('li', {\n        id: key,\n        key: key,\n        role: 'option',\n        className: classNames.join(' '),\n        'aria-disabled': item.disabled === true,\n        onMouseDown: this$1.handleMouseDown.bind(this$1, item)\n      }, item.disableMarkIt ? item.name : React.createElement('span', {\n        dangerouslySetInnerHTML: markIt(item.name, this$1.props.query, item.markInput)\n      }));\n    });\n    return React.createElement('div', {\n      className: this.props.classNames.suggestions\n    }, React.createElement('ul', {\n      role: 'listbox',\n      id: this.props.listboxId\n    }, options));\n  };\n\n  return Suggestions;\n}(React.Component);\n\nmodule.exports = Suggestions;","map":null,"metadata":{},"sourceType":"script"}