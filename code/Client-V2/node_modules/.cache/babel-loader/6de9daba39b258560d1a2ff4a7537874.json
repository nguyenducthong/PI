{"ast":null,"code":"import _toConsumableArray from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport Mock from \"../mock\";\nimport shortId from \"shortid\";\nimport ConstantList from \"../../app/appConfig\";\nvar NotificationDB = {\n  list: [{\n    id: shortId.generate(),\n    heading: \"Message\",\n    icon: {\n      name: \"chat\",\n      color: \"primary\"\n    },\n    timestamp: 1570702802573,\n    title: \"New message from Devid\",\n    subtitle: \"Hello, Let's chit chat...\",\n    path: \"chat\"\n  }, {\n    id: shortId.generate(),\n    heading: \"Alert\",\n    icon: {\n      name: \"notifications\",\n      color: \"error\"\n    },\n    timestamp: 1570702702573,\n    title: \"Server overloaded\",\n    subtitle: \"Traffice reached 2M\",\n    path: \"page-layouts/user-profile\"\n  }, {\n    id: shortId.generate(),\n    heading: \"Message\",\n    icon: {\n      name: \"chat\",\n      color: \"primary\"\n    },\n    timestamp: 1570502502573,\n    title: \"New message from Goustove\",\n    subtitle: \"Hello, Let's chit chat...\",\n    path: \"chat\"\n  }]\n};\nMock.onGet(ConstantList.ROOT_PATH + \"api/notification\").reply(function (config) {\n  var response = NotificationDB.list;\n  return [200, response];\n});\nMock.onPost(ConstantList.ROOT_PATH + \"api/notification/add\").reply(function (config) {\n  var response = NotificationDB.list;\n  return [200, response];\n});\nMock.onPost(ConstantList.ROOT_PATH + \"api/notification/delete\").reply(function (config) {\n  var _JSON$parse = JSON.parse(config.data),\n      id = _JSON$parse.id; // console.log(id);\n\n\n  var response = NotificationDB.list.filter(function (notification) {\n    return notification.id !== id;\n  });\n  NotificationDB.list = _toConsumableArray(response);\n  return [200, response];\n});\nMock.onPost(ConstantList.ROOT_PATH + \"api/notification/delete-all\").reply(function (config) {\n  NotificationDB.list = [];\n  var response = NotificationDB.list;\n  return [200, response];\n});","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/fake-db/db/notification.js"],"names":["Mock","shortId","ConstantList","NotificationDB","list","id","generate","heading","icon","name","color","timestamp","title","subtitle","path","onGet","ROOT_PATH","reply","config","response","onPost","JSON","parse","data","filter","notification"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE,CACJ;AACEC,IAAAA,EAAE,EAAEJ,OAAO,CAACK,QAAR,EADN;AAEEC,IAAAA,OAAO,EAAE,SAFX;AAGEC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE,MADF;AAEJC,MAAAA,KAAK,EAAE;AAFH,KAHR;AAOEC,IAAAA,SAAS,EAAE,aAPb;AAQEC,IAAAA,KAAK,EAAE,wBART;AASEC,IAAAA,QAAQ,EAAE,2BATZ;AAUEC,IAAAA,IAAI,EAAE;AAVR,GADI,EAaJ;AACET,IAAAA,EAAE,EAAEJ,OAAO,CAACK,QAAR,EADN;AAEEC,IAAAA,OAAO,EAAE,OAFX;AAGEC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE,eADF;AAEJC,MAAAA,KAAK,EAAE;AAFH,KAHR;AAOEC,IAAAA,SAAS,EAAE,aAPb;AAQEC,IAAAA,KAAK,EAAE,mBART;AASEC,IAAAA,QAAQ,EAAE,qBATZ;AAUEC,IAAAA,IAAI,EAAE;AAVR,GAbI,EAyBJ;AACET,IAAAA,EAAE,EAAEJ,OAAO,CAACK,QAAR,EADN;AAEEC,IAAAA,OAAO,EAAE,SAFX;AAGEC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE,MADF;AAEJC,MAAAA,KAAK,EAAE;AAFH,KAHR;AAOEC,IAAAA,SAAS,EAAE,aAPb;AAQEC,IAAAA,KAAK,EAAE,2BART;AASEC,IAAAA,QAAQ,EAAE,2BATZ;AAUEC,IAAAA,IAAI,EAAE;AAVR,GAzBI;AADe,CAAvB;AAyCAd,IAAI,CAACe,KAAL,CAAWb,YAAY,CAACc,SAAb,GAAuB,kBAAlC,EAAsDC,KAAtD,CAA4D,UAAAC,MAAM,EAAI;AACpE,MAAMC,QAAQ,GAAGhB,cAAc,CAACC,IAAhC;AACA,SAAO,CAAC,GAAD,EAAMe,QAAN,CAAP;AACD,CAHD;AAKAnB,IAAI,CAACoB,MAAL,CAAYlB,YAAY,CAACc,SAAb,GAAuB,sBAAnC,EAA2DC,KAA3D,CAAiE,UAAAC,MAAM,EAAI;AACzE,MAAMC,QAAQ,GAAGhB,cAAc,CAACC,IAAhC;AACA,SAAO,CAAC,GAAD,EAAMe,QAAN,CAAP;AACD,CAHD;AAKAnB,IAAI,CAACoB,MAAL,CAAYlB,YAAY,CAACc,SAAb,GAAuB,yBAAnC,EAA8DC,KAA9D,CAAoE,UAAAC,MAAM,EAAI;AAAA,oBAC/DG,IAAI,CAACC,KAAL,CAAWJ,MAAM,CAACK,IAAlB,CAD+D;AAAA,MACtElB,EADsE,eACtEA,EADsE,EAE5E;;;AAEA,MAAMc,QAAQ,GAAGhB,cAAc,CAACC,IAAf,CAAoBoB,MAApB,CACf,UAAAC,YAAY;AAAA,WAAIA,YAAY,CAACpB,EAAb,KAAoBA,EAAxB;AAAA,GADG,CAAjB;AAGAF,EAAAA,cAAc,CAACC,IAAf,sBAA0Be,QAA1B;AACA,SAAO,CAAC,GAAD,EAAMA,QAAN,CAAP;AACD,CATD;AAWAnB,IAAI,CAACoB,MAAL,CAAYlB,YAAY,CAACc,SAAb,GAAuB,6BAAnC,EAAkEC,KAAlE,CAAwE,UAAAC,MAAM,EAAI;AAChFf,EAAAA,cAAc,CAACC,IAAf,GAAsB,EAAtB;AACA,MAAMe,QAAQ,GAAGhB,cAAc,CAACC,IAAhC;AACA,SAAO,CAAC,GAAD,EAAMe,QAAN,CAAP;AACD,CAJD","sourcesContent":["import Mock from \"../mock\";\nimport shortId from \"shortid\";\nimport ConstantList from \"../../app/appConfig\";\nconst NotificationDB = {\n  list: [\n    {\n      id: shortId.generate(),\n      heading: \"Message\",\n      icon: {\n        name: \"chat\",\n        color: \"primary\"\n      },\n      timestamp: 1570702802573,\n      title: \"New message from Devid\",\n      subtitle: \"Hello, Let's chit chat...\",\n      path: \"chat\"\n    },\n    {\n      id: shortId.generate(),\n      heading: \"Alert\",\n      icon: {\n        name: \"notifications\",\n        color: \"error\"\n      },\n      timestamp: 1570702702573,\n      title: \"Server overloaded\",\n      subtitle: \"Traffice reached 2M\",\n      path: \"page-layouts/user-profile\"\n    },\n    {\n      id: shortId.generate(),\n      heading: \"Message\",\n      icon: {\n        name: \"chat\",\n        color: \"primary\"\n      },\n      timestamp: 1570502502573,\n      title: \"New message from Goustove\",\n      subtitle: \"Hello, Let's chit chat...\",\n      path: \"chat\"\n    }\n  ]\n};\n\nMock.onGet(ConstantList.ROOT_PATH+\"api/notification\").reply(config => {\n  const response = NotificationDB.list;\n  return [200, response];\n});\n\nMock.onPost(ConstantList.ROOT_PATH+\"api/notification/add\").reply(config => {\n  const response = NotificationDB.list;\n  return [200, response];\n});\n\nMock.onPost(ConstantList.ROOT_PATH+\"api/notification/delete\").reply(config => {\n  let { id } = JSON.parse(config.data);\n  // console.log(id);\n\n  const response = NotificationDB.list.filter(\n    notification => notification.id !== id\n  );\n  NotificationDB.list = [...response];\n  return [200, response];\n});\n\nMock.onPost(ConstantList.ROOT_PATH+\"api/notification/delete-all\").reply(config => {\n  NotificationDB.list = [];\n  const response = NotificationDB.list;\n  return [200, response];\n});\n"]},"metadata":{},"sourceType":"module"}