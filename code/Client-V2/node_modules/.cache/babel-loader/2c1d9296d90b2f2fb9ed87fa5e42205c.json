{"ast":null,"code":"import _slicedToArray from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\EQARoundConclusions\\\\EQARoundConclusionsTable.jsx\";\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Grid, TextField } from \"@material-ui/core\";\nimport { Breadcrumb } from \"egret\";\nimport { Helmet } from \"react-helmet\";\nimport { getAllResultConclusionByRoundId, getListResultByRoundId } from \"./EQARoundConclusionsServices\";\nimport { searchByPage as getAllEQARound } from \"../EQARound/EQARoundService.js\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport \"react-pivottable/pivottable.css\";\nimport * as WebDataRocksReact from \"../../component/webdatarocks.react\"; // toast.configure({\n//   autoClose: 2000,\n//   draggable: false,\n//   limit:3\n//   //etc you get the idea\n// });\n\nvar testData = [{\n  healthOrgCode: \"S-1\",\n  tubeCode: \"ABC\",\n  result: 1,\n  sampleCode: \"Sample 1\"\n}, {\n  healthOrgCode: \"S-2\",\n  tubeCode: \"ABC\",\n  result: 2,\n  sampleCode: \"Sample 1\"\n}, {\n  healthOrgCode: \"S-1\",\n  tubeCode: \"ABCD\",\n  result: 0,\n  sampleCode: \"Sample 1\"\n}, {\n  healthOrgCode: \"S-2\",\n  tubeCode: \"ABCD\",\n  result: 1,\n  sampleCode: \"Sample 1\"\n}, {\n  healthOrgCode: \"S-1\",\n  tubeCode: \"DEF\",\n  result: 2,\n  sampleCode: \"Sample 1\"\n}, {\n  healthOrgCode: \"S-2\",\n  tubeCode: \"DEF\",\n  result: 0,\n  sampleCode: \"Sample 1\"\n}, {\n  healthOrgCode: \"S-1\",\n  tubeCode: \"GHI\",\n  result: 2,\n  sampleCode: \"Sample 1\"\n}, {\n  healthOrgCode: \"S-2\",\n  tubeCode: \"GHI\",\n  result: 0,\n  sampleCode: \"Sample 1\"\n}, {\n  healthOrgCode: \"S-3\",\n  tubeCode: \"ABC\",\n  result: 0,\n  sampleCode: \"Sample 2\"\n}, {\n  healthOrgCode: \"S-4\",\n  tubeCode: \"ABC\",\n  result: 1,\n  sampleCode: \"Sample 2\"\n}, {\n  healthOrgCode: \"S-3\",\n  tubeCode: \"ABCD\",\n  result: 2,\n  sampleCode: \"Sample 2\"\n}, {\n  healthOrgCode: \"S-4\",\n  tubeCode: \"ABCD\",\n  result: 2,\n  sampleCode: \"Sample 2\"\n}, {\n  healthOrgCode: \"S-3\",\n  tubeCode: \"GHI\",\n  result: 0,\n  sampleCode: \"Sample 2\"\n}, {\n  healthOrgCode: \"S-4\",\n  tubeCode: \"GHI\",\n  result: 1,\n  sampleCode: \"Sample 2\"\n}, {\n  healthOrgCode: \"S-3\",\n  tubeCode: \"DEF\",\n  result: 1,\n  sampleCode: \"Sample 2\"\n}, {\n  healthOrgCode: \"S-4\",\n  tubeCode: \"DEF\",\n  result: 1,\n  sampleCode: \"Sample 2\"\n}];\nvar formatData = [{\n  healthOrgCode: \" \",\n  tubeCode: \" \",\n  result: \" \",\n  sampleCode: \" \"\n}];\n\nvar EQARoundConclusionsTable = function EQARoundConclusionsTable(_ref) {\n  var t = _ref.t,\n      props = _objectWithoutProperties(_ref, [\"t\"]);\n\n  var _useState = useState(formatData),\n      _useState2 = _slicedToArray(_useState, 2),\n      tableData = _useState2[0],\n      setTableData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      listEQARound = _useState4[0],\n      setListEQARound = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentRound = _useState6[0],\n      setCurrentRound = _useState6[1];\n\n  var webDataRocksRef = useRef(null);\n  useEffect(function () {\n    var searchObject = {\n      pageIndex: 0,\n      pageSize: 1000000\n    };\n    getAllEQARound(searchObject).then(function (res) {\n      setListEQARound(res.data.content);\n    });\n  }, []);\n  /* Comment this function out if you want to use testData */\n\n  useEffect(function () {\n    if (typeof (currentRound === null || currentRound === void 0 ? void 0 : currentRound.id) != \"undefined\") {\n      getListResultByRoundId(currentRound.id).then(function (res) {\n        if (res.data) {\n          setTableData(res.data);\n          webDataRocksRef.current.webdatarocks.updateData({\n            data: res.data\n          });\n        } else {\n          setTableData(formatData);\n          webDataRocksRef.current.webdatarocks.updateData({\n            data: formatData\n          });\n        }\n      });\n    }\n  }, [currentRound]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"m-sm-30\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Helmet, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, t(\"EQARoundConclusions.title\"), \" | \", t(\"web_site\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-sm-30\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Breadcrumb, {\n    routeSegments: [{\n      name: t(\"EQARoundConclusions.title\")\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 4,\n    sm: 4,\n    xs: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    size: \"small\",\n    id: \"combo-box\",\n    options: listEQARound,\n    className: \"flex-end\",\n    getOptionLabel: function getOptionLabel(option) {\n      return option.code != null && typeof option.code != \"undefined\" ? option.code : \"\";\n    },\n    onChange: function onChange(event, newValue) {\n      return setCurrentRound(newValue);\n    },\n    value: currentRound,\n    renderInput: function renderInput(params) {\n      return /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n        label: t(\"EQAResultReportConclusion.select_eqa_round\"),\n        variant: \"outlined\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 12,\n    sm: 12,\n    xs: 12,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WebDataRocksReact.Pivot, {\n    ref: webDataRocksRef,\n    toolbar: true,\n    report: {\n      dataSource: {\n        data: tableData //set {data: testData} if you want to use test data, {data: tableData} if you want to use real data\n\n      },\n      slice: {\n        rows: [{\n          uniqueName: \"sampleCode\",\n          caption: t(\"EQASampleSet.sample_code\")\n        }, {\n          uniqueName: \"tubeCode\",\n          caption: t(\"EQARoundConclusions.tube_code\")\n        }],\n        columns: [{\n          uniqueName: \"positiveAffirmativeRight\",\n          caption: \"PXN khẳng định\"\n        }, {\n          uniqueName: \"healthOrgCode\",\n          caption: t(\"EQARoundConclusions.health_org_code\")\n        }],\n        measures: [{\n          uniqueName: \"result\",\n          caption: t(\"EQARoundConclusions.result\")\n        }],\n        \"expands\": {\n          \"expandAll\": true\n        }\n      },\n      options: {\n        grid: {\n          \"type\": \"classic\",\n          showGrandTotals: \"off\",\n          showTotals: \"off\"\n        }\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default EQARoundConclusionsTable;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/EQARoundConclusions/EQARoundConclusionsTable.jsx"],"names":["React","useState","useEffect","useRef","Grid","TextField","Breadcrumb","Helmet","getAllResultConclusionByRoundId","getListResultByRoundId","searchByPage","getAllEQARound","Autocomplete","WebDataRocksReact","testData","healthOrgCode","tubeCode","result","sampleCode","formatData","EQARoundConclusionsTable","t","props","tableData","setTableData","listEQARound","setListEQARound","currentRound","setCurrentRound","webDataRocksRef","searchObject","pageIndex","pageSize","then","res","data","content","id","current","webdatarocks","updateData","name","option","code","event","newValue","params","dataSource","slice","rows","uniqueName","caption","columns","measures","options","grid","showGrandTotals","showTotals"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Grid, TextField } from \"@material-ui/core\";\nimport { Breadcrumb } from \"egret\";\nimport { Helmet } from \"react-helmet\";\nimport { getAllResultConclusionByRoundId,getListResultByRoundId } from \"./EQARoundConclusionsServices\";\nimport { searchByPage as getAllEQARound } from \"../EQARound/EQARoundService.js\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport \"react-pivottable/pivottable.css\";\nimport * as WebDataRocksReact from \"../../component/webdatarocks.react\";\n// toast.configure({\n//   autoClose: 2000,\n//   draggable: false,\n//   limit:3\n//   //etc you get the idea\n// });\nconst testData = [\n  {\n    healthOrgCode: \"S-1\",\n    tubeCode: \"ABC\",\n    result: 1,\n    sampleCode: \"Sample 1\"\n  },\n  {\n    healthOrgCode: \"S-2\",\n    tubeCode: \"ABC\",\n    result: 2,\n    sampleCode: \"Sample 1\"\n  },\n  {\n    healthOrgCode: \"S-1\",\n    tubeCode: \"ABCD\",\n    result: 0,\n    sampleCode: \"Sample 1\"\n  },\n  {\n    healthOrgCode: \"S-2\",\n    tubeCode: \"ABCD\",\n    result: 1,\n    sampleCode: \"Sample 1\"\n  },\n  {\n    healthOrgCode: \"S-1\",\n    tubeCode: \"DEF\",\n    result: 2,\n    sampleCode: \"Sample 1\"\n  },\n  {\n    healthOrgCode: \"S-2\",\n    tubeCode: \"DEF\",\n    result: 0,\n    sampleCode: \"Sample 1\"\n  },\n  {\n    healthOrgCode: \"S-1\",\n    tubeCode: \"GHI\",\n    result: 2,\n    sampleCode: \"Sample 1\"\n  },\n  {\n    healthOrgCode: \"S-2\",\n    tubeCode: \"GHI\",\n    result: 0,\n    sampleCode: \"Sample 1\"\n  },\n  {\n    healthOrgCode: \"S-3\",\n    tubeCode: \"ABC\",\n    result: 0,\n    sampleCode: \"Sample 2\"\n  },\n  {\n    healthOrgCode: \"S-4\",\n    tubeCode: \"ABC\",\n    result: 1,\n    sampleCode: \"Sample 2\"\n  },\n  {\n    healthOrgCode: \"S-3\",\n    tubeCode: \"ABCD\",\n    result: 2,\n    sampleCode: \"Sample 2\"\n  },\n  {\n    healthOrgCode: \"S-4\",\n    tubeCode: \"ABCD\",\n    result: 2,\n    sampleCode: \"Sample 2\"\n  },\n  {\n    healthOrgCode: \"S-3\",\n    tubeCode: \"GHI\",\n    result: 0,\n    sampleCode: \"Sample 2\"\n  },\n  {\n    healthOrgCode: \"S-4\",\n    tubeCode: \"GHI\",\n    result: 1,\n    sampleCode: \"Sample 2\"\n  },\n  {\n    healthOrgCode: \"S-3\",\n    tubeCode: \"DEF\",\n    result: 1,\n    sampleCode: \"Sample 2\"\n  },\n  {\n    healthOrgCode: \"S-4\",\n    tubeCode: \"DEF\",\n    result: 1,\n    sampleCode: \"Sample 2\"\n  }\n];\n\nconst formatData = [\n  { healthOrgCode: \" \", tubeCode: \" \", result: \" \", sampleCode: \" \" }\n];\n\nconst EQARoundConclusionsTable = ({ t, ...props }) => {\n  const [tableData, setTableData] = useState(formatData);\n  const [listEQARound, setListEQARound] = useState([]);\n  const [currentRound, setCurrentRound] = useState({});\n  const webDataRocksRef = useRef(null);\n\n  useEffect(() => {\n    const searchObject = { pageIndex: 0, pageSize: 1000000 };\n    getAllEQARound(searchObject).then(res => {\n      setListEQARound(res.data.content);\n    });\n  }, []);\n\n  /* Comment this function out if you want to use testData */\n  useEffect(() => {\n    if (typeof currentRound?.id != \"undefined\") {\n      getListResultByRoundId(currentRound.id).then(res => {\n        if (res.data) {\n          setTableData(res.data);\n          webDataRocksRef.current.webdatarocks.updateData({\n            data: res.data\n          });\n        } else {\n          setTableData(formatData);\n          webDataRocksRef.current.webdatarocks.updateData({\n            data: formatData\n          });\n        }\n      });\n    }\n  }, [currentRound]);\n\n  return (\n    <div className=\"m-sm-30\">\n      <Helmet>\n        <title>\n          {t(\"EQARoundConclusions.title\")} | {t(\"web_site\")}\n        </title>\n      </Helmet>\n      <div className=\"mb-sm-30\">\n        <Breadcrumb\n          routeSegments={[{ name: t(\"EQARoundConclusions.title\") }]}\n        />\n      </div>\n      <Grid container spacing={3}>\n        <Grid item md={4} sm={4} xs={4}>\n          <Autocomplete\n            size=\"small\"\n            id=\"combo-box\"\n            options={listEQARound}\n            className=\"flex-end\"\n            getOptionLabel={option =>\n              option.code != null && typeof option.code != \"undefined\"\n                ? option.code\n                : \"\"\n            }\n            onChange={(event, newValue) => setCurrentRound(newValue)}\n            value={currentRound}\n            renderInput={params => (\n              <TextField\n                {...params}\n                label={t(\"EQAResultReportConclusion.select_eqa_round\")}\n                variant=\"outlined\"\n              />\n            )}\n          />\n        </Grid>\n        <Grid item md={12} sm={12} xs={12}>\n          <WebDataRocksReact.Pivot\n            ref={webDataRocksRef}\n            toolbar={true}\n            report={{\n              dataSource: {\n                data: tableData //set {data: testData} if you want to use test data, {data: tableData} if you want to use real data\n              },\n              slice: {\n                rows: [\n                  {\n                    uniqueName: \"sampleCode\",\n                    caption: t(\"EQASampleSet.sample_code\")\n                  },\n                  {\n                    uniqueName: \"tubeCode\",\n                    caption: t(\"EQARoundConclusions.tube_code\")\n                  }\n                ],\n                columns: [\n                  {\n                    uniqueName: \"positiveAffirmativeRight\",\n                    caption: \"PXN khẳng định\"\n                  },\n                  {\n                    uniqueName: \"healthOrgCode\",\n                    caption: t(\"EQARoundConclusions.health_org_code\")\n                  }                  \n                ],\n                measures: [                  \n                  {\n                    uniqueName: \"result\",\n                    caption: t(\"EQARoundConclusions.result\")\n                  }                  \n                ],\n                \"expands\": {\n                  \"expandAll\": true\n                }\n              },\n              options: {\n                grid: {\n                  \"type\": \"classic\",\n                  showGrandTotals: \"off\",\n                  showTotals: \"off\"\n                }\n              }\n            }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default EQARoundConclusionsTable;\n"]},"metadata":{},"sourceType":"module"}