{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n} // Copyright (c) 2016 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Animation from '../../animation';\nimport { hexbin } from 'd3-hexbin';\nimport { scaleLinear } from 'd3-scale';\nimport { ANIMATED_SERIES_PROPS } from '../../utils/series-utils';\nimport { CONTINUOUS_COLOR_RANGE } from '../../theme';\nimport AbstractSeries from './abstract-series';\nvar predefinedClassName = 'rv-xy-plot__series rv-xy-plot__series--hexbin';\n\nfunction getColorDomain(_ref, hexes) {\n  var countDomain = _ref.countDomain;\n\n  if (countDomain) {\n    return countDomain;\n  }\n\n  return [0, Math.max.apply(Math, _toConsumableArray(hexes.map(function (row) {\n    return row.length;\n  })))];\n}\n\nvar HexbinSeries = function (_AbstractSeries) {\n  _inherits(HexbinSeries, _AbstractSeries);\n\n  function HexbinSeries() {\n    _classCallCheck(this, HexbinSeries);\n\n    return _possibleConstructorReturn(this, (HexbinSeries.__proto__ || Object.getPrototypeOf(HexbinSeries)).apply(this, arguments));\n  }\n\n  _createClass(HexbinSeries, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          animation = _props.animation,\n          className = _props.className,\n          colorRange = _props.colorRange,\n          data = _props.data,\n          innerHeight = _props.innerHeight,\n          innerWidth = _props.innerWidth,\n          marginLeft = _props.marginLeft,\n          marginTop = _props.marginTop,\n          radius = _props.radius,\n          sizeHexagonsWithCount = _props.sizeHexagonsWithCount,\n          style = _props.style,\n          xOffset = _props.xOffset,\n          yOffset = _props.yOffset;\n\n      if (!data) {\n        return null;\n      }\n\n      if (animation) {\n        return React.createElement(Animation, _extends({}, this.props, {\n          animatedProps: ANIMATED_SERIES_PROPS\n        }), React.createElement(HexbinSeries, _extends({}, this.props, {\n          animation: null\n        })));\n      }\n\n      var x = this._getAttributeFunctor('x');\n\n      var y = this._getAttributeFunctor('y');\n\n      var hex = hexbin().x(function (d) {\n        return x(d) + xOffset;\n      }).y(function (d) {\n        return y(d) + yOffset;\n      }).radius(radius).size([innerWidth, innerHeight]);\n      var hexagonPath = hex.hexagon();\n      var hexes = hex(data);\n      var countDomain = getColorDomain(this.props, hexes);\n      var color = scaleLinear().domain(countDomain).range(colorRange);\n      var size = scaleLinear().domain(countDomain).range([0, radius]);\n      return React.createElement('g', {\n        className: predefinedClassName + ' ' + className,\n        transform: 'translate(' + marginLeft + ',' + marginTop + ')'\n      }, hexes.map(function (d, i) {\n        var attrs = {\n          style: style,\n          d: sizeHexagonsWithCount ? hex.hexagon(size(d.length)) : hexagonPath,\n          fill: color(d.length),\n          transform: 'translate(' + d.x + ', ' + d.y + ')',\n          key: i,\n          onClick: function onClick(e) {\n            return _this2._valueClickHandler(d, e);\n          },\n          onContextMenu: function onContextMenu(e) {\n            return _this2._valueRightClickHandler(d, e);\n          },\n          onMouseOver: function onMouseOver(e) {\n            return _this2._valueMouseOverHandler(d, e);\n          },\n          onMouseOut: function onMouseOut(e) {\n            return _this2._valueMouseOutHandler(d, e);\n          }\n        };\n        return React.createElement('path', attrs);\n      }));\n    }\n  }]);\n\n  return HexbinSeries;\n}(AbstractSeries);\n\nHexbinSeries.propTypes = _extends({}, AbstractSeries.propTypes, {\n  radius: PropTypes.number\n});\nHexbinSeries.defaultProps = {\n  radius: 20,\n  colorRange: CONTINUOUS_COLOR_RANGE,\n  xOffset: 0,\n  yOffset: 0\n};\nHexbinSeries.displayName = 'HexbinSeries';\nexport default HexbinSeries;","map":null,"metadata":{},"sourceType":"module"}