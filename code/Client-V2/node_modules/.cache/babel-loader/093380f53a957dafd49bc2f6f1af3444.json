{"ast":null,"code":"import _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\EQAResultReportFastTest\\\\EQAResultReportFastTestInformation.jsx\";\nimport React, { Component } from \"react\";\nimport { Dialog, Button, Grid, TextField, Icon, IconButton, FormControl, DialogTitle, DialogContent, DialogActions, Paper, InputAdornment, MenuItem, Checkbox, Select, FormControlLabel } from \"@material-ui/core\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { saveItem, getEQASampleTubeByHealthOrgEQARoundId, checkReagentByHealthOrgRound } from \"./EQAResultReportFastTestService\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport ConstantList from \"../../appConfig\";\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\nimport HealthOrgEQARoundPopup from \"../Component/HealthOrgEQARound/HealthOrgEQARoundPopup\";\nimport { searchByPage as reagentSearchByPage } from \"../Reagent/ReagentService\";\nimport Draggable from 'react-draggable';\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport LocalConstants from \"./Constants\";\nimport MaterialTable, { MTableToolbar, Chip, MTableBody, MTableHeader } from 'material-table';\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getCurrentUser, getListHealthOrgByUser } from \"../User/UserService\";\nimport '../../../styles/views/_loadding.scss';\nimport '../../../styles/views/_style.scss';\nimport clsx from 'clsx';\nimport CircularProgress from '@material-ui/core/CircularProgress';\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n}); // function PaperComponent(props) {\n//   return (\n//     <Draggable handle=\"#draggable-dialog\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n//       <Paper {...props} />\n//     </Draggable>\n//   );\n// }\n\nfunction MaterialButton(props) {\n  var item = props.item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      return props.onSelect(item);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    color: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \"delete\")));\n}\n\nfunction TableODColumn(props) {\n  var item = props.item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    disabled: props.isView,\n    className: \"w-80\",\n    onChange: function onChange(event) {\n      return props.onChange(event, item);\n    },\n    type: \"number\",\n    value: item.oDvalue,\n    name: \"itemODvalue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }));\n}\n\nfunction TableCOColumn(props) {\n  var item = props.item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    disabled: props.isView,\n    className: \"w-80\",\n    value: item.cutOff,\n    onChange: function onChange(event) {\n      return props.onChange(event, item);\n    },\n    type: \"number\",\n    name: \"itemcutOff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }));\n}\n\nfunction TableODDeviceCOColumn(props) {\n  var item = props.item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    disabled: props.isView,\n    className: \"w-80\",\n    value: item.ratioOdAndCutOff,\n    type: \"number\",\n    name: \"itemRatioOdAndCutOff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }));\n}\n\nfunction TableResultColumn(props) {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t,\n      i18n = _useTranslation.i18n;\n\n  var item = props.item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    disabled: props.isView,\n    value: item.result,\n    onChange: function onChange(event) {\n      return props.onChange(event, item);\n    },\n    inputProps: {\n      name: \"result\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, t(\"EQAResultReportElisa.Result.none\")), /*#__PURE__*/React.createElement(MenuItem, {\n    value: LocalConstants.EQAResultReportDetail_TestValue.negative,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, t(\"EQAResultReportElisa.Result.negative\")), /*#__PURE__*/React.createElement(MenuItem, {\n    value: LocalConstants.EQAResultReportDetail_TestValue.indertermine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, t(\"EQAResultReportElisa.Result.indertermine\")), /*#__PURE__*/React.createElement(MenuItem, {\n    value: LocalConstants.EQAResultReportDetail_TestValue.positive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, t(\"EQAResultReportElisa.Result.positive\")))));\n}\n\nfunction TableNoteColumn(props) {\n  var item = props.item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 10\n    }\n  });\n}\n\nvar EQAResultReportFastTestInformation = /*#__PURE__*/function (_Component) {\n  _inherits(EQAResultReportFastTestInformation, _Component);\n\n  var _super = _createSuper(EQAResultReportFastTestInformation);\n\n  function EQAResultReportFastTestInformation(props) {\n    var _this;\n\n    _classCallCheck(this, EQAResultReportFastTestInformation);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      hasErrorHealthOrgRound: false,\n      hasErrorEQARound: false,\n      isUsingIQC: false,\n      isUsingControlLine: false,\n      eqaRound: '',\n      healthOrg: null,\n      reagentLot: '',\n      orderTest: '',\n      reagent: null,\n      technician: null,\n      personBuyReagent: '',\n      details: [],\n      supplyOfReagent: '',\n      timeToResult: '',\n      round: null,\n      reagentExpiryDate: null,\n      testDate: null,\n      shouldOpenSearchDialog: false,\n      shouldOpenConfirmationDialog: false,\n      shouldOpenSearchEQASampleSearchDialog: false,\n      listHealthOrgRound: [],\n      listReagent: [],\n      listEQARound: [],\n      shouldOpenHealthOrgRoundPopup: false,\n      isView: false,\n      reagentUnBoxDate: null,\n      isFinalResult: false,\n      dateSubmitResults: null,\n      typeMethod: 2,\n      isViewButton: false,\n      loading: false,\n      shouldOpenConfirmation: false\n    };\n    _this.Results = [{\n      id: LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented,\n      name: \"Không thực hiện\"\n    }, {\n      id: LocalConstants.EQAResultReportDetail_TestValue.negative,\n      name: \"Âm tính\"\n    }, {\n      id: LocalConstants.EQAResultReportDetail_TestValue.positive,\n      name: \"Dương tính\"\n    }];\n    _this.listResult_C_T_Line = [{\n      id: LocalConstants.EQAResultReportDetail_TestValue.positive,\n      name: \"Dương tính\"\n    }, {\n      id: LocalConstants.EQAResultReportDetail_TestValue.negative,\n      name: \"Âm tính\"\n    }];\n    _this.listChooseBoolean = [{\n      id: 0,\n      value: false,\n      name: \"Không\"\n    }, {\n      id: 1,\n      value: true,\n      name: \"Có\"\n    }];\n\n    _this.handleDialogClose = function () {\n      _this.setState({\n        shouldOpenConfirmationDialog: false,\n        shouldOpenConfirmation: false\n      });\n    };\n\n    _this.handleChange = function (event, source) {\n      var item = _this.state.item;\n\n      if (item == null) {\n        item = {};\n      }\n\n      var name = event.target.name;\n      var value = event.target.value;\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"isFinalResult\") {\n        item[\"isFinalResult\"] = event.target.checked;\n\n        _this.setState({\n          item: item\n        });\n      }\n\n      item[name] = value;\n\n      _this.setState({\n        item: item\n      });\n    };\n\n    _this.handleRowDataCellChange = function (rowData, event) {\n      var item = _this.state.item;\n\n      if (item.details != null && item.details.length > 0) {\n        item.details.forEach(function (element) {\n          if (element.tableData != null && rowData != null && rowData.tableData != null && element.tableData.id == rowData.tableData.id) {\n            if (event.target.name == \"cLine\") {\n              if (element.result == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\n                element.result = \"\";\n              }\n\n              element.cLine = event.target.value;\n            } else if (event.target.name == \"tLine\") {\n              if (element.result == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\n                element.result = \"\";\n              }\n\n              element.tLine = event.target.value;\n            } else if (event.target.name == \"result\") {\n              if (event.target.value == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\n                element.cLine = \"\";\n                element.tLine = \"\";\n              }\n\n              element.result = event.target.value;\n            } else if (event.target.name == \"note\") {\n              element.note = event.target.value;\n            }\n          }\n        });\n\n        _this.setState({\n          item: item\n        });\n      }\n    };\n\n    _this.openCircularProgress = function () {\n      _this.setState({\n        loading: true\n      });\n    };\n\n    _this.handleDateChange = function (date, name) {\n      var item = _this.state.item;\n\n      if (item == null) {\n        item = {};\n      }\n\n      item[name] = date;\n\n      _this.setState({\n        item: item\n      });\n    };\n\n    _this.selectReagent = function (reagent) {\n      var item = _this.state.item;\n\n      if (item == null) {\n        item = {};\n      }\n\n      if (reagent != null && reagent.id != null) {\n        if (reagent.name === \"Sinh phẩm khác\") {\n          _this.setState({\n            shouldOpenConfirmation: true\n          });\n\n          item[\"otherReagent\"] = true;\n        } else {\n          item[\"otherReagent\"] = false;\n        }\n\n        item[\"reagent\"] = reagent;\n\n        _this.setState({\n          item: item\n        }, function () {});\n      }\n    };\n\n    _this.handleHealthOrgRoundPopupClose = function () {\n      _this.setState({\n        shouldOpenHealthOrgRoundPopup: false\n      }, function () {});\n    };\n\n    _this.handleSelectHealthOrgRound = function (healthOrgRound) {\n      var item = _this.state.item;\n\n      if (item == null) {\n        item = {};\n      }\n\n      if (healthOrgRound && healthOrgRound.id) {\n        item[\"healthOrgRound\"] = healthOrgRound;\n\n        _this.setState({\n          item: item\n        }, function () {\n          var _this$state$item,\n              _this$state$item2,\n              _this2 = this;\n\n          // let { healthOrgRound, details } = this.state;\n          var item = this.state.item;\n          var details = (_this$state$item = this.state.item) === null || _this$state$item === void 0 ? void 0 : _this$state$item.details;\n          details = [];\n          getEQASampleTubeByHealthOrgEQARoundId((_this$state$item2 = this.state.item) === null || _this$state$item2 === void 0 ? void 0 : _this$state$item2.healthOrgRound.id).then(function (result) {\n            var listEQASampleTube = result.data;\n\n            if (listEQASampleTube != null && listEQASampleTube.length > 0) {\n              listEQASampleTube.forEach(function (tube) {\n                var eQAResultReportDetail = {};\n                eQAResultReportDetail.sampleTube = tube;\n                eQAResultReportDetail.cLine = '';\n                eQAResultReportDetail.tLine = '';\n                eQAResultReportDetail.result = '';\n                details.push(eQAResultReportDetail);\n              });\n            }\n\n            item[\"details\"] = details;\n\n            _this2.setState({\n              item: item\n            });\n          });\n        });\n      }\n\n      _this.handleHealthOrgRoundPopupClose();\n    };\n\n    _this.notificationFinalResult = function () {\n      // if(!this.state.item.isFinalResult || this.state.item.isFinalResult == null){\n      //   this.setState({shouldOpenConfirmationDialog:true})\n      // }\n      _this.setState({\n        shouldOpenConfirmationDialog: true\n      });\n    };\n\n    _this.handleFinalResult = function () {\n      var item = _this.state.item;\n\n      if (item.isFinalResult == null || !item.isFinalResult) {\n        item[\"isFinalResult\"] = true;\n        item[\"dateSubmitResults\"] = new Date();\n\n        _this.setState({\n          item: item\n        }, function () {});\n\n        _this.handleDialogClose();\n\n        return;\n      }\n\n      if (item.isFinalResult) {\n        item[\"isFinalResult\"] = false;\n        item[\"dateSubmitResults\"] = null;\n\n        _this.setState({\n          item: item\n        }, function () {});\n\n        _this.handleDialogClose();\n\n        return;\n      }\n    };\n\n    _this.handleDialogFinalResultClose = function () {\n      // this.setState({isFinalResult:false, dateSubmitResults: null},()=>{\n      // })\n      _this.handleDialogClose();\n    };\n\n    return _this;\n  }\n\n  _createClass(EQAResultReportFastTestInformation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item,\n          isRoleAdmin = _this$props.isRoleAdmin,\n          isView = _this$props.isView;\n      this.setState({\n        isRoleAdmin: isRoleAdmin,\n        isView: isView\n      });\n\n      if (item != null && item.reagent != null && item.reagent.name != null) {\n        if (item.reagent.name === \"Sinh phẩm khác\") {\n          item[\"otherReagent\"] = true;\n        } else {\n          item[\"otherReagent\"] = false;\n        }\n      }\n\n      this.setState({\n        item: item\n      }, function () {\n        if (item.listHealthOrgRound != null) {\n          _this3.setState({\n            listHealthOrgRound: item.listHealthOrgRound,\n            healthOrgRound: item.listHealthOrgRound[0]\n          }, function () {\n            _this3.handleSelectHealthOrgRound(_this3.state.healthOrgRound);\n          });\n        }\n      });\n      this.setState({\n        isRoleAdmin: isRoleAdmin,\n        isView: isView\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state$item3,\n          _this$state$item4,\n          _this$state$item5,\n          _this$state$item6,\n          _this4 = this,\n          _this$state$item7,\n          _this$state$item8,\n          _this$state$item9,\n          _this$state$item10,\n          _this$state$item11,\n          _this$state$item12,\n          _this$state$item13,\n          _this$state$item14,\n          _this$state$item15,\n          _this$state$item16,\n          _this$state$item17,\n          _this$state$item18,\n          _this$state$item19,\n          _this$state$item20,\n          _this$state$item21,\n          _this$state$item22,\n          _this$state$item23,\n          _this$state$item24,\n          _this$state$item25,\n          _this$state$item26,\n          _this$state$item27,\n          _this$state$item28,\n          _this$state$item29,\n          _this$state$item30;\n\n      var _this$state = this.state,\n          isRoleAdmin = _this$state.isRoleAdmin,\n          technician = _this$state.technician,\n          isView = _this$state.isView,\n          item = _this$state.item;\n      var searchObject = {\n        pageIndex: 0,\n        pageSize: 1000000,\n        testType: 2\n      };\n      var technicianSearchObject = {\n        pageIndex: 0,\n        pageSize: 1000000,\n        searchByHealthOrg: true,\n        healthOrg: ((_this$state$item3 = this.state.item) === null || _this$state$item3 === void 0 ? void 0 : _this$state$item3.healthOrgRound) && ((_this$state$item4 = this.state.item) === null || _this$state$item4 === void 0 ? void 0 : _this$state$item4.healthOrgRound.healthOrg) && ((_this$state$item5 = this.state.item) === null || _this$state$item5 === void 0 ? void 0 : _this$state$item5.healthOrgRound.healthOrg.id) ? {\n          id: (_this$state$item6 = this.state.item) === null || _this$state$item6 === void 0 ? void 0 : _this$state$item6.healthOrgRound.healthOrg.id\n        } : null\n      };\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          handleClose = _this$props2.handleClose,\n          classes = _this$props2.classes,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n;\n      var columns = [{\n        title: t(\"EQAResultReportFastTest.sample_list.sample_code\"),\n        field: \"sampleTube.code\",\n        align: \"left\",\n        width: \"150\"\n      }, {\n        title: t(\"EQAResultReportFastTest.cLine\"),\n        field: \"cLine\",\n        width: \"150\",\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(FormControl, {\n            className: \"w-80\",\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(Select, {\n            value: rowData.cLine,\n            disabled: isRoleAdmin,\n            onChange: function onChange(cLine) {\n              return _this4.handleRowDataCellChange(rowData, cLine);\n            },\n            inputProps: {\n              name: \"cLine\",\n              id: \"cLine-simple\"\n            },\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 13\n            }\n          }, _this4.listResult_C_T_Line.map(function (item) {\n            return /*#__PURE__*/React.createElement(MenuItem, {\n              key: item.id,\n              value: item.id,\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 24\n              }\n            }, item.name);\n          })));\n        }\n      }, {\n        title: t(\"EQAResultReportFastTest.tLine\"),\n        field: \"tLine\",\n        width: \"150\",\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(FormControl, {\n            className: \"w-80\",\n            disabled: isRoleAdmin,\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(Select, {\n            value: rowData.tLine,\n            onChange: function onChange(tLine) {\n              return _this4.handleRowDataCellChange(rowData, tLine);\n            },\n            inputProps: {\n              name: \"tLine\",\n              id: \"tLine-simple\"\n            },\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 13\n            }\n          }, _this4.listResult_C_T_Line.map(function (item) {\n            return /*#__PURE__*/React.createElement(MenuItem, {\n              key: item.id,\n              value: item.id,\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 427,\n                columnNumber: 24\n              }\n            }, item.name);\n          })));\n        }\n      }, {\n        title: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 16\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 11\n          }\n        }, \" * \"), t(\"EQAResultReportFastTest.sample_list.result\")),\n        field: \"result\",\n        align: \"left\",\n        width: \"150\",\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(FormControl, {\n            className: \"w-80\",\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(Select, {\n            value: rowData.result,\n            disabled: isRoleAdmin,\n            onChange: function onChange(result) {\n              return _this4.handleRowDataCellChange(rowData, result);\n            },\n            inputProps: {\n              name: \"result\",\n              id: \"result-simple\"\n            },\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 13\n            }\n          }, _this4.Results.map(function (item) {\n            return /*#__PURE__*/React.createElement(MenuItem, {\n              key: item.id,\n              value: item.id,\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 449,\n                columnNumber: 24\n              }\n            }, item.name);\n          })));\n        }\n      }, {\n        title: t(\"SampleManagement.serum-bottle.note\"),\n        field: \"note\",\n        width: \"150\",\n        headerStyle: {\n          minWidth: \"200px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        cellStyle: {\n          minWidth: \"200px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(TextValidator, {\n            className: \"w-100\",\n            onChange: function onChange(note) {\n              return _this4.handleRowDataCellChange(rowData, note);\n            },\n            type: \"textarea\",\n            multiLine: true,\n            rowsMax: 4,\n            name: \"note\",\n            value: rowData.note ? rowData.note : '',\n            disabled: isRoleAdmin,\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 11\n            }\n          });\n        }\n      }];\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 9\n        }\n      }, this.state.shouldOpenConfirmationDialog && /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        title: t(\"confirm\"),\n        open: this.state.shouldOpenConfirmationDialog,\n        onConfirmDialogClose: this.handleDialogFinalResultClose,\n        onYesClick: this.handleFinalResult,\n        text: ((_this$state$item7 = this.state.item) === null || _this$state$item7 === void 0 ? void 0 : _this$state$item7.isFinalResult) ? t(\"EqaResult.unFinalResultConfirm\") : t(\"EqaResult.FinalResultConfirm\"),\n        Yes: t(\"general.Yes\"),\n        No: t(\"general.No\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 15\n        }\n      }), this.state.shouldOpenConfirmation && /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        title: t(\"general.noti\"),\n        open: this.state.shouldOpenConfirmation,\n        onYesClick: this.handleDialogFinalResultClose,\n        text: t(\"general.otherReagent\"),\n        Yes: t(\"general.Yes\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Autocomplete, {\n        size: \"small\",\n        id: \"combo-box\",\n        options: this.props.listHealthOrgRound,\n        className: \"flex-end\",\n        disabled: isRoleAdmin,\n        getOptionLabel: function getOptionLabel(option) {\n          return option.healthOrg.name;\n        },\n        onChange: function onChange(event, healthOrgRound) {\n          return _this4.handleSelectHealthOrgRound(healthOrgRound);\n        },\n        value: (_this$state$item8 = this.state.item) === null || _this$state$item8 === void 0 ? void 0 : _this$state$item8.healthOrgRound,\n        renderInput: function renderInput(params) {\n          return /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n            label: /*#__PURE__*/React.createElement(\"span\", {\n              className: \"font\",\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 28\n              }\n            }, t('EQAResultReportElisa.healthOrgName')),\n            variant: \"outlined\",\n            disabled: isRoleAdmin,\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 44\n            }\n          }));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 2,\n        md: 2,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EQAResultReportElisa.order\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"orderTest\",\n        value: (_this$state$item9 = this.state.item) === null || _this$state$item9 === void 0 ? void 0 : _this$state$item9.orderTest,\n        disabled: isRoleAdmin,\n        validators: [\"required\"],\n        errorMessages: t('general.errorMessages_required'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        size: \"small\",\n        className: \"w-100\",\n        margin: \"none\",\n        id: \"mui-pickers-testDate\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 28\n          }\n        }, t(\"EQAResultReportElisa.testDate\")),\n        inputVariant: \"outlined\",\n        type: \"text\",\n        autoOk: true,\n        format: \"dd/MM/yyyy\",\n        value: ((_this$state$item10 = this.state.item) === null || _this$state$item10 === void 0 ? void 0 : _this$state$item10.testDate) ? (_this$state$item11 = this.state.item) === null || _this$state$item11 === void 0 ? void 0 : _this$state$item11.testDate : null,\n        disabled: isRoleAdmin,\n        onChange: function onChange(date) {\n          return _this4.handleDateChange(date, \"testDate\");\n        },\n        fullWidth: true,\n        validators: [\"required\"],\n        errorMessages: t('general.errorMessages_required'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 26\n          }\n        }, t(\"EQAResultReportElisa.technician\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"technician\",\n        value: (_this$state$item12 = this.state.item) === null || _this$state$item12 === void 0 ? void 0 : _this$state$item12.technician,\n        disabled: isView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(AsynchronousAutocomplete, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 582,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EqaResult.reagent\")),\n        size: \"small\",\n        variant: \"outlined\",\n        disabled: isRoleAdmin,\n        searchFunction: reagentSearchByPage,\n        searchObject: searchObject,\n        defaultValue: (_this$state$item13 = this.state.item) === null || _this$state$item13 === void 0 ? void 0 : _this$state$item13.reagent,\n        value: (_this$state$item14 = this.state.item) === null || _this$state$item14 === void 0 ? void 0 : _this$state$item14.reagent,\n        displayLable: 'name',\n        valueTextValidator: (_this$state$item15 = this.state.item) === null || _this$state$item15 === void 0 ? void 0 : _this$state$item15.reagent,\n        validators: [\"required\"],\n        errorMessages: t('general.errorMessages_required'),\n        onSelect: this.selectReagent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 2,\n        md: 2,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EQAResultReportElisa.reagentLot\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"reagentLot\",\n        value: (_this$state$item16 = this.state.item) === null || _this$state$item16 === void 0 ? void 0 : _this$state$item16.reagentLot,\n        disabled: isRoleAdmin,\n        validators: [\"required\"],\n        errorMessages: t('general.errorMessages_required'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        container: true,\n        spacing: 2,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 28\n          }\n        }, t(\"reagent.expirationDay\")),\n        onChange: this.handleChange,\n        type: \"number\",\n        name: \"dayReagentExpiryDate\",\n        disabled: isRoleAdmin,\n        value: (_this$state$item17 = this.state.item) === null || _this$state$item17 === void 0 ? void 0 : _this$state$item17.dayReagentExpiryDate,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 28\n          }\n        }, t(\"reagent.expirationMonth\")),\n        onChange: this.handleChange,\n        type: \"number\",\n        name: \"monthReagentExpiryDate\",\n        value: (_this$state$item18 = this.state.item) === null || _this$state$item18 === void 0 ? void 0 : _this$state$item18.monthReagentExpiryDate,\n        disabled: isRoleAdmin,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 650,\n            columnNumber: 28\n          }\n        }, t(\"reagent.expirationYear\")),\n        onChange: this.handleChange,\n        type: \"number\",\n        name: \"yeahReagentExpiryDate\",\n        value: (_this$state$item19 = this.state.item) === null || _this$state$item19 === void 0 ? void 0 : _this$state$item19.yeahReagentExpiryDate,\n        disabled: isRoleAdmin,\n        variant: \"outlined\",\n        size: \"small\",\n        validators: [\"required\"],\n        errorMessages: t('general.errorMessages_required'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        size: \"small\",\n        fullWidth: true,\n        margin: \"none\",\n        id: \"mui-pickers-reagentExpiryDate\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 28\n          }\n        }, t('EQAResultReportElisa.reagentUnBoxDate')),\n        inputVariant: \"outlined\",\n        type: \"text\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        value: (_this$state$item20 = this.state.item) === null || _this$state$item20 === void 0 ? void 0 : _this$state$item20.reagentUnBoxDate,\n        disabled: isRoleAdmin,\n        onChange: function onChange(date) {\n          return _this4.handleDateChange(date, \"reagentUnBoxDate\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 687,\n            columnNumber: 26\n          }\n        }, t(\"EQAResultReportElisa.supplyOfReagent\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"supplyOfReagent\",\n        value: (_this$state$item21 = this.state.item) === null || _this$state$item21 === void 0 ? void 0 : _this$state$item21.supplyOfReagent,\n        disabled: isRoleAdmin,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 5,\n        md: 5,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        size: \"small\",\n        variant: \"outlined\",\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 26\n          }\n        }, t(\"EQAResultReportElisa.personBuyReagent\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"personBuyReagent\",\n        value: (_this$state$item22 = this.state.item) === null || _this$state$item22 === void 0 ? void 0 : _this$state$item22.personBuyReagent,\n        disabled: isRoleAdmin,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 17\n        }\n      })), ((_this$state$item23 = this.state.item) === null || _this$state$item23 === void 0 ? void 0 : _this$state$item23.isFinalResult) && /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        size: \"small\",\n        fullWidth: true,\n        margin: \"none\",\n        disabled: true,\n        id: \"mui-pickers-dateSubmitResults\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 718,\n            columnNumber: 28\n          }\n        }, t('EQAResultReportElisa.dateSubmitResults')),\n        inputVariant: \"outlined\",\n        type: \"text\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        value: (_this$state$item24 = this.state.item) === null || _this$state$item24 === void 0 ? void 0 : _this$state$item24.dateSubmitResults,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 19\n        }\n      }))), ((_this$state$item25 = this.state.item) === null || _this$state$item25 === void 0 ? void 0 : _this$state$item25.isFinalResult) && /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 728,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControlLabel, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          style: {\n            fontWeight: \"bold\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 730,\n            columnNumber: 30\n          }\n        }, \" \", t('EQAResultReportFastTest.isFinalResult')),\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          checked: this.state.item.isFinalResult ? true : false,\n          onClick: function onClick(isFinalResult) {\n            return _this4.notificationFinalResult(isFinalResult);\n          } // this.handleChange(isFinalResult, 'isFinalResult')\n          ,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 731,\n            columnNumber: 32\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 729,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 12,\n        md: 12,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        disabled: isRoleAdmin,\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 745,\n            columnNumber: 26\n          }\n        }, t(\"SampleManagement.serum-bottle.note\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        size: \"small\",\n        variant: \"outlined\",\n        name: \"note\",\n        value: (_this$state$item26 = this.state.item) === null || _this$state$item26 === void 0 ? void 0 : _this$state$item26.note,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 17\n        }\n      })), ((_this$state$item27 = this.state.item) === null || _this$state$item27 === void 0 ? void 0 : _this$state$item27.otherReagent) && /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 12,\n        md: 12,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 50\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        disabled: isRoleAdmin,\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 758,\n            columnNumber: 26\n          }\n        }, t(\"reagent.note\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        size: \"small\",\n        variant: \"outlined\",\n        name: \"noteOtherReagent\",\n        value: (_this$state$item28 = this.state.item) === null || _this$state$item28 === void 0 ? void 0 : _this$state$item28.noteOtherReagent,\n        validators: [\"required\"],\n        errorMessages: t('general.errorMessages_required'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 769,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MaterialTable, {\n        title: \"\",\n        data: ((_this$state$item29 = this.state.item) === null || _this$state$item29 === void 0 ? void 0 : _this$state$item29.details) ? (_this$state$item30 = this.state.item) === null || _this$state$item30 === void 0 ? void 0 : _this$state$item30.details : [],\n        columns: columns,\n        options: {\n          selection: false,\n          actionsColumnIndex: -1,\n          paging: false,\n          search: false,\n          rowStyle: function rowStyle(rowData, index) {\n            return {\n              backgroundColor: index % 2 === 1 ? '#EEE' : '#FFF'\n            };\n          },\n          headerStyle: {\n            backgroundColor: '#358600',\n            color: '#fff'\n          },\n          padding: 'dense',\n          toolbar: false\n        },\n        components: {\n          Toolbar: function Toolbar(props) {\n            return /*#__PURE__*/React.createElement(MTableToolbar, Object.assign({}, props, {\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 791,\n                columnNumber: 23\n              }\n            }));\n          }\n        },\n        onSelectionChange: function onSelectionChange(rows) {\n          _this4.data = rows;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 770,\n          columnNumber: 17\n        }\n      }))));\n    }\n  }]);\n\n  return EQAResultReportFastTestInformation;\n}(Component);\n\nexport default EQAResultReportFastTestInformation;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/EQAResultReportFastTest/EQAResultReportFastTestInformation.jsx"],"names":["React","Component","Dialog","Button","Grid","TextField","Icon","IconButton","FormControl","DialogTitle","DialogContent","DialogActions","Paper","InputAdornment","MenuItem","Checkbox","Select","FormControlLabel","ValidatorForm","TextValidator","saveItem","getEQASampleTubeByHealthOrgEQARoundId","checkReagentByHealthOrgRound","Autocomplete","ConstantList","AsynchronousAutocomplete","HealthOrgEQARoundPopup","searchByPage","reagentSearchByPage","Draggable","Breadcrumb","ConfirmationDialog","MuiPickersUtilsProvider","KeyboardDatePicker","DateFnsUtils","LocalConstants","MaterialTable","MTableToolbar","Chip","MTableBody","MTableHeader","useTranslation","withTranslation","Trans","toast","getCurrentUser","getListHealthOrgByUser","clsx","CircularProgress","configure","autoClose","draggable","limit","MaterialButton","props","item","onSelect","TableODColumn","isView","event","onChange","oDvalue","TableCOColumn","cutOff","TableODDeviceCOColumn","ratioOdAndCutOff","TableResultColumn","t","i18n","result","name","EQAResultReportDetail_TestValue","Not_Implemented","negative","indertermine","positive","TableNoteColumn","EQAResultReportFastTestInformation","state","hasErrorHealthOrgRound","hasErrorEQARound","isUsingIQC","isUsingControlLine","eqaRound","healthOrg","reagentLot","orderTest","reagent","technician","personBuyReagent","details","supplyOfReagent","timeToResult","round","reagentExpiryDate","testDate","shouldOpenSearchDialog","shouldOpenConfirmationDialog","shouldOpenSearchEQASampleSearchDialog","listHealthOrgRound","listReagent","listEQARound","shouldOpenHealthOrgRoundPopup","reagentUnBoxDate","isFinalResult","dateSubmitResults","typeMethod","isViewButton","loading","shouldOpenConfirmation","Results","id","listResult_C_T_Line","listChooseBoolean","value","handleDialogClose","setState","handleChange","source","target","persist","isActive","checked","handleRowDataCellChange","rowData","length","forEach","element","tableData","cLine","tLine","note","openCircularProgress","handleDateChange","date","selectReagent","handleHealthOrgRoundPopupClose","handleSelectHealthOrgRound","healthOrgRound","then","listEQASampleTube","data","tube","eQAResultReportDetail","sampleTube","push","notificationFinalResult","handleFinalResult","Date","handleDialogFinalResultClose","open","handleClose","isRoleAdmin","searchObject","pageIndex","pageSize","testType","technicianSearchObject","searchByHealthOrg","classes","columns","title","field","align","width","render","map","color","headerStyle","minWidth","paddingLeft","paddingRight","textAlign","cellStyle","option","params","dayReagentExpiryDate","monthReagentExpiryDate","yeahReagentExpiryDate","fontWeight","otherReagent","noteOtherReagent","selection","actionsColumnIndex","paging","search","rowStyle","index","backgroundColor","padding","toolbar","Toolbar","rows"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  TextField,\r\n  Icon,\r\n  IconButton,\r\n  FormControl,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Paper,\r\n  InputAdornment,\r\n  MenuItem,\r\n  Checkbox,Select,\r\n  FormControlLabel\r\n} from \"@material-ui/core\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport {\r\n  saveItem,\r\n  getEQASampleTubeByHealthOrgEQARoundId,\r\n  checkReagentByHealthOrgRound\r\n} from \"./EQAResultReportFastTestService\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport ConstantList from \"../../appConfig\";\r\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\r\nimport HealthOrgEQARoundPopup from \"../Component/HealthOrgEQARound/HealthOrgEQARoundPopup\";\r\nimport { searchByPage as reagentSearchByPage } from \"../Reagent/ReagentService\";\r\nimport Draggable from 'react-draggable';\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport LocalConstants from \"./Constants\";\r\nimport MaterialTable, { MTableToolbar, Chip, MTableBody, MTableHeader } from 'material-table';\r\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {getCurrentUser,getListHealthOrgByUser} from \"../User/UserService\";\r\nimport '../../../styles/views/_loadding.scss';\r\nimport '../../../styles/views/_style.scss';\r\nimport clsx from 'clsx';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit:3\r\n});\r\n// function PaperComponent(props) {\r\n//   return (\r\n//     <Draggable handle=\"#draggable-dialog\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n//       <Paper {...props} />\r\n//     </Draggable>\r\n//   );\r\n// }\r\nfunction MaterialButton(props) {\r\n  const item = props.item;\r\n  return <div>\r\n    <IconButton onClick={() => props.onSelect(item)}>\r\n      <Icon color=\"error\">delete</Icon>\r\n    </IconButton>\r\n  </div>;\r\n}\r\n\r\nfunction TableODColumn(props) {\r\n  let item = props.item;\r\n  return <div>\r\n    <TextField\r\n      disabled={props.isView}\r\n      className=\"w-80\"\r\n      onChange={(event) => props.onChange(event, item)}\r\n      type=\"number\"\r\n      value={item.oDvalue}\r\n      name=\"itemODvalue\"\r\n    />\r\n  </div>;\r\n}\r\n\r\nfunction TableCOColumn(props) {\r\n  let item = props.item;\r\n  return <div>\r\n    <TextField\r\n      disabled={props.isView}\r\n      className=\"w-80\"\r\n      value={item.cutOff}\r\n      onChange={(event) => props.onChange(event, item)}\r\n      type=\"number\"\r\n      name=\"itemcutOff\"\r\n    />\r\n  </div>;\r\n}\r\n\r\nfunction TableODDeviceCOColumn(props) {\r\n\r\n  let item = props.item;\r\n  return <div>\r\n    <TextField\r\n      disabled={props.isView}\r\n      className=\"w-80\"\r\n      value={item.ratioOdAndCutOff}\r\n      type=\"number\"\r\n      name=\"itemRatioOdAndCutOff\"\r\n    />\r\n  </div>;\r\n}\r\n\r\nfunction TableResultColumn(props) {\r\n  const { t, i18n } = useTranslation();\r\n  let item = props.item;\r\n  return <div>\r\n    <FormControl className=\"w-100\">\r\n      <Select\r\n        disabled={props.isView}\r\n        value={item.result}\r\n        onChange={(event) => props.onChange(event, item)}\r\n        inputProps={{\r\n          name: \"result\",\r\n        }}\r\n      >\r\n        {/* <MenuItem value=''><em>None</em> </MenuItem> */}\r\n        <MenuItem value={LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented}>{t(\"EQAResultReportElisa.Result.none\")}</MenuItem>\r\n        <MenuItem value={LocalConstants.EQAResultReportDetail_TestValue.negative}>{t(\"EQAResultReportElisa.Result.negative\")}</MenuItem>\r\n        <MenuItem value={LocalConstants.EQAResultReportDetail_TestValue.indertermine}>{t(\"EQAResultReportElisa.Result.indertermine\")}</MenuItem>\r\n        <MenuItem value={LocalConstants.EQAResultReportDetail_TestValue.positive}>{t(\"EQAResultReportElisa.Result.positive\")}</MenuItem>\r\n      </Select>\r\n    </FormControl>\r\n  </div>;\r\n}\r\nfunction TableNoteColumn(props) {\r\n  let item = props.item;\r\n  return <div>\r\n\r\n  </div>;\r\n}\r\nclass EQAResultReportFastTestInformation extends Component {\r\n\r\n  state = {\r\n    hasErrorHealthOrgRound: false,\r\n    hasErrorEQARound: false,\r\n    isUsingIQC: false,\r\n    isUsingControlLine: false,\r\n    eqaRound: '',\r\n    healthOrg: null,\r\n    reagentLot: '',\r\n    orderTest: '',\r\n    reagent: null,\r\n    technician: null,\r\n    personBuyReagent: '',\r\n    details: [],\r\n    supplyOfReagent: '',\r\n    timeToResult: '',\r\n    round: null,\r\n    reagentExpiryDate: null,\r\n    testDate: null,\r\n    shouldOpenSearchDialog: false,\r\n    shouldOpenConfirmationDialog: false,\r\n    shouldOpenSearchEQASampleSearchDialog: false,\r\n    listHealthOrgRound: [],\r\n    listReagent: [],\r\n    listEQARound: [],\r\n    shouldOpenHealthOrgRoundPopup: false,\r\n    isView: false,\r\n    reagentUnBoxDate: null,\r\n    isFinalResult: false,\r\n    dateSubmitResults: null,\r\n    typeMethod: 2,\r\n    isViewButton: false,\r\n    loading: false,\r\n    shouldOpenConfirmation: false\r\n  };\r\n\r\n  Results = [\r\n    { id: LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented, name: \"Không thực hiện\" },\r\n    { id: LocalConstants.EQAResultReportDetail_TestValue.negative, name: \"Âm tính\" },\r\n    { id: LocalConstants.EQAResultReportDetail_TestValue.positive, name: \"Dương tính\" }\r\n  ];\r\n\r\n  listResult_C_T_Line = [\r\n    { id: LocalConstants.EQAResultReportDetail_TestValue.positive, name: \"Dương tính\" },\r\n    { id: LocalConstants.EQAResultReportDetail_TestValue.negative, name: \"Âm tính\" }\r\n  ];\r\n\r\n  listChooseBoolean = [\r\n    { id: 0, value: false, name: \"Không\" },\r\n    { id: 1, value: true, name: \"Có\" }\r\n  ];\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n  handleDialogClose =()=>{\r\n    this.setState({shouldOpenConfirmationDialog: false,shouldOpenConfirmation: false})\r\n  }\r\n  handleChange = (event, source) => {\r\n    let {item} = this.state\r\n    if(item == null){\r\n      item = {}\r\n    }\r\n    let name = event.target.name\r\n    let value = event.target.value\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n    if(source === \"isFinalResult\"){\r\n      item[\"isFinalResult\"] = event.target.checked\r\n      this.setState({item:item})\r\n    }\r\n    item[name] = value\r\n    this.setState({\r\n      item: item\r\n    });\r\n\r\n  };\r\n  handleRowDataCellChange = (rowData, event) => {\r\n    let { item } = this.state;\r\n    if (item.details != null && item.details.length > 0) {\r\n      item.details.forEach(element => {\r\n        if (element.tableData != null && rowData != null && rowData.tableData != null\r\n          && element.tableData.id == rowData.tableData.id) {\r\n          if (event.target.name == \"cLine\") {\r\n            if (element.result == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\r\n              element.result = \"\"\r\n            }\r\n            element.cLine = event.target.value;\r\n          }\r\n          else if (event.target.name == \"tLine\") {\r\n            if (element.result == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\r\n              element.result = \"\"\r\n            }\r\n            element.tLine = event.target.value;\r\n          }\r\n          else if (event.target.name == \"result\") {\r\n            if (event.target.value == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\r\n              element.cLine = \"\"\r\n              element.tLine = \"\"\r\n            }\r\n            element.result = event.target.value;\r\n          }else if(event.target.name == \"note\"){\r\n            element.note = event.target.value\r\n          }\r\n\r\n        }\r\n      });\r\n      this.setState({ item: item });\r\n    }\r\n  };\r\n  openCircularProgress = () => {\r\n    this.setState({ loading: true });\r\n  };\r\n\r\n  componentWillMount() {\r\n    let { open, handleClose, item, isRoleAdmin, isView } = this.props;\r\n    this.setState({ isRoleAdmin: isRoleAdmin, isView: isView })\r\n    if(item != null && item.reagent !=  null && item.reagent.name != null){\r\n      if(item.reagent.name === \"Sinh phẩm khác\"){\r\n        item[\"otherReagent\"] = true\r\n      }else{\r\n        item[\"otherReagent\"] = false\r\n      }\r\n    }\r\n    this.setState({item: item}, ()=>{\r\n   \r\n      if(item.listHealthOrgRound != null){\r\n        this.setState({ listHealthOrgRound: item.listHealthOrgRound,\r\n        healthOrgRound: item.listHealthOrgRound[0]},() =>{\r\n          this.handleSelectHealthOrgRound(this.state.healthOrgRound);\r\n        });\r\n      }\r\n    });\r\n \r\n    this.setState({isRoleAdmin:isRoleAdmin,isView:isView})\r\n \r\n  }\r\n\r\n  handleDateChange = (date, name) => {\r\n    let {item} = this.state\r\n    if(item == null){\r\n      item = {}\r\n    }\r\n    item[name] = date\r\n    this.setState({\r\n      item: item\r\n    });\r\n  };\r\n\r\n  selectReagent = (reagent) => {\r\n    let {item} = this.state\r\n    if(item == null){\r\n      item = {}\r\n    }\r\n    if (reagent != null && reagent.id != null) {\r\n      if(reagent.name === \"Sinh phẩm khác\"){\r\n        this.setState ({shouldOpenConfirmation: true});\r\n        item[\"otherReagent\"] = true\r\n      }else{\r\n        item[\"otherReagent\"] = false\r\n      }\r\n      item[\"reagent\"] = reagent\r\n      this.setState({ item: item }, function () {\r\n      });\r\n    }\r\n  }\r\n\r\n  handleHealthOrgRoundPopupClose = () => {\r\n    this.setState({ shouldOpenHealthOrgRoundPopup: false }, function () {\r\n    });\r\n  }\r\n\r\n  handleSelectHealthOrgRound = healthOrgRound => {\r\n    let {item} = this.state\r\n    if(item == null){\r\n      item = {}\r\n    }\r\n    if (healthOrgRound && healthOrgRound.id) {\r\n      item[\"healthOrgRound\"] = healthOrgRound\r\n      this.setState({ item: item }, function () {\r\n        // let { healthOrgRound, details } = this.state;\r\n        let { item } = this.state;\r\n        let  details = this.state.item?.details;\r\n        details = [];\r\n        getEQASampleTubeByHealthOrgEQARoundId(this.state.item?.healthOrgRound.id).then((result) => {\r\n          let listEQASampleTube = result.data;\r\n          if (listEQASampleTube != null && listEQASampleTube.length > 0) {\r\n            listEQASampleTube.forEach(tube => {\r\n              let eQAResultReportDetail = {};\r\n              eQAResultReportDetail.sampleTube = tube;\r\n              eQAResultReportDetail.cLine = '';\r\n              eQAResultReportDetail.tLine = '';\r\n              eQAResultReportDetail.result = '';\r\n              details.push(eQAResultReportDetail);\r\n            });\r\n          }\r\n          item[\"details\"] = details\r\n          this.setState({ item:item });\r\n        });\r\n      });\r\n    }\r\n    this.handleHealthOrgRoundPopupClose();\r\n  }\r\n  notificationFinalResult =()=>{\r\n    // if(!this.state.item.isFinalResult || this.state.item.isFinalResult == null){\r\n    //   this.setState({shouldOpenConfirmationDialog:true})\r\n    // }\r\n    this.setState({shouldOpenConfirmationDialog:true})\r\n  }\r\n  handleFinalResult =()=>{\r\n    let {item} = this.state\r\n    if(item.isFinalResult == null || !item.isFinalResult){\r\n      item[\"isFinalResult\"] = true;\r\n      item[\"dateSubmitResults\"] = new Date();\r\n      this.setState({item:item },()=>{\r\n      })\r\n      this.handleDialogClose();\r\n      return\r\n    }\r\n    if(item.isFinalResult){\r\n      item[\"isFinalResult\"] = false;\r\n      item[\"dateSubmitResults\"] = null;\r\n      this.setState({item :item },()=>{\r\n      })\r\n      this.handleDialogClose();\r\n      return\r\n    }\r\n  }\r\n  handleDialogFinalResultClose = ()=>{\r\n    // this.setState({isFinalResult:false, dateSubmitResults: null},()=>{\r\n    // })\r\n    this.handleDialogClose()\r\n  }\r\n  render() {\r\n    let {\r\n      isRoleAdmin,\r\n      technician,\r\n      isView,\r\n      item\r\n    } = this.state;\r\n    let searchObject = { pageIndex: 0, pageSize: 1000000, testType: 2 };\r\n    let technicianSearchObject = { pageIndex: 0, pageSize: 1000000, searchByHealthOrg: true, healthOrg: (this.state.item?.healthOrgRound && this.state.item?.healthOrgRound.healthOrg && this.state.item?.healthOrgRound.healthOrg.id) ? { id: this.state.item?.healthOrgRound.healthOrg.id } : null };\r\n    let { open, handleClose, classes, t, i18n } = this.props;\r\n    let columns = [\r\n      {\r\n        title: t(\"EQAResultReportFastTest.sample_list.sample_code\"), field: \"sampleTube.code\", align: \"left\", width: \"150\"\r\n      },\r\n      {\r\n        title: t(\"EQAResultReportFastTest.cLine\"),\r\n        field: \"cLine\",\r\n        width: \"150\",\r\n        render: rowData =>\r\n          <FormControl className=\"w-80\">\r\n            <Select\r\n              value={rowData.cLine}\r\n              disabled={isRoleAdmin}\r\n              onChange={cLine => this.handleRowDataCellChange(rowData, cLine)}\r\n              inputProps={{\r\n                name: \"cLine\",\r\n                id: \"cLine-simple\"\r\n              }}\r\n            >\r\n              {this.listResult_C_T_Line.map(item => {\r\n                return <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>;\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n      },\r\n      {\r\n        title: t(\"EQAResultReportFastTest.tLine\"),\r\n        field: \"tLine\",\r\n        width: \"150\",\r\n        render: rowData =>\r\n          <FormControl className=\"w-80\" disabled={isRoleAdmin}>\r\n            <Select\r\n              value={rowData.tLine}\r\n              onChange={tLine => this.handleRowDataCellChange(rowData, tLine)}\r\n              inputProps={{\r\n                name: \"tLine\",\r\n                id: \"tLine-simple\"\r\n              }}\r\n            >\r\n              {/* <MenuItem value=''><em>None</em> </MenuItem> */}\r\n              {this.listResult_C_T_Line.map(item => {\r\n                return <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>;\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n      },\r\n      {\r\n        title: <span>\r\n          <span style={{ color: \"red\" }}> * </span>\r\n          {t(\"EQAResultReportFastTest.sample_list.result\")}\r\n        </span>, field: \"result\", align: \"left\", width: \"150\",\r\n        render: rowData =>\r\n          <FormControl className=\"w-80\">\r\n            <Select\r\n              value={rowData.result}\r\n              disabled={isRoleAdmin}\r\n              onChange={result => this.handleRowDataCellChange(rowData, result)}\r\n              inputProps={{\r\n                name: \"result\",\r\n                id: \"result-simple\"\r\n              }}\r\n            >\r\n              {this.Results.map(item => {\r\n                return <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>;\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n      },\r\n      {\r\n        title:t(\"SampleManagement.serum-bottle.note\"),\r\n        field: \"note\",\r\n        width: \"150\",\r\n        headerStyle: {\r\n          minWidth: \"200px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n          textAlign: \"left\",\r\n        },\r\n        cellStyle: {\r\n          minWidth: \"200px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n          textAlign: \"left\",\r\n        },\r\n        render: rowData =>\r\n          <TextValidator\r\n            className=\"w-100\"\r\n            onChange={note => this.handleRowDataCellChange(rowData, note)}\r\n            type=\"textarea\"\r\n            multiLine\r\n            rowsMax={4}\r\n            name=\"note\"\r\n            value={rowData.note ? rowData.note : ''}\r\n            disabled={isRoleAdmin}\r\n          />\r\n      }\r\n    ];\r\n    return (\r\n        <React.Fragment>\r\n          {this.state.shouldOpenConfirmationDialog && (\r\n              <ConfirmationDialog\r\n                title={t(\"confirm\")}\r\n                open={this.state.shouldOpenConfirmationDialog}\r\n                onConfirmDialogClose={this.handleDialogFinalResultClose}\r\n                onYesClick={this.handleFinalResult}\r\n                text={this.state.item?.isFinalResult? t(\"EqaResult.unFinalResultConfirm\"):t(\"EqaResult.FinalResultConfirm\")}\r\n                Yes={t(\"general.Yes\")}\r\n                No={t(\"general.No\")}\r\n              />\r\n            )}\r\n            {this.state.shouldOpenConfirmation && (\r\n              <ConfirmationDialog\r\n                title = {t(\"general.noti\")}\r\n                open={this.state.shouldOpenConfirmation}\r\n                onYesClick = {this.handleDialogFinalResultClose}\r\n                text={t(\"general.otherReagent\")}\r\n                Yes = {t(\"general.Yes\")}\r\n              />\r\n            )}\r\n            <Grid container spacing={2}>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <Autocomplete\r\n                  size=\"small\"\r\n                  id=\"combo-box\"\r\n                  options={this.props.listHealthOrgRound}\r\n                  className=\"flex-end\"\r\n                  disabled = {isRoleAdmin}\r\n                  getOptionLabel={(option) => option.healthOrg.name}\r\n                  onChange={(event, healthOrgRound)=> this.handleSelectHealthOrgRound(healthOrgRound)}\r\n                  value={this.state.item?.healthOrgRound}\r\n                  renderInput={(params) => <TextField {...params}\r\n                    label={<span className=\"font\">{t('EQAResultReportElisa.healthOrgName')}</span>}\r\n                    variant = \"outlined\"\r\n                    disabled={isRoleAdmin}\r\n                  />}\r\n                />\r\n              </Grid>\r\n              <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                <TextValidator\r\n                  size=\"small\"\r\n                  variant = \"outlined\"\r\n                  className=\"w-100\"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EQAResultReportElisa.order\")}\r\n                    </span>\r\n                    }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"orderTest\"\r\n                  value={this.state.item?.orderTest}\r\n                  disabled={isRoleAdmin}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={t('general.errorMessages_required')}\r\n                />\r\n              </Grid>\r\n              <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <KeyboardDatePicker\r\n                    size=\"small\"\r\n                    className=\"w-100\"\r\n                    margin=\"none\"\r\n                    id=\"mui-pickers-testDate\"\r\n                    label={<span className=\"font\">{t(\"EQAResultReportElisa.testDate\")}</span>}\r\n                    inputVariant=\"outlined\"\r\n                    type=\"text\"\r\n                    autoOk={true}\r\n                    format=\"dd/MM/yyyy\"\r\n                    value={this.state.item?.testDate ? this.state.item?.testDate : null}\r\n                    disabled={isRoleAdmin}\r\n                    onChange={date => this.handleDateChange(date, \"testDate\")}\r\n                    fullWidth\r\n                    validators={[\"required\"]}\r\n                    errorMessages={t('general.errorMessages_required')}\r\n                  />\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n              <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <TextValidator\r\n                  size=\"small\"\r\n                  variant = \"outlined\"\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\">{t(\"EQAResultReportElisa.technician\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"technician\"\r\n                  value={this.state.item?.technician}\r\n                  disabled={isView }\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <AsynchronousAutocomplete\r\n                 label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EqaResult.reagent\")}\r\n                    </span>\r\n                    }\r\n                  size=\"small\"\r\n                  variant = \"outlined\"\r\n                  disabled={isRoleAdmin}\r\n                  searchFunction={reagentSearchByPage}\r\n                  searchObject={searchObject}\r\n                  defaultValue={this.state.item?.reagent}\r\n                  value={this.state.item?.reagent}\r\n                  displayLable={'name'}\r\n                  valueTextValidator={this.state.item?.reagent}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={t('general.errorMessages_required')}\r\n                  onSelect={this.selectReagent}\r\n                />\r\n              </Grid>\r\n              <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                <TextValidator\r\n                  size=\"small\"\r\n                  variant = \"outlined\"\r\n                  className=\"w-100\"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EQAResultReportElisa.reagentLot\")}\r\n                    </span>\r\n                    }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"reagentLot\"\r\n                  value={this.state.item?.reagentLot}\r\n                  disabled={isRoleAdmin}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={t('general.errorMessages_required')}\r\n                />\r\n              </Grid>\r\n              <Grid item container spacing={2} lg={6} md={6} sm={12} xs={12}>\r\n                <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                  <TextValidator\r\n                    className=\"w-100\"\r\n                    label={<span className=\"font\">{t(\"reagent.expirationDay\")}</span>}\r\n                    onChange={this.handleChange}\r\n                    type=\"number\"\r\n                    name=\"dayReagentExpiryDate\"\r\n                    disabled={isRoleAdmin}\r\n                    value={this.state.item?.dayReagentExpiryDate}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                  <TextValidator\r\n                    className=\"w-100\"\r\n                    label={<span className=\"font\">{t(\"reagent.expirationMonth\")}</span>}\r\n                    onChange={this.handleChange}\r\n                    type=\"number\"\r\n                    name=\"monthReagentExpiryDate\"\r\n                    value={this.state.item?.monthReagentExpiryDate}\r\n                    disabled={isRoleAdmin}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                  <TextValidator\r\n                    className=\"w-100\"\r\n                    label={<span className=\"font\">{t(\"reagent.expirationYear\")}</span>}\r\n                    onChange={this.handleChange}\r\n                    type=\"number\"\r\n                    name=\"yeahReagentExpiryDate\"\r\n                    value={this.state.item?.yeahReagentExpiryDate}\r\n                    disabled={isRoleAdmin}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    validators={[\"required\"]}\r\n                    errorMessages={t('general.errorMessages_required')}\r\n                  />\r\n                </Grid>\r\n                \r\n              </Grid>\r\n              <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <KeyboardDatePicker\r\n                    size=\"small\"\r\n                    fullWidth\r\n                    margin=\"none\"\r\n                    id=\"mui-pickers-reagentExpiryDate\"\r\n                    label={<span className=\"font\">{t('EQAResultReportElisa.reagentUnBoxDate')}</span>}\r\n                    inputVariant=\"outlined\"\r\n                    type=\"text\"\r\n                    autoOk={false}\r\n                    format=\"dd/MM/yyyy\"\r\n                    value={this.state.item?.reagentUnBoxDate}\r\n                    disabled={isRoleAdmin}\r\n                    onChange={date => this.handleDateChange(date, \"reagentUnBoxDate\")}\r\n                  />\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  size=\"small\"\r\n                  variant = \"outlined\"\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\">{t(\"EQAResultReportElisa.supplyOfReagent\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"supplyOfReagent\"\r\n                  value={this.state.item?.supplyOfReagent}\r\n                  disabled={isRoleAdmin}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item lg={5} md={5} sm={12} xs={12}>\r\n                <TextValidator\r\n                  size=\"small\"\r\n                  variant = \"outlined\"\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAResultReportElisa.personBuyReagent\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"personBuyReagent\"\r\n                  value={this.state.item?.personBuyReagent}\r\n                  disabled={isRoleAdmin}\r\n                />\r\n              </Grid>\r\n              {this.state.item?.isFinalResult && \r\n              (<Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <KeyboardDatePicker\r\n                    size=\"small\"\r\n                    fullWidth\r\n                    margin=\"none\"\r\n                    disabled = {true}\r\n                    id=\"mui-pickers-dateSubmitResults\"\r\n                    label={<span className=\"font\">{t('EQAResultReportElisa.dateSubmitResults')}</span>}\r\n                    inputVariant=\"outlined\"\r\n                    type=\"text\"\r\n                    autoOk={false}\r\n                    format=\"dd/MM/yyyy\"\r\n                    value={this.state.item?.dateSubmitResults}\r\n                  />\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>)} \r\n              {this.state.item?.isFinalResult && (\r\n              <Grid item lg={3} md={3} sm={12} xs={12}>\r\n              <FormControlLabel\r\n                      label={<span className=\"font\" style={{ fontWeight : \"bold\"}}> {t('EQAResultReportFastTest.isFinalResult')}</span>}\r\n                      control={<Checkbox checked={this.state.item.isFinalResult ? true : false} \r\n                      onClick={(isFinalResult) =>\r\n                        this.notificationFinalResult(isFinalResult)\r\n                      // this.handleChange(isFinalResult, 'isFinalResult')\r\n                        }\r\n                        />}\r\n                        \r\n                      />\r\n              </Grid>\r\n              )}\r\n              <Grid item lg={12} md ={12} sm={12} xs={12}>\r\n                <TextValidator\r\n                  disabled ={isRoleAdmin}\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\">{t(\"SampleManagement.serum-bottle.note\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  size = \"small\"\r\n                  variant = \"outlined\"\r\n                  name=\"note\"\r\n                  value={this.state.item?.note}\r\n                />\r\n              </Grid>\r\n              {this.state.item?.otherReagent && (<Grid item lg={12} md ={12} sm={12} xs={12}>\r\n                <TextValidator\r\n                  disabled ={isRoleAdmin}\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\">{t(\"reagent.note\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  size = \"small\"\r\n                  variant = \"outlined\"\r\n                  name=\"noteOtherReagent\"\r\n                  value={this.state.item?.noteOtherReagent}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={t('general.errorMessages_required')}\r\n                />\r\n              </Grid>)}\r\n              <Grid item sm={12} xs={12}>\r\n                <MaterialTable\r\n                  title={\"\"}\r\n                  data={this.state.item?.details ? this.state.item?.details :[]}\r\n                  columns={columns}\r\n                  options={{\r\n                    selection: false,\r\n                    actionsColumnIndex: -1,\r\n                    paging: false,\r\n                    search: false,\r\n                    rowStyle: (rowData, index) => ({\r\n                      backgroundColor: (index % 2 === 1) ? '#EEE' : '#FFF',\r\n                    }),\r\n                    headerStyle: {\r\n                      backgroundColor: '#358600',\r\n                      color:'#fff',\r\n                    },\r\n                    padding: 'dense',\r\n                    toolbar: false\r\n                  }}\r\n                  components={{\r\n                    Toolbar: props => (\r\n                      <MTableToolbar {...props} />\r\n                    ),\r\n                  }}\r\n                  onSelectionChange={(rows) => {\r\n                    this.data = rows;\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EQAResultReportFastTestInformation;\r\n"]},"metadata":{},"sourceType":"module"}