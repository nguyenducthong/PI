{"ast":null,"code":"import _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\EQASerumBottle\\\\EQASerumBottleEditorDialog.jsx\";\nimport React, { Component } from \"react\";\nimport { Dialog, Button, Grid, DialogActions, FormControlLabel, Switch, Checkbox, Icon, IconButton } from \"@material-ui/core\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, DateTimePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { ValidatorForm, TextValidator, TextField } from \"react-material-ui-form-validator\";\nimport { saveItem, checkCode } from \"./EQASerumBottleService\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\nimport EQASerumBankSearchDialog from \"./EQASerumBankSearchDialog\";\nimport { searchByPage as searchByPageSerumBank } from \"../EQASerumBank/EQASerumBankService\";\nimport Input from \"@material-ui/core/Input\";\nimport LocalValue from \"./Constants\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\nimport Select from \"@material-ui/core/Select\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../../../styles/views/_style.scss';\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n});\n\nfunction PaperComponent(props) {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    handle: \"#draggable-dialog-title\",\n    cancel: '[class*=\"MuiDialogContent-root\"]',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  })));\n}\n\nvar EQASerumBottleEditorDialog = /*#__PURE__*/function (_Component) {\n  _inherits(EQASerumBottleEditorDialog, _Component);\n\n  var _super = _createSuper(EQASerumBottleEditorDialog);\n\n  function EQASerumBottleEditorDialog() {\n    var _this;\n\n    _classCallCheck(this, EQASerumBottleEditorDialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      shouldOpenConfirmationDialog: false,\n      eqaSerumBank: [],\n      hivStatus: '',\n      hcvStatus: \"\",\n      hbvStatus: \"\",\n      isView: false,\n      bottleQuality: \"\",\n      isManualSetCode: false,\n      resultBottle: false\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"resultBottle\") {\n        _this.setState({\n          resultBottle: event.target.checked\n        });\n      }\n\n      if (source === \"isManualSetCode\") {\n        _this.setState({\n          isManualSetCode: event.target.checked\n        });\n      }\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.handleFormSubmit = function () {\n      _this.setState({\n        isView: true\n      });\n\n      var t = _this.props.t;\n      var _this$state = _this.state,\n          id = _this$state.id,\n          code = _this$state.code,\n          isManualSetCode = _this$state.isManualSetCode;\n\n      if (isManualSetCode) {\n        checkCode(id, code).then(function (res) {\n          if (res.data) {\n            toast.warning(t(\"mess_code\"));\n\n            _this.setState({\n              isView: false\n            });\n          } else {\n            if (id) {\n              saveItem(_objectSpread({}, _this.state)).then(function (response) {\n                if (response.data != null && response.status == 200) {\n                  // this.props.handleOKEditClose();\n                  _this.state.id = response.data.id;\n\n                  _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n                    isView: false\n                  }));\n\n                  toast.success(t('mess_edit'));\n                }\n              }).catch(function () {\n                toast.warning(t(\"mess_edit_error\"));\n\n                _this.setState({\n                  isView: false\n                });\n              });\n            } else {\n              saveItem(_objectSpread({}, _this.state)).then(function (response) {\n                if (response.data != null && response.status == 200) {\n                  // this.props.handleOKEditClose();\n                  _this.state.id = response.data.id;\n\n                  _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n                    isView: false\n                  }));\n\n                  toast.success(t('mess_add'));\n                }\n\n                ;\n              }).catch(function () {\n                toast.warning(t(\"mess_add_error\"));\n\n                _this.setState({\n                  isView: false\n                });\n              });\n            }\n          }\n        });\n      } else {\n        if (id) {\n          saveItem(_objectSpread({}, _this.state)).then(function (response) {\n            if (response.data != null && response.status == 200) {\n              // this.props.handleOKEditClose();\n              _this.state.id = response.data.id;\n\n              _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n                isView: false\n              }));\n\n              toast.success(t('mess_edit'));\n            }\n\n            ;\n          }).catch(function () {\n            toast.warning(t(\"mess_edit_error\"));\n\n            _this.setState({\n              isView: false\n            });\n          });\n        } else {\n          saveItem(_objectSpread({}, _this.state)).then(function (response) {\n            if (response.data != null && response.status == 200) {\n              // this.props.handleOKEditClose();\n              _this.state.id = response.data.id;\n\n              _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n                isView: false\n              }));\n\n              toast.success(t('mess_add'));\n            }\n\n            ;\n          }).catch(function () {\n            toast.warning(t(\"mess_add_error\"));\n\n            _this.setState({\n              isView: false\n            });\n          });\n        }\n      }\n    };\n\n    _this.handleSearchSerumBankDialogClose = function () {\n      _this.setState({\n        shouldOpenSearchSerumBankDialog: false\n      });\n    };\n\n    _this.handleSelectSerumBank = function (item, source) {\n      _this.setState({\n        eqaSerumBank: item\n      });\n\n      if (source === \"active\" && item != null) {\n        _this.setState({\n          hivStatus: item.hivStatus,\n          hcvStatus: item.hcvStatus,\n          hbvStatus: item.hbvStatus\n        });\n      }\n    };\n\n    _this.handleSelectAdministrativeUnitType = function (item) {\n      //alert('Test');\n      _this.setState({\n        administrativeUnit: item\n      });\n\n      _this.handleSearchDialogClose();\n    };\n\n    _this.handleThrombinAddedDateChange = function (date) {\n      _this.setState({\n        thrombinAddedDate: date\n      });\n    };\n\n    _this.handleRemoveFibrinDateChange = function (date) {\n      _this.setState({\n        removeFibrinDate: date\n      });\n    };\n\n    _this.handleCentrifugeDateChange = function (date) {\n      _this.setState({\n        centrifugeDate: date\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(EQASerumBottleEditorDialog, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item;\n      this.setState(_objectSpread({}, this.props.item));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          handleClose = _this$props2.handleClose,\n          handleOKEditClose = _this$props2.handleOKEditClose,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n;\n      var _this$state2 = this.state,\n          id = _this$state2.id,\n          code = _this$state2.code,\n          hivStatus = _this$state2.hivStatus,\n          hcvStatus = _this$state2.hcvStatus,\n          hbvStatus = _this$state2.hbvStatus,\n          isManualSetCode = _this$state2.isManualSetCode,\n          bottleQuality = _this$state2.bottleQuality,\n          bottleVolume = _this$state2.bottleVolume,\n          localSaveBottle = _this$state2.localSaveBottle,\n          isView = _this$state2.isView,\n          eqaSerumBank = _this$state2.eqaSerumBank,\n          resultBottle = _this$state2.resultBottle,\n          shouldOpenSearchSerumBankDialog = _this$state2.shouldOpenSearchSerumBankDialog,\n          shouldOpenConfirmationDialog = _this$state2.shouldOpenConfirmationDialog,\n          note = _this$state2.note;\n      var searchObject = {\n        pageIndex: 0,\n        pageSize: 1000000\n      };\n      return /*#__PURE__*/React.createElement(Dialog, {\n        open: open,\n        PaperComponent: PaperComponent,\n        maxWidth: \"md\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(DialogTitle, {\n        style: {\n          cursor: \"move\"\n        },\n        id: \"draggable-dialog-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"mb-20 styleColor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 9\n        }\n      }, \" \", (id ? t(\"update\") : t(\"Add\")) + \" \" + t(\"SampleManagement.serum-bottle.title\"), \" \"), /*#__PURE__*/React.createElement(IconButton, {\n        style: {\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\"\n        },\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        color: \"error\",\n        title: t(\"close\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 112\n        }\n      }, \"close\"))), /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        style: {\n          overflowY: \"auto\",\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DialogContent, {\n        dividers: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        className: \"mb-16\",\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(AsynchronousAutocomplete, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 50\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 73\n          }\n        }, \" * \"), t(\"SampleManagement.serum-bottle.eqaSerumBank\")),\n        size: \"small\",\n        searchFunction: searchByPageSerumBank,\n        searchObject: searchObject,\n        size: \"small\",\n        variant: \"outlined\",\n        defaultValue: eqaSerumBank,\n        value: eqaSerumBank,\n        displayLable: 'serumCode',\n        valueTextValidator: eqaSerumBank,\n        onSelect: function onSelect(event) {\n          return _this2.handleSelectSerumBank(event, \"active\");\n        },\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 5,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControlLabel, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          style: {\n            fontWeight: \"bold\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 26\n          }\n        }, t('EQASerumBank.isManualSetCode')),\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          checked: isManualSetCode,\n          onChange: function onChange(isManualSetCode) {\n            return _this2.handleChange(isManualSetCode, \"isManualSetCode\");\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 28\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 17\n        }\n      })), isManualSetCode && /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 7,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 35\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 26\n          }\n        }, t(\"SampleManagement.serum-bottle.code\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        size: \"small\",\n        variant: \"outlined\",\n        name: \"code\",\n        value: code,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"hivStatus\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 20\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.hivStatus\"))), /*#__PURE__*/React.createElement(Select, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 28\n          }\n        }, t(\"SampleManagement.serum-bottle.OriginnalResult.hivStatus\")) // name=\"hivStatus\"\n        ,\n        value: typeof hivStatus == \"undefined\" ? '' : hivStatus,\n        onChange: function onChange(event) {\n          return _this2.handleChange(event);\n        } // input={<Input id=\"hivStatus\" />}\n        ,\n        inputProps: {\n          id: \"hivStatus\",\n          name: \"hivStatus\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.positive,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.positive\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.indertermine,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.indertermine\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.negative,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.negative\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.Not_Implemented,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.none\"))))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"hcvStatus\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 20\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.hcvStatus\"))), /*#__PURE__*/React.createElement(Select // name=\"hcvStatus\"\n      , {\n        value: typeof hcvStatus == \"undefined\" ? '' : hcvStatus,\n        onChange: function onChange(event) {\n          return _this2.handleChange(event);\n        } // input={<Input id=\"hcvStatus\" />}\n        ,\n        inputProps: {\n          id: \"hcvStatus\",\n          name: \"hcvStatus\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.positive,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.positive\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.indertermine,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.indertermine\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.negative,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.negative\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.Not_Implemented,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.none\"))))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"hbvStatus\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 20\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.hbvStatus\"))), /*#__PURE__*/React.createElement(Select // name=\"hbvStatus\"\n      , {\n        value: typeof hbvStatus == \"undefined\" ? '' : hbvStatus,\n        onChange: function onChange(event) {\n          return _this2.handleChange(event);\n        } // input={<Input id=\"hbvStatus\" />}\n        ,\n        inputProps: {\n          id: \"hbvStatus\",\n          name: \"hbvStatus\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.positive,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.positive\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.indertermine,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.indertermine\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.negative,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.negative\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.Not_Implemented,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.none\"))))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"bottleQuality\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 20\n        }\n      }, t(\"SampleManagement.serum-bottle.bottleQuality\"))), /*#__PURE__*/React.createElement(Select // name=\"bottleQuality\"\n      , {\n        value: typeof bottleQuality == \"undefined\" ? '' : bottleQuality // value={bottleQuality ? \"Đạt\" : \"Chưa Đạt\"}\n        ,\n        onChange: function onChange(event) {\n          return _this2.handleChange(event);\n        } // input={<Input id=\"bottleQuality\" />}\n        ,\n        inputProps: {\n          id: \"bottleQuality\",\n          name: \"bottleQuality\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQASerumBottle_Value.yes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 21\n        }\n      }, t(\"EQASerumBank.Yes\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQASerumBottle_Value.no,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 21\n        }\n      }, t(\"EQASerumBank.No\"))))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 26\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 49\n          }\n        }, \" * \"), t(\"SampleManagement.serum-bottle.bottleVolume\") + \"(ml)\"),\n        onChange: this.handleChange,\n        type: \"number\",\n        size: \"small\",\n        variant: \"outlined\",\n        name: \"bottleVolume\",\n        value: bottleVolume,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 26\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 49\n          }\n        }, \" * \"), t(\"SampleManagement.serum-bottle.localSaveBottle\")),\n        onChange: this.handleChange,\n        type: \"number\",\n        size: \"small\",\n        variant: \"outlined\",\n        name: \"localSaveBottle\",\n        value: localSaveBottle,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 26\n          }\n        }, t(\"SampleManagement.serum-bottle.note\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        variant: \"outlined\",\n        size: \"small\",\n        name: \"note\",\n        value: note,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControlLabel, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          style: {\n            fontWeight: \"bold\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 26\n          }\n        }, t('SampleManagement.serum-bottle.resultBottle')),\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          checked: resultBottle,\n          onChange: function onChange(resultBottle) {\n            return _this2.handleChange(resultBottle, 'resultBottle');\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 28\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 17\n        }\n      })))), /*#__PURE__*/React.createElement(DialogActions, {\n        spacing: 4,\n        className: \"flex flex-end flex-middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: function onClick() {\n          return _this2.props.handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 13\n        }\n      }, t(\"Cancel\")), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        disabled: this.state.isView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 13\n        }\n      }, t(\"Save\")))));\n    }\n  }]);\n\n  return EQASerumBottleEditorDialog;\n}(Component);\n\nexport default EQASerumBottleEditorDialog;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/EQASerumBottle/EQASerumBottleEditorDialog.jsx"],"names":["React","Component","Dialog","Button","Grid","DialogActions","FormControlLabel","Switch","Checkbox","Icon","IconButton","MuiPickersUtilsProvider","KeyboardDatePicker","DateTimePicker","DateFnsUtils","ValidatorForm","TextValidator","TextField","saveItem","checkCode","DialogContent","DialogTitle","Draggable","Paper","EQASerumBankSearchDialog","searchByPage","searchByPageSerumBank","Input","LocalValue","InputLabel","MenuItem","FormControl","AsynchronousAutocomplete","Select","toast","configure","autoClose","draggable","limit","PaperComponent","props","EQASerumBottleEditorDialog","state","shouldOpenConfirmationDialog","eqaSerumBank","hivStatus","hcvStatus","hbvStatus","isView","bottleQuality","isManualSetCode","resultBottle","handleChange","event","source","persist","setState","isActive","target","checked","name","value","handleFormSubmit","t","id","code","then","res","data","warning","response","status","success","catch","handleSearchSerumBankDialogClose","shouldOpenSearchSerumBankDialog","handleSelectSerumBank","item","handleSelectAdministrativeUnitType","administrativeUnit","handleSearchDialogClose","handleThrombinAddedDateChange","date","thrombinAddedDate","handleRemoveFibrinDateChange","removeFibrinDate","handleCentrifugeDateChange","centrifugeDate","open","handleClose","handleOKEditClose","i18n","bottleVolume","localSaveBottle","note","searchObject","pageIndex","pageSize","cursor","position","right","top","overflowY","display","flexDirection","color","fontWeight","EQAResult_Value","positive","indertermine","negative","Not_Implemented","EQASerumBottle_Value","yes","no"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  DialogActions,\r\n  FormControlLabel,\r\n  Switch,\r\n  Checkbox, Icon, IconButton\r\n} from \"@material-ui/core\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n  DateTimePicker,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  ValidatorForm,\r\n  TextValidator,\r\n  TextField,\r\n} from \"react-material-ui-form-validator\";\r\nimport { saveItem, checkCode } from \"./EQASerumBottleService\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport EQASerumBankSearchDialog from \"./EQASerumBankSearchDialog\";\r\nimport { searchByPage as searchByPageSerumBank } from \"../EQASerumBank/EQASerumBankService\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport LocalValue from \"./Constants\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../../styles/views/_style.scss';\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit: 3\r\n});\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#draggable-dialog-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\nclass EQASerumBottleEditorDialog extends Component {\r\n  state = {\r\n    shouldOpenConfirmationDialog: false,\r\n    eqaSerumBank: [],\r\n    hivStatus: '',\r\n    hcvStatus: \"\",\r\n    hbvStatus: \"\",\r\n    isView: false,\r\n    bottleQuality: \"\",\r\n    isManualSetCode: false,\r\n    resultBottle: false\r\n  };\r\n\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n    if (source === \"resultBottle\") {\r\n      this.setState({ resultBottle: event.target.checked });\r\n    }\r\n    if (source === \"isManualSetCode\") {\r\n      this.setState({ isManualSetCode: event.target.checked });\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleFormSubmit = () => {\r\n    this.setState({ isView: true });\r\n    let { t } = this.props;\r\n    let { id, code, isManualSetCode } = this.state;\r\n    if (isManualSetCode) {\r\n      checkCode(id, code).then(res => {\r\n        if (res.data) {\r\n          toast.warning(t(\"mess_code\"));\r\n          this.setState({ isView: false });\r\n        } else {\r\n          if (id) {\r\n            saveItem({\r\n              ...this.state,\r\n            }).then((response) => {\r\n              if(response.data != null && response.status == 200){\r\n                // this.props.handleOKEditClose();\r\n                this.state.id = response.data.id\r\n                this.setState({...this.state, isView: false})\r\n                toast.success(t('mess_edit'));\r\n              }\r\n            }).catch(()=>{\r\n              toast.warning(t(\"mess_edit_error\"));\r\n              this.setState({ isView: false });\r\n            });\r\n          }\r\n          else {\r\n            saveItem({\r\n              ...this.state,\r\n            }).then((response) => {\r\n              if(response.data != null && response.status == 200){\r\n                // this.props.handleOKEditClose();\r\n                this.state.id = response.data.id\r\n                this.setState({...this.state, isView: false})\r\n                toast.success(t('mess_add'));\r\n              };\r\n            }).catch(()=>{\r\n              toast.warning(t(\"mess_add_error\"));\r\n              this.setState({ isView: false });\r\n            });\r\n          }\r\n        }\r\n      })\r\n    } else {\r\n      if (id) {\r\n        saveItem({\r\n          ...this.state,\r\n        }).then((response) => {\r\n          if(response.data != null && response.status == 200){\r\n            // this.props.handleOKEditClose();\r\n            this.state.id = response.data.id\r\n            this.setState({...this.state, isView: false})\r\n            toast.success(t('mess_edit'));\r\n          };\r\n        }).catch(()=>{\r\n          toast.warning(t(\"mess_edit_error\"));\r\n          this.setState({ isView: false });\r\n        });\r\n\r\n      }\r\n      else {\r\n        saveItem({\r\n          ...this.state,\r\n        }).then((response) => {\r\n          if(response.data != null && response.status == 200){\r\n            // this.props.handleOKEditClose();\r\n            this.state.id = response.data.id\r\n            this.setState({...this.state, isView: false})\r\n            toast.success(t('mess_add'));\r\n          };\r\n        }).catch(()=>{\r\n          toast.warning(t(\"mess_add_error\"));\r\n          this.setState({ isView: false });\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  componentWillMount() {\r\n    let { open, handleClose, item } = this.props;\r\n    this.setState({\r\n      ...this.props.item,\r\n    });\r\n  }\r\n\r\n  handleSearchSerumBankDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenSearchSerumBankDialog: false,\r\n    });\r\n  };\r\n  handleSelectSerumBank = (item, source) => {\r\n    this.setState({ eqaSerumBank: item });\r\n    if (source === \"active\" && item != null) {\r\n      this.setState({\r\n        hivStatus: item.hivStatus,\r\n        hcvStatus: item.hcvStatus, hbvStatus: item.hbvStatus\r\n      });\r\n    }\r\n  };\r\n  handleSelectAdministrativeUnitType = (item) => {\r\n    //alert('Test');\r\n    this.setState({ administrativeUnit: item });\r\n    this.handleSearchDialogClose();\r\n  };\r\n  handleThrombinAddedDateChange = (date) => {\r\n    this.setState({\r\n      thrombinAddedDate: date,\r\n    });\r\n  };\r\n  handleRemoveFibrinDateChange = (date) => {\r\n    this.setState({\r\n      removeFibrinDate: date,\r\n    });\r\n  };\r\n  handleCentrifugeDateChange = (date) => {\r\n    this.setState({\r\n      centrifugeDate: date,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { open, handleClose, handleOKEditClose, t, i18n } = this.props;\r\n    let {\r\n      id,\r\n      code,\r\n      hivStatus,\r\n      hcvStatus,\r\n      hbvStatus,\r\n      isManualSetCode,\r\n      bottleQuality,\r\n      bottleVolume,\r\n      localSaveBottle,\r\n      isView,\r\n      eqaSerumBank,\r\n      resultBottle,\r\n      shouldOpenSearchSerumBankDialog,\r\n      shouldOpenConfirmationDialog, note\r\n    } = this.state;\r\n    let searchObject = { pageIndex: 0, pageSize: 1000000 };\r\n\r\n    return (\r\n      <Dialog\r\n        open={open}\r\n        PaperComponent={PaperComponent}\r\n        maxWidth={\"md\"}\r\n        fullWidth={true}\r\n      >\r\n        <DialogTitle style={{ cursor: \"move\" }} id=\"draggable-dialog-title\">\r\n        <span className=\"mb-20 styleColor\"> {(id ? t(\"update\") : t(\"Add\")) + \" \" + t(\"SampleManagement.serum-bottle.title\")} </span>\r\n        <IconButton style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }} onClick={() => handleClose()}><Icon color=\"error\"\r\n              title={t(\"close\")}>\r\n              close\r\n            </Icon>\r\n            </IconButton>\r\n        </DialogTitle>\r\n        <ValidatorForm\r\n          ref=\"form\"\r\n          onSubmit={this.handleFormSubmit}\r\n          style={{\r\n            overflowY: \"auto\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n          }}\r\n        >\r\n          <DialogContent dividers>\r\n            <Grid className=\"mb-16\" container spacing={2}>\r\n              <Grid item lg={6} md={6} sm={12} xs={12}>\r\n                <AsynchronousAutocomplete label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                  {t(\"SampleManagement.serum-bottle.eqaSerumBank\")}\r\n                </span>}\r\n                  size=\"small\"\r\n                  searchFunction={searchByPageSerumBank}\r\n                  searchObject={searchObject}\r\n                  size = \"small\"\r\n                  variant = \"outlined\"\r\n                  defaultValue={eqaSerumBank}\r\n                  value={eqaSerumBank}\r\n                  displayLable={'serumCode'}\r\n                  valueTextValidator={eqaSerumBank}\r\n                  onSelect={(event) => this.handleSelectSerumBank(event, \"active\")}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                />\r\n              </Grid>\r\n              <Grid item lg={3} md={3} sm={5} xs={12}>\r\n                <FormControlLabel\r\n                  label={<span className=\"font\" style={{fontWeight: \"bold\"}}>{t('EQASerumBank.isManualSetCode')}</span>}\r\n                  control={<Checkbox checked={isManualSetCode}\r\n                    onChange={(isManualSetCode) =>\r\n                      this.handleChange(isManualSetCode, \"isManualSetCode\")\r\n                    }\r\n                  />}\r\n\r\n                />\r\n              </Grid>\r\n              {isManualSetCode && <Grid item lg={3} md={3} sm={7} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\">{t(\"SampleManagement.serum-bottle.code\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  size = \"small\"\r\n                  variant = \"outlined\"\r\n                  name=\"code\"\r\n                  value={code}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                />\r\n              </Grid>}\r\n              <Grid item  lg={6} md={6} sm={12} xs={12}>\r\n                <FormControl className=\"w-100\" variant=\"outlined\" size = \"small\">\r\n                  <InputLabel htmlFor=\"hivStatus\">\r\n                  {<span className=\"font\">{t(\"SampleManagement.serum-bottle.OriginnalResult.hivStatus\")}</span>}\r\n                  </InputLabel>\r\n                  <Select\r\n                    label={<span className=\"font\">{t(\"SampleManagement.serum-bottle.OriginnalResult.hivStatus\")}</span>}\r\n                    // name=\"hivStatus\"\r\n                    value={typeof hivStatus == \"undefined\" ? '' : hivStatus}\r\n                    onChange={(event) => this.handleChange(event)}\r\n                    // input={<Input id=\"hivStatus\" />}\r\n                    inputProps={{\r\n                      id: \"hivStatus\",\r\n                      name: \"hivStatus\"\r\n                    }}\r\n                  >\r\n                    <MenuItem value={LocalValue.EQAResult_Value.positive}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.positive\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value={LocalValue.EQAResult_Value.indertermine}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.indertermine\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value={LocalValue.EQAResult_Value.negative}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.negative\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value={LocalValue.EQAResult_Value.Not_Implemented}>\r\n                      {t(\"SampleManagement.serum-bottle.OriginnalResult.none\")}\r\n                    </MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item  lg={6} md={6} sm={12} xs={12}>\r\n                <FormControl className=\"w-100\" variant=\"outlined\" size = \"small\">\r\n                  <InputLabel htmlFor=\"hcvStatus\">\r\n                  {<span className=\"font\">{t(\"SampleManagement.serum-bottle.OriginnalResult.hcvStatus\")}</span>}\r\n                  </InputLabel>\r\n                  <Select\r\n                    // name=\"hcvStatus\"\r\n                    value={typeof hcvStatus == \"undefined\" ? '' : hcvStatus}\r\n                    onChange={(event) => this.handleChange(event)}\r\n                    // input={<Input id=\"hcvStatus\" />}\r\n                    inputProps={{\r\n                      id: \"hcvStatus\",\r\n                      name: \"hcvStatus\"\r\n                    }}\r\n                  >\r\n                    <MenuItem value={LocalValue.EQAResult_Value.positive}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.positive\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value={LocalValue.EQAResult_Value.indertermine}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.indertermine\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value={LocalValue.EQAResult_Value.negative}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.negative\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value={LocalValue.EQAResult_Value.Not_Implemented}>\r\n                      {t(\"SampleManagement.serum-bottle.OriginnalResult.none\")}\r\n                    </MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item  lg={6} md={6} sm={12} xs={12}>\r\n                <FormControl className=\"w-100\" variant=\"outlined\" size = \"small\">\r\n                  <InputLabel htmlFor=\"hbvStatus\" >\r\n                  {<span className=\"font\">{t(\"SampleManagement.serum-bottle.OriginnalResult.hbvStatus\")}</span>}\r\n                  </InputLabel>\r\n                  <Select\r\n                    // name=\"hbvStatus\"\r\n                    value={typeof hbvStatus == \"undefined\" ? '' : hbvStatus}\r\n                    onChange={(event) => this.handleChange(event)}\r\n                    // input={<Input id=\"hbvStatus\" />}\r\n                    inputProps ={{\r\n                      id: \"hbvStatus\",\r\n                      name: \"hbvStatus\"\r\n                    }}\r\n                  >\r\n                    <MenuItem value={LocalValue.EQAResult_Value.positive}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.positive\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value={LocalValue.EQAResult_Value.indertermine}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.indertermine\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value={LocalValue.EQAResult_Value.negative}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.negative\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value={LocalValue.EQAResult_Value.Not_Implemented}>\r\n                      {t(\"SampleManagement.serum-bottle.OriginnalResult.none\")}\r\n                    </MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item  lg={6} md={6} sm={12} xs={12}>\r\n                <FormControl className=\"w-100\" variant = \"outlined\" size = \"small\">\r\n                  <InputLabel htmlFor=\"bottleQuality\">\r\n\r\n                  {<span className=\"font\">{t(\"SampleManagement.serum-bottle.bottleQuality\")}</span>}\r\n                  </InputLabel>\r\n                  <Select\r\n                    // name=\"bottleQuality\"\r\n                    value={typeof bottleQuality == \"undefined\" ? '' : bottleQuality}\r\n                    // value={bottleQuality ? \"Đạt\" : \"Chưa Đạt\"}\r\n                    onChange={event => this.handleChange(event)}\r\n                    // input={<Input id=\"bottleQuality\" />}\r\n                    inputProps={{\r\n                      id: \"bottleQuality\",\r\n                      name: \"bottleQuality\"\r\n                    }}\r\n                    >\r\n\r\n                    <MenuItem value={LocalValue.EQASerumBottle_Value.yes}>{t(\"EQASerumBank.Yes\")}</MenuItem>\r\n                    <MenuItem value={LocalValue.EQASerumBottle_Value.no}>{t(\"EQASerumBank.No\")}</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n                {/* <TextValidator\r\n                  className=\"w-100\"\r\n                  label={t(\"SampleManagement.serum-bottle.bottleQuality\")}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"bottleQuality\"\r\n                  value={bottleQuality}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                /> */}\r\n              </Grid>\r\n              <Grid item  lg={6} md={6} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                    {t(\"SampleManagement.serum-bottle.bottleVolume\") + \"(ml)\"}\r\n                  </span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"number\"\r\n                  size = \"small\"\r\n                  variant=\"outlined\"\r\n                  name=\"bottleVolume\"\r\n                  value={bottleVolume}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                />\r\n              </Grid>\r\n              <Grid item  lg={6} md={6} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                    {t(\"SampleManagement.serum-bottle.localSaveBottle\")}\r\n                  </span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"number\"\r\n                  size = \"small\"\r\n                  variant=\"outlined\"\r\n                  name=\"localSaveBottle\"\r\n                  value={localSaveBottle}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                />\r\n              </Grid>\r\n              <Grid item  lg={6} md={6} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\">{t(\"SampleManagement.serum-bottle.note\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  variant=\"outlined\"\r\n                  size = \"small\"\r\n                  name=\"note\"\r\n                  value={note}\r\n                />\r\n              </Grid>\r\n              <Grid item md={6} sm={12} xs={12}>\r\n                <FormControlLabel\r\n                  label={<span className=\"font\" style={{fontWeight: \"bold\"}}>{t('SampleManagement.serum-bottle.resultBottle')}</span>}\r\n                  control={<Checkbox checked={resultBottle}\r\n                    onChange={(resultBottle) =>\r\n                      this.handleChange(resultBottle, 'resultBottle')\r\n                    }\r\n                  />}\r\n\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n\r\n          <DialogActions spacing={4} className=\"flex flex-end flex-middle\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={() => this.props.handleClose()}\r\n            >\r\n              {t(\"Cancel\")}\r\n            </Button>\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={this.state.isView}>\r\n              {t(\"Save\")}\r\n            </Button>\r\n          </DialogActions>\r\n        </ValidatorForm>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EQASerumBottleEditorDialog;\r\n"]},"metadata":{},"sourceType":"module"}