{"ast":null,"code":"import _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\EQASerumBottle\\\\EQASerumBottleViewDialog.jsx\";\nimport React, { Component } from \"react\";\nimport { Dialog, Button, Grid, DialogActions, FormControlLabel, Switch, Checkbox, Icon, IconButton } from \"@material-ui/core\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, DateTimePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { ValidatorForm, TextValidator, TextField } from \"react-material-ui-form-validator\";\nimport { deleteItem, saveItem, getItemById } from \"./EQASerumBottleService\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\nimport EQASerumBankSearchDialog from \"./EQASerumBankSearchDialog\";\nimport { searchByPage as searchByPageSerumBank } from \"../EQASerumBank/EQASerumBankService\";\nimport Input from \"@material-ui/core/Input\";\nimport LocalValue from \"./Constants\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\nimport Select from \"@material-ui/core/Select\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../../../styles/views/_style.scss';\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n});\n\nfunction PaperComponent(props) {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    handle: \"#draggable-dialog-title\",\n    cancel: '[class*=\"MuiDialogContent-root\"]',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  })));\n}\n\nvar EQASerumBottleViewDialog = /*#__PURE__*/function (_Component) {\n  _inherits(EQASerumBottleViewDialog, _Component);\n\n  var _super = _createSuper(EQASerumBottleViewDialog);\n\n  function EQASerumBottleViewDialog() {\n    var _this;\n\n    _classCallCheck(this, EQASerumBottleViewDialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      shouldOpenConfirmationDialog: false,\n      eqaSerumBank: [],\n      hivStatus: '',\n      hcvStatus: \"\",\n      hbvStatus: \"\",\n      isView: false,\n      bottleQuality: \"\",\n      resultBottle: false\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"resultBottle\") {\n        _this.setState({\n          resultBottle: event.target.checked\n        });\n      }\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.handleFormSubmit = function () {\n      var t = _this.props.t;\n      var id = _this.state.id;\n\n      if (id) {\n        _this.setState({\n          isView: true\n        });\n\n        saveItem(_objectSpread({}, _this.state)).then(function () {\n          _this.props.handleOKEditClose();\n        });\n        toast.success(t('mess_edit'));\n      } else {\n        _this.setState({\n          isView: true\n        });\n\n        saveItem(_objectSpread({}, _this.state)).then(function () {\n          _this.props.handleOKEditClose();\n        });\n        toast.success(t('mess_add'));\n      }\n    };\n\n    _this.handleSearchSerumBankDialogClose = function () {\n      _this.setState({\n        shouldOpenSearchSerumBankDialog: false\n      });\n    };\n\n    _this.handleSelectSerumBank = function (item, source) {\n      _this.setState({\n        eqaSerumBank: item\n      });\n\n      if (source === \"active\" && item != null) {\n        _this.setState({\n          hivStatus: item.hivStatus,\n          hcvStatus: item.hcvStatus,\n          hbvStatus: item.hbvStatus\n        });\n      }\n    };\n\n    _this.handleSelectAdministrativeUnitType = function (item) {\n      //alert('Test');\n      _this.setState({\n        administrativeUnit: item\n      });\n\n      _this.handleSearchDialogClose();\n    };\n\n    _this.handleThrombinAddedDateChange = function (date) {\n      _this.setState({\n        thrombinAddedDate: date\n      });\n    };\n\n    _this.handleRemoveFibrinDateChange = function (date) {\n      _this.setState({\n        removeFibrinDate: date\n      });\n    };\n\n    _this.handleCentrifugeDateChange = function (date) {\n      _this.setState({\n        centrifugeDate: date\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(EQASerumBottleViewDialog, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item;\n      this.setState(_objectSpread({}, this.props.item));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          handleClose = _this$props2.handleClose,\n          handleOKEditClose = _this$props2.handleOKEditClose,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n;\n      var _this$state = this.state,\n          id = _this$state.id,\n          code = _this$state.code,\n          hivStatus = _this$state.hivStatus,\n          hcvStatus = _this$state.hcvStatus,\n          hbvStatus = _this$state.hbvStatus,\n          bottleQuality = _this$state.bottleQuality,\n          bottleVolume = _this$state.bottleVolume,\n          localSaveBottle = _this$state.localSaveBottle,\n          isView = _this$state.isView,\n          eqaSerumBank = _this$state.eqaSerumBank,\n          resultBottle = _this$state.resultBottle,\n          shouldOpenSearchSerumBankDialog = _this$state.shouldOpenSearchSerumBankDialog,\n          shouldOpenConfirmationDialog = _this$state.shouldOpenConfirmationDialog,\n          note = _this$state.note;\n      var searchObject = {\n        pageIndex: 0,\n        pageSize: 1000000\n      };\n      return /*#__PURE__*/React.createElement(Dialog, {\n        open: open,\n        PaperComponent: PaperComponent,\n        maxWidth: \"lg\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(DialogTitle, {\n        style: {\n          cursor: \"move\"\n        },\n        id: \"draggable-dialog-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"mb-20 styleColor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 9\n        }\n      }, \" \", t(\"view\") + \" \" + t(\"SampleManagement.serum-bottle.title\"), \" \"), /*#__PURE__*/React.createElement(IconButton, {\n        style: {\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\"\n        },\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        color: \"error\",\n        title: t(\"close\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 112\n        }\n      }, \"close\"))), /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        style: {\n          overflowY: \"auto\",\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DialogContent, {\n        dividers: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        className: \"mb-16\",\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(AsynchronousAutocomplete, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 50\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 73\n          }\n        }, \" * \"), t(\"SampleManagement.serum-bottle.eqaSerumBank\")),\n        size: \"small\",\n        searchFunction: searchByPageSerumBank,\n        searchObject: searchObject,\n        defaultValue: eqaSerumBank,\n        value: eqaSerumBank,\n        variant: \"outlined\",\n        displayLable: 'serumCode',\n        valueTextValidator: eqaSerumBank,\n        onSelect: function onSelect(event) {\n          return _this2.handleSelectSerumBank(event, \"active\");\n        },\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        disabled: \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        disabled: \"true\",\n        size: \"small\",\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"hivStatus\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 20\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.hivStatus\"))), /*#__PURE__*/React.createElement(Select // name=\"hivStatus\"\n      , {\n        value: typeof hivStatus == \"undefined\" ? '' : hivStatus,\n        onChange: function onChange(event) {\n          return _this2.handleChange(event);\n        } // input={<Input id=\"hivStatus\" />}\n        ,\n        inputProps: {\n          id: \"hivStatus\",\n          name: \"hivStatus\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.positive,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.positive\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.indertermine,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.indertermine\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.negative,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.negative\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.Not_Implemented,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.none\"))))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        disabled: \"true\",\n        size: \"small\",\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"hcvStatus\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 20\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.hcvStatus\"))), /*#__PURE__*/React.createElement(Select // name=\"hcvStatus\"\n      , {\n        value: typeof hcvStatus == \"undefined\" ? '' : hcvStatus,\n        onChange: function onChange(event) {\n          return _this2.handleChange(event);\n        } // input={<Input id=\"hcvStatus\" />}\n        ,\n        inputProps: {\n          id: \"hcvStatus\",\n          name: \"hcvStatus\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.positive,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.positive\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.indertermine,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.indertermine\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.negative,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.negative\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.Not_Implemented,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.none\"))))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        disabled: \"true\",\n        size: \"small\",\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"hbvStatus\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 20\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.hbvStatus\"))), /*#__PURE__*/React.createElement(Select // name=\"hbvStatus\"\n      , {\n        value: typeof hbvStatus == \"undefined\" ? '' : hbvStatus,\n        onChange: function onChange(event) {\n          return _this2.handleChange(event);\n        } // input={<Input id=\"hbvStatus\" />}\n        ,\n        inputProps: {\n          id: \"hbvStatus\",\n          name: \"hbvStatus\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.positive,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.positive\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.indertermine,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.indertermine\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.negative,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.negative\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQAResult_Value.Not_Implemented,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 21\n        }\n      }, t(\"SampleManagement.serum-bottle.OriginnalResult.none\"))))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100\",\n        disabled: \"true\",\n        size: \"small\",\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"bottleQuality\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 24\n        }\n      }, t(\"SampleManagement.serum-bottle.bottleQuality\"))), /*#__PURE__*/React.createElement(Select // name=\"bottleQuality\"\n      , {\n        value: typeof bottleQuality == \"undefined\" ? '' : bottleQuality // value={bottleQuality ? \"Đạt\" : \"Chưa Đạt\"}\n        ,\n        onChange: function onChange(event) {\n          return _this2.handleChange(event);\n        } // input = {<Input id = \"bottleQuality\"/>}\n        ,\n        inputProps: {\n          id: \"bottleQuality\",\n          name: \"bottleQuality\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQASerumBottle_Value.yes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 27\n        }\n      }, t(\"EQASerumBank.Yes\")), /*#__PURE__*/React.createElement(MenuItem, {\n        value: LocalValue.EQASerumBottle_Value.no,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 27\n        }\n      }, t(\"EQASerumBank.No\"))))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        disabled: \"true\",\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 26\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 49\n          }\n        }, \" * \"), t(\"SampleManagement.serum-bottle.bottleVolume\") + \"(ml)\"),\n        onChange: this.handleChange,\n        type: \"number\",\n        size: \"small\",\n        variant: \"outlined\",\n        name: \"bottleVolume\",\n        value: bottleVolume,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        disabled: \"true\",\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 26\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 49\n          }\n        }, \" * \"), t(\"SampleManagement.serum-bottle.localSaveBottle\")),\n        onChange: this.handleChange,\n        type: \"number\",\n        size: \"small\",\n        variant: \"outlined\",\n        name: \"localSaveBottle\",\n        value: localSaveBottle,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        disabled: \"true\",\n        className: \"w-100\",\n        size: \"small\",\n        variant: \"outlined\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 26\n          }\n        }, t(\"SampleManagement.serum-bottle.note\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"note\",\n        value: note,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControlLabel, {\n        disabled: \"true\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 30\n          }\n        }, t('SampleManagement.serum-bottle.resultBottle')),\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          checked: resultBottle,\n          onChange: function onChange(resultBottle) {\n            return _this2.handleChange(resultBottle, 'resultBottle');\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 32\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 17\n        }\n      })))), /*#__PURE__*/React.createElement(DialogActions, {\n        spacing: 4,\n        className: \"flex flex-end flex-middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: function onClick() {\n          return _this2.props.handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }\n      }, t(\"general.close\")))));\n    }\n  }]);\n\n  return EQASerumBottleViewDialog;\n}(Component);\n\nexport default EQASerumBottleViewDialog;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/EQASerumBottle/EQASerumBottleViewDialog.jsx"],"names":["React","Component","Dialog","Button","Grid","DialogActions","FormControlLabel","Switch","Checkbox","Icon","IconButton","MuiPickersUtilsProvider","KeyboardDatePicker","DateTimePicker","DateFnsUtils","ValidatorForm","TextValidator","TextField","deleteItem","saveItem","getItemById","DialogContent","DialogTitle","Draggable","Paper","EQASerumBankSearchDialog","searchByPage","searchByPageSerumBank","Input","LocalValue","InputLabel","MenuItem","FormControl","AsynchronousAutocomplete","Select","toast","configure","autoClose","draggable","limit","PaperComponent","props","EQASerumBottleViewDialog","state","shouldOpenConfirmationDialog","eqaSerumBank","hivStatus","hcvStatus","hbvStatus","isView","bottleQuality","resultBottle","handleChange","event","source","persist","setState","isActive","target","checked","name","value","handleFormSubmit","t","id","then","handleOKEditClose","success","handleSearchSerumBankDialogClose","shouldOpenSearchSerumBankDialog","handleSelectSerumBank","item","handleSelectAdministrativeUnitType","administrativeUnit","handleSearchDialogClose","handleThrombinAddedDateChange","date","thrombinAddedDate","handleRemoveFibrinDateChange","removeFibrinDate","handleCentrifugeDateChange","centrifugeDate","open","handleClose","i18n","code","bottleVolume","localSaveBottle","note","searchObject","pageIndex","pageSize","cursor","position","right","top","overflowY","display","flexDirection","color","EQAResult_Value","positive","indertermine","negative","Not_Implemented","EQASerumBottle_Value","yes","no"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  DialogActions,\r\n  FormControlLabel,\r\n  Switch,\r\n  Checkbox, Icon, IconButton\r\n} from \"@material-ui/core\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n  DateTimePicker,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  ValidatorForm,\r\n  TextValidator,\r\n  TextField,\r\n} from \"react-material-ui-form-validator\";\r\nimport { deleteItem, saveItem, getItemById } from \"./EQASerumBottleService\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport EQASerumBankSearchDialog from \"./EQASerumBankSearchDialog\";\r\nimport { searchByPage as searchByPageSerumBank } from \"../EQASerumBank/EQASerumBankService\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport LocalValue from \"./Constants\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../../styles/views/_style.scss';\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit:3\r\n});\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#draggable-dialog-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\nclass EQASerumBottleViewDialog extends Component {\r\n  state = {\r\n    shouldOpenConfirmationDialog: false,\r\n    eqaSerumBank: [],\r\n    hivStatus:'',\r\n    hcvStatus:\"\",\r\n    hbvStatus: \"\",\r\n    isView: false,\r\n    bottleQuality: \"\",\r\n    resultBottle: false\r\n  };\r\n\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n    if(source === \"resultBottle\"){\r\n      this.setState({resultBottle: event.target.checked});\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleFormSubmit = () => {\r\n    let {t} = this.props;\r\n    let { id } = this.state;\r\n   \r\n    if (id) {\r\n      this.setState({isView: true});\r\n      saveItem({\r\n        ...this.state,\r\n      }).then(() => {\r\n        this.props.handleOKEditClose();\r\n      });\r\n      toast.success(t('mess_edit'));\r\n    }\r\n    else {\r\n      this.setState({isView: true});\r\n      saveItem({\r\n        ...this.state,\r\n      }).then(() => {\r\n        this.props.handleOKEditClose();\r\n      });\r\n      toast.success(t('mess_add'));\r\n    }\r\n  };\r\n\r\n  componentWillMount() {\r\n    let { open, handleClose, item } = this.props;\r\n    this.setState({\r\n      ...this.props.item,\r\n    });\r\n  }\r\n\r\n  handleSearchSerumBankDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenSearchSerumBankDialog: false,\r\n    });\r\n  };\r\n  handleSelectSerumBank = (item, source) => {\r\n    this.setState({ eqaSerumBank: item });\r\n    if (source === \"active\" && item != null) {\r\n      this.setState({ hivStatus: item.hivStatus,\r\n        hcvStatus: item.hcvStatus, hbvStatus: item.hbvStatus });\r\n    }\r\n  };\r\n  handleSelectAdministrativeUnitType = (item) => {\r\n    //alert('Test');\r\n    this.setState({ administrativeUnit: item });\r\n    this.handleSearchDialogClose();\r\n  };\r\n  handleThrombinAddedDateChange = (date) => {\r\n    this.setState({\r\n      thrombinAddedDate: date,\r\n    });\r\n  };\r\n  handleRemoveFibrinDateChange = (date) => {\r\n    this.setState({\r\n      removeFibrinDate: date,\r\n    });\r\n  };\r\n  handleCentrifugeDateChange = (date) => {\r\n    this.setState({\r\n      centrifugeDate: date,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { open, handleClose, handleOKEditClose, t, i18n } = this.props;\r\n    let {\r\n      id,\r\n      code,\r\n      hivStatus,\r\n      hcvStatus,\r\n      hbvStatus,\r\n      bottleQuality,\r\n      bottleVolume,\r\n      localSaveBottle,\r\n      isView,\r\n      eqaSerumBank,\r\n      resultBottle,\r\n      shouldOpenSearchSerumBankDialog,\r\n      shouldOpenConfirmationDialog,note\r\n    } = this.state;\r\n    let searchObject = { pageIndex: 0, pageSize: 1000000 };\r\n    \r\n    return (\r\n      <Dialog\r\n        open={open}\r\n        PaperComponent={PaperComponent}\r\n        maxWidth={\"lg\"}\r\n        fullWidth={true}\r\n      >\r\n        <DialogTitle style={{ cursor: \"move\" }} id=\"draggable-dialog-title\">\r\n        <span className=\"mb-20 styleColor\"> { t(\"view\") + \" \" + t(\"SampleManagement.serum-bottle.title\")} </span>\r\n        <IconButton style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }} onClick={() => handleClose()}><Icon color=\"error\"\r\n              title={t(\"close\")}>\r\n              close\r\n            </Icon>\r\n            </IconButton>\r\n        </DialogTitle>\r\n        <ValidatorForm\r\n          ref=\"form\"\r\n          onSubmit={this.handleFormSubmit}\r\n          style={{\r\n            overflowY: \"auto\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n          }}\r\n        >\r\n          <DialogContent dividers>\r\n            <Grid className=\"mb-16\" container spacing={2}>\r\n              <Grid item  lg={6} md={6} sm={12} xs={12}>\r\n                <AsynchronousAutocomplete label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                  {t(\"SampleManagement.serum-bottle.eqaSerumBank\")}\r\n                </span>}\r\n                  size=\"small\"\r\n                  searchFunction={searchByPageSerumBank}\r\n                  searchObject={searchObject}\r\n                  defaultValue={eqaSerumBank}\r\n                  value={eqaSerumBank}\r\n                  variant = \"outlined\"\r\n                  displayLable={'serumCode'}\r\n                  valueTextValidator={eqaSerumBank}\r\n                  onSelect={(event) => this.handleSelectSerumBank(event, \"active\")}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  disabled =\"true\"\r\n                />\r\n              </Grid>\r\n              <Grid item  lg={6} md={6} sm={12} xs={12}>\r\n                <FormControl className=\"w-100\" disabled =\"true\" size = \"small\"\r\n                  variant = \"outlined\">\r\n                  <InputLabel htmlFor=\"hivStatus\">\r\n                  {<span className=\"font\">{t(\"SampleManagement.serum-bottle.OriginnalResult.hivStatus\")}</span>}\r\n                  </InputLabel>\r\n                  <Select\r\n                    // name=\"hivStatus\"\r\n                    value={typeof hivStatus == \"undefined\" ? '' : hivStatus}\r\n                    onChange={(event) => this.handleChange(event)}\r\n                    // input={<Input id=\"hivStatus\" />}\r\n                    inputProps = {{\r\n                      id: \"hivStatus\",\r\n                      name: \"hivStatus\"\r\n                    }}\r\n                  >\r\n                    <MenuItem value = {LocalValue.EQAResult_Value.positive}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.positive\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value = {LocalValue.EQAResult_Value.indertermine}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.indertermine\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value = {LocalValue.EQAResult_Value.negative}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.negative\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value = {LocalValue.EQAResult_Value.Not_Implemented}>\r\n                      {t(\"SampleManagement.serum-bottle.OriginnalResult.none\")}\r\n                    </MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item  lg={6} md={6} sm={12} xs={12}>\r\n                <FormControl className=\"w-100\" disabled =\"true\" size = \"small\"\r\n                  variant = \"outlined\">\r\n                  <InputLabel htmlFor=\"hcvStatus\">\r\n                  {<span className=\"font\">{t(\"SampleManagement.serum-bottle.OriginnalResult.hcvStatus\")}</span>}\r\n                  </InputLabel>\r\n                  <Select\r\n                    // name=\"hcvStatus\"\r\n                    value={typeof hcvStatus == \"undefined\" ? '' : hcvStatus}\r\n                    onChange={(event) => this.handleChange(event)}\r\n                    // input={<Input id=\"hcvStatus\" />}\r\n                    inputProps = {{\r\n                      id: \"hcvStatus\",\r\n                      name: \"hcvStatus\"\r\n                    }}\r\n\r\n                  >\r\n                    <MenuItem value = {LocalValue.EQAResult_Value.positive}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.positive\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value = {LocalValue.EQAResult_Value.indertermine}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.indertermine\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value = {LocalValue.EQAResult_Value.negative}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.negative\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value = {LocalValue.EQAResult_Value.Not_Implemented}>\r\n                      {t(\"SampleManagement.serum-bottle.OriginnalResult.none\")}\r\n                    </MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item  lg={6} md={6} sm={12} xs={12}>\r\n                <FormControl className=\"w-100\" disabled =\"true\" size = \"small\"\r\n                  variant = \"outlined\">\r\n                  <InputLabel htmlFor=\"hbvStatus\">\r\n                  {<span className=\"font\">{t(\"SampleManagement.serum-bottle.OriginnalResult.hbvStatus\")}</span>}\r\n                  </InputLabel>\r\n                  <Select\r\n                    // name=\"hbvStatus\"\r\n                    value={typeof hbvStatus == \"undefined\" ? '' : hbvStatus}\r\n                    onChange={(event) => this.handleChange(event)}\r\n                    // input={<Input id=\"hbvStatus\" />}\r\n                    inputProps={{\r\n                      id:\"hbvStatus\",\r\n                      name: \"hbvStatus\"\r\n                    }}\r\n                  >\r\n                    <MenuItem value = {LocalValue.EQAResult_Value.positive}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.positive\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value = {LocalValue.EQAResult_Value.indertermine}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.indertermine\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value = {LocalValue.EQAResult_Value.negative}>\r\n                      {t(\r\n                        \"SampleManagement.serum-bottle.OriginnalResult.negative\"\r\n                      )}\r\n                    </MenuItem>\r\n                    <MenuItem value = {LocalValue.EQAResult_Value.Not_Implemented}>\r\n                      {t(\"SampleManagement.serum-bottle.OriginnalResult.none\")}\r\n                    </MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item  lg={6} md={6} sm={12} xs={12}>\r\n                <FormControl className=\"w-100\" disabled =\"true\" size = \"small\"\r\n                  variant = \"outlined\">\r\n                      <InputLabel htmlFor=\"bottleQuality\">\r\n                      {<span className=\"font\">{t(\"SampleManagement.serum-bottle.bottleQuality\")}</span>}\r\n                      </InputLabel>\r\n                      <Select\r\n                        // name=\"bottleQuality\"\r\n                        value = {typeof bottleQuality == \"undefined\" ? '' : bottleQuality}\r\n                        // value={bottleQuality ? \"Đạt\" : \"Chưa Đạt\"}\r\n                        onChange={event => this.handleChange(event)}\r\n                        // input = {<Input id = \"bottleQuality\"/>}\r\n                        inputProps={{\r\n                          id: \"bottleQuality\",\r\n                          name: \"bottleQuality\"\r\n                        }}\r\n                        >\r\n                          <MenuItem value={LocalValue.EQASerumBottle_Value.yes}>{t(\"EQASerumBank.Yes\")}</MenuItem>\r\n                          <MenuItem value= {LocalValue.EQASerumBottle_Value.no}>{t(\"EQASerumBank.No\")}</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                {/* <TextValidator\r\n                  className=\"w-100\"\r\n                  label={t(\"SampleManagement.serum-bottle.bottleQuality\")}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"bottleQuality\"\r\n                  value={bottleQuality}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                /> */}\r\n              </Grid>\r\n              <Grid item  lg={6} md={6} sm={12} xs={12}>\r\n                <TextValidator\r\n                  disabled =\"true\"\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                    {t(\"SampleManagement.serum-bottle.bottleVolume\") + \"(ml)\"}\r\n                  </span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"number\"\r\n                  size = \"small\"\r\n                  variant = \"outlined\"\r\n                  name=\"bottleVolume\"\r\n                  value={bottleVolume}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                />\r\n              </Grid>\r\n              <Grid item  lg={6} md={6} sm={12} xs={12}>\r\n                <TextValidator\r\n                  disabled =\"true\"\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\"><span style={{ color: \"red\" }}> * </span>\r\n                    {t(\"SampleManagement.serum-bottle.localSaveBottle\")}\r\n                  </span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"number\"\r\n                  size = \"small\"\r\n                  variant = \"outlined\"\r\n                  name=\"localSaveBottle\"\r\n                  value={localSaveBottle}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                />\r\n              </Grid>\r\n              <Grid item  lg={6} md={6} sm={12} xs={12}>\r\n                <TextValidator\r\n                  disabled =\"true\"\r\n                  className=\"w-100\"\r\n                  size = \"small\"\r\n                  variant = \"outlined\"\r\n                  label={<span className=\"font\">{t(\"SampleManagement.serum-bottle.note\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"note\"\r\n                  value={note}\r\n                />\r\n              </Grid>\r\n              <Grid item md ={6} sm={12} xs={12}>\r\n                <FormControlLabel\r\n                      disabled =\"true\"\r\n                      label={<span className=\"font\">{t('SampleManagement.serum-bottle.resultBottle')}</span>}\r\n                      control={<Checkbox checked={resultBottle}\r\n                      onChange={(resultBottle) =>\r\n                      this.handleChange(resultBottle, 'resultBottle')\r\n                        }\r\n                        />}\r\n                        \r\n                      />\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n\r\n          <DialogActions spacing={4} className=\"flex flex-end flex-middle\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={() => this.props.handleClose()}\r\n            >\r\n              {t(\"general.close\")}\r\n            </Button>\r\n            {/* <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={isView}>\r\n              {t(\"Save\")}\r\n            </Button> */}\r\n          </DialogActions>\r\n        </ValidatorForm>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EQASerumBottleViewDialog;\r\n"]},"metadata":{},"sourceType":"module"}