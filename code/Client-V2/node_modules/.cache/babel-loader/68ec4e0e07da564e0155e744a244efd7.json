{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport PropTypes from 'prop-types';\nimport { rgb } from 'd3-color';\nimport * as d3Shape from 'd3-shape';\nimport React from 'react';\nimport { DEFAULT_OPACITY } from '../../theme';\nimport { getAttributeFunctor, getAttributeValue } from '../../utils/scales-utils';\nimport AbstractSeries from './abstract-series';\n\nvar LineSeriesCanvas = function (_AbstractSeries) {\n  _inherits(LineSeriesCanvas, _AbstractSeries);\n\n  function LineSeriesCanvas() {\n    _classCallCheck(this, LineSeriesCanvas);\n\n    return _possibleConstructorReturn(this, (LineSeriesCanvas.__proto__ || Object.getPrototypeOf(LineSeriesCanvas)).apply(this, arguments));\n  }\n\n  _createClass(LineSeriesCanvas, [{\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', null);\n    }\n  }], [{\n    key: 'renderLayer',\n    value: function renderLayer(props, ctx) {\n      var curve = props.curve,\n          data = props.data,\n          marginLeft = props.marginLeft,\n          marginTop = props.marginTop,\n          strokeWidth = props.strokeWidth,\n          strokeDasharray = props.strokeDasharray;\n\n      if (!data || data.length === 0) {\n        return;\n      }\n\n      var x = getAttributeFunctor(props, 'x');\n      var y = getAttributeFunctor(props, 'y');\n      var stroke = getAttributeValue(props, 'stroke') || getAttributeValue(props, 'color');\n      var strokeColor = rgb(stroke);\n      var newOpacity = getAttributeValue(props, 'opacity');\n      var opacity = Number.isFinite(newOpacity) ? newOpacity : DEFAULT_OPACITY;\n      var line = d3Shape.line().x(function (row) {\n        return x(row) + marginLeft;\n      }).y(function (row) {\n        return y(row) + marginTop;\n      });\n\n      if (typeof curve === 'string' && d3Shape[curve]) {\n        line = line.curve(d3Shape[curve]);\n      } else if (typeof curve === 'function') {\n        line = line.curve(curve);\n      }\n\n      ctx.beginPath();\n      ctx.strokeStyle = 'rgba(' + strokeColor.r + ', ' + strokeColor.g + ', ' + strokeColor.b + ', ' + opacity + ')';\n      ctx.lineWidth = strokeWidth;\n\n      if (strokeDasharray) {\n        ctx.setLineDash(strokeDasharray);\n      }\n\n      line.context(ctx)(data);\n      ctx.stroke();\n      ctx.closePath(); // set back to default\n\n      ctx.lineWidth = 1;\n      ctx.setLineDash([]);\n    }\n  }, {\n    key: 'requiresSVG',\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: 'isCanvas',\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return LineSeriesCanvas;\n}(AbstractSeries);\n\nLineSeriesCanvas.displayName = 'LineSeriesCanvas';\nLineSeriesCanvas.defaultProps = _extends({}, AbstractSeries.defaultProps, {\n  strokeWidth: 2\n});\nLineSeriesCanvas.propTypes = _extends({}, AbstractSeries.propTypes, {\n  strokeWidth: PropTypes.number\n});\nexport default LineSeriesCanvas;","map":null,"metadata":{},"sourceType":"module"}