{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2016 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ORIENTATION, getTickValues } from '../../utils/axis-utils';\nimport { getAttributeScale } from '../../utils/scales-utils';\nvar LEFT = ORIENTATION.LEFT,\n    RIGHT = ORIENTATION.RIGHT,\n    TOP = ORIENTATION.TOP,\n    BOTTOM = ORIENTATION.BOTTOM;\nvar propTypes = {\n  height: PropTypes.number.isRequired,\n  orientation: PropTypes.oneOf([LEFT, RIGHT, TOP, BOTTOM]).isRequired,\n  style: PropTypes.object,\n  width: PropTypes.number.isRequired\n};\nvar defaultProps = {\n  style: {}\n};\n\nfunction _getTickFormatFn(scale, tickTotal, tickFormat) {\n  return !tickFormat ? scale.tickFormat ? scale.tickFormat(tickTotal) : function (v) {\n    return v;\n  } : tickFormat;\n}\n\nvar AxisTicks = function (_React$Component) {\n  _inherits(AxisTicks, _React$Component);\n\n  function AxisTicks() {\n    _classCallCheck(this, AxisTicks);\n\n    return _possibleConstructorReturn(this, (AxisTicks.__proto__ || Object.getPrototypeOf(AxisTicks)).apply(this, arguments));\n  }\n\n  _createClass(AxisTicks, [{\n    key: '_areTicksWrapped',\n\n    /**\n     * Check if axis ticks should be mirrored (for the right and top positions.\n     * @returns {boolean} True if mirrored.\n     * @private\n     */\n    value: function _areTicksWrapped() {\n      var orientation = this.props.orientation;\n      return orientation === LEFT || orientation === TOP;\n    }\n  }, {\n    key: '_getTickContainerPropsGetterFn',\n    value: function _getTickContainerPropsGetterFn() {\n      if (this._isAxisVertical()) {\n        return function (pos) {\n          return {\n            transform: 'translate(0, ' + pos + ')'\n          };\n        };\n      }\n\n      return function (pos) {\n        return {\n          transform: 'translate(' + pos + ', 0)'\n        };\n      };\n    }\n    /**\n     * Get attributes for the label of the tick.\n     * @returns {Object} Object with properties.\n     * @private\n     */\n\n  }, {\n    key: '_getTickLabelProps',\n    value: function _getTickLabelProps() {\n      var _props = this.props,\n          orientation = _props.orientation,\n          tickLabelAngle = _props.tickLabelAngle,\n          tickSize = _props.tickSize,\n          _props$tickSizeOuter = _props.tickSizeOuter,\n          tickSizeOuter = _props$tickSizeOuter === undefined ? tickSize : _props$tickSizeOuter,\n          _props$tickPadding = _props.tickPadding,\n          tickPadding = _props$tickPadding === undefined ? tickSize : _props$tickPadding; // Assign the text orientation inside the label of the tick mark.\n\n      var textAnchor = void 0;\n\n      if (orientation === LEFT || orientation === BOTTOM && tickLabelAngle) {\n        textAnchor = 'end';\n      } else if (orientation === RIGHT || orientation === TOP && tickLabelAngle) {\n        textAnchor = 'start';\n      } else {\n        textAnchor = 'middle';\n      } // The label's position is translated to the given padding and then the\n      // label is rotated to the given angle.\n\n\n      var isVertical = this._isAxisVertical();\n\n      var wrap = this._areTicksWrapped() ? -1 : 1;\n      var labelOffset = wrap * (tickSizeOuter + tickPadding);\n      var transform = (isVertical ? 'translate(' + labelOffset + ', 0)' : 'translate(0, ' + labelOffset + ')') + (tickLabelAngle ? ' rotate(' + tickLabelAngle + ')' : ''); // Set the vertical offset of the label according to the position of\n      // the axis.\n\n      var dy = orientation === TOP || tickLabelAngle ? '0' : orientation === BOTTOM ? '0.72em' : '0.32em';\n      return {\n        textAnchor: textAnchor,\n        dy: dy,\n        transform: transform\n      };\n    }\n    /**\n     * Get the props of the tick line.\n     * @returns {Object} Props.\n     * @private\n     */\n\n  }, {\n    key: '_getTickLineProps',\n    value: function _getTickLineProps() {\n      var _ref;\n\n      var _props2 = this.props,\n          tickSize = _props2.tickSize,\n          _props2$tickSizeOuter = _props2.tickSizeOuter,\n          tickSizeOuter = _props2$tickSizeOuter === undefined ? tickSize : _props2$tickSizeOuter,\n          _props2$tickSizeInner = _props2.tickSizeInner,\n          tickSizeInner = _props2$tickSizeInner === undefined ? tickSize : _props2$tickSizeInner;\n\n      var isVertical = this._isAxisVertical();\n\n      var tickXAttr = isVertical ? 'y' : 'x';\n      var tickYAttr = isVertical ? 'x' : 'y';\n      var wrap = this._areTicksWrapped() ? -1 : 1;\n      return _ref = {}, _defineProperty(_ref, tickXAttr + '1', 0), _defineProperty(_ref, tickXAttr + '2', 0), _defineProperty(_ref, tickYAttr + '1', -wrap * tickSizeInner), _defineProperty(_ref, tickYAttr + '2', wrap * tickSizeOuter), _ref;\n    }\n    /**\n     * Gets if the axis is vertical.\n     * @returns {boolean} True if vertical.\n     * @private\n     */\n\n  }, {\n    key: '_isAxisVertical',\n    value: function _isAxisVertical() {\n      var orientation = this.props.orientation;\n      return orientation === LEFT || orientation === RIGHT;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props3 = this.props,\n          attr = _props3.attr,\n          orientation = _props3.orientation,\n          width = _props3.width,\n          height = _props3.height,\n          style = _props3.style,\n          tickFormat = _props3.tickFormat,\n          tickTotal = _props3.tickTotal,\n          tickValues = _props3.tickValues;\n      var x = orientation === LEFT ? width : 0;\n      var y = orientation === TOP ? height : 0;\n      var scale = getAttributeScale(this.props, attr);\n      var values = getTickValues(scale, tickTotal, tickValues);\n\n      var tickFormatFn = _getTickFormatFn(scale, tickTotal, tickFormat);\n\n      var translateFn = this._getTickContainerPropsGetterFn();\n\n      var pathProps = this._getTickLineProps();\n\n      var textProps = this._getTickLabelProps();\n\n      var ticks = values.map(function (v, i) {\n        var pos = scale(v);\n        var labelNode = tickFormatFn(v, i, scale, tickTotal);\n        var shouldRenderAsOwnNode = React.isValidElement(labelNode) && !['tspan', 'textPath'].includes(labelNode.type);\n        var shouldAddProps = labelNode && typeof labelNode.type !== 'string';\n        return React.createElement('g', _extends({\n          key: i\n        }, translateFn(pos, 0), {\n          className: 'rv-xy-plot__axis__tick',\n          style: style\n        }), React.createElement('line', _extends({}, pathProps, {\n          className: 'rv-xy-plot__axis__tick__line',\n          style: _extends({}, style, style.line)\n        })), shouldRenderAsOwnNode ? React.cloneElement(labelNode, shouldAddProps ? _extends({}, textProps, {\n          containerWidth: width,\n          tickCount: values.length\n        }) : undefined) : React.createElement('text', _extends({}, textProps, {\n          className: 'rv-xy-plot__axis__tick__text',\n          style: _extends({}, style, style.text)\n        }), labelNode));\n      });\n      return React.createElement('g', {\n        transform: 'translate(' + x + ', ' + y + ')',\n        className: 'rv-xy-plot__axis__ticks'\n      }, ticks);\n    }\n  }]);\n\n  return AxisTicks;\n}(React.Component);\n\nAxisTicks.defaultProps = defaultProps;\nAxisTicks.displayName = 'AxisTicks';\nAxisTicks.propTypes = propTypes;\nAxisTicks.requiresSVG = true;\nexport default AxisTicks;","map":null,"metadata":{},"sourceType":"module"}