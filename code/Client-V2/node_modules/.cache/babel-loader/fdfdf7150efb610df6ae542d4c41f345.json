{"ast":null,"code":"import _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\IntroduceTheProgram\\\\IntroduceTheProgramDialogInfomation.jsx\";\nimport React, { Component } from 'react';\nimport { Dialog, Button, Grid, DialogActions, FormControlLabel, Switch, DialogTitle, DialogContent, Icon, IconButton } from \"@material-ui/core\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { generateRandomId } from \"utils\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"../../../styles/views/_style.scss\";\nimport EditorForm from \"./EditorForm\";\nimport { addNew, update } from \"./IntroduceTheProgramService\";\nimport IntroduceTheProgramDialogTab from \"./IntroduceTheProgramDialogTab\";\nimport Checkbox from '@material-ui/core/Checkbox';\n\nvar IntroduceTheProgramDialogInfomation = /*#__PURE__*/function (_Component) {\n  _inherits(IntroduceTheProgramDialogInfomation, _Component);\n\n  var _super = _createSuper(IntroduceTheProgramDialogInfomation);\n\n  function IntroduceTheProgramDialogInfomation() {\n    var _this;\n\n    _classCallCheck(this, IntroduceTheProgramDialogInfomation);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.handleChange = function (event, source) {\n      var item = _this.state.item;\n\n      if (item == null) {\n        item = {};\n      }\n\n      var name = event.target.name;\n      var value = event.target.value;\n\n      if (source == \"checked\") {\n        item[\"active\"] = event.target.checked;\n\n        _this.setState({\n          item: item\n        });\n\n        return;\n      }\n\n      item[name] = value;\n\n      _this.setState({\n        item: item\n      });\n    };\n\n    _this.handleChangeContent = function (content) {\n      var item = _this.state.item;\n      item[\"content\"] = content;\n\n      _this.setState({\n        item: item\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(IntroduceTheProgramDialogInfomation, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item,\n          isRoleAdmin = _this$props.isRoleAdmin,\n          isView = _this$props.isView;\n      this.setState({\n        item: item\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var t = this.props.t;\n      var item = this.state.item;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        className: \"mb-8\",\n        container: true,\n        spacing: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 12,\n        md: 12,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 mb-16\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"Code\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"code\",\n        value: item.code ? item.code : \"\",\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 mb-16\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"Name\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"name\",\n        value: item.name ? item.name : \"\",\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(EditorForm, {\n        content: item.content ? item.content : \"\",\n        handleChangeContent: this.handleChangeContent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }\n      }))));\n    }\n  }]);\n\n  return IntroduceTheProgramDialogInfomation;\n}(Component);\n\nexport default IntroduceTheProgramDialogInfomation;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/IntroduceTheProgram/IntroduceTheProgramDialogInfomation.jsx"],"names":["React","Component","Dialog","Button","Grid","DialogActions","FormControlLabel","Switch","DialogTitle","DialogContent","Icon","IconButton","ValidatorForm","TextValidator","generateRandomId","Draggable","Paper","toast","EditorForm","addNew","update","IntroduceTheProgramDialogTab","Checkbox","IntroduceTheProgramDialogInfomation","handleChange","event","source","item","state","name","target","value","checked","setState","handleChangeContent","content","props","open","handleClose","isRoleAdmin","isView","t","color","code"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  DialogActions,\r\n  FormControlLabel,\r\n  Switch,\r\n  DialogTitle,\r\n  DialogContent,\r\n  Icon,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport { generateRandomId } from \"utils\";\r\nimport Draggable from \"react-draggable\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../../styles/views/_style.scss\";\r\nimport EditorForm from \"./EditorForm\";\r\nimport { addNew, update } from \"./IntroduceTheProgramService\";\r\nimport IntroduceTheProgramDialogTab from \"./IntroduceTheProgramDialogTab\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n\r\nclass IntroduceTheProgramDialogInfomation extends Component {\r\n\r\n  componentWillMount() {\r\n    let { open, handleClose, item ,isRoleAdmin,isView } = this.props;\r\n    this.setState({\r\n      item: item,\r\n    })\r\n  }\r\n\r\n    handleChange = (event, source) => {\r\n        let {item} = this.state\r\n        if(item == null){\r\n          item = {}\r\n        }\r\n        let name = event.target.name\r\n        let value = event.target.value\r\n        if (source == \"checked\") {\r\n          item[\"active\"] = event.target.checked;\r\n          this.setState({item:item})\r\n          return\r\n        }\r\n        item[name] = value\r\n        this.setState({\r\n          item: item\r\n        });\r\n    \r\n      };\r\n      handleChangeContent = (content) => {\r\n        let {item} = this.state\r\n        item[\"content\"] = content;\r\n        this.setState({ item: item });\r\n      };\r\n    render() {\r\n        let {t} = this.props;\r\n        let {item} = this.state;\r\n        return (\r\n            <div>\r\n                <Grid className=\"mb-8\" container spacing={4}>\r\n              <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 mb-16\"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"Code\")}\r\n                    </span>\r\n                  }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"code\"\r\n                  value={item.code ? item.code : \"\"}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n                <TextValidator\r\n                  className=\"w-100 mb-16\"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"Name\")}\r\n                    </span>\r\n                  }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  value={item.name ? item.name : \"\"}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n                {/* <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={item.active ? true : false}\r\n                      onChange={(e) => this.handleChange(e, \"checked\")}\r\n                      name=\"checkedB\"\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label={t(\"isShow\")}\r\n                /> */}\r\n                <EditorForm\r\n                  content={item.content ? item.content : \"\"}\r\n                  handleChangeContent={this.handleChangeContent}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default IntroduceTheProgramDialogInfomation;"]},"metadata":{},"sourceType":"module"}