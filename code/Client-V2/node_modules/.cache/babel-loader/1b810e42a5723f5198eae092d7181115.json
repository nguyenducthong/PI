{"ast":null,"code":"import axios from \"axios\";\nimport UserService from \"./UserService\";\nvar HttpMethods = {\n  GET: 'GET',\n  POST: 'POST',\n  DELETE: 'DELETE'\n};\n\nvar _axios = axios.create();\n\nvar configure = function configure() {\n  _axios.interceptors.request.use(function (config) {\n    // debugger;\n    console.log(config);\n\n    var cb = function cb() {\n      //config.header(\"Access-Control-Allow-Origin\", \"http://localhost:3000\");\n      //config.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n      //config.headers['Access-Control-Allow-Origin']= \"http://localhost:3000\";\n      //config.headers['Access-Control-Allow-Methods'] =\"Origin, X-Requested-With, Content-Type, Accept\";      \n      config.headers.Authorization = \"Bearer \".concat(UserService.getToken());\n      return Promise.resolve(config);\n    };\n\n    return UserService.updateToken(cb);\n  });\n};\n\nvar onError = function onError() {\n  _axios.interceptors.response.use(function (res) {\n    console.log(res);\n    return res;\n  }, function (err) {\n    console.log(err.response.status);\n\n    if (err.response.status === 404) {\n      throw new Error(\"\".concat(err.config.url, \" not found\"));\n    }\n\n    throw err; // console.log(err.response.status);\n    // return err;\n  });\n};\n\nvar getAxiosClient = function getAxiosClient() {\n  return _axios;\n};\n\nexport default {\n  HttpMethods,\n  configure,\n  getAxiosClient,\n  onError\n};","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/services/HttpService.js"],"names":["axios","UserService","HttpMethods","GET","POST","DELETE","_axios","create","configure","interceptors","request","use","config","console","log","cb","headers","Authorization","getToken","Promise","resolve","updateToken","onError","response","res","err","status","Error","url","getAxiosClient"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,GAAG,EAAE,KADa;AAElBC,EAAAA,IAAI,EAAE,MAFY;AAGlBC,EAAAA,MAAM,EAAE;AAHU,CAApB;;AAMA,IAAMC,MAAM,GAAGN,KAAK,CAACO,MAAN,EAAf;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtBF,EAAAA,MAAM,CAACG,YAAP,CAAoBC,OAApB,CAA4BC,GAA5B,CAAgC,UAACC,MAAD,EAAY;AAC1C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,QAAMG,EAAE,GAAG,SAALA,EAAK,GAAM;AACf;AACA;AACA;AACA;AACAH,MAAAA,MAAM,CAACI,OAAP,CAAeC,aAAf,oBAAyChB,WAAW,CAACiB,QAAZ,EAAzC;AACA,aAAOC,OAAO,CAACC,OAAR,CAAgBR,MAAhB,CAAP;AACD,KAPD;;AAQA,WAAOX,WAAW,CAACoB,WAAZ,CAAwBN,EAAxB,CAAP;AACD,GAZD;AAaD,CAdD;;AAgBA,IAAMO,OAAO,GAAG,SAAVA,OAAU,GAAI;AAClBhB,EAAAA,MAAM,CAACG,YAAP,CAAoBc,QAApB,CAA6BZ,GAA7B,CACE,UAAAa,GAAG,EAAI;AACLX,IAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACA,WAAOA,GAAP;AACD,GAJH,EAKE,UAAAC,GAAG,EAAI;AACLZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,GAAG,CAACF,QAAJ,CAAaG,MAAzB;;AACA,QAAID,GAAG,CAACF,QAAJ,CAAaG,MAAb,KAAwB,GAA5B,EAAiC;AAC/B,YAAM,IAAIC,KAAJ,WAAaF,GAAG,CAACb,MAAJ,CAAWgB,GAAxB,gBAAN;AACD;;AACD,UAAMH,GAAN,CALK,CAML;AACA;AACD,GAbH;AAeD,CAhBD;;AAkBA,IAAMI,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAMvB,MAAN;AAAA,CAAvB;;AAEA,eAAe;AACbJ,EAAAA,WADa;AAEbM,EAAAA,SAFa;AAGbqB,EAAAA,cAHa;AAIbP,EAAAA;AAJa,CAAf","sourcesContent":["import axios from \"axios\";\nimport UserService from \"./UserService\";\n\nconst HttpMethods = {\n  GET: 'GET',\n  POST: 'POST',\n  DELETE: 'DELETE',\n};\n\nconst _axios = axios.create();\n\nconst configure = () => {\n  _axios.interceptors.request.use((config) => {\n    // debugger;\n    console.log(config);\n    const cb = () => {\n      //config.header(\"Access-Control-Allow-Origin\", \"http://localhost:3000\");\n      //config.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n      //config.headers['Access-Control-Allow-Origin']= \"http://localhost:3000\";\n      //config.headers['Access-Control-Allow-Methods'] =\"Origin, X-Requested-With, Content-Type, Accept\";      \n      config.headers.Authorization = `Bearer ${UserService.getToken()}`;\n      return Promise.resolve(config);\n    };\n    return UserService.updateToken(cb);\n  });\n};\n\nconst onError = ()=>{\n  _axios.interceptors.response.use(\n    res => {\n      console.log(res);\n      return res;\n    },\n    err => {\n      console.log(err.response.status);\n      if (err.response.status === 404) {\n        throw new Error(`${err.config.url} not found`);\n      }\n      throw err;\n      // console.log(err.response.status);\n      // return err;\n    }\n  );\n} \n\nconst getAxiosClient = () => _axios;\n\nexport default {\n  HttpMethods,\n  configure,\n  getAxiosClient,\n  onError,\n}\n"]},"metadata":{},"sourceType":"module"}