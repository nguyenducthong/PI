{"ast":null,"code":"import _regeneratorRuntime from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\DoAnTotNghiep\\\\code\\\\Client-V2\\\\src\\\\app\\\\views\\\\EQAResultReportSerodia\\\\EQAResultReportSerodiaDialog.jsx\";\nimport React, { Component } from \"react\";\nimport { Dialog, Button, Grid, TextField, Icon, IconButton, FormControl, DialogTitle, DialogContent, DialogActions, Paper, FormHelperText, MenuItem, Checkbox, Select, FormControlLabel } from \"@material-ui/core\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { technicianSearchByPage, saveItem, checkReagentByHealthOrgRound, getEQASampleTubeByHealthOrgEQARoundId } from \"./EQAResultReportSerodiaService\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport ConstantList from \"../../appConfig\";\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\nimport HealthOrgEQARoundPopup from \"../Component/HealthOrgEQARound/HealthOrgEQARoundPopup\";\nimport { searchByPage as reagentSearchByPage } from \"../Reagent/ReagentService\";\nimport Draggable from 'react-draggable';\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport { MuiPickersUtilsProvider, DateTimePicker, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport LocalConstants from \"./Constants\";\nimport MaterialTable, { MTableToolbar, Chip, MTableBody, MTableHeader } from 'material-table';\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getCurrentUser, getListHealthOrgByUser } from \"../User/UserService\";\nimport '../../../styles/views/_loadding.scss';\nimport '../../../styles/views/_style.scss';\nimport clsx from 'clsx';\nimport CircularProgress from '@material-ui/core/CircularProgress';\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n});\n\nfunction PaperComponent(props) {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    handle: \"#draggable-dialog-title\",\n    cancel: '[class*=\"MuiDialogContent-root\"]',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  })));\n}\n\nfunction MaterialButton(props) {\n  var item = props.item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      return props.onSelect(item, 0);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \"edit\")), /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      return props.onSelect(item, 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    color: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"Delete\")));\n}\n\nvar EQAResultReportSerodiaDialog = /*#__PURE__*/function (_Component) {\n  _inherits(EQAResultReportSerodiaDialog, _Component);\n\n  var _super = _createSuper(EQAResultReportSerodiaDialog);\n\n  //positive(1),//Dương tính\n  //indertermine(0),//Không xác định\n  //negative(-1),//Âm tính\n  //none(-2)//Không thực hiện\n  function EQAResultReportSerodiaDialog(props) {\n    var _this;\n\n    _classCallCheck(this, EQAResultReportSerodiaDialog);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      technician: null,\n      round: null,\n      healthOrg: null,\n      rowsPerPage: 5,\n      page: 0,\n      listHealthOrgRound: [],\n      roundLists: [],\n      details: [],\n      orderTest: '',\n      shouldOpenSearchDialog: false,\n      shouldOpenConfirmationDialog: false,\n      listReagent: [],\n      listTechnician: [],\n      reagentExpiryDate: null,\n      testDate: new Date(),\n      reagentUnBoxDate: null,\n      isView: false,\n      isFinalResult: false,\n      typeMethod: 3,\n      isViewButton: false,\n      loading: false\n    };\n    _this.listCheckValue = [{\n      id: LocalConstants.EQAResultReportDetail_TestValue.positive,\n      name: \"Dương tính\"\n    }, {\n      id: LocalConstants.EQAResultReportDetail_TestValue.negative,\n      name: \"Âm tính\"\n    }];\n    _this.listTestValue = [{\n      id: LocalConstants.EQAResultReportDetail_TestValue.positive,\n      name: \"Dương tính\"\n    }, {\n      id: LocalConstants.EQAResultReportDetail_TestValue.indertermine,\n      name: \"Không xác định\"\n    }, {\n      id: LocalConstants.EQAResultReportDetail_TestValue.negative,\n      name: \"Âm tính\"\n    }];\n    _this.listAgglomeration = [{\n      id: 1,\n      name: \" - \"\n    }, {\n      id: 2,\n      name: \" +/- \"\n    }, {\n      id: 3,\n      name: \" + \"\n    }, {\n      id: 4,\n      name: \" ++ \"\n    }];\n    _this.Results = [{\n      id: LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented,\n      name: \"Không thực hiện\"\n    }, {\n      id: LocalConstants.EQAResultReportDetail_TestValue.negative,\n      name: \"Âm tính\"\n    }, {\n      id: LocalConstants.EQAResultReportDetail_TestValue.indertermine,\n      name: \"Không xác định\"\n    }, {\n      id: LocalConstants.EQAResultReportDetail_TestValue.positive,\n      name: \"Dương tính\"\n    }];\n\n    _this.handleDialogClose = function () {\n      _this.setState({\n        shouldOpenConfirmationDialog: false\n      });\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === \"isFinalResult\") {\n        _this.setState({\n          isFinalResult: event.target.checked\n        });\n      }\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.handleRowDataCellChange = function (rowData, event) {\n      var details = _this.state.details;\n\n      if (details != null && details.length > 0) {\n        details.forEach(function (element) {\n          if (element.tableData != null && rowData != null && rowData.tableData != null && element.tableData.id == rowData.tableData.id) {\n            if (event.target.name == \"checkValue\") {\n              if (event.target.value != \"\" && event.target.value != null) if (element.result == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\n                element.result = \"\";\n              }\n              element.checkValue = event.target.value;\n            } else if (event.target.name == \"testValue\") {\n              if (event.target.value != \"\" && event.target.value != null) if (element.result == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\n                element.result = \"\";\n              }\n              element.testValue = event.target.value;\n            } else if (event.target.name == \"agglomeration\") {\n              if (event.target.value != \"\" && event.target.value != null) if (element.result == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\n                element.result = \"\";\n              }\n              element.agglomeration = event.target.value;\n            } else if (event.target.name == \"result\") {\n              if (event.target.value == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\n                element.agglomeration = \"\";\n                element.testValue = \"\";\n                element.checkValue = \"\";\n              }\n\n              element.result = event.target.value;\n            } else if (event.target.name == \"note\") {\n              element.note = event.target.value;\n            }\n          }\n        });\n\n        _this.setState({\n          details: details\n        });\n      }\n    };\n\n    _this.openCircularProgress = function () {\n      _this.setState({\n        loading: true\n      });\n    };\n\n    _this.handleFormSubmit = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var t, isCheck, _this$state, id, details, healthOrgRound, reagent, typeMethod;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.openCircularProgress();\n\n            case 2:\n              t = _this.props.t;\n              isCheck = false;\n              _this$state = _this.state, id = _this$state.id, details = _this$state.details, healthOrgRound = _this$state.healthOrgRound, reagent = _this$state.reagent, typeMethod = _this$state.typeMethod;\n\n              _this.setState({\n                loading: true\n              });\n\n              if (!ConstantList.CHECK_ERROR_RESULT) {\n                _context.next = 10;\n                break;\n              }\n\n              checkReagentByHealthOrgRound(id, healthOrgRound.id, reagent.id, typeMethod).then(function (res) {\n                if (res.data) {\n                  toast.warning(t(\"EqaResult.dulicateReagent\"));\n\n                  _this.setState({\n                    loading: false\n                  });\n                } else {\n                  details.forEach(function (el) {\n                    if (el.result === \"\" || el.result === null) {\n                      isCheck = true;\n                    }\n                  });\n\n                  if (isCheck) {\n                    toast.warning(t(\"EQAResultReportElisa.notResult\"));\n\n                    _this.setState({\n                      loading: false\n                    });\n\n                    return;\n                  }\n\n                  if (id) {\n                    _this.setState({\n                      isView: true,\n                      isViewButton: true\n                    });\n\n                    saveItem(_objectSpread({}, _this.state)).then(function () {\n                      _this.setState({\n                        loading: false\n                      });\n\n                      _this.props.handleOKEditClose();\n\n                      toast.success(t('mess_edit'));\n                    }).catch(function () {\n                      _this.setState({\n                        loading: false\n                      });\n\n                      toast.warning(t(\"mess_edit_error\"));\n\n                      _this.setState({\n                        isView: false,\n                        isViewButton: false\n                      });\n                    });\n                  } else {\n                    _this.setState({\n                      isView: true,\n                      isViewButton: true\n                    });\n\n                    saveItem(_objectSpread({}, _this.state)).then(function () {\n                      _this.setState({\n                        loading: false\n                      });\n\n                      _this.props.handleOKEditClose();\n\n                      toast.success(t('mess_add'));\n                    }).catch(function () {\n                      _this.setState({\n                        loading: false\n                      });\n\n                      toast.warning(t(\"mess_add_error\"));\n\n                      _this.setState({\n                        isView: false,\n                        isViewButton: false\n                      });\n                    });\n                  }\n                }\n              });\n              _context.next = 16;\n              break;\n\n            case 10:\n              details.forEach(function (el) {\n                if (el.result === \"\" || el.result === null) {\n                  isCheck = true;\n                }\n              });\n\n              if (!isCheck) {\n                _context.next = 15;\n                break;\n              }\n\n              toast.warning(t(\"EQAResultReportElisa.notResult\"));\n\n              _this.setState({\n                loading: false\n              });\n\n              return _context.abrupt(\"return\");\n\n            case 15:\n              if (id) {\n                _this.setState({\n                  isView: true,\n                  isViewButton: true\n                });\n\n                saveItem(_objectSpread({}, _this.state)).then(function () {\n                  _this.setState({\n                    loading: false\n                  });\n\n                  _this.props.handleOKEditClose();\n\n                  toast.success(t('mess_edit'));\n                }).catch(function () {\n                  _this.setState({\n                    loading: false\n                  });\n\n                  toast.warning(t(\"mess_edit_error\"));\n\n                  _this.setState({\n                    isView: false,\n                    isViewButton: false\n                  });\n                });\n              } else {\n                _this.setState({\n                  isView: true,\n                  isViewButton: true\n                });\n\n                saveItem(_objectSpread({}, _this.state)).then(function () {\n                  _this.setState({\n                    loading: false\n                  });\n\n                  _this.props.handleOKEditClose();\n\n                  toast.success(t('mess_add'));\n                }).catch(function () {\n                  _this.setState({\n                    loading: false\n                  });\n\n                  toast.warning(t(\"mess_add_error\"));\n\n                  _this.setState({\n                    isView: false,\n                    isViewButton: false\n                  });\n                });\n              }\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.handleDateChange = function (date, name) {\n      _this.setState({\n        [name]: date\n      });\n    };\n\n    _this.handleStartDateChange = function (startDate) {\n      _this.setState({\n        startDate\n      });\n    };\n\n    _this.selectTechnician = function (technician) {\n      if (technician != null && technician.id != null) {\n        _this.setState({\n          technician: technician\n        }, function () {});\n      }\n    };\n\n    _this.selectReagent = function (reagent) {\n      if (reagent != null && reagent.id != null) {\n        _this.setState({\n          reagent: reagent\n        }, function () {});\n      }\n    };\n\n    _this.handleHealthOrgRoundPopupClose = function () {\n      _this.setState({\n        shouldOpenHealthOrgRoundPopup: false\n      }, function () {});\n    };\n\n    _this.handleSelectHealthOrgRound = function (healthOrgRound) {\n      if (healthOrgRound && healthOrgRound.id) {\n        _this.setState({\n          healthOrgRound\n        }, function () {\n          var _this2 = this;\n\n          var _this$state2 = this.state,\n              healthOrgRound = _this$state2.healthOrgRound,\n              details = _this$state2.details;\n          details = [];\n          getEQASampleTubeByHealthOrgEQARoundId(healthOrgRound.id).then(function (result) {\n            var listEQASampleTube = result.data;\n\n            if (listEQASampleTube != null && listEQASampleTube.length > 0) {\n              listEQASampleTube.forEach(function (tube) {\n                var eQAResultReportDetail = {};\n                eQAResultReportDetail.sampleTube = tube;\n                eQAResultReportDetail.checkValue = '';\n                eQAResultReportDetail.testValue = '';\n                eQAResultReportDetail.agglomeration = '';\n                eQAResultReportDetail.result = '';\n                details.push(eQAResultReportDetail);\n              });\n\n              _this2.setState({\n                details\n              });\n            }\n          });\n        });\n      }\n\n      _this.handleHealthOrgRoundPopupClose();\n    };\n\n    _this.notificationFinalResult = function () {\n      _this.setState({\n        shouldOpenConfirmationDialog: true\n      });\n    };\n\n    _this.handleFinalResult = function () {\n      if (_this.state.isFinalResult == null || !_this.state.isFinalResult) {\n        _this.setState({\n          isFinalResult: true,\n          dateSubmitResults: new Date()\n        }, function () {});\n\n        _this.handleDialogClose();\n      }\n\n      if (_this.state.isFinalResult) {\n        _this.setState({\n          isFinalResult: false,\n          dateSubmitResults: new Date()\n        }, function () {});\n\n        _this.handleDialogClose();\n      }\n    };\n\n    _this.handleDialogFinalResultClose = function () {\n      // this.setState({isFinalResult:false},()=>{\n      // })\n      _this.handleDialogClose();\n    };\n\n    return _this;\n  }\n\n  _createClass(EQAResultReportSerodiaDialog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item,\n          isRoleAdmin = _this$props.isRoleAdmin,\n          isView = _this$props.isView;\n\n      if (item && item.details && item.details.length > 0) {\n        item.details.sort(function (a, b) {\n          return a.orderNumber > b.orderNumber ? 1 : a.orderNumber === b.orderNumber ? a.sampleTube.code > b.sampleTube.code ? 1 : -1 : -1;\n        });\n      }\n\n      if (item != null && item.reagent != null && item.reagent.name != null) {\n        if (item.reagent.name === \"Sinh phẩm khác\") {\n          item[\"otherReagent\"] = true;\n        } else {\n          item[\"otherReagent\"] = false;\n        }\n      }\n\n      if (item.listHealthOrgRound != null) {\n        this.setState({\n          listHealthOrgRound: item.listHealthOrgRound,\n          healthOrgRound: item.listHealthOrgRound[0]\n        }, function () {\n          _this3.handleSelectHealthOrgRound(_this3.state.healthOrgRound);\n        });\n      }\n\n      this.setState(_objectSpread({}, item), function () {});\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$state3 = this.state,\n          isView = _this$state3.isView,\n          isViewButton = _this$state3.isViewButton,\n          id = _this$state3.id,\n          supplyOfReagent = _this$state3.supplyOfReagent,\n          round = _this$state3.round,\n          healthOrgRound = _this$state3.healthOrgRound,\n          reagent = _this$state3.reagent,\n          personBuyReagent = _this$state3.personBuyReagent,\n          testDate = _this$state3.testDate,\n          reagentLot = _this$state3.reagentLot,\n          listHealthOrgRound = _this$state3.listHealthOrgRound,\n          details = _this$state3.details,\n          reagentUnBoxDate = _this$state3.reagentUnBoxDate,\n          reagentExpiryDate = _this$state3.reagentExpiryDate,\n          orderTest = _this$state3.orderTest,\n          otherReagent = _this$state3.otherReagent,\n          noteOtherReagent = _this$state3.noteOtherReagent,\n          incubationPeriod = _this$state3.incubationPeriod,\n          technician = _this$state3.technician,\n          loading = _this$state3.loading,\n          shakingMethod = _this$state3.shakingMethod,\n          shakingNumber = _this$state3.shakingNumber,\n          listTechnician = _this$state3.listTechnician,\n          shakingTimes = _this$state3.shakingTimes,\n          note = _this$state3.note,\n          shouldOpenHealthOrgRoundPopup = _this$state3.shouldOpenHealthOrgRoundPopup,\n          isCheck = _this$state3.isCheck,\n          isFinalResult = _this$state3.isFinalResult,\n          dateSubmitResults = _this$state3.dateSubmitResults;\n      var searchObject = {\n        pageIndex: 0,\n        pageSize: 1000000,\n        testType: 3\n      };\n      var technicianSearchObject = {\n        pageIndex: 0,\n        pageSize: 1000000,\n        searchByHealthOrg: true,\n        healthOrg: healthOrgRound && healthOrgRound.healthOrg && healthOrgRound.healthOrg.id ? {\n          id: healthOrgRound.healthOrg.id\n        } : null\n      };\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          handleClose = _this$props2.handleClose,\n          classes = _this$props2.classes,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n;\n      var columns = [{\n        title: t(\"EQAResultReportFastTest.sample_list.sample_code\"),\n        field: \"sampleTube.code\",\n        align: \"left\",\n        width: \"150\"\n      }, {\n        title: t(\"EQAResultReportSerodia.checkValue\"),\n        field: \"supplyOfReagent\",\n        width: \"150\",\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(FormControl, {\n            className: \"w-80\",\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(Select, {\n            value: rowData.checkValue,\n            disabled: isView,\n            onChange: function onChange(checkValue) {\n              return _this4.handleRowDataCellChange(rowData, checkValue);\n            },\n            inputProps: {\n              name: \"checkValue\",\n              id: \"checkValue-simple\"\n            },\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 13\n            }\n          }, _this4.listCheckValue.map(function (item) {\n            return /*#__PURE__*/React.createElement(MenuItem, {\n              key: item.id,\n              value: item.id,\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 456,\n                columnNumber: 24\n              }\n            }, item.name);\n          })));\n        }\n      }, {\n        title: t(\"EQAResultReportSerodia.testValue\"),\n        field: \"supplyOfReagent\",\n        width: \"150\",\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(FormControl, {\n            className: \"w-80\",\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(Select, {\n            value: rowData.testValue,\n            disabled: isView,\n            onChange: function onChange(testValue) {\n              return _this4.handleRowDataCellChange(rowData, testValue);\n            },\n            inputProps: {\n              name: \"testValue\",\n              id: \"testValue-simple\"\n            },\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 13\n            }\n          }, _this4.listTestValue.map(function (item) {\n            return /*#__PURE__*/React.createElement(MenuItem, {\n              key: item.id,\n              value: item.id,\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 478,\n                columnNumber: 24\n              }\n            }, item.name);\n          })));\n        }\n      }, {\n        title: t(\"EQAResultReportSerodia.agglomeration\"),\n        field: \"supplyOfReagent\",\n        width: \"150\",\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(FormControl, {\n            className: \"w-80\",\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 488,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(Select, {\n            value: rowData.agglomeration,\n            disabled: isView,\n            onChange: function onChange(agglomeration) {\n              return _this4.handleRowDataCellChange(rowData, agglomeration);\n            },\n            inputProps: {\n              name: \"agglomeration\",\n              id: \"agglomeration-simple\"\n            },\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 13\n            }\n          }, _this4.listAgglomeration.map(function (item) {\n            return /*#__PURE__*/React.createElement(MenuItem, {\n              key: item.id,\n              value: item.id,\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 500,\n                columnNumber: 24\n              }\n            }, item.name);\n          })));\n        }\n      }, {\n        title: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 16\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 11\n          }\n        }, \" * \"), t(\"EQAResultReportSerodia.Result.title\")),\n        field: \"supplyOfReagent\",\n        width: \"150\",\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(FormControl, {\n            className: \"w-80\",\n            required: _this4.state.isCheck,\n            error: _this4.state.isCheck,\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 513,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(Select, {\n            value: rowData.result,\n            disabled: isView,\n            onChange: function onChange(result) {\n              return _this4.handleRowDataCellChange(rowData, result);\n            },\n            inputProps: {\n              name: \"result\",\n              id: \"result-simple\"\n            },\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 13\n            }\n          }, _this4.Results.map(function (item) {\n            return /*#__PURE__*/React.createElement(MenuItem, {\n              key: item.id,\n              value: item.id,\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 525,\n                columnNumber: 24\n              }\n            }, item.name);\n          })));\n        }\n      }, {\n        title: t(\"SampleManagement.serum-bottle.note\"),\n        field: \"note\",\n        width: \"150\",\n        headerStyle: {\n          minWidth: \"200px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        cellStyle: {\n          minWidth: \"200px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"0px\",\n          textAlign: \"left\"\n        },\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(TextValidator, {\n            className: \"w-100\",\n            onChange: function onChange(note) {\n              return _this4.handleRowDataCellChange(rowData, note);\n            },\n            type: \"textarea\",\n            multiLine: true,\n            rowsMax: 4,\n            name: \"note\",\n            value: rowData.note ? rowData.note : '',\n            disabled: isView,\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 11\n            }\n          });\n        }\n      }];\n      return /*#__PURE__*/React.createElement(Dialog, {\n        open: open,\n        maxWidth: \"lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: clsx(\"wrapperButton\", !loading && 'hidden'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(CircularProgress, {\n        className: \"buttonProgress\",\n        size: 24,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        style: {\n          overflowY: \"auto\",\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DialogTitle, {\n        style: {\n          cursor: 'move'\n        },\n        id: \"draggable-dialog-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"mb-20\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 13\n        }\n      }, !isView ? t(\"SaveUpdate\") : t(\"Details\")), /*#__PURE__*/React.createElement(IconButton, {\n        style: {\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\"\n        },\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        color: \"error\",\n        title: t(\"close\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 116\n        }\n      }, \"close\"))), this.state.shouldOpenConfirmationDialog && /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        title: t(\"confirm\"),\n        open: this.state.shouldOpenConfirmationDialog,\n        onConfirmDialogClose: this.handleDialogFinalResultClose,\n        onYesClick: this.handleFinalResult,\n        text: isFinalResult ? t(\"EqaResult.unFinalResultConfirm\") : t(\"EqaResult.FinalResultConfirm\"),\n        Yes: t(\"general.Yes\"),\n        No: t(\"general.No\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(DialogContent, {\n        dividers: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Autocomplete, {\n        variant: \"outlined\",\n        size: \"small\",\n        id: \"combo-box\",\n        options: listHealthOrgRound,\n        className: \"flex-end\",\n        disabled: isView,\n        getOptionLabel: function getOptionLabel(option) {\n          return option.healthOrg.name;\n        },\n        onChange: function onChange(event, healthOrgRound) {\n          return _this4.handleSelectHealthOrgRound(healthOrgRound);\n        },\n        value: healthOrgRound,\n        renderInput: function renderInput(params) {\n          return /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n            label: /*#__PURE__*/React.createElement(\"span\", {\n              className: \"font\",\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 638,\n                columnNumber: 28\n              }\n            }, t('EQAResultReportElisa.healthOrgName')),\n            disabled: isView,\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 637,\n              columnNumber: 44\n            }\n          }));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 2,\n        md: 2,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EQAResultReportFastTest.order\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"orderTest\",\n        value: orderTest,\n        variant: \"outlined\",\n        size: \"small\",\n        disabled: isView,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        className: \"w-100\",\n        margin: \"none\",\n        id: \"mui-pickers-testDate\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 669,\n            columnNumber: 28\n          }\n        }, t('EQAResultReportSerodia.testDate')),\n        inputVariant: \"outlined\",\n        type: \"text\",\n        autoOk: true,\n        format: \"dd/MM/yyyy\",\n        value: testDate,\n        size: \"small\",\n        disabled: isView,\n        onChange: function onChange(date) {\n          return _this4.handleDateChange(date, \"testDate\");\n        },\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(AsynchronousAutocomplete, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 50\n          }\n        }, t(\"EQAResultReportFastTest.technicianName\")),\n        variant: \"outlined\",\n        size: \"small\",\n        disabled: isView,\n        searchFunction: technicianSearchByPage,\n        searchObject: technicianSearchObject,\n        defaultValue: technician,\n        value: technician,\n        valueTextValidator: technician,\n        displayLable: 'displayName',\n        onSelect: this.selectTechnician,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(AsynchronousAutocomplete, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EqaResult.reagent\")),\n        variant: \"outlined\",\n        size: \"small\",\n        disabled: isView,\n        searchFunction: reagentSearchByPage,\n        searchObject: searchObject,\n        defaultValue: reagent,\n        value: reagent,\n        displayLable: 'name',\n        valueTextValidator: reagent,\n        validators: [\"required\"],\n        errorMessages: t('general.errorMessages_required'),\n        onSelect: this.selectReagent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 2,\n        md: 2,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 23\n          }\n        }, \" * \"), t(\"EQAResultReportFastTest.reagentLot\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"reagentLot\",\n        value: reagentLot,\n        variant: \"outlined\",\n        size: \"small\",\n        disabled: isView,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        fullWidth: true,\n        margin: \"none\",\n        id: \"mui-pickers-reagentExpiryDate\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 744,\n            columnNumber: 28\n          }\n        }, t('EQAResultReportFastTest.reagentExpiryDate')),\n        inputVariant: \"outlined\",\n        type: \"text\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        value: reagentExpiryDate,\n        size: \"small\",\n        disabled: isView,\n        onChange: function onChange(date) {\n          return _this4.handleDateChange(date, \"reagentExpiryDate\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 758,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        fullWidth: true,\n        margin: \"none\",\n        id: \"mui-pickers-reagentUnBoxDate\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 763,\n            columnNumber: 28\n          }\n        }, t('EQAResultReportSerodia.reagentUnBoxDate')),\n        inputVariant: \"outlined\",\n        type: \"text\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        value: reagentUnBoxDate,\n        size: \"small\",\n        disabled: isView,\n        onChange: function onChange(date) {\n          return _this4.handleDateChange(date, \"reagentUnBoxDate\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 775,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 778,\n            columnNumber: 26\n          }\n        }, t(\"EQAResultReportSerodia.supplyOfReagent\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"supplyOfReagent\",\n        value: supplyOfReagent,\n        variant: \"outlined\",\n        size: \"small\",\n        disabled: isView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 776,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 2,\n        md: 2,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 788,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 26\n          }\n        }, t(\"EQAResultReportSerodia.personBuyReagent\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"personBuyReagent\",\n        value: personBuyReagent,\n        variant: \"outlined\",\n        size: \"small\",\n        disabled: isView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 789,\n          columnNumber: 17\n        }\n      })), isFinalResult && /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 34\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n        size: \"small\",\n        fullWidth: true,\n        margin: \"none\",\n        disabled: true,\n        id: \"mui-pickers-dateSubmitResults\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 810,\n            columnNumber: 28\n          }\n        }, t('EQAResultReportElisa.dateSubmitResults')),\n        inputVariant: \"outlined\",\n        type: \"text\",\n        autoOk: false,\n        format: \"dd/MM/yyyy\",\n        value: dateSubmitResults,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 804,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 3,\n        md: 3,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 819,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControlLabel, {\n        variant: \"outlined\",\n        size: \"small\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            fontWeight: \"bold\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 823,\n            columnNumber: 26\n          }\n        }, \" \", t('EQAResultReportFastTest.isFinalResult')),\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          checked: isFinalResult,\n          onClick: function onClick(isFinalResult) {\n            return _this4.notificationFinalResult(isFinalResult);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 824,\n            columnNumber: 28\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 820,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 12,\n        md: 12,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 832,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 835,\n            columnNumber: 26\n          }\n        }, t(\"SampleManagement.serum-bottle.note\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"note\",\n        value: note,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 833,\n          columnNumber: 17\n        }\n      })), otherReagent && /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 12,\n        md: 12,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 844,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        disabled: isView,\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 848,\n            columnNumber: 26\n          }\n        }, t(\"reagent.note\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        size: \"small\",\n        variant: \"outlined\",\n        name: \"noteOtherReagent\",\n        value: noteOtherReagent,\n        validators: [\"required\"],\n        errorMessages: t('general.errorMessages_required'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 845,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 907,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MaterialTable, {\n        title: \"\",\n        data: details,\n        columns: columns,\n        options: {\n          selection: false,\n          actionsColumnIndex: -1,\n          paging: false,\n          search: false,\n          rowStyle: function rowStyle(rowData, index) {\n            return {\n              backgroundColor: index % 2 === 1 ? '#EEE' : '#FFF'\n            };\n          },\n          headerStyle: {\n            backgroundColor: '#358600',\n            color: '#fff'\n          },\n          padding: 'dense',\n          toolbar: false\n        },\n        components: {\n          Toolbar: function Toolbar(props) {\n            return /*#__PURE__*/React.createElement(MTableToolbar, Object.assign({}, props, {\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 929,\n                columnNumber: 23\n              }\n            }));\n          }\n        },\n        onSelectionChange: function onSelectionChange(rows) {\n          _this4.data = rows; // this.setState({selectedItems:rows});\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 908,\n          columnNumber: 17\n        }\n      })))), /*#__PURE__*/React.createElement(DialogActions, {\n        spacing: 4,\n        className: \"flex flex-end flex-middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 940,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        className: \"mr-16\",\n        color: \"secondary\",\n        onClick: function onClick() {\n          return handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 941,\n          columnNumber: 13\n        }\n      }, \" \", t('Cancel')), !isView && /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        disabled: isViewButton,\n        color: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 942,\n          columnNumber: 26\n        }\n      }, t('Save')))));\n    }\n  }]);\n\n  return EQAResultReportSerodiaDialog;\n}(Component);\n\nexport default EQAResultReportSerodiaDialog;","map":{"version":3,"sources":["E:/DoAnTotNghiep/code/Client-V2/src/app/views/EQAResultReportSerodia/EQAResultReportSerodiaDialog.jsx"],"names":["React","Component","Dialog","Button","Grid","TextField","Icon","IconButton","FormControl","DialogTitle","DialogContent","DialogActions","Paper","FormHelperText","MenuItem","Checkbox","Select","FormControlLabel","ValidatorForm","TextValidator","technicianSearchByPage","saveItem","checkReagentByHealthOrgRound","getEQASampleTubeByHealthOrgEQARoundId","Autocomplete","ConstantList","AsynchronousAutocomplete","HealthOrgEQARoundPopup","searchByPage","reagentSearchByPage","Draggable","Breadcrumb","ConfirmationDialog","MuiPickersUtilsProvider","DateTimePicker","KeyboardDatePicker","DateFnsUtils","LocalConstants","MaterialTable","MTableToolbar","Chip","MTableBody","MTableHeader","useTranslation","withTranslation","Trans","toast","getCurrentUser","getListHealthOrgByUser","clsx","CircularProgress","configure","autoClose","draggable","limit","PaperComponent","props","MaterialButton","item","onSelect","EQAResultReportSerodiaDialog","state","technician","round","healthOrg","rowsPerPage","page","listHealthOrgRound","roundLists","details","orderTest","shouldOpenSearchDialog","shouldOpenConfirmationDialog","listReagent","listTechnician","reagentExpiryDate","testDate","Date","reagentUnBoxDate","isView","isFinalResult","typeMethod","isViewButton","loading","listCheckValue","id","EQAResultReportDetail_TestValue","positive","name","negative","listTestValue","indertermine","listAgglomeration","Results","Not_Implemented","handleDialogClose","setState","handleChange","event","source","persist","isActive","target","checked","value","handleRowDataCellChange","rowData","length","forEach","element","tableData","result","checkValue","testValue","agglomeration","note","openCircularProgress","handleFormSubmit","t","isCheck","healthOrgRound","reagent","CHECK_ERROR_RESULT","then","res","data","warning","el","handleOKEditClose","success","catch","handleDateChange","date","handleStartDateChange","startDate","selectTechnician","selectReagent","handleHealthOrgRoundPopupClose","shouldOpenHealthOrgRoundPopup","handleSelectHealthOrgRound","listEQASampleTube","tube","eQAResultReportDetail","sampleTube","push","notificationFinalResult","handleFinalResult","dateSubmitResults","handleDialogFinalResultClose","open","handleClose","isRoleAdmin","sort","a","b","orderNumber","code","supplyOfReagent","personBuyReagent","reagentLot","otherReagent","noteOtherReagent","incubationPeriod","shakingMethod","shakingNumber","shakingTimes","searchObject","pageIndex","pageSize","testType","technicianSearchObject","searchByHealthOrg","classes","i18n","columns","title","field","align","width","render","map","color","headerStyle","minWidth","paddingLeft","paddingRight","textAlign","cellStyle","overflowY","display","flexDirection","cursor","position","right","top","option","params","fontWeight","selection","actionsColumnIndex","paging","search","rowStyle","index","backgroundColor","padding","toolbar","Toolbar","rows"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  TextField,\r\n  Icon,\r\n  IconButton,\r\n  FormControl,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Paper,\r\n  FormHelperText,\r\n  MenuItem,\r\n  Checkbox, Select,\r\n  FormControlLabel\r\n} from \"@material-ui/core\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport {\r\n  technicianSearchByPage,\r\n  saveItem,\r\n  checkReagentByHealthOrgRound,\r\n  getEQASampleTubeByHealthOrgEQARoundId\r\n} from \"./EQAResultReportSerodiaService\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport ConstantList from \"../../appConfig\";\r\nimport AsynchronousAutocomplete from \"../utilities/AsynchronousAutocomplete\";\r\nimport HealthOrgEQARoundPopup from \"../Component/HealthOrgEQARound/HealthOrgEQARoundPopup\";\r\nimport { searchByPage as reagentSearchByPage } from \"../Reagent/ReagentService\";\r\nimport Draggable from 'react-draggable';\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport { MuiPickersUtilsProvider, DateTimePicker, KeyboardDatePicker } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport LocalConstants from \"./Constants\";\r\nimport MaterialTable, { MTableToolbar, Chip, MTableBody, MTableHeader } from 'material-table';\r\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { getCurrentUser, getListHealthOrgByUser } from \"../User/UserService\"\r\nimport '../../../styles/views/_loadding.scss';\r\nimport '../../../styles/views/_style.scss';\r\nimport clsx from 'clsx';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit: 3\r\n});\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\nfunction MaterialButton(props) {\r\n  const item = props.item;\r\n  return <div>\r\n    <IconButton onClick={() => props.onSelect(item, 0)}>\r\n      <Icon color=\"primary\">edit</Icon>\r\n    </IconButton>\r\n    <IconButton onClick={() => props.onSelect(item, 1)}>\r\n      <Icon color=\"error\">Delete</Icon>\r\n    </IconButton>\r\n  </div>;\r\n}\r\n\r\nclass EQAResultReportSerodiaDialog extends Component {\r\n  state = {\r\n    technician: null,\r\n    round: null,\r\n    healthOrg: null,\r\n    rowsPerPage: 5,\r\n    page: 0,\r\n    listHealthOrgRound: [],\r\n    roundLists: [],\r\n    details: [],\r\n    orderTest: '',\r\n    shouldOpenSearchDialog: false,\r\n    shouldOpenConfirmationDialog: false,\r\n    listReagent: [],\r\n    listTechnician: [],\r\n    reagentExpiryDate: null,\r\n    testDate: new Date(),\r\n    reagentUnBoxDate: null,\r\n    isView: false,\r\n    isFinalResult: false,\r\n    typeMethod: 3,\r\n    isViewButton: false,\r\n    loading: false,\r\n  };\r\n\r\n  listCheckValue = [\r\n    { id: LocalConstants.EQAResultReportDetail_TestValue.positive, name: \"Dương tính\" },\r\n    { id: LocalConstants.EQAResultReportDetail_TestValue.negative, name: \"Âm tính\" }\r\n  ];\r\n\r\n  listTestValue = [\r\n    { id: LocalConstants.EQAResultReportDetail_TestValue.positive, name: \"Dương tính\" },\r\n    { id: LocalConstants.EQAResultReportDetail_TestValue.indertermine, name: \"Không xác định\" },\r\n    { id: LocalConstants.EQAResultReportDetail_TestValue.negative, name: \"Âm tính\" }\r\n  ];\r\n\r\n  listAgglomeration = [\r\n    { id: 1, name: \" - \" },\r\n    { id: 2, name: \" +/- \" },\r\n    { id: 3, name: \" + \" },\r\n    { id: 4, name: \" ++ \" }\r\n  ];\r\n\r\n  //positive(1),//Dương tính\r\n  //indertermine(0),//Không xác định\r\n  //negative(-1),//Âm tính\r\n  //none(-2)//Không thực hiện\r\n  Results = [\r\n    { id: LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented, name: \"Không thực hiện\" },\r\n    { id: LocalConstants.EQAResultReportDetail_TestValue.negative, name: \"Âm tính\" },\r\n    { id: LocalConstants.EQAResultReportDetail_TestValue.indertermine, name: \"Không xác định\" },\r\n    { id: LocalConstants.EQAResultReportDetail_TestValue.positive, name: \"Dương tính\" },\r\n  ];\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n  handleDialogClose = () => {\r\n    this.setState({ shouldOpenConfirmationDialog: false, })\r\n  }\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n    if (source === \"isFinalResult\") {\r\n      this.setState({ isFinalResult: event.target.checked })\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n\r\n  };\r\n\r\n  handleRowDataCellChange = (rowData, event) => {\r\n    let { details } = this.state;\r\n    if (details != null && details.length > 0) {\r\n      details.forEach(element => {\r\n        if (element.tableData != null && rowData != null && rowData.tableData != null\r\n          && element.tableData.id == rowData.tableData.id) {\r\n\r\n          if (event.target.name == \"checkValue\") {\r\n            if (event.target.value != \"\" && event.target.value != null)\r\n              if (element.result == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\r\n                element.result = \"\"\r\n              }\r\n            element.checkValue = event.target.value;\r\n          }\r\n          else if (event.target.name == \"testValue\") {\r\n            if (event.target.value != \"\" && event.target.value != null)\r\n              if (element.result == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\r\n                element.result = \"\"\r\n              }\r\n            element.testValue = event.target.value;\r\n          }\r\n          else if (event.target.name == \"agglomeration\") {\r\n            if (event.target.value != \"\" && event.target.value != null)\r\n              if (element.result == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\r\n                element.result = \"\"\r\n              }\r\n            element.agglomeration = event.target.value;\r\n          }\r\n          else if (event.target.name == \"result\") {\r\n            if (event.target.value == LocalConstants.EQAResultReportDetail_TestValue.Not_Implemented) {\r\n              element.agglomeration = \"\"\r\n              element.testValue = \"\"\r\n              element.checkValue = \"\"\r\n            }\r\n            element.result = event.target.value;\r\n          }else if(event.target.name == \"note\"){\r\n            element.note = event.target.value\r\n          }\r\n        }\r\n      });\r\n      this.setState({ details: details });\r\n    }\r\n  };\r\n  openCircularProgress = () => {\r\n    this.setState({ loading: true });\r\n  };\r\n\r\n  // handleSubmit = async () => {\r\n  //   await this.openCircularProgress();\r\n  //   var time = setTimeout(() => {\r\n  //     this.handleFormSubmit()\r\n  //   }, 500);\r\n  // }\r\n\r\n\r\n  handleFormSubmit = async () => {\r\n    await this.openCircularProgress();\r\n    let { t } = this.props;\r\n    let isCheck = false;\r\n    let { id, details, healthOrgRound, reagent, typeMethod } = this.state;\r\n    this.setState({ loading: true })\r\n    if (ConstantList.CHECK_ERROR_RESULT) {\r\n      checkReagentByHealthOrgRound(id, healthOrgRound.id, reagent.id, typeMethod).then(res => {\r\n        if (res.data) {\r\n          toast.warning(t(\"EqaResult.dulicateReagent\"));\r\n          this.setState({ loading: false })\r\n        } else {\r\n          details.forEach(el => {\r\n            if (el.result === \"\" || el.result === null) {\r\n              isCheck = true\r\n            }\r\n          })\r\n          if (isCheck) {\r\n            toast.warning(t(\"EQAResultReportElisa.notResult\"));\r\n            this.setState({ loading: false });\r\n            return\r\n          }\r\n\r\n          if (id) {\r\n            this.setState({ isView: true, isViewButton: true });\r\n            saveItem({\r\n              ...this.state,\r\n            }).then(() => {\r\n              this.setState({ loading: false })\r\n              this.props.handleOKEditClose();\r\n              toast.success(t('mess_edit'));\r\n            }).catch(() => {\r\n              this.setState({ loading: false })\r\n              toast.warning(t(\"mess_edit_error\"));\r\n              this.setState({ isView: false, isViewButton: false });\r\n            });\r\n          }\r\n          else {\r\n            this.setState({ isView: true, isViewButton: true });\r\n            saveItem({\r\n              ...this.state\r\n            }).then(() => {\r\n              this.setState({ loading: false })\r\n              this.props.handleOKEditClose();\r\n              toast.success(t('mess_add'));\r\n            }).catch(() => {\r\n              this.setState({ loading: false })\r\n              toast.warning(t(\"mess_add_error\"));\r\n              this.setState({ isView: false, isViewButton: false });\r\n            });\r\n          }\r\n        }\r\n      })\r\n    }\r\n    else {\r\n      details.forEach(el => {\r\n        if (el.result === \"\" || el.result === null) {\r\n          isCheck = true\r\n        }\r\n      })\r\n      if (isCheck) {\r\n        toast.warning(t(\"EQAResultReportElisa.notResult\"));\r\n        this.setState({ loading: false })\r\n        return\r\n      }\r\n\r\n      if (id) {\r\n        this.setState({ isView: true, isViewButton: true });\r\n        saveItem({\r\n          ...this.state\r\n        }).then(() => {\r\n          this.setState({ loading: false })\r\n          this.props.handleOKEditClose();\r\n          toast.success(t('mess_edit'));\r\n        }).catch(() => {\r\n          this.setState({ loading: false })\r\n          toast.warning(t(\"mess_edit_error\"));\r\n          this.setState({ isView: false, isViewButton: false });\r\n        });\r\n      }\r\n      else {\r\n        this.setState({ isView: true, isViewButton: true });\r\n        saveItem({\r\n          ...this.state\r\n        }).then(() => {\r\n          this.setState({ loading: false })\r\n          this.props.handleOKEditClose();\r\n          toast.success(t('mess_add'));\r\n        }).catch(() => {\r\n          this.setState({ loading: false })\r\n          toast.warning(t(\"mess_add_error\"));\r\n          this.setState({ isView: false, isViewButton: false });\r\n        });\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  componentWillMount() {\r\n    let { open, handleClose, item, isRoleAdmin, isView } = this.props;\r\n    if (item && item.details && item.details.length > 0) {\r\n      item.details.sort((a, b) => (a.orderNumber > b.orderNumber) ? 1 : (a.orderNumber === b.orderNumber) ? ((a.sampleTube.code > b.sampleTube.code) ? 1 : -1) : -1);\r\n    }\r\n    if(item != null && item.reagent !=  null && item.reagent.name != null){\r\n      if(item.reagent.name === \"Sinh phẩm khác\"){\r\n        item[\"otherReagent\"] = true\r\n      }else{\r\n        item[\"otherReagent\"] = false\r\n      }\r\n    }\r\n    if (item.listHealthOrgRound != null) {\r\n      this.setState({\r\n        listHealthOrgRound: item.listHealthOrgRound,\r\n        healthOrgRound: item.listHealthOrgRound[0]\r\n      }, () => {\r\n        this.handleSelectHealthOrgRound(this.state.healthOrgRound);\r\n      });\r\n    }\r\n    this.setState({\r\n      ...item\r\n    }, function () {\r\n    });\r\n  }\r\n\r\n  handleDateChange = (date, name) => {\r\n    this.setState({\r\n      [name]: date\r\n    });\r\n  };\r\n\r\n  handleStartDateChange = startDate => {\r\n    this.setState({ startDate });\r\n  };\r\n\r\n  selectTechnician = (technician) => {\r\n    if (technician != null && technician.id != null) {\r\n      this.setState({ technician: technician }, function () {\r\n      });\r\n    }\r\n  }\r\n\r\n  selectReagent = (reagent) => {\r\n    if (reagent != null && reagent.id != null) {\r\n      this.setState({ reagent: reagent }, function () {\r\n      });\r\n    }\r\n  }\r\n\r\n  handleHealthOrgRoundPopupClose = () => {\r\n    this.setState({ shouldOpenHealthOrgRoundPopup: false }, function () {\r\n    });\r\n  }\r\n\r\n  handleSelectHealthOrgRound = (healthOrgRound) => {\r\n    if (healthOrgRound && healthOrgRound.id) {\r\n      this.setState({ healthOrgRound }, function () {\r\n        let { healthOrgRound, details } = this.state;\r\n        details = [];\r\n        getEQASampleTubeByHealthOrgEQARoundId(healthOrgRound.id).then((result) => {\r\n          let listEQASampleTube = result.data;\r\n          if (listEQASampleTube != null && listEQASampleTube.length > 0) {\r\n            listEQASampleTube.forEach(tube => {\r\n              let eQAResultReportDetail = {};\r\n              eQAResultReportDetail.sampleTube = tube;\r\n              eQAResultReportDetail.checkValue = '';\r\n              eQAResultReportDetail.testValue = '';\r\n              eQAResultReportDetail.agglomeration = '';\r\n              eQAResultReportDetail.result = '';\r\n              details.push(eQAResultReportDetail);\r\n            });\r\n            this.setState({ details });\r\n          }\r\n        });\r\n      });\r\n    }\r\n    this.handleHealthOrgRoundPopupClose();\r\n  }\r\n\r\n  notificationFinalResult = () => {\r\n    this.setState({ shouldOpenConfirmationDialog: true })\r\n  }\r\n\r\n  handleFinalResult = () => {\r\n    if (this.state.isFinalResult == null || !this.state.isFinalResult) {\r\n      this.setState({ isFinalResult: true, dateSubmitResults: new Date() }, () => {\r\n      })\r\n      this.handleDialogClose()\r\n    }\r\n    if (this.state.isFinalResult) {\r\n      this.setState({ isFinalResult: false, dateSubmitResults: new Date() }, () => {\r\n      })\r\n      this.handleDialogClose()\r\n    }\r\n  }\r\n  handleDialogFinalResultClose = () => {\r\n    // this.setState({isFinalResult:false},()=>{\r\n    // })\r\n    this.handleDialogClose()\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      isView,\r\n      isViewButton,\r\n      id,\r\n      supplyOfReagent,\r\n      round,\r\n      healthOrgRound,\r\n      reagent,\r\n      personBuyReagent,\r\n      testDate,\r\n      reagentLot,\r\n      listHealthOrgRound,\r\n      details,\r\n      reagentUnBoxDate,\r\n      reagentExpiryDate,\r\n      orderTest,\r\n      otherReagent,\r\n      noteOtherReagent,\r\n      incubationPeriod,\r\n      technician,\r\n      loading,\r\n      shakingMethod,\r\n      shakingNumber,\r\n      listTechnician,\r\n      shakingTimes, note,\r\n      shouldOpenHealthOrgRoundPopup,\r\n      isCheck, isFinalResult, dateSubmitResults\r\n    } = this.state;\r\n\r\n    let searchObject = { pageIndex: 0, pageSize: 1000000, testType: 3 };\r\n    let technicianSearchObject = { pageIndex: 0, pageSize: 1000000, searchByHealthOrg: true, healthOrg: (healthOrgRound && healthOrgRound.healthOrg && healthOrgRound.healthOrg.id) ? { id: healthOrgRound.healthOrg.id } : null };\r\n    let { open, handleClose, classes, t, i18n } = this.props;\r\n    let columns = [\r\n      {\r\n        title: t(\"EQAResultReportFastTest.sample_list.sample_code\"), field: \"sampleTube.code\", align: \"left\", width: \"150\"\r\n      },\r\n      {\r\n        title: t(\"EQAResultReportSerodia.checkValue\"),\r\n        field: \"supplyOfReagent\",\r\n        width: \"150\",\r\n        render: rowData =>\r\n          <FormControl className=\"w-80\">\r\n            <Select\r\n              value={rowData.checkValue}\r\n              disabled={isView}\r\n              onChange={checkValue => this.handleRowDataCellChange(rowData, checkValue)}\r\n              inputProps={{\r\n                name: \"checkValue\",\r\n                id: \"checkValue-simple\"\r\n              }}\r\n            >\r\n              {/* <MenuItem value={null}><em>None</em> </MenuItem> */}\r\n              {this.listCheckValue.map(item => {\r\n                return <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>;\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n      },\r\n      {\r\n        title: t(\"EQAResultReportSerodia.testValue\"),\r\n        field: \"supplyOfReagent\",\r\n        width: \"150\",\r\n        render: rowData =>\r\n          <FormControl className=\"w-80\">\r\n            <Select\r\n              value={rowData.testValue}\r\n              disabled={isView}\r\n              onChange={testValue => this.handleRowDataCellChange(rowData, testValue)}\r\n              inputProps={{\r\n                name: \"testValue\",\r\n                id: \"testValue-simple\"\r\n              }}\r\n            >\r\n              {/* <MenuItem value={null}><em>None</em> </MenuItem> */}\r\n              {this.listTestValue.map(item => {\r\n                return <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>;\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n      },\r\n      {\r\n        title: t(\"EQAResultReportSerodia.agglomeration\"),\r\n        field: \"supplyOfReagent\",\r\n        width: \"150\",\r\n        render: rowData =>\r\n          <FormControl className=\"w-80\">\r\n            <Select\r\n              value={rowData.agglomeration}\r\n              disabled={isView}\r\n              onChange={agglomeration => this.handleRowDataCellChange(rowData, agglomeration)}\r\n              inputProps={{\r\n                name: \"agglomeration\",\r\n                id: \"agglomeration-simple\"\r\n              }}\r\n            >\r\n              {/* <MenuItem value={null}><em>None</em> </MenuItem> */}\r\n              {this.listAgglomeration.map(item => {\r\n                return <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>;\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n      },\r\n      {\r\n        title: <span>\r\n          <span style={{ color: \"red\" }}> * </span>\r\n          {t(\"EQAResultReportSerodia.Result.title\")}\r\n        </span>,\r\n        field: \"supplyOfReagent\",\r\n        width: \"150\",\r\n        render: rowData =>\r\n          <FormControl className=\"w-80\" required={this.state.isCheck} error={this.state.isCheck}  >\r\n            <Select\r\n              value={rowData.result}\r\n              disabled={isView}\r\n              onChange={result => this.handleRowDataCellChange(rowData, result)}\r\n              inputProps={{\r\n                name: \"result\",\r\n                id: \"result-simple\"\r\n              }}\r\n            >\r\n              {/* <MenuItem value={null}><em>None</em> </MenuItem> */}\r\n              {this.Results.map(item => {\r\n                return <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>;\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n      },\r\n      {\r\n        title:t(\"SampleManagement.serum-bottle.note\"),\r\n        field: \"note\",\r\n        width: \"150\",\r\n        headerStyle: {\r\n          minWidth: \"200px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n          textAlign: \"left\",\r\n        },\r\n        cellStyle: {\r\n          minWidth: \"200px\",\r\n          paddingLeft: \"10px\",\r\n          paddingRight: \"0px\",\r\n          textAlign: \"left\",\r\n        },\r\n        render: rowData =>\r\n          <TextValidator\r\n            className=\"w-100\"\r\n            onChange={note => this.handleRowDataCellChange(rowData, note)}\r\n            type=\"textarea\"\r\n            multiLine\r\n            rowsMax={4}\r\n            name=\"note\"\r\n            value={rowData.note ? rowData.note : ''}\r\n            disabled={isView}\r\n          />\r\n      }\r\n    ];\r\n    return (\r\n      <Dialog open={open} maxWidth={\"lg\"}>\r\n        <div className={clsx(\"wrapperButton\", !loading && 'hidden')} >\r\n          <CircularProgress className=\"buttonProgress\" size={24} />\r\n        </div>\r\n        <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit}\r\n          style={{\r\n            overflowY: \"auto\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\"\r\n          }}>\r\n          <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\r\n            <span className=\"mb-20\">{!isView ? t(\"SaveUpdate\") : t(\"Details\")}</span>\r\n            <IconButton style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }} onClick={() => handleClose()}><Icon color=\"error\"\r\n              title={t(\"close\")}>\r\n              close\r\n            </Icon>\r\n            </IconButton>\r\n          </DialogTitle>\r\n          {this.state.shouldOpenConfirmationDialog && (\r\n            <ConfirmationDialog\r\n              title={t(\"confirm\")}\r\n              open={this.state.shouldOpenConfirmationDialog}\r\n              onConfirmDialogClose={this.handleDialogFinalResultClose}\r\n              onYesClick={this.handleFinalResult}\r\n              text={isFinalResult ? t(\"EqaResult.unFinalResultConfirm\") : t(\"EqaResult.FinalResultConfirm\")}\r\n              Yes={t(\"general.Yes\")}\r\n              No={t(\"general.No\")}\r\n            />\r\n          )}\r\n          <DialogContent dividers>\r\n            <Grid container spacing={2}>\r\n              {/* <Grid item md={8} sm={12} xs={12}>\r\n                <TextValidator\r\n                  size=\"small\"\r\n                  disabled={isView}\r\n                  label={t(\"EqaResult.healthOrgName\")}\r\n                  placeholder={t(\"EqaResult.healthOrgName\")}\r\n                  id=\"healthOrgRound\"\r\n                  className=\"w-100\"\r\n                  value={(healthOrgRound != null && healthOrgRound.healthOrg) ? healthOrgRound.healthOrg.name : ''}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <Button\r\n                          size=\"small\"\r\n                          disabled={isView}\r\n                          className=\"align-bottom\"\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={() => this.setState({ shouldOpenHealthOrgRoundPopup: true })}\r\n                        >\r\n                          {t('Select')}\r\n                        </Button>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />{shouldOpenHealthOrgRoundPopup && (\r\n                  <HealthOrgEQARoundPopup\r\n                    open={shouldOpenHealthOrgRoundPopup}\r\n                    handleSelect={this.handleSelectHealthOrgRound}\r\n                    selectedItem={healthOrgRound}\r\n                    handleClose={this.handleHealthOrgRoundPopupClose} t={t} i18n={i18n} />\r\n                )}\r\n              </Grid> */}\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <Autocomplete\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  id=\"combo-box\"\r\n                  options={listHealthOrgRound}\r\n                  className=\"flex-end\"\r\n                  disabled={isView}\r\n                  getOptionLabel={(option) => option.healthOrg.name}\r\n                  onChange={(event, healthOrgRound) => this.handleSelectHealthOrgRound(healthOrgRound)}\r\n                  value={healthOrgRound}\r\n                  renderInput={(params) => <TextField {...params}\r\n                    label={<span className=\"font\">{t('EQAResultReportElisa.healthOrgName')}</span>}\r\n                    disabled={isView}\r\n                  />}\r\n                />\r\n              </Grid>\r\n              <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100\"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EQAResultReportFastTest.order\")}\r\n                    </span>\r\n                  }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"orderTest\"\r\n                  value={orderTest}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  disabled={isView}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                />\r\n              </Grid>\r\n              <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <KeyboardDatePicker\r\n                    className=\"w-100\"\r\n                    margin=\"none\"\r\n                    id=\"mui-pickers-testDate\"\r\n                    label={<span className=\"font\">{t('EQAResultReportSerodia.testDate')}</span>}\r\n                    inputVariant=\"outlined\"\r\n                    type=\"text\"\r\n                    autoOk={true}\r\n                    format=\"dd/MM/yyyy\"\r\n                    value={testDate}\r\n                    size=\"small\"\r\n                    disabled={isView}\r\n                    onChange={date => this.handleDateChange(date, \"testDate\")}\r\n                    fullWidth\r\n                  />\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n              <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <AsynchronousAutocomplete label={<span className=\"font\">{t(\"EQAResultReportFastTest.technicianName\")}</span>}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  disabled={isView}\r\n                  searchFunction={technicianSearchByPage}\r\n                  searchObject={technicianSearchObject}\r\n                  defaultValue={technician}\r\n                  value={technician}\r\n                  valueTextValidator={technician}\r\n                  displayLable={'displayName'}\r\n                  onSelect={this.selectTechnician}\r\n                />\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <AsynchronousAutocomplete\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EqaResult.reagent\")}\r\n                    </span>\r\n                  }\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  disabled={isView}\r\n                  searchFunction={reagentSearchByPage}\r\n                  searchObject={searchObject}\r\n                  defaultValue={reagent}\r\n                  value={reagent}\r\n                  displayLable={'name'}\r\n                  valueTextValidator={reagent}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={t('general.errorMessages_required')}\r\n                  onSelect={this.selectReagent}\r\n                />\r\n              </Grid>\r\n              <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100\"\r\n                  label={\r\n                    <span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> * </span>\r\n                      {t(\"EQAResultReportFastTest.reagentLot\")}\r\n                    </span>\r\n                  }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"reagentLot\"\r\n                  value={reagentLot}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  disabled={isView}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                />\r\n              </Grid>\r\n              <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <KeyboardDatePicker\r\n                    fullWidth\r\n                    margin=\"none\"\r\n                    id=\"mui-pickers-reagentExpiryDate\"\r\n                    label={<span className=\"font\">{t('EQAResultReportFastTest.reagentExpiryDate')}</span>}\r\n                    inputVariant=\"outlined\"\r\n                    type=\"text\"\r\n                    autoOk={false}\r\n                    format=\"dd/MM/yyyy\"\r\n                    value={reagentExpiryDate}\r\n                    size=\"small\"\r\n                    disabled={isView}\r\n                    onChange={date => this.handleDateChange(date, \"reagentExpiryDate\")}\r\n                  />\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n\r\n              <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <KeyboardDatePicker\r\n                    fullWidth\r\n                    margin=\"none\"\r\n                    id=\"mui-pickers-reagentUnBoxDate\"\r\n                    label={<span className=\"font\">{t('EQAResultReportSerodia.reagentUnBoxDate')}</span>}\r\n                    inputVariant=\"outlined\"\r\n                    type=\"text\"\r\n                    autoOk={false}\r\n                    format=\"dd/MM/yyyy\"\r\n                    value={reagentUnBoxDate}\r\n                    size=\"small\"\r\n                    disabled={isView}\r\n                    onChange={date => this.handleDateChange(date, \"reagentUnBoxDate\")}\r\n                  />\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n              <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\">{t(\"EQAResultReportSerodia.supplyOfReagent\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"supplyOfReagent\"\r\n                  value={supplyOfReagent}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  disabled={isView}\r\n                />\r\n              </Grid>\r\n              <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={<span className=\"font\">{t(\"EQAResultReportSerodia.personBuyReagent\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"personBuyReagent\"\r\n                  value={personBuyReagent}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  disabled={isView}\r\n                />\r\n              </Grid>\r\n\r\n              {isFinalResult && (<Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <KeyboardDatePicker\r\n                    size=\"small\"\r\n                    fullWidth\r\n                    margin=\"none\"\r\n                    disabled={true}\r\n                    id=\"mui-pickers-dateSubmitResults\"\r\n                    label={<span className=\"font\">{t('EQAResultReportElisa.dateSubmitResults')}</span>}\r\n                    inputVariant=\"outlined\"\r\n                    type=\"text\"\r\n                    autoOk={false}\r\n                    format=\"dd/MM/yyyy\"\r\n                    value={dateSubmitResults}\r\n                  />\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>)}\r\n              <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                <FormControlLabel\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  label={<span style={{ fontWeight: \"bold\" }}> {t('EQAResultReportFastTest.isFinalResult')}</span>}\r\n                  control={<Checkbox checked={isFinalResult}\r\n                    onClick={(isFinalResult) =>\r\n                      this.notificationFinalResult(isFinalResult)\r\n                    }\r\n                  />}\r\n\r\n                />\r\n              </Grid>\r\n              <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\">{t(\"SampleManagement.serum-bottle.note\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"note\"\r\n                  value={note}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              {otherReagent && (<Grid item lg={12} md ={12} sm={12} xs={12}>\r\n                <TextValidator\r\n                  disabled ={isView}\r\n                  className=\"w-100\"\r\n                  label={<span className=\"font\">{t(\"reagent.note\")}</span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  size = \"small\"\r\n                  variant = \"outlined\"\r\n                  name=\"noteOtherReagent\"\r\n                  value={noteOtherReagent}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={t('general.errorMessages_required')}\r\n                />\r\n              </Grid>)}\r\n              {/* <Grid item sm={4} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={t(\"EQAResultReportSerodia.shakingMethod\")}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"shakingMethod\"\r\n                  value={shakingMethod}\r\n                  size=\"small\"\r\n                  disabled={isView}\r\n                />\r\n              </Grid>\r\n              <Grid item sm={4} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={t(\"EQAResultReportSerodia.shakingNumber\")}\r\n                  onChange={this.handleChange}\r\n                  type=\"number\"\r\n                  name=\"shakingNumber\"\r\n                  value={shakingNumber}\r\n                  size=\"small\"\r\n                  disabled={isView}\r\n                />\r\n              </Grid>\r\n              <Grid item sm={2} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 \"\r\n                  label={t(\"EQAResultReportSerodia.shakingTimes\")}\r\n                  onChange={this.handleChange}\r\n                  type=\"number\"\r\n                  name=\"shakingTimes\"\r\n                  value={shakingTimes}\r\n                  size=\"small\"\r\n                  disabled={isView}\r\n                />\r\n              </Grid>\r\n              <Grid item sm={2} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100\"\r\n                  label={t(\"EQAResultReportSerodia.incubationPeriod\")}\r\n                  onChange={this.handleChange}\r\n                  type=\"number\"\r\n                  name=\"incubationPeriod\"\r\n                  value={incubationPeriod}\r\n                  size=\"small\"\r\n                  disabled={isView}\r\n                />\r\n              </Grid> */}\r\n              <Grid item sm={12} xs={12}>\r\n                <MaterialTable\r\n                  title=\"\"\r\n                  data={details}\r\n                  columns={columns}\r\n                  options={{\r\n                    selection: false,\r\n                    actionsColumnIndex: -1,\r\n                    paging: false,\r\n                    search: false,\r\n                    rowStyle: (rowData, index) => ({\r\n                      backgroundColor: (index % 2 === 1) ? '#EEE' : '#FFF',\r\n                    }),\r\n                    headerStyle: {\r\n                      backgroundColor: '#358600',\r\n                      color: '#fff',\r\n                    },\r\n                    padding: 'dense',\r\n                    toolbar: false\r\n                  }}\r\n                  components={{\r\n                    Toolbar: props => (\r\n                      <MTableToolbar {...props} />\r\n                    ),\r\n                  }}\r\n                  onSelectionChange={(rows) => {\r\n                    this.data = rows;\r\n                    // this.setState({selectedItems:rows});\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions spacing={4} className=\"flex flex-end flex-middle\">\r\n            <Button variant=\"contained\" className=\"mr-16\" color=\"secondary\" onClick={() => handleClose()}> {t('Cancel')}</Button>\r\n            {(!isView && <Button variant=\"contained\" disabled={isViewButton} color=\"primary\" type=\"submit\" >\r\n              {t('Save')}\r\n            </Button>\r\n            )}\r\n          </DialogActions>\r\n        </ValidatorForm>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EQAResultReportSerodiaDialog;\r\n"]},"metadata":{},"sourceType":"module"}