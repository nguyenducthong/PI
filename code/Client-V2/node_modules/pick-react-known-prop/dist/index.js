module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.pickSVGProps = exports.pickHTMLProps = undefined;

	var _pickHtmlProps = __webpack_require__(1);

	var _pickHtmlProps2 = _interopRequireDefault(_pickHtmlProps);

	var _pickSvgProps = __webpack_require__(5);

	var _pickSvgProps2 = _interopRequireDefault(_pickSvgProps);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.pickHTMLProps = _pickHtmlProps2.default;
	exports.pickSVGProps = _pickSvgProps2.default;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _htmlAttributes = __webpack_require__(2);

	var _htmlAttributes2 = _interopRequireDefault(_htmlAttributes);

	var _pickProps = __webpack_require__(3);

	var _pickProps2 = _interopRequireDefault(_pickProps);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var extra = ['about', 'datatype', 'defaultChecked', 'defaultValue', 'inlist', 'prefix', 'property', 'resource', 'typeof', 'vocab', 'autoCapitalize', 'autoCorrect', 'color', 'itemProp', 'itemScope', 'itemType', 'itemRef', 'itemID', 'security', 'unselectable', 'results', 'autoSave', 'allowtransparency', 'charSet', 'ismap', 'typemustmatch',

	// handlers:
	'onBlur', 'onChange', 'onClick', 'onContextMenu', 'onCopy', 'onCut', 'onDoubleClick', 'onDrag', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDragOver', 'onDragStart', 'onDrop', 'onFocus', 'onInput', 'onKeyDown', 'onKeyPress', 'onKeyUp', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseUp', 'onPaste', 'onScroll', 'onSubmit', 'onTouchCancel', 'onTouchEnd', 'onTouchMove', 'onTouchStart', 'onWheel', 'onCompositionEnd', 'onCompositionStart', 'onCompositionUpdate', 'onInvalid', 'onPointerDown', 'onPointerMove', 'onPointerUp', 'onPointerCancel', 'onGotPointerCapture', 'onLostPointerCapture', 'onPointerEnter', 'onPointerLeave', 'onPointerOver', 'onPointerOut', 'onSelect', 'onAbort', 'onCanPlay', 'onCanPlayThrough', 'onDurationChange', 'onEmptied', 'onEncrypted', 'onEnded', 'onError', 'onLoadedData', 'onLoadedMetadata', 'onLoadStart', 'onPause', 'onPlay', 'onPlaying', 'onProgress', 'onRateChange', 'onSeeked', 'onSeeking', 'onStalled', 'onSuspend', 'onTimeUpdate', 'onVolumeChange', 'onWaiting', 'onLoad', 'onError', 'onAnimationStart', 'onAnimationEnd', 'onAnimationIteration', 'onTransitionEnd', 'onToggle'];

	var ReactHTMLAttrs = _extends({}, _htmlAttributes2.default, extra.reduce(function (attrs, prop) {
	  attrs[prop] = prop;
	  return attrs;
	}, {}));

	exports.default = (0, _pickProps2.default)(function (prop) {
	  return Boolean(ReactHTMLAttrs[prop]) || /^(data|aria)-/.test(prop);
	});

/***/ },
/* 2 */
/***/ function(module, exports) {

	/*!
	 * html-attributes
	 * https://github.com/alexmingoia/html-attributes
	 */

	'use strict';

	/**
	 * @module html-attributes
	 */

	module.exports = {
	  "abbr": "abbr",
	  "accept": "accept",
	  "acceptCharset": "accept-charset",
	  "accessKey": "accesskey",
	  "action": "action",
	  "allowFullScreen": "allowfullscreen",
	  "allowTransparency": "allowtransparency",
	  "alt": "alt",
	  "async": "async",
	  "autoComplete": "autocomplete",
	  "autoFocus": "autofocus",
	  "autoPlay": "autoplay",
	  "cellPadding": "cellpadding",
	  "cellSpacing": "cellspacing",
	  "challenge": "challenge",
	  "charset": "charset",
	  "checked": "checked",
	  "cite": "cite",
	  "class": "class",
	  "className": "class",
	  "cols": "cols",
	  "colSpan": "colspan",
	  "command": "command",
	  "content": "content",
	  "contentEditable": "contenteditable",
	  "contextMenu": "contextmenu",
	  "controls": "controls",
	  "coords": "coords",
	  "crossOrigin": "crossorigin",
	  "data": "data",
	  "dateTime": "datetime",
	  "default": "default",
	  "defer": "defer",
	  "dir": "dir",
	  "disabled": "disabled",
	  "download": "download",
	  "draggable": "draggable",
	  "dropzone": "dropzone",
	  "encType": "enctype",
	  "for": "for",
	  "form": "form",
	  "formAction": "formaction",
	  "formEncType": "formenctype",
	  "formMethod": "formmethod",
	  "formNoValidate": "formnovalidate",
	  "formTarget": "formtarget",
	  "frameBorder": "frameBorder",
	  "headers": "headers",
	  "height": "height",
	  "hidden": "hidden",
	  "high": "high",
	  "href": "href",
	  "hrefLang": "hreflang",
	  "htmlFor": "for",
	  "httpEquiv": "http-equiv",
	  "icon": "icon",
	  "id": "id",
	  "inputMode": "inputmode",
	  "isMap": "ismap",
	  "itemId": "itemid",
	  "itemProp": "itemprop",
	  "itemRef": "itemref",
	  "itemScope": "itemscope",
	  "itemType": "itemtype",
	  "kind": "kind",
	  "label": "label",
	  "lang": "lang",
	  "list": "list",
	  "loop": "loop",
	  "manifest": "manifest",
	  "max": "max",
	  "maxLength": "maxlength",
	  "media": "media",
	  "mediaGroup": "mediagroup",
	  "method": "method",
	  "min": "min",
	  "minLength": "minlength",
	  "multiple": "multiple",
	  "muted": "muted",
	  "name": "name",
	  "noValidate": "novalidate",
	  "open": "open",
	  "optimum": "optimum",
	  "pattern": "pattern",
	  "ping": "ping",
	  "placeholder": "placeholder",
	  "poster": "poster",
	  "preload": "preload",
	  "radioGroup": "radiogroup",
	  "readOnly": "readonly",
	  "rel": "rel",
	  "required": "required",
	  "role": "role",
	  "rows": "rows",
	  "rowSpan": "rowspan",
	  "sandbox": "sandbox",
	  "scope": "scope",
	  "scoped": "scoped",
	  "scrolling": "scrolling",
	  "seamless": "seamless",
	  "selected": "selected",
	  "shape": "shape",
	  "size": "size",
	  "sizes": "sizes",
	  "sortable": "sortable",
	  "span": "span",
	  "spellCheck": "spellcheck",
	  "src": "src",
	  "srcDoc": "srcdoc",
	  "srcSet": "srcset",
	  "start": "start",
	  "step": "step",
	  "style": "style",
	  "tabIndex": "tabindex",
	  "target": "target",
	  "title": "title",
	  "translate": "translate",
	  "type": "type",
	  "typeMustMatch": "typemustmatch",
	  "useMap": "usemap",
	  "value": "value",
	  "width": "width",
	  "wmode": "wmode",
	  "wrap": "wrap"
	};


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(4);

	var _lodash2 = _interopRequireDefault(_lodash);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (filter) {
	  return function (props) {
	    if (!(0, _lodash2.default)(props)) throw new Error('props should be a plain object');
	    var out = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && filter(key)) {
	        out[key] = props[key];
	      }
	    }
	    return out;
	  };
	};

/***/ },
/* 4 */
/***/ function(module, exports) {

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) ||
	      objectToString.call(value) != objectTag || isHostObject(value)) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return (typeof Ctor == 'function' &&
	    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	}

	module.exports = isPlainObject;


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _pickProps = __webpack_require__(3);

	var _pickProps2 = _interopRequireDefault(_pickProps);

	var _svgAttributes = __webpack_require__(6);

	var _svgAttributes2 = _interopRequireDefault(_svgAttributes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _pickProps2.default)(function (prop) {
	  return Boolean(_svgAttributes2.default[prop]);
	});

/***/ },
/* 6 */
/***/ function(module, exports) {

	/*!
	 * svg-attributes
	 * https://github.com/alexmingoia/svg-attributes
	 */

	'use strict';

	/**
	 * @module svg-attributes
	 */

	module.exports = {
	  /**
	   * Regular attributes
	   */
	  "accentHeight": "accent-height",
	  "accumulate": "accumulate",
	  "additive": "additive",
	  "alphabetic": "alphabetic",
	  "amplitude": "amplitude",
	  "arabicForm": "arabic-form",
	  "ascent": "ascent",
	  "attributeName": "attributeName",
	  "attributeType": "attributeType",
	  "azimuth": "azimuth",
	  "baseFrequency": "baseFrequency",
	  "baseProfile": "baseProfile",
	  "bbox": "bbox",
	  "begin": "begin",
	  "bias": "bias",
	  "by": "by",
	  "calcMode": "calcMode",
	  "capHeight": "cap-height",
	  "class": "class",
	  "clipPathUnits": "clipPathUnits",
	  "contentScriptType": "contentScriptType",
	  "contentStyleType": "contentStyleType",
	  "cx": "cx",
	  "cy": "cy",
	  "d": "d",
	  "descent": "descent",
	  "diffuseConstant": "diffuseConstant",
	  "divisor": "divisor",
	  "dur": "dur",
	  "dx": "dx",
	  "dy": "dy",
	  "edgeMode": "edgeMode",
	  "elevation": "elevation",
	  "end": "end",
	  "exponent": "exponent",
	  "externalResourcesRequired": "externalResourcesRequired",
	  "fill": "fill",
	  "filterRes": "filterRes",
	  "filterUnits": "filterUnits",
	  "fontFamily": "font-family",
	  "fontSize": "font-size",
	  "fontStretch": "font-stretch",
	  "fontStyle": "font-style",
	  "format": "format",
	  "from": "from",
	  "fx": "fx",
	  "fy": "fy",
	  "g1": "g1",
	  "g2": "g2",
	  "glyphame": "glyph-name",
	  "glyphRef": "glyphRef",
	  "gradientTransform": "gradientTransform",
	  "gradientUnits": "gradientUnits",
	  "hanging": "hanging",
	  "height": "height",
	  "horizAdvX": "horiz-adv-x",
	  "horizOriginX": "horiz-origin-x",
	  "horizOriginY": "horiz-origin-y",
	  "id": "id",
	  "ideographic": "ideographic",
	  "in": "in",
	  "in2": "in2",
	  "intercept": "intercept",
	  "k": "k",
	  "k1": "k1",
	  "k2": "k2",
	  "k3": "k3",
	  "k4": "k4",
	  "kernelMatrix": "kernelMatrix",
	  "kernelUnitLength": "kernelUnitLength",
	  "keyPoints": "keyPoints",
	  "keySplines": "keySplines",
	  "keyTimes": "keyTimes",
	  "lang": "lang",
	  "lengthAdjust": "lengthAdjust",
	  "limitingConeAngle": "limitingConeAngle",
	  "local": "local",
	  "markerHeight": "markerHeight",
	  "markerUnits": "markerUnits",
	  "markerWidth": "markerWidth",
	  "maskContentUnits": "maskContentUnits",
	  "maskUnits": "maskUnits",
	  "mathematical": "mathematical",
	  "max": "max",
	  "media": "media",
	  "method": "method",
	  "min": "min",
	  "mode": "mode",
	  "name": "name",
	  "numOctaves": "numOctaves",
	  "offset": "offset",
	  "onAbort": "onabort",
	  "onActivate": "onactivate",
	  "onBegin": "onbegin",
	  "onClick": "onclick",
	  "onEnd": "onend",
	  "onError": "onerror",
	  "onFocusIn": "onfocusin",
	  "onFocusOut": "onfocusout",
	  "onLoad": "onload",
	  "onMouseDown": "onmousedown",
	  "onMouseMove": "onmousemove",
	  "onMouseOut": "onmouseout",
	  "onMouseOver": "onmouseover",
	  "onMouseUp": "onmouseup",
	  "onRepeat": "onrepeat",
	  "onResize": "onresize",
	  "onScroll": "onscroll",
	  "onUnload": "onunload",
	  "onZoom": "onzoom",
	  "operator": "operator",
	  "order": "order",
	  "orient": "orient",
	  "orientation": "orientation",
	  "origin": "origin",
	  "overlinePosition": "overline-position",
	  "overlineThickness": "overline-thickness",
	  "panose1": "panose-1",
	  "path": "path",
	  "pathLength": "pathLength",
	  "patternContentUnits": "patternContentUnits",
	  "patternTransform": "patternTransform",
	  "patternUnits": "patternUnits",
	  "points": "points",
	  "pointsAtX": "pointsAtX",
	  "pointsAtY": "pointsAtY",
	  "pointsAtZ": "pointsAtZ",
	  "preserveAlpha": "preserveAlpha",
	  "preserveAspectRatio": "preserveAspectRatio",
	  "primitiveUnits": "primitiveUnits",
	  "r": "r",
	  "radius": "radius",
	  "refX": "refX",
	  "refY": "refY",
	  "renderingIntent": "rendering-intent",
	  "repeatCount": "repeatCount",
	  "repeatDur": "repeatDur",
	  "requiredExtensions": "requiredExtensions",
	  "requiredFeatures": "requiredFeatures",
	  "restart": "restart",
	  "result": "result",
	  "rotate": "rotate",
	  "rx": "rx",
	  "ry": "ry",
	  "scale": "scale",
	  "seed": "seed",
	  "slope": "slope",
	  "spacing": "spacing",
	  "specularConstant": "specularConstant",
	  "specularExponent": "specularExponent",
	  "spreadMethod": "spreadMethod",
	  "startOffset": "startOffset",
	  "stdDeviation": "stdDeviation",
	  "stemh": "stemh",
	  "stemv": "stemv",
	  "stitchTiles": "stitchTiles",
	  "strikethroughPosition": "strikethrough-position",
	  "strikethroughThickness": "strikethrough-thickness",
	  "string": "string",
	  "style": "style",
	  "surfaceScale": "surfaceScale",
	  "systemLanguage": "systemLanguage",
	  "tableValues": "tableValues",
	  "target": "target",
	  "targetX": "targetX",
	  "targetY": "targetY",
	  "textLength": "textLength",
	  "title": "title",
	  "to": "to",
	  "transform": "transform",
	  "type": "type",
	  "u1": "u1",
	  "u2": "u2",
	  "underlinePosition": "underline-position",
	  "underlineThickness": "underline-thickness",
	  "unicode": "unicode",
	  "unicodeRange": "unicode-range",
	  "unitsPerEm": "units-per-em",
	  "vAlphabetic": "v-alphabetic",
	  "vHanging": "v-hanging",
	  "vIdeographic": "v-ideographic",
	  "vMathematical": "v-mathematical",
	  "values": "values",
	  "version": "version",
	  "vertAdvY": "vert-adv-y",
	  "vertOriginX": "vert-origin-x",
	  "vertOriginY": "vert-origin-y",
	  "viewBox": "viewBox",
	  "viewTarget": "viewTarget",
	  "width": "width",
	  "widths": "widths",
	  "x": "x",
	  "xHeight": "x-height",
	  "x1": "x1",
	  "x2": "x2",
	  "xChannelSelector": "xChannelSelector",
	  "xlink": "xlink",
	  "xml": "xml",
	  "y": "y",
	  "y1": "y1",
	  "y2": "y2",
	  "yChannelSelector": "yChannelSelector",
	  "z": "z",
	  "zoomAndPan": "zoomAndPan",
	  /**
	   * Presentation attributes
	   */
	  "alignmentBaseline": "alignment-baseline",
	  "baselineShift": "baseline-shift",
	  "clipPath": "clip-path",
	  "clipRule": "clip-rule",
	  "clip": "clip",
	  "colorInterpolationFilters": "color-interpolation-filters",
	  "colorInterpolation": "color-interpolation",
	  "colorProfile": "color-profile",
	  "colorRendering": "color-rendering",
	  "color": "color",
	  "cursor": "cursor",
	  "direction": "direction",
	  "display": "display",
	  "dominantBaseline": "dominant-baseline",
	  "enableBackground": "enable-background",
	  "fillOpacity": "fill-opacity",
	  "fillRule": "fill-rule",
	  "filter": "filter",
	  "floodColor": "flood-color",
	  "floodOpacity": "flood-opacity",
	  "fontSizeAdjust": "font-size-adjust",
	  "fontVariant": "font-variant",
	  "fontWeight": "font-weight",
	  "glyphOrientationHorizontal": "glyph-orientation-horizontal",
	  "glyphOrientationVertical": "glyph-orientation-vertical",
	  "imageRendering": "image-rendering",
	  "kerning": "kerning",
	  "letterSpacing": "letter-spacing",
	  "lightingColor": "lighting-color",
	  "markerEnd": "marker-end",
	  "markerMid": "marker-mid",
	  "markerStart": "marker-start",
	  "mask": "mask",
	  "opacity": "opacity",
	  "overflow": "overflow",
	  "pointerEvents": "pointer-events",
	  "shapeRendering": "shape-rendering",
	  "stopColor": "stop-color",
	  "stopOpacity": "stop-opacity",
	  "strokeDasharray": "stroke-dasharray",
	  "strokeDashoffset": "stroke-dashoffset",
	  "strokeLinecap": "stroke-linecap",
	  "strokeLinejoin": "stroke-linejoin",
	  "strokeMiterlimit": "stroke-miterlimit",
	  "strokeOpacity": "stroke-opacity",
	  "strokeWidth": "stroke-width",
	  "stroke": "stroke",
	  "textAnchor": "text-anchor",
	  "textDecoration": "text-decoration",
	  "textRendering": "text-rendering",
	  "unicodeBidi": "unicode-bidi",
	  "visibility": "visibility",
	  "wordSpacing": "word-spacing",
	  "writingMode": "writing-mode"
	};


/***/ }
/******/ ]);