package com.globits.PI.service;

import java.text.ParseException;
import java.util.List;
import java.util.UUID;

import org.springframework.data.domain.Page;
import com.globits.PI.domain.EQAResultReport;
import com.globits.PI.dto.EQAResultReportDto;
import com.globits.PI.dto.HealthOrgEQARoundDto;
import com.globits.PI.functiondto.EQAResultReportSearchDto;
import com.globits.PI.functiondto.EQASampleTubeResultConclusionDto;
import com.globits.PI.functiondto.TestResultDto;
import com.globits.core.service.GenericService;

public interface EQAResultReportService extends GenericService<EQAResultReport, UUID> {

	public Page<EQAResultReportDto> searchByDto(EQAResultReportSearchDto dto);
	public Page<EQAResultReportDto> searchByDtoAll(EQAResultReportSearchDto dto);

	public EQAResultReportDto saveOrUpdate(EQAResultReportDto dto, UUID id)  throws ParseException ;

	public EQAResultReportDto getById(UUID id);

	public Boolean deleteById(UUID id);

	public List<EQAResultReportDto> getAllResultByHealthOrgEQARoundId(UUID id);
	public List<EQAResultReport> getAllResultByHealthOrg(UUID id);

	
	/**
	 * Create a new EQAResultReport for the conclusion based on the DTO passed through from the client
	 * 
	 * @param	dtoList	list of DTOs that will be used to create a list of EQAResultReportDetail
	 * @param	orgID	The ID of the HealthOrgEQARound that the EQAResultReport belongs to
	 * @return			true if the creating process is successful, false if errors happen
	 */
	Boolean updateResultReportConclusionBySampleTube(List<EQASampleTubeResultConclusionDto> dtoList, UUID orgID,Boolean isFinalResult);
	
	
	/**
	 * Get a list of DTOs from the ID of the HealthOrgEQARound. This list of DTOs will be displayed on the client.
	 * 
	 * @param	orgID	The ID of the HealthOrgEQARound
	 * @return			a list of the DTOs to be displayed on the client. Return null if the ID is invalid
	 * 					or if there are no conclusion for this particular HealthOrgEQARound yet.
	 */
	public List<EQASampleTubeResultConclusionDto> getEQASampleTubeResultConclusionDtoByHealthOrgEQARoundId(UUID orgID);
	
	public List<EQAResultReportDto> getAllResultByHealthOrgManagementEQARoundId(UUID id);


	public Boolean checkReagent(UUID id, UUID idHealthOrgRound, UUID idReagent, Integer typeMethod);
	
	public List<HealthOrgEQARoundDto>checkPoint(UUID roundId);

	public Integer countResultReport(UUID id);
	
	public HealthOrgEQARoundDto checkPointByHealthOrgEQARound(UUID roundId,UUID id);

	public EQAResultReportDto updateFinalResultStatus(UUID id, boolean isFinalResult);

	
	public List<TestResultDto> getListTestResultByRound(UUID RoundId, UUID reagentId, Integer testMethod, UUID sampleId);


}

